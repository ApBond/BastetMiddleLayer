ARM GAS  C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"heap_4.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvHeapInit,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	prvHeapInit:
  26              	.LFB10:
  27              		.file 1 "FreeRTOS/portable/heap_4.c"
   1:FreeRTOS/portable/heap_4.c **** /*
   2:FreeRTOS/portable/heap_4.c ****  * FreeRTOS Kernel V10.4.6
   3:FreeRTOS/portable/heap_4.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/portable/heap_4.c ****  *
   5:FreeRTOS/portable/heap_4.c ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS/portable/heap_4.c ****  *
   7:FreeRTOS/portable/heap_4.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS/portable/heap_4.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS/portable/heap_4.c ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS/portable/heap_4.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS/portable/heap_4.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS/portable/heap_4.c ****  * subject to the following conditions:
  13:FreeRTOS/portable/heap_4.c ****  *
  14:FreeRTOS/portable/heap_4.c ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS/portable/heap_4.c ****  * copies or substantial portions of the Software.
  16:FreeRTOS/portable/heap_4.c ****  *
  17:FreeRTOS/portable/heap_4.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS/portable/heap_4.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS/portable/heap_4.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS/portable/heap_4.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS/portable/heap_4.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS/portable/heap_4.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS/portable/heap_4.c ****  *
  24:FreeRTOS/portable/heap_4.c ****  * https://www.FreeRTOS.org
  25:FreeRTOS/portable/heap_4.c ****  * https://github.com/FreeRTOS
  26:FreeRTOS/portable/heap_4.c ****  *
  27:FreeRTOS/portable/heap_4.c ****  */
  28:FreeRTOS/portable/heap_4.c **** 
  29:FreeRTOS/portable/heap_4.c **** /*
  30:FreeRTOS/portable/heap_4.c ****  * A sample implementation of pvPortMalloc() and vPortFree() that combines
  31:FreeRTOS/portable/heap_4.c ****  * (coalescences) adjacent memory blocks as they are freed, and in so doing
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s 			page 2


  32:FreeRTOS/portable/heap_4.c ****  * limits memory fragmentation.
  33:FreeRTOS/portable/heap_4.c ****  *
  34:FreeRTOS/portable/heap_4.c ****  * See heap_1.c, heap_2.c and heap_3.c for alternative implementations, and the
  35:FreeRTOS/portable/heap_4.c ****  * memory management pages of https://www.FreeRTOS.org for more information.
  36:FreeRTOS/portable/heap_4.c ****  */
  37:FreeRTOS/portable/heap_4.c **** #include <stdlib.h>
  38:FreeRTOS/portable/heap_4.c **** 
  39:FreeRTOS/portable/heap_4.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  40:FreeRTOS/portable/heap_4.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  41:FreeRTOS/portable/heap_4.c ****  * task.h is included from an application file. */
  42:FreeRTOS/portable/heap_4.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  43:FreeRTOS/portable/heap_4.c **** 
  44:FreeRTOS/portable/heap_4.c **** #include "FreeRTOS.h"
  45:FreeRTOS/portable/heap_4.c **** #include "task.h"
  46:FreeRTOS/portable/heap_4.c **** 
  47:FreeRTOS/portable/heap_4.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  48:FreeRTOS/portable/heap_4.c **** 
  49:FreeRTOS/portable/heap_4.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 0 )
  50:FreeRTOS/portable/heap_4.c ****     #error This file must not be used if configSUPPORT_DYNAMIC_ALLOCATION is 0
  51:FreeRTOS/portable/heap_4.c **** #endif
  52:FreeRTOS/portable/heap_4.c **** 
  53:FreeRTOS/portable/heap_4.c **** /* Block sizes must not get too small. */
  54:FreeRTOS/portable/heap_4.c **** #define heapMINIMUM_BLOCK_SIZE    ( ( size_t ) ( xHeapStructSize << 1 ) )
  55:FreeRTOS/portable/heap_4.c **** 
  56:FreeRTOS/portable/heap_4.c **** /* Assumes 8bit bytes! */
  57:FreeRTOS/portable/heap_4.c **** #define heapBITS_PER_BYTE         ( ( size_t ) 8 )
  58:FreeRTOS/portable/heap_4.c **** 
  59:FreeRTOS/portable/heap_4.c **** /* Allocate the memory for the heap. */
  60:FreeRTOS/portable/heap_4.c **** #if ( configAPPLICATION_ALLOCATED_HEAP == 1 )
  61:FreeRTOS/portable/heap_4.c **** 
  62:FreeRTOS/portable/heap_4.c **** /* The application writer has already defined the array used for the RTOS
  63:FreeRTOS/portable/heap_4.c **** * heap - probably so it can be placed in a special segment or address. */
  64:FreeRTOS/portable/heap_4.c ****     extern uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
  65:FreeRTOS/portable/heap_4.c **** #else
  66:FreeRTOS/portable/heap_4.c ****     PRIVILEGED_DATA static uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
  67:FreeRTOS/portable/heap_4.c **** #endif /* configAPPLICATION_ALLOCATED_HEAP */
  68:FreeRTOS/portable/heap_4.c **** 
  69:FreeRTOS/portable/heap_4.c **** /* Define the linked list structure.  This is used to link free blocks in order
  70:FreeRTOS/portable/heap_4.c ****  * of their memory address. */
  71:FreeRTOS/portable/heap_4.c **** typedef struct A_BLOCK_LINK
  72:FreeRTOS/portable/heap_4.c **** {
  73:FreeRTOS/portable/heap_4.c ****     struct A_BLOCK_LINK * pxNextFreeBlock; /*<< The next free block in the list. */
  74:FreeRTOS/portable/heap_4.c ****     size_t xBlockSize;                     /*<< The size of the free block. */
  75:FreeRTOS/portable/heap_4.c **** } BlockLink_t;
  76:FreeRTOS/portable/heap_4.c **** 
  77:FreeRTOS/portable/heap_4.c **** /*-----------------------------------------------------------*/
  78:FreeRTOS/portable/heap_4.c **** 
  79:FreeRTOS/portable/heap_4.c **** /*
  80:FreeRTOS/portable/heap_4.c ****  * Inserts a block of memory that is being freed into the correct position in
  81:FreeRTOS/portable/heap_4.c ****  * the list of free memory blocks.  The block being freed will be merged with
  82:FreeRTOS/portable/heap_4.c ****  * the block in front it and/or the block behind it if the memory blocks are
  83:FreeRTOS/portable/heap_4.c ****  * adjacent to each other.
  84:FreeRTOS/portable/heap_4.c ****  */
  85:FreeRTOS/portable/heap_4.c **** static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) PRIVILEGED_FUNCTION;
  86:FreeRTOS/portable/heap_4.c **** 
  87:FreeRTOS/portable/heap_4.c **** /*
  88:FreeRTOS/portable/heap_4.c ****  * Called automatically to setup the required heap structures the first time
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s 			page 3


  89:FreeRTOS/portable/heap_4.c ****  * pvPortMalloc() is called.
  90:FreeRTOS/portable/heap_4.c ****  */
  91:FreeRTOS/portable/heap_4.c **** static void prvHeapInit( void ) PRIVILEGED_FUNCTION;
  92:FreeRTOS/portable/heap_4.c **** 
  93:FreeRTOS/portable/heap_4.c **** /*-----------------------------------------------------------*/
  94:FreeRTOS/portable/heap_4.c **** 
  95:FreeRTOS/portable/heap_4.c **** /* The size of the structure placed at the beginning of each allocated memory
  96:FreeRTOS/portable/heap_4.c ****  * block must by correctly byte aligned. */
  97:FreeRTOS/portable/heap_4.c **** static const size_t xHeapStructSize = ( sizeof( BlockLink_t ) + ( ( size_t ) ( portBYTE_ALIGNMENT -
  98:FreeRTOS/portable/heap_4.c **** 
  99:FreeRTOS/portable/heap_4.c **** /* Create a couple of list links to mark the start and end of the list. */
 100:FreeRTOS/portable/heap_4.c **** PRIVILEGED_DATA static BlockLink_t xStart, * pxEnd = NULL;
 101:FreeRTOS/portable/heap_4.c **** 
 102:FreeRTOS/portable/heap_4.c **** /* Keeps track of the number of calls to allocate and free memory as well as the
 103:FreeRTOS/portable/heap_4.c ****  * number of free bytes remaining, but says nothing about fragmentation. */
 104:FreeRTOS/portable/heap_4.c **** PRIVILEGED_DATA static size_t xFreeBytesRemaining = 0U;
 105:FreeRTOS/portable/heap_4.c **** PRIVILEGED_DATA static size_t xMinimumEverFreeBytesRemaining = 0U;
 106:FreeRTOS/portable/heap_4.c **** PRIVILEGED_DATA static size_t xNumberOfSuccessfulAllocations = 0;
 107:FreeRTOS/portable/heap_4.c **** PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;
 108:FreeRTOS/portable/heap_4.c **** 
 109:FreeRTOS/portable/heap_4.c **** /* Gets set to the top bit of an size_t type.  When this bit in the xBlockSize
 110:FreeRTOS/portable/heap_4.c ****  * member of an BlockLink_t structure is set then the block belongs to the
 111:FreeRTOS/portable/heap_4.c ****  * application.  When the bit is free the block is still part of the free heap
 112:FreeRTOS/portable/heap_4.c ****  * space. */
 113:FreeRTOS/portable/heap_4.c **** PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;
 114:FreeRTOS/portable/heap_4.c **** 
 115:FreeRTOS/portable/heap_4.c **** /*-----------------------------------------------------------*/
 116:FreeRTOS/portable/heap_4.c **** 
 117:FreeRTOS/portable/heap_4.c **** void * pvPortMalloc( size_t xWantedSize )
 118:FreeRTOS/portable/heap_4.c **** {
 119:FreeRTOS/portable/heap_4.c ****     BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
 120:FreeRTOS/portable/heap_4.c ****     void * pvReturn = NULL;
 121:FreeRTOS/portable/heap_4.c **** 
 122:FreeRTOS/portable/heap_4.c ****     vTaskSuspendAll();
 123:FreeRTOS/portable/heap_4.c ****     {
 124:FreeRTOS/portable/heap_4.c ****         /* If this is the first call to malloc then the heap will require
 125:FreeRTOS/portable/heap_4.c ****          * initialisation to setup the list of free blocks. */
 126:FreeRTOS/portable/heap_4.c ****         if( pxEnd == NULL )
 127:FreeRTOS/portable/heap_4.c ****         {
 128:FreeRTOS/portable/heap_4.c ****             prvHeapInit();
 129:FreeRTOS/portable/heap_4.c ****         }
 130:FreeRTOS/portable/heap_4.c ****         else
 131:FreeRTOS/portable/heap_4.c ****         {
 132:FreeRTOS/portable/heap_4.c ****             mtCOVERAGE_TEST_MARKER();
 133:FreeRTOS/portable/heap_4.c ****         }
 134:FreeRTOS/portable/heap_4.c **** 
 135:FreeRTOS/portable/heap_4.c ****         /* Check the requested block size is not so large that the top bit is
 136:FreeRTOS/portable/heap_4.c ****          * set.  The top bit of the block size member of the BlockLink_t structure
 137:FreeRTOS/portable/heap_4.c ****          * is used to determine who owns the block - the application or the
 138:FreeRTOS/portable/heap_4.c ****          * kernel, so it must be free. */
 139:FreeRTOS/portable/heap_4.c ****         if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 140:FreeRTOS/portable/heap_4.c ****         {
 141:FreeRTOS/portable/heap_4.c ****             /* The wanted size must be increased so it can contain a BlockLink_t
 142:FreeRTOS/portable/heap_4.c ****              * structure in addition to the requested amount of bytes. */
 143:FreeRTOS/portable/heap_4.c ****             if( ( xWantedSize > 0 ) &&
 144:FreeRTOS/portable/heap_4.c ****                 ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 145:FreeRTOS/portable/heap_4.c ****             {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s 			page 4


 146:FreeRTOS/portable/heap_4.c ****                 xWantedSize += xHeapStructSize;
 147:FreeRTOS/portable/heap_4.c **** 
 148:FreeRTOS/portable/heap_4.c ****                 /* Ensure that blocks are always aligned. */
 149:FreeRTOS/portable/heap_4.c ****                 if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 150:FreeRTOS/portable/heap_4.c ****                 {
 151:FreeRTOS/portable/heap_4.c ****                     /* Byte alignment required. Check for overflow. */
 152:FreeRTOS/portable/heap_4.c ****                     if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_M
 153:FreeRTOS/portable/heap_4.c ****                             > xWantedSize )
 154:FreeRTOS/portable/heap_4.c ****                     {
 155:FreeRTOS/portable/heap_4.c ****                         xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MA
 156:FreeRTOS/portable/heap_4.c ****                         configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 157:FreeRTOS/portable/heap_4.c ****                     }
 158:FreeRTOS/portable/heap_4.c ****                     else
 159:FreeRTOS/portable/heap_4.c ****                     {
 160:FreeRTOS/portable/heap_4.c ****                         xWantedSize = 0;
 161:FreeRTOS/portable/heap_4.c ****                     }
 162:FreeRTOS/portable/heap_4.c ****                 }
 163:FreeRTOS/portable/heap_4.c ****                 else
 164:FreeRTOS/portable/heap_4.c ****                 {
 165:FreeRTOS/portable/heap_4.c ****                     mtCOVERAGE_TEST_MARKER();
 166:FreeRTOS/portable/heap_4.c ****                 }
 167:FreeRTOS/portable/heap_4.c ****             }
 168:FreeRTOS/portable/heap_4.c ****             else
 169:FreeRTOS/portable/heap_4.c ****             {
 170:FreeRTOS/portable/heap_4.c ****                 xWantedSize = 0;
 171:FreeRTOS/portable/heap_4.c ****             }
 172:FreeRTOS/portable/heap_4.c **** 
 173:FreeRTOS/portable/heap_4.c ****             if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 174:FreeRTOS/portable/heap_4.c ****             {
 175:FreeRTOS/portable/heap_4.c ****                 /* Traverse the list from the start (lowest address) block until
 176:FreeRTOS/portable/heap_4.c ****                  * one of adequate size is found. */
 177:FreeRTOS/portable/heap_4.c ****                 pxPreviousBlock = &xStart;
 178:FreeRTOS/portable/heap_4.c ****                 pxBlock = xStart.pxNextFreeBlock;
 179:FreeRTOS/portable/heap_4.c **** 
 180:FreeRTOS/portable/heap_4.c ****                 while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL 
 181:FreeRTOS/portable/heap_4.c ****                 {
 182:FreeRTOS/portable/heap_4.c ****                     pxPreviousBlock = pxBlock;
 183:FreeRTOS/portable/heap_4.c ****                     pxBlock = pxBlock->pxNextFreeBlock;
 184:FreeRTOS/portable/heap_4.c ****                 }
 185:FreeRTOS/portable/heap_4.c **** 
 186:FreeRTOS/portable/heap_4.c ****                 /* If the end marker was reached then a block of adequate size
 187:FreeRTOS/portable/heap_4.c ****                  * was not found. */
 188:FreeRTOS/portable/heap_4.c ****                 if( pxBlock != pxEnd )
 189:FreeRTOS/portable/heap_4.c ****                 {
 190:FreeRTOS/portable/heap_4.c ****                     /* Return the memory space pointed to - jumping over the
 191:FreeRTOS/portable/heap_4.c ****                      * BlockLink_t structure at its start. */
 192:FreeRTOS/portable/heap_4.c ****                     pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xH
 193:FreeRTOS/portable/heap_4.c **** 
 194:FreeRTOS/portable/heap_4.c ****                     /* This block is being returned for use so must be taken out
 195:FreeRTOS/portable/heap_4.c ****                      * of the list of free blocks. */
 196:FreeRTOS/portable/heap_4.c ****                     pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 197:FreeRTOS/portable/heap_4.c **** 
 198:FreeRTOS/portable/heap_4.c ****                     /* If the block is larger than required it can be split into
 199:FreeRTOS/portable/heap_4.c ****                      * two. */
 200:FreeRTOS/portable/heap_4.c ****                     if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 201:FreeRTOS/portable/heap_4.c ****                     {
 202:FreeRTOS/portable/heap_4.c ****                         /* This block is to be split into two.  Create a new
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s 			page 5


 203:FreeRTOS/portable/heap_4.c ****                          * block following the number of bytes requested. The void
 204:FreeRTOS/portable/heap_4.c ****                          * cast is used to prevent byte alignment warnings from the
 205:FreeRTOS/portable/heap_4.c ****                          * compiler. */
 206:FreeRTOS/portable/heap_4.c ****                         pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 207:FreeRTOS/portable/heap_4.c ****                         configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) =
 208:FreeRTOS/portable/heap_4.c **** 
 209:FreeRTOS/portable/heap_4.c ****                         /* Calculate the sizes of two blocks split from the
 210:FreeRTOS/portable/heap_4.c ****                          * single block. */
 211:FreeRTOS/portable/heap_4.c ****                         pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 212:FreeRTOS/portable/heap_4.c ****                         pxBlock->xBlockSize = xWantedSize;
 213:FreeRTOS/portable/heap_4.c **** 
 214:FreeRTOS/portable/heap_4.c ****                         /* Insert the new block into the list of free blocks. */
 215:FreeRTOS/portable/heap_4.c ****                         prvInsertBlockIntoFreeList( pxNewBlockLink );
 216:FreeRTOS/portable/heap_4.c ****                     }
 217:FreeRTOS/portable/heap_4.c ****                     else
 218:FreeRTOS/portable/heap_4.c ****                     {
 219:FreeRTOS/portable/heap_4.c ****                         mtCOVERAGE_TEST_MARKER();
 220:FreeRTOS/portable/heap_4.c ****                     }
 221:FreeRTOS/portable/heap_4.c **** 
 222:FreeRTOS/portable/heap_4.c ****                     xFreeBytesRemaining -= pxBlock->xBlockSize;
 223:FreeRTOS/portable/heap_4.c **** 
 224:FreeRTOS/portable/heap_4.c ****                     if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 225:FreeRTOS/portable/heap_4.c ****                     {
 226:FreeRTOS/portable/heap_4.c ****                         xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 227:FreeRTOS/portable/heap_4.c ****                     }
 228:FreeRTOS/portable/heap_4.c ****                     else
 229:FreeRTOS/portable/heap_4.c ****                     {
 230:FreeRTOS/portable/heap_4.c ****                         mtCOVERAGE_TEST_MARKER();
 231:FreeRTOS/portable/heap_4.c ****                     }
 232:FreeRTOS/portable/heap_4.c **** 
 233:FreeRTOS/portable/heap_4.c ****                     /* The block is being returned - it is allocated and owned
 234:FreeRTOS/portable/heap_4.c ****                      * by the application and has no "next" block. */
 235:FreeRTOS/portable/heap_4.c ****                     pxBlock->xBlockSize |= xBlockAllocatedBit;
 236:FreeRTOS/portable/heap_4.c ****                     pxBlock->pxNextFreeBlock = NULL;
 237:FreeRTOS/portable/heap_4.c ****                     xNumberOfSuccessfulAllocations++;
 238:FreeRTOS/portable/heap_4.c ****                 }
 239:FreeRTOS/portable/heap_4.c ****                 else
 240:FreeRTOS/portable/heap_4.c ****                 {
 241:FreeRTOS/portable/heap_4.c ****                     mtCOVERAGE_TEST_MARKER();
 242:FreeRTOS/portable/heap_4.c ****                 }
 243:FreeRTOS/portable/heap_4.c ****             }
 244:FreeRTOS/portable/heap_4.c ****             else
 245:FreeRTOS/portable/heap_4.c ****             {
 246:FreeRTOS/portable/heap_4.c ****                 mtCOVERAGE_TEST_MARKER();
 247:FreeRTOS/portable/heap_4.c ****             }
 248:FreeRTOS/portable/heap_4.c ****         }
 249:FreeRTOS/portable/heap_4.c ****         else
 250:FreeRTOS/portable/heap_4.c ****         {
 251:FreeRTOS/portable/heap_4.c ****             mtCOVERAGE_TEST_MARKER();
 252:FreeRTOS/portable/heap_4.c ****         }
 253:FreeRTOS/portable/heap_4.c **** 
 254:FreeRTOS/portable/heap_4.c ****         traceMALLOC( pvReturn, xWantedSize );
 255:FreeRTOS/portable/heap_4.c ****     }
 256:FreeRTOS/portable/heap_4.c ****     ( void ) xTaskResumeAll();
 257:FreeRTOS/portable/heap_4.c **** 
 258:FreeRTOS/portable/heap_4.c ****     #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
 259:FreeRTOS/portable/heap_4.c ****         {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s 			page 6


 260:FreeRTOS/portable/heap_4.c ****             if( pvReturn == NULL )
 261:FreeRTOS/portable/heap_4.c ****             {
 262:FreeRTOS/portable/heap_4.c ****                 extern void vApplicationMallocFailedHook( void );
 263:FreeRTOS/portable/heap_4.c ****                 vApplicationMallocFailedHook();
 264:FreeRTOS/portable/heap_4.c ****             }
 265:FreeRTOS/portable/heap_4.c ****             else
 266:FreeRTOS/portable/heap_4.c ****             {
 267:FreeRTOS/portable/heap_4.c ****                 mtCOVERAGE_TEST_MARKER();
 268:FreeRTOS/portable/heap_4.c ****             }
 269:FreeRTOS/portable/heap_4.c ****         }
 270:FreeRTOS/portable/heap_4.c ****     #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */
 271:FreeRTOS/portable/heap_4.c **** 
 272:FreeRTOS/portable/heap_4.c ****     configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 273:FreeRTOS/portable/heap_4.c ****     return pvReturn;
 274:FreeRTOS/portable/heap_4.c **** }
 275:FreeRTOS/portable/heap_4.c **** /*-----------------------------------------------------------*/
 276:FreeRTOS/portable/heap_4.c **** 
 277:FreeRTOS/portable/heap_4.c **** void vPortFree( void * pv )
 278:FreeRTOS/portable/heap_4.c **** {
 279:FreeRTOS/portable/heap_4.c ****     uint8_t * puc = ( uint8_t * ) pv;
 280:FreeRTOS/portable/heap_4.c ****     BlockLink_t * pxLink;
 281:FreeRTOS/portable/heap_4.c **** 
 282:FreeRTOS/portable/heap_4.c ****     if( pv != NULL )
 283:FreeRTOS/portable/heap_4.c ****     {
 284:FreeRTOS/portable/heap_4.c ****         /* The memory being freed will have an BlockLink_t structure immediately
 285:FreeRTOS/portable/heap_4.c ****          * before it. */
 286:FreeRTOS/portable/heap_4.c ****         puc -= xHeapStructSize;
 287:FreeRTOS/portable/heap_4.c **** 
 288:FreeRTOS/portable/heap_4.c ****         /* This casting is to keep the compiler from issuing warnings. */
 289:FreeRTOS/portable/heap_4.c ****         pxLink = ( void * ) puc;
 290:FreeRTOS/portable/heap_4.c **** 
 291:FreeRTOS/portable/heap_4.c ****         /* Check the block is actually allocated. */
 292:FreeRTOS/portable/heap_4.c ****         configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 293:FreeRTOS/portable/heap_4.c ****         configASSERT( pxLink->pxNextFreeBlock == NULL );
 294:FreeRTOS/portable/heap_4.c **** 
 295:FreeRTOS/portable/heap_4.c ****         if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 296:FreeRTOS/portable/heap_4.c ****         {
 297:FreeRTOS/portable/heap_4.c ****             if( pxLink->pxNextFreeBlock == NULL )
 298:FreeRTOS/portable/heap_4.c ****             {
 299:FreeRTOS/portable/heap_4.c ****                 /* The block is being returned to the heap - it is no longer
 300:FreeRTOS/portable/heap_4.c ****                  * allocated. */
 301:FreeRTOS/portable/heap_4.c ****                 pxLink->xBlockSize &= ~xBlockAllocatedBit;
 302:FreeRTOS/portable/heap_4.c **** 
 303:FreeRTOS/portable/heap_4.c ****                 vTaskSuspendAll();
 304:FreeRTOS/portable/heap_4.c ****                 {
 305:FreeRTOS/portable/heap_4.c ****                     /* Add this block to the list of free blocks. */
 306:FreeRTOS/portable/heap_4.c ****                     xFreeBytesRemaining += pxLink->xBlockSize;
 307:FreeRTOS/portable/heap_4.c ****                     traceFREE( pv, pxLink->xBlockSize );
 308:FreeRTOS/portable/heap_4.c ****                     prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 309:FreeRTOS/portable/heap_4.c ****                     xNumberOfSuccessfulFrees++;
 310:FreeRTOS/portable/heap_4.c ****                 }
 311:FreeRTOS/portable/heap_4.c ****                 ( void ) xTaskResumeAll();
 312:FreeRTOS/portable/heap_4.c ****             }
 313:FreeRTOS/portable/heap_4.c ****             else
 314:FreeRTOS/portable/heap_4.c ****             {
 315:FreeRTOS/portable/heap_4.c ****                 mtCOVERAGE_TEST_MARKER();
 316:FreeRTOS/portable/heap_4.c ****             }
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s 			page 7


 317:FreeRTOS/portable/heap_4.c ****         }
 318:FreeRTOS/portable/heap_4.c ****         else
 319:FreeRTOS/portable/heap_4.c ****         {
 320:FreeRTOS/portable/heap_4.c ****             mtCOVERAGE_TEST_MARKER();
 321:FreeRTOS/portable/heap_4.c ****         }
 322:FreeRTOS/portable/heap_4.c ****     }
 323:FreeRTOS/portable/heap_4.c **** }
 324:FreeRTOS/portable/heap_4.c **** /*-----------------------------------------------------------*/
 325:FreeRTOS/portable/heap_4.c **** 
 326:FreeRTOS/portable/heap_4.c **** size_t xPortGetFreeHeapSize( void )
 327:FreeRTOS/portable/heap_4.c **** {
 328:FreeRTOS/portable/heap_4.c ****     return xFreeBytesRemaining;
 329:FreeRTOS/portable/heap_4.c **** }
 330:FreeRTOS/portable/heap_4.c **** /*-----------------------------------------------------------*/
 331:FreeRTOS/portable/heap_4.c **** 
 332:FreeRTOS/portable/heap_4.c **** size_t xPortGetMinimumEverFreeHeapSize( void )
 333:FreeRTOS/portable/heap_4.c **** {
 334:FreeRTOS/portable/heap_4.c ****     return xMinimumEverFreeBytesRemaining;
 335:FreeRTOS/portable/heap_4.c **** }
 336:FreeRTOS/portable/heap_4.c **** /*-----------------------------------------------------------*/
 337:FreeRTOS/portable/heap_4.c **** 
 338:FreeRTOS/portable/heap_4.c **** void vPortInitialiseBlocks( void )
 339:FreeRTOS/portable/heap_4.c **** {
 340:FreeRTOS/portable/heap_4.c ****     /* This just exists to keep the linker quiet. */
 341:FreeRTOS/portable/heap_4.c **** }
 342:FreeRTOS/portable/heap_4.c **** /*-----------------------------------------------------------*/
 343:FreeRTOS/portable/heap_4.c **** 
 344:FreeRTOS/portable/heap_4.c **** static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
 345:FreeRTOS/portable/heap_4.c **** {
  28              		.loc 1 345 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 346:FreeRTOS/portable/heap_4.c ****     BlockLink_t * pxFirstFreeBlock;
  33              		.loc 1 346 5 view .LVU1
 347:FreeRTOS/portable/heap_4.c ****     uint8_t * pucAlignedHeap;
  34              		.loc 1 347 5 view .LVU2
 348:FreeRTOS/portable/heap_4.c ****     size_t uxAddress;
  35              		.loc 1 348 5 view .LVU3
 349:FreeRTOS/portable/heap_4.c ****     size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
  36              		.loc 1 349 5 view .LVU4
  37              	.LVL0:
 350:FreeRTOS/portable/heap_4.c **** 
 351:FreeRTOS/portable/heap_4.c ****     /* Ensure the heap starts on a correctly aligned boundary. */
 352:FreeRTOS/portable/heap_4.c ****     uxAddress = ( size_t ) ucHeap;
  38              		.loc 1 352 5 view .LVU5
  39              		.loc 1 352 15 is_stmt 0 view .LVU6
  40 0000 134A     		ldr	r2, .L4
  41              	.LVL1:
 353:FreeRTOS/portable/heap_4.c **** 
 354:FreeRTOS/portable/heap_4.c ****     if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
  42              		.loc 1 354 5 is_stmt 1 view .LVU7
  43              		.loc 1 354 7 is_stmt 0 view .LVU8
  44 0002 12F0070F 		tst	r2, #7
  45 0006 1FD0     		beq	.L3
 355:FreeRTOS/portable/heap_4.c ****     {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s 			page 8


 356:FreeRTOS/portable/heap_4.c ****         uxAddress += ( portBYTE_ALIGNMENT - 1 );
  46              		.loc 1 356 9 is_stmt 1 view .LVU9
  47              		.loc 1 356 19 is_stmt 0 view .LVU10
  48 0008 D11D     		adds	r1, r2, #7
  49              	.LVL2:
 357:FreeRTOS/portable/heap_4.c ****         uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
  50              		.loc 1 357 9 is_stmt 1 view .LVU11
  51              		.loc 1 357 19 is_stmt 0 view .LVU12
  52 000a 21F00701 		bic	r1, r1, #7
  53              	.LVL3:
 358:FreeRTOS/portable/heap_4.c ****         xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
  54              		.loc 1 358 9 is_stmt 1 view .LVU13
  55              		.loc 1 358 24 is_stmt 0 view .LVU14
  56 000e C1F53B63 		rsb	r3, r1, #2992
  57 0012 0833     		adds	r3, r3, #8
  58 0014 1344     		add	r3, r3, r2
  59              	.LVL4:
 357:FreeRTOS/portable/heap_4.c ****         uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
  60              		.loc 1 357 19 view .LVU15
  61 0016 0A46     		mov	r2, r1
  62              	.LVL5:
  63              	.L2:
 359:FreeRTOS/portable/heap_4.c ****     }
 360:FreeRTOS/portable/heap_4.c **** 
 361:FreeRTOS/portable/heap_4.c ****     pucAlignedHeap = ( uint8_t * ) uxAddress;
  64              		.loc 1 361 5 is_stmt 1 view .LVU16
 362:FreeRTOS/portable/heap_4.c **** 
 363:FreeRTOS/portable/heap_4.c ****     /* xStart is used to hold a pointer to the first item in the list of free
 364:FreeRTOS/portable/heap_4.c ****      * blocks.  The void cast is used to prevent compiler warnings. */
 365:FreeRTOS/portable/heap_4.c ****     xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
  65              		.loc 1 365 5 view .LVU17
  66              		.loc 1 365 28 is_stmt 0 view .LVU18
  67 0018 0E48     		ldr	r0, .L4+4
  68 001a 0260     		str	r2, [r0]
 366:FreeRTOS/portable/heap_4.c ****     xStart.xBlockSize = ( size_t ) 0;
  69              		.loc 1 366 5 is_stmt 1 view .LVU19
  70              		.loc 1 366 23 is_stmt 0 view .LVU20
  71 001c 0021     		movs	r1, #0
  72 001e 4160     		str	r1, [r0, #4]
 367:FreeRTOS/portable/heap_4.c **** 
 368:FreeRTOS/portable/heap_4.c ****     /* pxEnd is used to mark the end of the list of free blocks and is inserted
 369:FreeRTOS/portable/heap_4.c ****      * at the end of the heap space. */
 370:FreeRTOS/portable/heap_4.c ****     uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
  73              		.loc 1 370 5 is_stmt 1 view .LVU21
  74              		.loc 1 370 15 is_stmt 0 view .LVU22
  75 0020 1344     		add	r3, r3, r2
  76              	.LVL6:
 371:FreeRTOS/portable/heap_4.c ****     uxAddress -= xHeapStructSize;
  77              		.loc 1 371 5 is_stmt 1 view .LVU23
  78              		.loc 1 371 15 is_stmt 0 view .LVU24
  79 0022 083B     		subs	r3, r3, #8
  80              	.LVL7:
 372:FreeRTOS/portable/heap_4.c ****     uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
  81              		.loc 1 372 5 is_stmt 1 view .LVU25
  82              		.loc 1 372 15 is_stmt 0 view .LVU26
  83 0024 23F00703 		bic	r3, r3, #7
  84              	.LVL8:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s 			page 9


 373:FreeRTOS/portable/heap_4.c ****     pxEnd = ( void * ) uxAddress;
  85              		.loc 1 373 5 is_stmt 1 view .LVU27
  86              		.loc 1 373 11 is_stmt 0 view .LVU28
  87 0028 0B48     		ldr	r0, .L4+8
  88 002a 0360     		str	r3, [r0]
 374:FreeRTOS/portable/heap_4.c ****     pxEnd->xBlockSize = 0;
  89              		.loc 1 374 5 is_stmt 1 view .LVU29
  90              		.loc 1 374 23 is_stmt 0 view .LVU30
  91 002c 5960     		str	r1, [r3, #4]
 375:FreeRTOS/portable/heap_4.c ****     pxEnd->pxNextFreeBlock = NULL;
  92              		.loc 1 375 5 is_stmt 1 view .LVU31
  93              		.loc 1 375 28 is_stmt 0 view .LVU32
  94 002e 1960     		str	r1, [r3]
 376:FreeRTOS/portable/heap_4.c **** 
 377:FreeRTOS/portable/heap_4.c ****     /* To start with there is a single free block that is sized to take up the
 378:FreeRTOS/portable/heap_4.c ****      * entire heap space, minus the space taken by pxEnd. */
 379:FreeRTOS/portable/heap_4.c ****     pxFirstFreeBlock = ( void * ) pucAlignedHeap;
  95              		.loc 1 379 5 is_stmt 1 view .LVU33
  96              	.LVL9:
 380:FreeRTOS/portable/heap_4.c ****     pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
  97              		.loc 1 380 5 view .LVU34
  98              		.loc 1 380 46 is_stmt 0 view .LVU35
  99 0030 991A     		subs	r1, r3, r2
 100              		.loc 1 380 34 view .LVU36
 101 0032 5160     		str	r1, [r2, #4]
 381:FreeRTOS/portable/heap_4.c ****     pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 102              		.loc 1 381 5 is_stmt 1 view .LVU37
 103              		.loc 1 381 39 is_stmt 0 view .LVU38
 104 0034 1360     		str	r3, [r2]
 382:FreeRTOS/portable/heap_4.c **** 
 383:FreeRTOS/portable/heap_4.c ****     /* Only one block exists - and it covers the entire usable heap space. */
 384:FreeRTOS/portable/heap_4.c ****     xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 105              		.loc 1 384 5 is_stmt 1 view .LVU39
 106              		.loc 1 384 36 is_stmt 0 view .LVU40
 107 0036 094B     		ldr	r3, .L4+12
 108              	.LVL10:
 109              		.loc 1 384 36 view .LVU41
 110 0038 1960     		str	r1, [r3]
 385:FreeRTOS/portable/heap_4.c ****     xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 111              		.loc 1 385 5 is_stmt 1 view .LVU42
 112              		.loc 1 385 25 is_stmt 0 view .LVU43
 113 003a 094B     		ldr	r3, .L4+16
 114 003c 1960     		str	r1, [r3]
 386:FreeRTOS/portable/heap_4.c **** 
 387:FreeRTOS/portable/heap_4.c ****     /* Work out the position of the top bit in a size_t variable. */
 388:FreeRTOS/portable/heap_4.c ****     xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 115              		.loc 1 388 5 is_stmt 1 view .LVU44
 116              		.loc 1 388 24 is_stmt 0 view .LVU45
 117 003e 094B     		ldr	r3, .L4+20
 118 0040 4FF00042 		mov	r2, #-2147483648
 119              	.LVL11:
 120              		.loc 1 388 24 view .LVU46
 121 0044 1A60     		str	r2, [r3]
 389:FreeRTOS/portable/heap_4.c **** }
 122              		.loc 1 389 1 view .LVU47
 123 0046 7047     		bx	lr
 124              	.LVL12:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s 			page 10


 125              	.L3:
 349:FreeRTOS/portable/heap_4.c **** 
 126              		.loc 1 349 12 view .LVU48
 127 0048 40F6B833 		movw	r3, #3000
 128 004c E4E7     		b	.L2
 129              	.L5:
 130 004e 00BF     		.align	2
 131              	.L4:
 132 0050 00000000 		.word	.LANCHOR0
 133 0054 00000000 		.word	.LANCHOR1
 134 0058 00000000 		.word	.LANCHOR2
 135 005c 00000000 		.word	.LANCHOR3
 136 0060 00000000 		.word	.LANCHOR4
 137 0064 00000000 		.word	.LANCHOR5
 138              		.cfi_endproc
 139              	.LFE10:
 141              		.section	.text.prvInsertBlockIntoFreeList,"ax",%progbits
 142              		.align	1
 143              		.syntax unified
 144              		.thumb
 145              		.thumb_func
 146              		.fpu fpv4-sp-d16
 148              	prvInsertBlockIntoFreeList:
 149              	.LVL13:
 150              	.LFB11:
 390:FreeRTOS/portable/heap_4.c **** /*-----------------------------------------------------------*/
 391:FreeRTOS/portable/heap_4.c **** 
 392:FreeRTOS/portable/heap_4.c **** static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
 393:FreeRTOS/portable/heap_4.c **** {
 151              		.loc 1 393 1 is_stmt 1 view -0
 152              		.cfi_startproc
 153              		@ args = 0, pretend = 0, frame = 0
 154              		@ frame_needed = 0, uses_anonymous_args = 0
 155              		@ link register save eliminated.
 156              		.loc 1 393 1 is_stmt 0 view .LVU50
 157 0000 10B4     		push	{r4}
 158              	.LCFI0:
 159              		.cfi_def_cfa_offset 4
 160              		.cfi_offset 4, -4
 394:FreeRTOS/portable/heap_4.c ****     BlockLink_t * pxIterator;
 161              		.loc 1 394 5 is_stmt 1 view .LVU51
 395:FreeRTOS/portable/heap_4.c ****     uint8_t * puc;
 162              		.loc 1 395 5 view .LVU52
 396:FreeRTOS/portable/heap_4.c **** 
 397:FreeRTOS/portable/heap_4.c ****     /* Iterate through the list until a block is found that has a higher address
 398:FreeRTOS/portable/heap_4.c ****      * than the block being inserted. */
 399:FreeRTOS/portable/heap_4.c ****     for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterat
 163              		.loc 1 399 5 view .LVU53
 164              	.LVL14:
 165              		.loc 1 399 21 is_stmt 0 view .LVU54
 166 0002 134B     		ldr	r3, .L16
 167              	.LVL15:
 168              	.L7:
 169              		.loc 1 399 32 is_stmt 1 discriminator 1 view .LVU55
 170 0004 1A46     		mov	r2, r3
 171              		.loc 1 399 42 is_stmt 0 discriminator 1 view .LVU56
 172 0006 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s 			page 11


 173              	.LVL16:
 174              		.loc 1 399 5 discriminator 1 view .LVU57
 175 0008 8342     		cmp	r3, r0
 176 000a FBD3     		bcc	.L7
 400:FreeRTOS/portable/heap_4.c ****     {
 401:FreeRTOS/portable/heap_4.c ****         /* Nothing to do here, just iterate to the right position. */
 402:FreeRTOS/portable/heap_4.c ****     }
 403:FreeRTOS/portable/heap_4.c **** 
 404:FreeRTOS/portable/heap_4.c ****     /* Do the block being inserted, and the block it is being inserted after
 405:FreeRTOS/portable/heap_4.c ****      * make a contiguous block of memory? */
 406:FreeRTOS/portable/heap_4.c ****     puc = ( uint8_t * ) pxIterator;
 177              		.loc 1 406 5 is_stmt 1 view .LVU58
 178              	.LVL17:
 407:FreeRTOS/portable/heap_4.c **** 
 408:FreeRTOS/portable/heap_4.c ****     if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 179              		.loc 1 408 5 view .LVU59
 180              		.loc 1 408 27 is_stmt 0 view .LVU60
 181 000c 5168     		ldr	r1, [r2, #4]
 182              		.loc 1 408 15 view .LVU61
 183 000e 5418     		adds	r4, r2, r1
 184              		.loc 1 408 7 view .LVU62
 185 0010 8442     		cmp	r4, r0
 186 0012 0AD0     		beq	.L14
 187              	.L8:
 409:FreeRTOS/portable/heap_4.c ****     {
 410:FreeRTOS/portable/heap_4.c ****         pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 411:FreeRTOS/portable/heap_4.c ****         pxBlockToInsert = pxIterator;
 412:FreeRTOS/portable/heap_4.c ****     }
 413:FreeRTOS/portable/heap_4.c ****     else
 414:FreeRTOS/portable/heap_4.c ****     {
 415:FreeRTOS/portable/heap_4.c ****         mtCOVERAGE_TEST_MARKER();
 188              		.loc 1 415 33 is_stmt 1 view .LVU63
 416:FreeRTOS/portable/heap_4.c ****     }
 417:FreeRTOS/portable/heap_4.c **** 
 418:FreeRTOS/portable/heap_4.c ****     /* Do the block being inserted, and the block it is being inserted before
 419:FreeRTOS/portable/heap_4.c ****      * make a contiguous block of memory? */
 420:FreeRTOS/portable/heap_4.c ****     puc = ( uint8_t * ) pxBlockToInsert;
 189              		.loc 1 420 5 view .LVU64
 190              	.LVL18:
 421:FreeRTOS/portable/heap_4.c **** 
 422:FreeRTOS/portable/heap_4.c ****     if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 191              		.loc 1 422 5 view .LVU65
 192              		.loc 1 422 32 is_stmt 0 view .LVU66
 193 0014 4168     		ldr	r1, [r0, #4]
 194              		.loc 1 422 15 view .LVU67
 195 0016 4418     		adds	r4, r0, r1
 196              		.loc 1 422 7 view .LVU68
 197 0018 A342     		cmp	r3, r4
 198 001a 0BD0     		beq	.L15
 423:FreeRTOS/portable/heap_4.c ****     {
 424:FreeRTOS/portable/heap_4.c ****         if( pxIterator->pxNextFreeBlock != pxEnd )
 425:FreeRTOS/portable/heap_4.c ****         {
 426:FreeRTOS/portable/heap_4.c ****             /* Form one big block from the two blocks. */
 427:FreeRTOS/portable/heap_4.c ****             pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 428:FreeRTOS/portable/heap_4.c ****             pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 429:FreeRTOS/portable/heap_4.c ****         }
 430:FreeRTOS/portable/heap_4.c ****         else
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s 			page 12


 431:FreeRTOS/portable/heap_4.c ****         {
 432:FreeRTOS/portable/heap_4.c ****             pxBlockToInsert->pxNextFreeBlock = pxEnd;
 433:FreeRTOS/portable/heap_4.c ****         }
 434:FreeRTOS/portable/heap_4.c ****     }
 435:FreeRTOS/portable/heap_4.c ****     else
 436:FreeRTOS/portable/heap_4.c ****     {
 437:FreeRTOS/portable/heap_4.c ****         pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 199              		.loc 1 437 9 is_stmt 1 view .LVU69
 200              		.loc 1 437 42 is_stmt 0 view .LVU70
 201 001c 0360     		str	r3, [r0]
 202              	.L11:
 438:FreeRTOS/portable/heap_4.c ****     }
 439:FreeRTOS/portable/heap_4.c **** 
 440:FreeRTOS/portable/heap_4.c ****     /* If the block being inserted plugged a gab, so was merged with the block
 441:FreeRTOS/portable/heap_4.c ****      * before and the block after, then it's pxNextFreeBlock pointer will have
 442:FreeRTOS/portable/heap_4.c ****      * already been set, and should not be set here as that would make it point
 443:FreeRTOS/portable/heap_4.c ****      * to itself. */
 444:FreeRTOS/portable/heap_4.c ****     if( pxIterator != pxBlockToInsert )
 203              		.loc 1 444 5 is_stmt 1 view .LVU71
 204              		.loc 1 444 7 is_stmt 0 view .LVU72
 205 001e 9042     		cmp	r0, r2
 206 0020 00D0     		beq	.L6
 445:FreeRTOS/portable/heap_4.c ****     {
 446:FreeRTOS/portable/heap_4.c ****         pxIterator->pxNextFreeBlock = pxBlockToInsert;
 207              		.loc 1 446 9 is_stmt 1 view .LVU73
 208              		.loc 1 446 37 is_stmt 0 view .LVU74
 209 0022 1060     		str	r0, [r2]
 447:FreeRTOS/portable/heap_4.c ****     }
 448:FreeRTOS/portable/heap_4.c ****     else
 449:FreeRTOS/portable/heap_4.c ****     {
 450:FreeRTOS/portable/heap_4.c ****         mtCOVERAGE_TEST_MARKER();
 210              		.loc 1 450 33 is_stmt 1 view .LVU75
 211              	.L6:
 451:FreeRTOS/portable/heap_4.c ****     }
 452:FreeRTOS/portable/heap_4.c **** }
 212              		.loc 1 452 1 is_stmt 0 view .LVU76
 213 0024 5DF8044B 		ldr	r4, [sp], #4
 214              	.LCFI1:
 215              		.cfi_remember_state
 216              		.cfi_restore 4
 217              		.cfi_def_cfa_offset 0
 218 0028 7047     		bx	lr
 219              	.LVL19:
 220              	.L14:
 221              	.LCFI2:
 222              		.cfi_restore_state
 410:FreeRTOS/portable/heap_4.c ****         pxBlockToInsert = pxIterator;
 223              		.loc 1 410 9 is_stmt 1 view .LVU77
 410:FreeRTOS/portable/heap_4.c ****         pxBlockToInsert = pxIterator;
 224              		.loc 1 410 50 is_stmt 0 view .LVU78
 225 002a 4068     		ldr	r0, [r0, #4]
 226              	.LVL20:
 410:FreeRTOS/portable/heap_4.c ****         pxBlockToInsert = pxIterator;
 227              		.loc 1 410 32 view .LVU79
 228 002c 0144     		add	r1, r1, r0
 229 002e 5160     		str	r1, [r2, #4]
 411:FreeRTOS/portable/heap_4.c ****     }
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s 			page 13


 230              		.loc 1 411 9 is_stmt 1 view .LVU80
 231              	.LVL21:
 411:FreeRTOS/portable/heap_4.c ****     }
 232              		.loc 1 411 25 is_stmt 0 view .LVU81
 233 0030 1046     		mov	r0, r2
 234 0032 EFE7     		b	.L8
 235              	.LVL22:
 236              	.L15:
 424:FreeRTOS/portable/heap_4.c ****         {
 237              		.loc 1 424 9 is_stmt 1 view .LVU82
 424:FreeRTOS/portable/heap_4.c ****         {
 238              		.loc 1 424 41 is_stmt 0 view .LVU83
 239 0034 074C     		ldr	r4, .L16+4
 240 0036 2468     		ldr	r4, [r4]
 424:FreeRTOS/portable/heap_4.c ****         {
 241              		.loc 1 424 11 view .LVU84
 242 0038 A342     		cmp	r3, r4
 243 003a 06D0     		beq	.L10
 427:FreeRTOS/portable/heap_4.c ****             pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 244              		.loc 1 427 13 is_stmt 1 view .LVU85
 427:FreeRTOS/portable/heap_4.c ****             pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 245              		.loc 1 427 71 is_stmt 0 view .LVU86
 246 003c 5B68     		ldr	r3, [r3, #4]
 427:FreeRTOS/portable/heap_4.c ****             pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 247              		.loc 1 427 41 view .LVU87
 248 003e 1944     		add	r1, r1, r3
 249 0040 4160     		str	r1, [r0, #4]
 428:FreeRTOS/portable/heap_4.c ****         }
 250              		.loc 1 428 13 is_stmt 1 view .LVU88
 428:FreeRTOS/portable/heap_4.c ****         }
 251              		.loc 1 428 58 is_stmt 0 view .LVU89
 252 0042 1368     		ldr	r3, [r2]
 428:FreeRTOS/portable/heap_4.c ****         }
 253              		.loc 1 428 75 view .LVU90
 254 0044 1B68     		ldr	r3, [r3]
 428:FreeRTOS/portable/heap_4.c ****         }
 255              		.loc 1 428 46 view .LVU91
 256 0046 0360     		str	r3, [r0]
 257 0048 E9E7     		b	.L11
 258              	.L10:
 432:FreeRTOS/portable/heap_4.c ****         }
 259              		.loc 1 432 13 is_stmt 1 view .LVU92
 432:FreeRTOS/portable/heap_4.c ****         }
 260              		.loc 1 432 46 is_stmt 0 view .LVU93
 261 004a 0460     		str	r4, [r0]
 262 004c E7E7     		b	.L11
 263              	.L17:
 264 004e 00BF     		.align	2
 265              	.L16:
 266 0050 00000000 		.word	.LANCHOR1
 267 0054 00000000 		.word	.LANCHOR2
 268              		.cfi_endproc
 269              	.LFE11:
 271              		.section	.text.pvPortMalloc,"ax",%progbits
 272              		.align	1
 273              		.global	pvPortMalloc
 274              		.syntax unified
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s 			page 14


 275              		.thumb
 276              		.thumb_func
 277              		.fpu fpv4-sp-d16
 279              	pvPortMalloc:
 280              	.LVL23:
 281              	.LFB5:
 118:FreeRTOS/portable/heap_4.c ****     BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
 282              		.loc 1 118 1 is_stmt 1 view -0
 283              		.cfi_startproc
 284              		@ args = 0, pretend = 0, frame = 0
 285              		@ frame_needed = 0, uses_anonymous_args = 0
 118:FreeRTOS/portable/heap_4.c ****     BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
 286              		.loc 1 118 1 is_stmt 0 view .LVU95
 287 0000 38B5     		push	{r3, r4, r5, lr}
 288              	.LCFI3:
 289              		.cfi_def_cfa_offset 16
 290              		.cfi_offset 3, -16
 291              		.cfi_offset 4, -12
 292              		.cfi_offset 5, -8
 293              		.cfi_offset 14, -4
 294 0002 0446     		mov	r4, r0
 119:FreeRTOS/portable/heap_4.c ****     void * pvReturn = NULL;
 295              		.loc 1 119 5 is_stmt 1 view .LVU96
 120:FreeRTOS/portable/heap_4.c **** 
 296              		.loc 1 120 5 view .LVU97
 297              	.LVL24:
 122:FreeRTOS/portable/heap_4.c ****     {
 298              		.loc 1 122 5 view .LVU98
 299 0004 FFF7FEFF 		bl	vTaskSuspendAll
 300              	.LVL25:
 126:FreeRTOS/portable/heap_4.c ****         {
 301              		.loc 1 126 9 view .LVU99
 126:FreeRTOS/portable/heap_4.c ****         {
 302              		.loc 1 126 19 is_stmt 0 view .LVU100
 303 0008 3B4B     		ldr	r3, .L39
 304 000a 1B68     		ldr	r3, [r3]
 126:FreeRTOS/portable/heap_4.c ****         {
 305              		.loc 1 126 11 view .LVU101
 306 000c DBB1     		cbz	r3, .L38
 307              	.L19:
 132:FreeRTOS/portable/heap_4.c ****         }
 308              		.loc 1 132 37 is_stmt 1 view .LVU102
 139:FreeRTOS/portable/heap_4.c ****         {
 309              		.loc 1 139 9 view .LVU103
 139:FreeRTOS/portable/heap_4.c ****         {
 310              		.loc 1 139 27 is_stmt 0 view .LVU104
 311 000e 3B4B     		ldr	r3, .L39+4
 312 0010 1B68     		ldr	r3, [r3]
 139:FreeRTOS/portable/heap_4.c ****         {
 313              		.loc 1 139 11 view .LVU105
 314 0012 1C42     		tst	r4, r3
 315 0014 55D1     		bne	.L30
 143:FreeRTOS/portable/heap_4.c ****                 ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 316              		.loc 1 143 13 is_stmt 1 view .LVU106
 143:FreeRTOS/portable/heap_4.c ****                 ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 317              		.loc 1 143 37 is_stmt 0 view .LVU107
 318 0016 631E     		subs	r3, r4, #1
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s 			page 15


 143:FreeRTOS/portable/heap_4.c ****                 ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 319              		.loc 1 143 15 view .LVU108
 320 0018 13F10A0F 		cmn	r3, #10
 321 001c 53D8     		bhi	.L31
 146:FreeRTOS/portable/heap_4.c **** 
 322              		.loc 1 146 17 is_stmt 1 view .LVU109
 146:FreeRTOS/portable/heap_4.c **** 
 323              		.loc 1 146 29 is_stmt 0 view .LVU110
 324 001e 04F10803 		add	r3, r4, #8
 325              	.LVL26:
 149:FreeRTOS/portable/heap_4.c ****                 {
 326              		.loc 1 149 17 is_stmt 1 view .LVU111
 149:FreeRTOS/portable/heap_4.c ****                 {
 327              		.loc 1 149 19 is_stmt 0 view .LVU112
 328 0022 14F0070F 		tst	r4, #7
 329 0026 05D0     		beq	.L21
 152:FreeRTOS/portable/heap_4.c ****                             > xWantedSize )
 330              		.loc 1 152 21 is_stmt 1 view .LVU113
 152:FreeRTOS/portable/heap_4.c ****                             > xWantedSize )
 331              		.loc 1 152 39 is_stmt 0 view .LVU114
 332 0028 23F00702 		bic	r2, r3, #7
 333 002c 0832     		adds	r2, r2, #8
 152:FreeRTOS/portable/heap_4.c ****                             > xWantedSize )
 334              		.loc 1 152 23 view .LVU115
 335 002e 9A42     		cmp	r2, r3
 336 0030 58D9     		bls	.L32
 155:FreeRTOS/portable/heap_4.c ****                         configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 337              		.loc 1 155 37 view .LVU116
 338 0032 1346     		mov	r3, r2
 339              	.LVL27:
 340              	.L21:
 173:FreeRTOS/portable/heap_4.c ****             {
 341              		.loc 1 173 13 is_stmt 1 view .LVU117
 173:FreeRTOS/portable/heap_4.c ****             {
 342              		.loc 1 173 15 is_stmt 0 view .LVU118
 343 0034 002B     		cmp	r3, #0
 344 0036 57D0     		beq	.L33
 173:FreeRTOS/portable/heap_4.c ****             {
 345              		.loc 1 173 54 discriminator 1 view .LVU119
 346 0038 314A     		ldr	r2, .L39+8
 347 003a 1268     		ldr	r2, [r2]
 173:FreeRTOS/portable/heap_4.c ****             {
 348              		.loc 1 173 37 discriminator 1 view .LVU120
 349 003c 9A42     		cmp	r2, r3
 350 003e 55D3     		bcc	.L34
 177:FreeRTOS/portable/heap_4.c ****                 pxBlock = xStart.pxNextFreeBlock;
 351              		.loc 1 177 17 is_stmt 1 view .LVU121
 352              	.LVL28:
 178:FreeRTOS/portable/heap_4.c **** 
 353              		.loc 1 178 17 view .LVU122
 178:FreeRTOS/portable/heap_4.c **** 
 354              		.loc 1 178 25 is_stmt 0 view .LVU123
 355 0040 304A     		ldr	r2, .L39+12
 356 0042 1468     		ldr	r4, [r2]
 357              	.LVL29:
 180:FreeRTOS/portable/heap_4.c ****                 {
 358              		.loc 1 180 17 is_stmt 1 view .LVU124
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s 			page 16


 180:FreeRTOS/portable/heap_4.c ****                 {
 359              		.loc 1 180 22 is_stmt 0 view .LVU125
 360 0044 04E0     		b	.L23
 361              	.LVL30:
 362              	.L38:
 128:FreeRTOS/portable/heap_4.c ****         }
 363              		.loc 1 128 13 is_stmt 1 view .LVU126
 364 0046 FFF7FEFF 		bl	prvHeapInit
 365              	.LVL31:
 366 004a E0E7     		b	.L19
 367              	.LVL32:
 368              	.L35:
 182:FreeRTOS/portable/heap_4.c ****                     pxBlock = pxBlock->pxNextFreeBlock;
 369              		.loc 1 182 37 is_stmt 0 view .LVU127
 370 004c 2246     		mov	r2, r4
 371              	.LVL33:
 183:FreeRTOS/portable/heap_4.c ****                 }
 372              		.loc 1 183 29 view .LVU128
 373 004e 0C46     		mov	r4, r1
 374              	.LVL34:
 375              	.L23:
 180:FreeRTOS/portable/heap_4.c ****                 {
 376              		.loc 1 180 22 is_stmt 1 view .LVU129
 180:FreeRTOS/portable/heap_4.c ****                 {
 377              		.loc 1 180 33 is_stmt 0 view .LVU130
 378 0050 6168     		ldr	r1, [r4, #4]
 180:FreeRTOS/portable/heap_4.c ****                 {
 379              		.loc 1 180 22 view .LVU131
 380 0052 9942     		cmp	r1, r3
 381 0054 02D2     		bcs	.L22
 180:FreeRTOS/portable/heap_4.c ****                 {
 382              		.loc 1 180 74 discriminator 1 view .LVU132
 383 0056 2168     		ldr	r1, [r4]
 180:FreeRTOS/portable/heap_4.c ****                 {
 384              		.loc 1 180 62 discriminator 1 view .LVU133
 385 0058 0029     		cmp	r1, #0
 386 005a F7D1     		bne	.L35
 387              	.L22:
 188:FreeRTOS/portable/heap_4.c ****                 {
 388              		.loc 1 188 17 is_stmt 1 view .LVU134
 188:FreeRTOS/portable/heap_4.c ****                 {
 389              		.loc 1 188 29 is_stmt 0 view .LVU135
 390 005c 2649     		ldr	r1, .L39
 391 005e 0968     		ldr	r1, [r1]
 188:FreeRTOS/portable/heap_4.c ****                 {
 392              		.loc 1 188 19 view .LVU136
 393 0060 A142     		cmp	r1, r4
 394 0062 45D0     		beq	.L36
 192:FreeRTOS/portable/heap_4.c **** 
 395              		.loc 1 192 21 is_stmt 1 view .LVU137
 192:FreeRTOS/portable/heap_4.c **** 
 396              		.loc 1 192 76 is_stmt 0 view .LVU138
 397 0064 1568     		ldr	r5, [r2]
 192:FreeRTOS/portable/heap_4.c **** 
 398              		.loc 1 192 30 view .LVU139
 399 0066 0835     		adds	r5, r5, #8
 400              	.LVL35:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s 			page 17


 196:FreeRTOS/portable/heap_4.c **** 
 401              		.loc 1 196 21 is_stmt 1 view .LVU140
 196:FreeRTOS/portable/heap_4.c **** 
 402              		.loc 1 196 63 is_stmt 0 view .LVU141
 403 0068 2168     		ldr	r1, [r4]
 196:FreeRTOS/portable/heap_4.c **** 
 404              		.loc 1 196 54 view .LVU142
 405 006a 1160     		str	r1, [r2]
 200:FreeRTOS/portable/heap_4.c ****                     {
 406              		.loc 1 200 21 is_stmt 1 view .LVU143
 200:FreeRTOS/portable/heap_4.c ****                     {
 407              		.loc 1 200 34 is_stmt 0 view .LVU144
 408 006c 6268     		ldr	r2, [r4, #4]
 409              	.LVL36:
 200:FreeRTOS/portable/heap_4.c ****                     {
 410              		.loc 1 200 47 view .LVU145
 411 006e D21A     		subs	r2, r2, r3
 200:FreeRTOS/portable/heap_4.c ****                     {
 412              		.loc 1 200 23 view .LVU146
 413 0070 102A     		cmp	r2, #16
 414 0072 10D9     		bls	.L24
 206:FreeRTOS/portable/heap_4.c ****                         configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) =
 415              		.loc 1 206 25 is_stmt 1 view .LVU147
 206:FreeRTOS/portable/heap_4.c ****                         configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) =
 416              		.loc 1 206 40 is_stmt 0 view .LVU148
 417 0074 E018     		adds	r0, r4, r3
 418              	.LVL37:
 207:FreeRTOS/portable/heap_4.c **** 
 419              		.loc 1 207 25 is_stmt 1 view .LVU149
 420 0076 10F0070F 		tst	r0, #7
 421 007a 08D0     		beq	.L25
 207:FreeRTOS/portable/heap_4.c **** 
 422              		.loc 1 207 25 view .LVU150
 423              	.LBB12:
 424              	.LBI12:
 425              		.file 2 "FreeRTOS/portable/portmacro.h"
   1:FreeRTOS/portable/portmacro.h **** /*
   2:FreeRTOS/portable/portmacro.h ****  * FreeRTOS Kernel V10.4.6
   3:FreeRTOS/portable/portmacro.h ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/portable/portmacro.h ****  *
   5:FreeRTOS/portable/portmacro.h ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS/portable/portmacro.h ****  *
   7:FreeRTOS/portable/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS/portable/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS/portable/portmacro.h ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS/portable/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS/portable/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS/portable/portmacro.h ****  * subject to the following conditions:
  13:FreeRTOS/portable/portmacro.h ****  *
  14:FreeRTOS/portable/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS/portable/portmacro.h ****  * copies or substantial portions of the Software.
  16:FreeRTOS/portable/portmacro.h ****  *
  17:FreeRTOS/portable/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS/portable/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS/portable/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS/portable/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS/portable/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s 			page 18


  22:FreeRTOS/portable/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS/portable/portmacro.h ****  *
  24:FreeRTOS/portable/portmacro.h ****  * https://www.FreeRTOS.org
  25:FreeRTOS/portable/portmacro.h ****  * https://github.com/FreeRTOS
  26:FreeRTOS/portable/portmacro.h ****  *
  27:FreeRTOS/portable/portmacro.h ****  */
  28:FreeRTOS/portable/portmacro.h **** 
  29:FreeRTOS/portable/portmacro.h **** 
  30:FreeRTOS/portable/portmacro.h **** #ifndef PORTMACRO_H
  31:FreeRTOS/portable/portmacro.h ****     #define PORTMACRO_H
  32:FreeRTOS/portable/portmacro.h **** 
  33:FreeRTOS/portable/portmacro.h ****     #ifdef __cplusplus
  34:FreeRTOS/portable/portmacro.h ****         extern "C" {
  35:FreeRTOS/portable/portmacro.h ****     #endif
  36:FreeRTOS/portable/portmacro.h **** 
  37:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------
  38:FreeRTOS/portable/portmacro.h ****  * Port specific definitions.
  39:FreeRTOS/portable/portmacro.h ****  *
  40:FreeRTOS/portable/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  41:FreeRTOS/portable/portmacro.h ****  * given hardware and compiler.
  42:FreeRTOS/portable/portmacro.h ****  *
  43:FreeRTOS/portable/portmacro.h ****  * These settings should not be altered.
  44:FreeRTOS/portable/portmacro.h ****  *-----------------------------------------------------------
  45:FreeRTOS/portable/portmacro.h ****  */
  46:FreeRTOS/portable/portmacro.h **** 
  47:FreeRTOS/portable/portmacro.h **** /* Type definitions. */
  48:FreeRTOS/portable/portmacro.h ****     #define portCHAR          char
  49:FreeRTOS/portable/portmacro.h ****     #define portFLOAT         float
  50:FreeRTOS/portable/portmacro.h ****     #define portDOUBLE        double
  51:FreeRTOS/portable/portmacro.h ****     #define portLONG          long
  52:FreeRTOS/portable/portmacro.h ****     #define portSHORT         short
  53:FreeRTOS/portable/portmacro.h ****     #define portSTACK_TYPE    uint32_t
  54:FreeRTOS/portable/portmacro.h ****     #define portBASE_TYPE     long
  55:FreeRTOS/portable/portmacro.h **** 
  56:FreeRTOS/portable/portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  57:FreeRTOS/portable/portmacro.h ****     typedef long             BaseType_t;
  58:FreeRTOS/portable/portmacro.h ****     typedef unsigned long    UBaseType_t;
  59:FreeRTOS/portable/portmacro.h **** 
  60:FreeRTOS/portable/portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  61:FreeRTOS/portable/portmacro.h ****         typedef uint16_t     TickType_t;
  62:FreeRTOS/portable/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  63:FreeRTOS/portable/portmacro.h ****     #else
  64:FreeRTOS/portable/portmacro.h ****         typedef uint32_t     TickType_t;
  65:FreeRTOS/portable/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  66:FreeRTOS/portable/portmacro.h **** 
  67:FreeRTOS/portable/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  68:FreeRTOS/portable/portmacro.h ****  * not need to be guarded with a critical section. */
  69:FreeRTOS/portable/portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  70:FreeRTOS/portable/portmacro.h ****     #endif
  71:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
  72:FreeRTOS/portable/portmacro.h **** 
  73:FreeRTOS/portable/portmacro.h **** /* Architecture specifics. */
  74:FreeRTOS/portable/portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  75:FreeRTOS/portable/portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  76:FreeRTOS/portable/portmacro.h ****     #define portBYTE_ALIGNMENT    8
  77:FreeRTOS/portable/portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  78:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s 			page 19


  79:FreeRTOS/portable/portmacro.h **** 
  80:FreeRTOS/portable/portmacro.h **** /* Scheduler utilities. */
  81:FreeRTOS/portable/portmacro.h ****     #define portYIELD()                                 \
  82:FreeRTOS/portable/portmacro.h ****     {                                                   \
  83:FreeRTOS/portable/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  84:FreeRTOS/portable/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  85:FreeRTOS/portable/portmacro.h ****                                                         \
  86:FreeRTOS/portable/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  87:FreeRTOS/portable/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  88:FreeRTOS/portable/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  89:FreeRTOS/portable/portmacro.h ****         __asm volatile ( "isb" );                                  \
  90:FreeRTOS/portable/portmacro.h ****     }
  91:FreeRTOS/portable/portmacro.h **** 
  92:FreeRTOS/portable/portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  93:FreeRTOS/portable/portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  94:FreeRTOS/portable/portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    do { if( xSwitchRequired != pdFALSE ) portY
  95:FreeRTOS/portable/portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  96:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
  97:FreeRTOS/portable/portmacro.h **** 
  98:FreeRTOS/portable/portmacro.h **** /* Critical section management. */
  99:FreeRTOS/portable/portmacro.h ****     extern void vPortEnterCritical( void );
 100:FreeRTOS/portable/portmacro.h ****     extern void vPortExitCritical( void );
 101:FreeRTOS/portable/portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 102:FreeRTOS/portable/portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 103:FreeRTOS/portable/portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 104:FreeRTOS/portable/portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 105:FreeRTOS/portable/portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 106:FreeRTOS/portable/portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 107:FreeRTOS/portable/portmacro.h **** 
 108:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
 109:FreeRTOS/portable/portmacro.h **** 
 110:FreeRTOS/portable/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 111:FreeRTOS/portable/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 112:FreeRTOS/portable/portmacro.h ****  * (which build with all the ports) will build. */
 113:FreeRTOS/portable/portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 114:FreeRTOS/portable/portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 115:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
 116:FreeRTOS/portable/portmacro.h **** 
 117:FreeRTOS/portable/portmacro.h **** /* Tickless idle/low power functionality. */
 118:FreeRTOS/portable/portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 119:FreeRTOS/portable/portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 120:FreeRTOS/portable/portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 121:FreeRTOS/portable/portmacro.h ****     #endif
 122:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
 123:FreeRTOS/portable/portmacro.h **** 
 124:FreeRTOS/portable/portmacro.h **** /* Architecture specific optimisations. */
 125:FreeRTOS/portable/portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 126:FreeRTOS/portable/portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 127:FreeRTOS/portable/portmacro.h ****     #endif
 128:FreeRTOS/portable/portmacro.h **** 
 129:FreeRTOS/portable/portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 130:FreeRTOS/portable/portmacro.h **** 
 131:FreeRTOS/portable/portmacro.h **** /* Generic helper function. */
 132:FreeRTOS/portable/portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 133:FreeRTOS/portable/portmacro.h ****         {
 134:FreeRTOS/portable/portmacro.h ****             uint8_t ucReturn;
 135:FreeRTOS/portable/portmacro.h **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s 			page 20


 136:FreeRTOS/portable/portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 137:FreeRTOS/portable/portmacro.h **** 
 138:FreeRTOS/portable/portmacro.h ****             return ucReturn;
 139:FreeRTOS/portable/portmacro.h ****         }
 140:FreeRTOS/portable/portmacro.h **** 
 141:FreeRTOS/portable/portmacro.h **** /* Check the configuration. */
 142:FreeRTOS/portable/portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 143:FreeRTOS/portable/portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 144:FreeRTOS/portable/portmacro.h ****         #endif
 145:FreeRTOS/portable/portmacro.h **** 
 146:FreeRTOS/portable/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 147:FreeRTOS/portable/portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 148:FreeRTOS/portable/portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 149:FreeRTOS/portable/portmacro.h **** 
 150:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
 151:FreeRTOS/portable/portmacro.h **** 
 152:FreeRTOS/portable/portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 153:FreeRTOS/portable/portmacro.h **** 
 154:FreeRTOS/portable/portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 155:FreeRTOS/portable/portmacro.h **** 
 156:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
 157:FreeRTOS/portable/portmacro.h **** 
 158:FreeRTOS/portable/portmacro.h ****     #ifdef configASSERT
 159:FreeRTOS/portable/portmacro.h ****         void vPortValidateInterruptPriority( void );
 160:FreeRTOS/portable/portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 161:FreeRTOS/portable/portmacro.h ****     #endif
 162:FreeRTOS/portable/portmacro.h **** 
 163:FreeRTOS/portable/portmacro.h **** /* portNOP() is not required by this port. */
 164:FreeRTOS/portable/portmacro.h ****     #define portNOP()
 165:FreeRTOS/portable/portmacro.h **** 
 166:FreeRTOS/portable/portmacro.h ****     #define portINLINE              __inline
 167:FreeRTOS/portable/portmacro.h **** 
 168:FreeRTOS/portable/portmacro.h ****     #ifndef portFORCE_INLINE
 169:FreeRTOS/portable/portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 170:FreeRTOS/portable/portmacro.h ****     #endif
 171:FreeRTOS/portable/portmacro.h **** 
 172:FreeRTOS/portable/portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 173:FreeRTOS/portable/portmacro.h ****     {
 174:FreeRTOS/portable/portmacro.h ****         uint32_t ulCurrentInterrupt;
 175:FreeRTOS/portable/portmacro.h ****         BaseType_t xReturn;
 176:FreeRTOS/portable/portmacro.h **** 
 177:FreeRTOS/portable/portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 178:FreeRTOS/portable/portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 179:FreeRTOS/portable/portmacro.h **** 
 180:FreeRTOS/portable/portmacro.h ****         if( ulCurrentInterrupt == 0 )
 181:FreeRTOS/portable/portmacro.h ****         {
 182:FreeRTOS/portable/portmacro.h ****             xReturn = pdFALSE;
 183:FreeRTOS/portable/portmacro.h ****         }
 184:FreeRTOS/portable/portmacro.h ****         else
 185:FreeRTOS/portable/portmacro.h ****         {
 186:FreeRTOS/portable/portmacro.h ****             xReturn = pdTRUE;
 187:FreeRTOS/portable/portmacro.h ****         }
 188:FreeRTOS/portable/portmacro.h **** 
 189:FreeRTOS/portable/portmacro.h ****         return xReturn;
 190:FreeRTOS/portable/portmacro.h ****     }
 191:FreeRTOS/portable/portmacro.h **** 
 192:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s 			page 21


 193:FreeRTOS/portable/portmacro.h **** 
 194:FreeRTOS/portable/portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 426              		.loc 2 194 34 view .LVU151
 427              	.LBB13:
 195:FreeRTOS/portable/portmacro.h ****     {
 196:FreeRTOS/portable/portmacro.h ****         uint32_t ulNewBASEPRI;
 428              		.loc 2 196 9 view .LVU152
 197:FreeRTOS/portable/portmacro.h **** 
 198:FreeRTOS/portable/portmacro.h ****         __asm volatile
 429              		.loc 2 198 9 view .LVU153
 430              		.syntax unified
 431              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 432 007c 4FF05003 			mov r3, #80												
 433 0080 83F31188 		msr basepri, r3											
 434 0084 BFF36F8F 		isb														
 435 0088 BFF34F8F 		dsb														
 436              	
 437              	@ 0 "" 2
 438              	.LVL38:
 439              		.thumb
 440              		.syntax unified
 441              	.L26:
 442              		.loc 2 198 9 is_stmt 0 view .LVU154
 443              	.LBE13:
 444              	.LBE12:
 207:FreeRTOS/portable/heap_4.c **** 
 445              		.loc 1 207 25 is_stmt 1 discriminator 4 view .LVU155
 207:FreeRTOS/portable/heap_4.c **** 
 446              		.loc 1 207 25 discriminator 4 view .LVU156
 207:FreeRTOS/portable/heap_4.c **** 
 447              		.loc 1 207 25 discriminator 4 view .LVU157
 448 008c FEE7     		b	.L26
 449              	.LVL39:
 450              	.L25:
 207:FreeRTOS/portable/heap_4.c **** 
 451              		.loc 1 207 105 discriminator 2 view .LVU158
 211:FreeRTOS/portable/heap_4.c ****                         pxBlock->xBlockSize = xWantedSize;
 452              		.loc 1 211 25 discriminator 2 view .LVU159
 211:FreeRTOS/portable/heap_4.c ****                         pxBlock->xBlockSize = xWantedSize;
 453              		.loc 1 211 52 is_stmt 0 discriminator 2 view .LVU160
 454 008e 4260     		str	r2, [r0, #4]
 212:FreeRTOS/portable/heap_4.c **** 
 455              		.loc 1 212 25 is_stmt 1 discriminator 2 view .LVU161
 212:FreeRTOS/portable/heap_4.c **** 
 456              		.loc 1 212 45 is_stmt 0 discriminator 2 view .LVU162
 457 0090 6360     		str	r3, [r4, #4]
 215:FreeRTOS/portable/heap_4.c ****                     }
 458              		.loc 1 215 25 is_stmt 1 discriminator 2 view .LVU163
 459 0092 FFF7FEFF 		bl	prvInsertBlockIntoFreeList
 460              	.LVL40:
 461              	.L24:
 219:FreeRTOS/portable/heap_4.c ****                     }
 462              		.loc 1 219 49 view .LVU164
 222:FreeRTOS/portable/heap_4.c **** 
 463              		.loc 1 222 21 view .LVU165
 222:FreeRTOS/portable/heap_4.c **** 
 464              		.loc 1 222 51 is_stmt 0 view .LVU166
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s 			page 22


 465 0096 6268     		ldr	r2, [r4, #4]
 222:FreeRTOS/portable/heap_4.c **** 
 466              		.loc 1 222 41 view .LVU167
 467 0098 1949     		ldr	r1, .L39+8
 468 009a 0B68     		ldr	r3, [r1]
 469 009c 9B1A     		subs	r3, r3, r2
 470 009e 0B60     		str	r3, [r1]
 224:FreeRTOS/portable/heap_4.c ****                     {
 471              		.loc 1 224 21 is_stmt 1 view .LVU168
 224:FreeRTOS/portable/heap_4.c ****                     {
 472              		.loc 1 224 45 is_stmt 0 view .LVU169
 473 00a0 1949     		ldr	r1, .L39+16
 474 00a2 0968     		ldr	r1, [r1]
 224:FreeRTOS/portable/heap_4.c ****                     {
 475              		.loc 1 224 23 view .LVU170
 476 00a4 8B42     		cmp	r3, r1
 477 00a6 01D2     		bcs	.L27
 226:FreeRTOS/portable/heap_4.c ****                     }
 478              		.loc 1 226 25 is_stmt 1 view .LVU171
 226:FreeRTOS/portable/heap_4.c ****                     }
 479              		.loc 1 226 56 is_stmt 0 view .LVU172
 480 00a8 1749     		ldr	r1, .L39+16
 481 00aa 0B60     		str	r3, [r1]
 482              	.L27:
 230:FreeRTOS/portable/heap_4.c ****                     }
 483              		.loc 1 230 49 is_stmt 1 view .LVU173
 235:FreeRTOS/portable/heap_4.c ****                     pxBlock->pxNextFreeBlock = NULL;
 484              		.loc 1 235 21 view .LVU174
 235:FreeRTOS/portable/heap_4.c ****                     pxBlock->pxNextFreeBlock = NULL;
 485              		.loc 1 235 41 is_stmt 0 view .LVU175
 486 00ac 134B     		ldr	r3, .L39+4
 487 00ae 1B68     		ldr	r3, [r3]
 488 00b0 1343     		orrs	r3, r3, r2
 489 00b2 6360     		str	r3, [r4, #4]
 236:FreeRTOS/portable/heap_4.c ****                     xNumberOfSuccessfulAllocations++;
 490              		.loc 1 236 21 is_stmt 1 view .LVU176
 236:FreeRTOS/portable/heap_4.c ****                     xNumberOfSuccessfulAllocations++;
 491              		.loc 1 236 46 is_stmt 0 view .LVU177
 492 00b4 0023     		movs	r3, #0
 493 00b6 2360     		str	r3, [r4]
 237:FreeRTOS/portable/heap_4.c ****                 }
 494              		.loc 1 237 21 is_stmt 1 view .LVU178
 237:FreeRTOS/portable/heap_4.c ****                 }
 495              		.loc 1 237 51 is_stmt 0 view .LVU179
 496 00b8 144A     		ldr	r2, .L39+20
 497 00ba 1368     		ldr	r3, [r2]
 498 00bc 0133     		adds	r3, r3, #1
 499 00be 1360     		str	r3, [r2]
 500 00c0 02E0     		b	.L20
 501              	.LVL41:
 502              	.L30:
 120:FreeRTOS/portable/heap_4.c **** 
 503              		.loc 1 120 12 view .LVU180
 504 00c2 0025     		movs	r5, #0
 505 00c4 00E0     		b	.L20
 506              	.L31:
 507 00c6 0025     		movs	r5, #0
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s 			page 23


 508              	.LVL42:
 509              	.L20:
 251:FreeRTOS/portable/heap_4.c ****         }
 510              		.loc 1 251 37 is_stmt 1 view .LVU181
 254:FreeRTOS/portable/heap_4.c ****     }
 511              		.loc 1 254 45 view .LVU182
 256:FreeRTOS/portable/heap_4.c **** 
 512              		.loc 1 256 5 view .LVU183
 256:FreeRTOS/portable/heap_4.c **** 
 513              		.loc 1 256 14 is_stmt 0 view .LVU184
 514 00c8 FFF7FEFF 		bl	xTaskResumeAll
 515              	.LVL43:
 272:FreeRTOS/portable/heap_4.c ****     return pvReturn;
 516              		.loc 1 272 5 is_stmt 1 view .LVU185
 517 00cc 15F0070F 		tst	r5, #7
 518 00d0 10D0     		beq	.L18
 272:FreeRTOS/portable/heap_4.c ****     return pvReturn;
 519              		.loc 1 272 5 view .LVU186
 520              	.LBB14:
 521              	.LBI14:
 194:FreeRTOS/portable/portmacro.h ****     {
 522              		.loc 2 194 34 view .LVU187
 523              	.LBB15:
 196:FreeRTOS/portable/portmacro.h **** 
 524              		.loc 2 196 9 view .LVU188
 525              		.loc 2 198 9 view .LVU189
 526              		.syntax unified
 527              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 528 00d2 4FF05003 			mov r3, #80												
 529 00d6 83F31188 		msr basepri, r3											
 530 00da BFF36F8F 		isb														
 531 00de BFF34F8F 		dsb														
 532              	
 533              	@ 0 "" 2
 534              	.LVL44:
 535              		.thumb
 536              		.syntax unified
 537              	.L29:
 538              		.loc 2 198 9 is_stmt 0 view .LVU190
 539              	.LBE15:
 540              	.LBE14:
 272:FreeRTOS/portable/heap_4.c ****     return pvReturn;
 541              		.loc 1 272 5 is_stmt 1 discriminator 6 view .LVU191
 272:FreeRTOS/portable/heap_4.c ****     return pvReturn;
 542              		.loc 1 272 5 discriminator 6 view .LVU192
 272:FreeRTOS/portable/heap_4.c ****     return pvReturn;
 543              		.loc 1 272 5 discriminator 6 view .LVU193
 544 00e2 FEE7     		b	.L29
 545              	.LVL45:
 546              	.L32:
 120:FreeRTOS/portable/heap_4.c **** 
 547              		.loc 1 120 12 is_stmt 0 view .LVU194
 548 00e4 0025     		movs	r5, #0
 549 00e6 EFE7     		b	.L20
 550              	.L33:
 120:FreeRTOS/portable/heap_4.c **** 
 551              		.loc 1 120 12 view .LVU195
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s 			page 24


 552 00e8 0025     		movs	r5, #0
 553 00ea EDE7     		b	.L20
 554              	.L34:
 555 00ec 0025     		movs	r5, #0
 556 00ee EBE7     		b	.L20
 557              	.LVL46:
 558              	.L36:
 120:FreeRTOS/portable/heap_4.c **** 
 559              		.loc 1 120 12 view .LVU196
 560 00f0 0025     		movs	r5, #0
 561 00f2 E9E7     		b	.L20
 562              	.LVL47:
 563              	.L18:
 274:FreeRTOS/portable/heap_4.c **** /*-----------------------------------------------------------*/
 564              		.loc 1 274 1 view .LVU197
 565 00f4 2846     		mov	r0, r5
 566 00f6 38BD     		pop	{r3, r4, r5, pc}
 567              	.LVL48:
 568              	.L40:
 274:FreeRTOS/portable/heap_4.c **** /*-----------------------------------------------------------*/
 569              		.loc 1 274 1 view .LVU198
 570              		.align	2
 571              	.L39:
 572 00f8 00000000 		.word	.LANCHOR2
 573 00fc 00000000 		.word	.LANCHOR5
 574 0100 00000000 		.word	.LANCHOR4
 575 0104 00000000 		.word	.LANCHOR1
 576 0108 00000000 		.word	.LANCHOR3
 577 010c 00000000 		.word	.LANCHOR6
 578              		.cfi_endproc
 579              	.LFE5:
 581              		.section	.text.vPortFree,"ax",%progbits
 582              		.align	1
 583              		.global	vPortFree
 584              		.syntax unified
 585              		.thumb
 586              		.thumb_func
 587              		.fpu fpv4-sp-d16
 589              	vPortFree:
 590              	.LVL49:
 591              	.LFB6:
 278:FreeRTOS/portable/heap_4.c ****     uint8_t * puc = ( uint8_t * ) pv;
 592              		.loc 1 278 1 is_stmt 1 view -0
 593              		.cfi_startproc
 594              		@ args = 0, pretend = 0, frame = 0
 595              		@ frame_needed = 0, uses_anonymous_args = 0
 279:FreeRTOS/portable/heap_4.c ****     BlockLink_t * pxLink;
 596              		.loc 1 279 5 view .LVU200
 280:FreeRTOS/portable/heap_4.c **** 
 597              		.loc 1 280 5 view .LVU201
 282:FreeRTOS/portable/heap_4.c ****     {
 598              		.loc 1 282 5 view .LVU202
 282:FreeRTOS/portable/heap_4.c ****     {
 599              		.loc 1 282 7 is_stmt 0 view .LVU203
 600 0000 0028     		cmp	r0, #0
 601 0002 34D0     		beq	.L48
 278:FreeRTOS/portable/heap_4.c ****     uint8_t * puc = ( uint8_t * ) pv;
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s 			page 25


 602              		.loc 1 278 1 view .LVU204
 603 0004 38B5     		push	{r3, r4, r5, lr}
 604              	.LCFI4:
 605              		.cfi_def_cfa_offset 16
 606              		.cfi_offset 3, -16
 607              		.cfi_offset 4, -12
 608              		.cfi_offset 5, -8
 609              		.cfi_offset 14, -4
 610 0006 0446     		mov	r4, r0
 286:FreeRTOS/portable/heap_4.c **** 
 611              		.loc 1 286 9 is_stmt 1 view .LVU205
 286:FreeRTOS/portable/heap_4.c **** 
 612              		.loc 1 286 13 is_stmt 0 view .LVU206
 613 0008 A0F10805 		sub	r5, r0, #8
 614              	.LVL50:
 289:FreeRTOS/portable/heap_4.c **** 
 615              		.loc 1 289 9 is_stmt 1 view .LVU207
 292:FreeRTOS/portable/heap_4.c ****         configASSERT( pxLink->pxNextFreeBlock == NULL );
 616              		.loc 1 292 9 view .LVU208
 617 000c 50F8043C 		ldr	r3, [r0, #-4]
 618 0010 174A     		ldr	r2, .L51
 619 0012 1268     		ldr	r2, [r2]
 620 0014 1342     		tst	r3, r2
 621 0016 08D1     		bne	.L43
 292:FreeRTOS/portable/heap_4.c ****         configASSERT( pxLink->pxNextFreeBlock == NULL );
 622              		.loc 1 292 9 view .LVU209
 623              	.LBB16:
 624              	.LBI16:
 194:FreeRTOS/portable/portmacro.h ****     {
 625              		.loc 2 194 34 view .LVU210
 626              	.LBB17:
 196:FreeRTOS/portable/portmacro.h **** 
 627              		.loc 2 196 9 view .LVU211
 628              		.loc 2 198 9 view .LVU212
 629              		.syntax unified
 630              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 631 0018 4FF05003 			mov r3, #80												
 632 001c 83F31188 		msr basepri, r3											
 633 0020 BFF36F8F 		isb														
 634 0024 BFF34F8F 		dsb														
 635              	
 636              	@ 0 "" 2
 637              	.LVL51:
 638              		.thumb
 639              		.syntax unified
 640              	.L44:
 641              		.loc 2 198 9 is_stmt 0 view .LVU213
 642              	.LBE17:
 643              	.LBE16:
 292:FreeRTOS/portable/heap_4.c ****         configASSERT( pxLink->pxNextFreeBlock == NULL );
 644              		.loc 1 292 9 is_stmt 1 discriminator 1 view .LVU214
 292:FreeRTOS/portable/heap_4.c ****         configASSERT( pxLink->pxNextFreeBlock == NULL );
 645              		.loc 1 292 9 discriminator 1 view .LVU215
 292:FreeRTOS/portable/heap_4.c ****         configASSERT( pxLink->pxNextFreeBlock == NULL );
 646              		.loc 1 292 9 discriminator 1 view .LVU216
 647 0028 FEE7     		b	.L44
 648              	.L43:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s 			page 26


 292:FreeRTOS/portable/heap_4.c ****         configASSERT( pxLink->pxNextFreeBlock == NULL );
 649              		.loc 1 292 73 discriminator 2 view .LVU217
 293:FreeRTOS/portable/heap_4.c **** 
 650              		.loc 1 293 9 discriminator 2 view .LVU218
 651 002a 50F8081C 		ldr	r1, [r0, #-8]
 652 002e 41B1     		cbz	r1, .L45
 293:FreeRTOS/portable/heap_4.c **** 
 653              		.loc 1 293 9 view .LVU219
 654              	.LBB18:
 655              	.LBI18:
 194:FreeRTOS/portable/portmacro.h ****     {
 656              		.loc 2 194 34 view .LVU220
 657              	.LBB19:
 196:FreeRTOS/portable/portmacro.h **** 
 658              		.loc 2 196 9 view .LVU221
 659              		.loc 2 198 9 view .LVU222
 660              		.syntax unified
 661              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 662 0030 4FF05003 			mov r3, #80												
 663 0034 83F31188 		msr basepri, r3											
 664 0038 BFF36F8F 		isb														
 665 003c BFF34F8F 		dsb														
 666              	
 667              	@ 0 "" 2
 668              	.LVL52:
 669              		.thumb
 670              		.syntax unified
 671              	.L46:
 672              		.loc 2 198 9 is_stmt 0 view .LVU223
 673              	.LBE19:
 674              	.LBE18:
 293:FreeRTOS/portable/heap_4.c **** 
 675              		.loc 1 293 9 is_stmt 1 discriminator 2 view .LVU224
 293:FreeRTOS/portable/heap_4.c **** 
 676              		.loc 1 293 9 discriminator 2 view .LVU225
 293:FreeRTOS/portable/heap_4.c **** 
 677              		.loc 1 293 9 discriminator 2 view .LVU226
 678 0040 FEE7     		b	.L46
 679              	.L45:
 293:FreeRTOS/portable/heap_4.c **** 
 680              		.loc 1 293 56 view .LVU227
 295:FreeRTOS/portable/heap_4.c ****         {
 681              		.loc 1 295 9 view .LVU228
 297:FreeRTOS/portable/heap_4.c ****             {
 682              		.loc 1 297 13 view .LVU229
 301:FreeRTOS/portable/heap_4.c **** 
 683              		.loc 1 301 17 view .LVU230
 301:FreeRTOS/portable/heap_4.c **** 
 684              		.loc 1 301 36 is_stmt 0 view .LVU231
 685 0042 23EA0203 		bic	r3, r3, r2
 686 0046 40F8043C 		str	r3, [r0, #-4]
 303:FreeRTOS/portable/heap_4.c ****                 {
 687              		.loc 1 303 17 is_stmt 1 view .LVU232
 688 004a FFF7FEFF 		bl	vTaskSuspendAll
 689              	.LVL53:
 306:FreeRTOS/portable/heap_4.c ****                     traceFREE( pv, pxLink->xBlockSize );
 690              		.loc 1 306 21 view .LVU233
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s 			page 27


 306:FreeRTOS/portable/heap_4.c ****                     traceFREE( pv, pxLink->xBlockSize );
 691              		.loc 1 306 50 is_stmt 0 view .LVU234
 692 004e 54F8041C 		ldr	r1, [r4, #-4]
 306:FreeRTOS/portable/heap_4.c ****                     traceFREE( pv, pxLink->xBlockSize );
 693              		.loc 1 306 41 view .LVU235
 694 0052 084A     		ldr	r2, .L51+4
 695 0054 1368     		ldr	r3, [r2]
 696 0056 0B44     		add	r3, r3, r1
 697 0058 1360     		str	r3, [r2]
 307:FreeRTOS/portable/heap_4.c ****                     prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 698              		.loc 1 307 56 is_stmt 1 view .LVU236
 308:FreeRTOS/portable/heap_4.c ****                     xNumberOfSuccessfulFrees++;
 699              		.loc 1 308 21 view .LVU237
 700 005a 2846     		mov	r0, r5
 701 005c FFF7FEFF 		bl	prvInsertBlockIntoFreeList
 702              	.LVL54:
 309:FreeRTOS/portable/heap_4.c ****                 }
 703              		.loc 1 309 21 view .LVU238
 309:FreeRTOS/portable/heap_4.c ****                 }
 704              		.loc 1 309 45 is_stmt 0 view .LVU239
 705 0060 054A     		ldr	r2, .L51+8
 706 0062 1368     		ldr	r3, [r2]
 707 0064 0133     		adds	r3, r3, #1
 708 0066 1360     		str	r3, [r2]
 311:FreeRTOS/portable/heap_4.c ****             }
 709              		.loc 1 311 17 is_stmt 1 view .LVU240
 311:FreeRTOS/portable/heap_4.c ****             }
 710              		.loc 1 311 26 is_stmt 0 view .LVU241
 711 0068 FFF7FEFF 		bl	xTaskResumeAll
 712              	.LVL55:
 320:FreeRTOS/portable/heap_4.c ****         }
 713              		.loc 1 320 37 is_stmt 1 view .LVU242
 323:FreeRTOS/portable/heap_4.c **** /*-----------------------------------------------------------*/
 714              		.loc 1 323 1 is_stmt 0 view .LVU243
 715 006c 38BD     		pop	{r3, r4, r5, pc}
 716              	.LVL56:
 717              	.L48:
 718              	.LCFI5:
 719              		.cfi_def_cfa_offset 0
 720              		.cfi_restore 3
 721              		.cfi_restore 4
 722              		.cfi_restore 5
 723              		.cfi_restore 14
 323:FreeRTOS/portable/heap_4.c **** /*-----------------------------------------------------------*/
 724              		.loc 1 323 1 view .LVU244
 725 006e 7047     		bx	lr
 726              	.L52:
 727              		.align	2
 728              	.L51:
 729 0070 00000000 		.word	.LANCHOR5
 730 0074 00000000 		.word	.LANCHOR4
 731 0078 00000000 		.word	.LANCHOR7
 732              		.cfi_endproc
 733              	.LFE6:
 735              		.section	.text.xPortGetFreeHeapSize,"ax",%progbits
 736              		.align	1
 737              		.global	xPortGetFreeHeapSize
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s 			page 28


 738              		.syntax unified
 739              		.thumb
 740              		.thumb_func
 741              		.fpu fpv4-sp-d16
 743              	xPortGetFreeHeapSize:
 744              	.LFB7:
 327:FreeRTOS/portable/heap_4.c ****     return xFreeBytesRemaining;
 745              		.loc 1 327 1 is_stmt 1 view -0
 746              		.cfi_startproc
 747              		@ args = 0, pretend = 0, frame = 0
 748              		@ frame_needed = 0, uses_anonymous_args = 0
 749              		@ link register save eliminated.
 328:FreeRTOS/portable/heap_4.c **** }
 750              		.loc 1 328 5 view .LVU246
 329:FreeRTOS/portable/heap_4.c **** /*-----------------------------------------------------------*/
 751              		.loc 1 329 1 is_stmt 0 view .LVU247
 752 0000 014B     		ldr	r3, .L54
 753 0002 1868     		ldr	r0, [r3]
 754 0004 7047     		bx	lr
 755              	.L55:
 756 0006 00BF     		.align	2
 757              	.L54:
 758 0008 00000000 		.word	.LANCHOR4
 759              		.cfi_endproc
 760              	.LFE7:
 762              		.section	.text.xPortGetMinimumEverFreeHeapSize,"ax",%progbits
 763              		.align	1
 764              		.global	xPortGetMinimumEverFreeHeapSize
 765              		.syntax unified
 766              		.thumb
 767              		.thumb_func
 768              		.fpu fpv4-sp-d16
 770              	xPortGetMinimumEverFreeHeapSize:
 771              	.LFB8:
 333:FreeRTOS/portable/heap_4.c ****     return xMinimumEverFreeBytesRemaining;
 772              		.loc 1 333 1 is_stmt 1 view -0
 773              		.cfi_startproc
 774              		@ args = 0, pretend = 0, frame = 0
 775              		@ frame_needed = 0, uses_anonymous_args = 0
 776              		@ link register save eliminated.
 334:FreeRTOS/portable/heap_4.c **** }
 777              		.loc 1 334 5 view .LVU249
 335:FreeRTOS/portable/heap_4.c **** /*-----------------------------------------------------------*/
 778              		.loc 1 335 1 is_stmt 0 view .LVU250
 779 0000 014B     		ldr	r3, .L57
 780 0002 1868     		ldr	r0, [r3]
 781 0004 7047     		bx	lr
 782              	.L58:
 783 0006 00BF     		.align	2
 784              	.L57:
 785 0008 00000000 		.word	.LANCHOR3
 786              		.cfi_endproc
 787              	.LFE8:
 789              		.section	.text.vPortInitialiseBlocks,"ax",%progbits
 790              		.align	1
 791              		.global	vPortInitialiseBlocks
 792              		.syntax unified
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s 			page 29


 793              		.thumb
 794              		.thumb_func
 795              		.fpu fpv4-sp-d16
 797              	vPortInitialiseBlocks:
 798              	.LFB9:
 339:FreeRTOS/portable/heap_4.c ****     /* This just exists to keep the linker quiet. */
 799              		.loc 1 339 1 is_stmt 1 view -0
 800              		.cfi_startproc
 801              		@ args = 0, pretend = 0, frame = 0
 802              		@ frame_needed = 0, uses_anonymous_args = 0
 803              		@ link register save eliminated.
 341:FreeRTOS/portable/heap_4.c **** /*-----------------------------------------------------------*/
 804              		.loc 1 341 1 view .LVU252
 805 0000 7047     		bx	lr
 806              		.cfi_endproc
 807              	.LFE9:
 809              		.section	.text.vPortGetHeapStats,"ax",%progbits
 810              		.align	1
 811              		.global	vPortGetHeapStats
 812              		.syntax unified
 813              		.thumb
 814              		.thumb_func
 815              		.fpu fpv4-sp-d16
 817              	vPortGetHeapStats:
 818              	.LVL57:
 819              	.LFB12:
 453:FreeRTOS/portable/heap_4.c **** /*-----------------------------------------------------------*/
 454:FreeRTOS/portable/heap_4.c **** 
 455:FreeRTOS/portable/heap_4.c **** void vPortGetHeapStats( HeapStats_t * pxHeapStats )
 456:FreeRTOS/portable/heap_4.c **** {
 820              		.loc 1 456 1 view -0
 821              		.cfi_startproc
 822              		@ args = 0, pretend = 0, frame = 0
 823              		@ frame_needed = 0, uses_anonymous_args = 0
 824              		.loc 1 456 1 is_stmt 0 view .LVU254
 825 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 826              	.LCFI6:
 827              		.cfi_def_cfa_offset 24
 828              		.cfi_offset 3, -24
 829              		.cfi_offset 4, -20
 830              		.cfi_offset 5, -16
 831              		.cfi_offset 6, -12
 832              		.cfi_offset 7, -8
 833              		.cfi_offset 14, -4
 834 0002 0746     		mov	r7, r0
 457:FreeRTOS/portable/heap_4.c ****     BlockLink_t * pxBlock;
 835              		.loc 1 457 5 is_stmt 1 view .LVU255
 458:FreeRTOS/portable/heap_4.c ****     size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable
 836              		.loc 1 458 5 view .LVU256
 837              	.LVL58:
 459:FreeRTOS/portable/heap_4.c **** 
 460:FreeRTOS/portable/heap_4.c ****     vTaskSuspendAll();
 838              		.loc 1 460 5 view .LVU257
 839 0004 FFF7FEFF 		bl	vTaskSuspendAll
 840              	.LVL59:
 461:FreeRTOS/portable/heap_4.c ****     {
 462:FreeRTOS/portable/heap_4.c ****         pxBlock = xStart.pxNextFreeBlock;
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s 			page 30


 841              		.loc 1 462 9 view .LVU258
 842              		.loc 1 462 17 is_stmt 0 view .LVU259
 843 0008 174B     		ldr	r3, .L69
 844 000a 1B68     		ldr	r3, [r3]
 845              	.LVL60:
 463:FreeRTOS/portable/heap_4.c **** 
 464:FreeRTOS/portable/heap_4.c ****         /* pxBlock will be NULL if the heap has not been initialised.  The heap
 465:FreeRTOS/portable/heap_4.c ****          * is initialised automatically when the first allocation is made. */
 466:FreeRTOS/portable/heap_4.c ****         if( pxBlock != NULL )
 846              		.loc 1 466 9 is_stmt 1 view .LVU260
 847              		.loc 1 466 11 is_stmt 0 view .LVU261
 848 000c 93B1     		cbz	r3, .L65
 458:FreeRTOS/portable/heap_4.c **** 
 849              		.loc 1 458 39 view .LVU262
 850 000e 4FF0FF36 		mov	r6, #-1
 458:FreeRTOS/portable/heap_4.c **** 
 851              		.loc 1 458 25 view .LVU263
 852 0012 0025     		movs	r5, #0
 458:FreeRTOS/portable/heap_4.c **** 
 853              		.loc 1 458 12 view .LVU264
 854 0014 2C46     		mov	r4, r5
 855 0016 04E0     		b	.L64
 856              	.LVL61:
 857              	.L63:
 467:FreeRTOS/portable/heap_4.c ****         {
 468:FreeRTOS/portable/heap_4.c ****             do
 469:FreeRTOS/portable/heap_4.c ****             {
 470:FreeRTOS/portable/heap_4.c ****                 /* Increment the number of blocks and record the largest block seen
 471:FreeRTOS/portable/heap_4.c ****                  * so far. */
 472:FreeRTOS/portable/heap_4.c ****                 xBlocks++;
 473:FreeRTOS/portable/heap_4.c **** 
 474:FreeRTOS/portable/heap_4.c ****                 if( pxBlock->xBlockSize > xMaxSize )
 475:FreeRTOS/portable/heap_4.c ****                 {
 476:FreeRTOS/portable/heap_4.c ****                     xMaxSize = pxBlock->xBlockSize;
 477:FreeRTOS/portable/heap_4.c ****                 }
 478:FreeRTOS/portable/heap_4.c **** 
 479:FreeRTOS/portable/heap_4.c ****                 if( pxBlock->xBlockSize < xMinSize )
 480:FreeRTOS/portable/heap_4.c ****                 {
 481:FreeRTOS/portable/heap_4.c ****                     xMinSize = pxBlock->xBlockSize;
 482:FreeRTOS/portable/heap_4.c ****                 }
 483:FreeRTOS/portable/heap_4.c **** 
 484:FreeRTOS/portable/heap_4.c ****                 /* Move to the next block in the chain until the last block is
 485:FreeRTOS/portable/heap_4.c ****                  * reached. */
 486:FreeRTOS/portable/heap_4.c ****                 pxBlock = pxBlock->pxNextFreeBlock;
 858              		.loc 1 486 17 is_stmt 1 view .LVU265
 859              		.loc 1 486 25 is_stmt 0 view .LVU266
 860 0018 1B68     		ldr	r3, [r3]
 861              	.LVL62:
 487:FreeRTOS/portable/heap_4.c ****             } while( pxBlock != pxEnd );
 862              		.loc 1 487 20 is_stmt 1 view .LVU267
 863              		.loc 1 487 30 is_stmt 0 view .LVU268
 864 001a 144A     		ldr	r2, .L69+4
 865 001c 1268     		ldr	r2, [r2]
 866              		.loc 1 487 13 view .LVU269
 867 001e 9A42     		cmp	r2, r3
 868 0020 0CD0     		beq	.L61
 869              	.LVL63:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s 			page 31


 870              	.L64:
 468:FreeRTOS/portable/heap_4.c ****             {
 871              		.loc 1 468 13 is_stmt 1 view .LVU270
 472:FreeRTOS/portable/heap_4.c **** 
 872              		.loc 1 472 17 view .LVU271
 472:FreeRTOS/portable/heap_4.c **** 
 873              		.loc 1 472 24 is_stmt 0 view .LVU272
 874 0022 0134     		adds	r4, r4, #1
 875              	.LVL64:
 474:FreeRTOS/portable/heap_4.c ****                 {
 876              		.loc 1 474 17 is_stmt 1 view .LVU273
 474:FreeRTOS/portable/heap_4.c ****                 {
 877              		.loc 1 474 28 is_stmt 0 view .LVU274
 878 0024 5A68     		ldr	r2, [r3, #4]
 474:FreeRTOS/portable/heap_4.c ****                 {
 879              		.loc 1 474 19 view .LVU275
 880 0026 AA42     		cmp	r2, r5
 881 0028 00D9     		bls	.L62
 476:FreeRTOS/portable/heap_4.c ****                 }
 882              		.loc 1 476 30 view .LVU276
 883 002a 1546     		mov	r5, r2
 884              	.LVL65:
 885              	.L62:
 479:FreeRTOS/portable/heap_4.c ****                 {
 886              		.loc 1 479 17 is_stmt 1 view .LVU277
 479:FreeRTOS/portable/heap_4.c ****                 {
 887              		.loc 1 479 19 is_stmt 0 view .LVU278
 888 002c B242     		cmp	r2, r6
 889 002e F3D2     		bcs	.L63
 481:FreeRTOS/portable/heap_4.c ****                 }
 890              		.loc 1 481 30 view .LVU279
 891 0030 1646     		mov	r6, r2
 892              	.LVL66:
 481:FreeRTOS/portable/heap_4.c ****                 }
 893              		.loc 1 481 30 view .LVU280
 894 0032 F1E7     		b	.L63
 895              	.LVL67:
 896              	.L65:
 458:FreeRTOS/portable/heap_4.c **** 
 897              		.loc 1 458 39 view .LVU281
 898 0034 4FF0FF36 		mov	r6, #-1
 458:FreeRTOS/portable/heap_4.c **** 
 899              		.loc 1 458 25 view .LVU282
 900 0038 0025     		movs	r5, #0
 458:FreeRTOS/portable/heap_4.c **** 
 901              		.loc 1 458 12 view .LVU283
 902 003a 2C46     		mov	r4, r5
 903              	.LVL68:
 904              	.L61:
 488:FreeRTOS/portable/heap_4.c ****         }
 489:FreeRTOS/portable/heap_4.c ****     }
 490:FreeRTOS/portable/heap_4.c ****     ( void ) xTaskResumeAll();
 905              		.loc 1 490 5 is_stmt 1 view .LVU284
 906              		.loc 1 490 14 is_stmt 0 view .LVU285
 907 003c FFF7FEFF 		bl	xTaskResumeAll
 908              	.LVL69:
 491:FreeRTOS/portable/heap_4.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s 			page 32


 492:FreeRTOS/portable/heap_4.c ****     pxHeapStats->xSizeOfLargestFreeBlockInBytes = xMaxSize;
 909              		.loc 1 492 5 is_stmt 1 view .LVU286
 910              		.loc 1 492 49 is_stmt 0 view .LVU287
 911 0040 7D60     		str	r5, [r7, #4]
 493:FreeRTOS/portable/heap_4.c ****     pxHeapStats->xSizeOfSmallestFreeBlockInBytes = xMinSize;
 912              		.loc 1 493 5 is_stmt 1 view .LVU288
 913              		.loc 1 493 50 is_stmt 0 view .LVU289
 914 0042 BE60     		str	r6, [r7, #8]
 494:FreeRTOS/portable/heap_4.c ****     pxHeapStats->xNumberOfFreeBlocks = xBlocks;
 915              		.loc 1 494 5 is_stmt 1 view .LVU290
 916              		.loc 1 494 38 is_stmt 0 view .LVU291
 917 0044 FC60     		str	r4, [r7, #12]
 495:FreeRTOS/portable/heap_4.c **** 
 496:FreeRTOS/portable/heap_4.c ****     taskENTER_CRITICAL();
 918              		.loc 1 496 5 is_stmt 1 view .LVU292
 919 0046 FFF7FEFF 		bl	vPortEnterCritical
 920              	.LVL70:
 497:FreeRTOS/portable/heap_4.c ****     {
 498:FreeRTOS/portable/heap_4.c ****         pxHeapStats->xAvailableHeapSpaceInBytes = xFreeBytesRemaining;
 921              		.loc 1 498 9 view .LVU293
 922              		.loc 1 498 49 is_stmt 0 view .LVU294
 923 004a 094B     		ldr	r3, .L69+8
 924 004c 1B68     		ldr	r3, [r3]
 925 004e 3B60     		str	r3, [r7]
 499:FreeRTOS/portable/heap_4.c ****         pxHeapStats->xNumberOfSuccessfulAllocations = xNumberOfSuccessfulAllocations;
 926              		.loc 1 499 9 is_stmt 1 view .LVU295
 927              		.loc 1 499 53 is_stmt 0 view .LVU296
 928 0050 084B     		ldr	r3, .L69+12
 929 0052 1B68     		ldr	r3, [r3]
 930 0054 7B61     		str	r3, [r7, #20]
 500:FreeRTOS/portable/heap_4.c ****         pxHeapStats->xNumberOfSuccessfulFrees = xNumberOfSuccessfulFrees;
 931              		.loc 1 500 9 is_stmt 1 view .LVU297
 932              		.loc 1 500 47 is_stmt 0 view .LVU298
 933 0056 084B     		ldr	r3, .L69+16
 934 0058 1B68     		ldr	r3, [r3]
 935 005a BB61     		str	r3, [r7, #24]
 501:FreeRTOS/portable/heap_4.c ****         pxHeapStats->xMinimumEverFreeBytesRemaining = xMinimumEverFreeBytesRemaining;
 936              		.loc 1 501 9 is_stmt 1 view .LVU299
 937              		.loc 1 501 53 is_stmt 0 view .LVU300
 938 005c 074B     		ldr	r3, .L69+20
 939 005e 1B68     		ldr	r3, [r3]
 940 0060 3B61     		str	r3, [r7, #16]
 502:FreeRTOS/portable/heap_4.c ****     }
 503:FreeRTOS/portable/heap_4.c ****     taskEXIT_CRITICAL();
 941              		.loc 1 503 5 is_stmt 1 view .LVU301
 942 0062 FFF7FEFF 		bl	vPortExitCritical
 943              	.LVL71:
 504:FreeRTOS/portable/heap_4.c **** }
 944              		.loc 1 504 1 is_stmt 0 view .LVU302
 945 0066 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 946              	.LVL72:
 947              	.L70:
 948              		.loc 1 504 1 view .LVU303
 949              		.align	2
 950              	.L69:
 951 0068 00000000 		.word	.LANCHOR1
 952 006c 00000000 		.word	.LANCHOR2
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s 			page 33


 953 0070 00000000 		.word	.LANCHOR4
 954 0074 00000000 		.word	.LANCHOR6
 955 0078 00000000 		.word	.LANCHOR7
 956 007c 00000000 		.word	.LANCHOR3
 957              		.cfi_endproc
 958              	.LFE12:
 960              		.section	.bss.pxEnd,"aw",%nobits
 961              		.align	2
 962              		.set	.LANCHOR2,. + 0
 965              	pxEnd:
 966 0000 00000000 		.space	4
 967              		.section	.bss.ucHeap,"aw",%nobits
 968              		.align	2
 969              		.set	.LANCHOR0,. + 0
 972              	ucHeap:
 973 0000 00000000 		.space	3000
 973      00000000 
 973      00000000 
 973      00000000 
 973      00000000 
 974              		.section	.bss.xBlockAllocatedBit,"aw",%nobits
 975              		.align	2
 976              		.set	.LANCHOR5,. + 0
 979              	xBlockAllocatedBit:
 980 0000 00000000 		.space	4
 981              		.section	.bss.xFreeBytesRemaining,"aw",%nobits
 982              		.align	2
 983              		.set	.LANCHOR4,. + 0
 986              	xFreeBytesRemaining:
 987 0000 00000000 		.space	4
 988              		.section	.bss.xMinimumEverFreeBytesRemaining,"aw",%nobits
 989              		.align	2
 990              		.set	.LANCHOR3,. + 0
 993              	xMinimumEverFreeBytesRemaining:
 994 0000 00000000 		.space	4
 995              		.section	.bss.xNumberOfSuccessfulAllocations,"aw",%nobits
 996              		.align	2
 997              		.set	.LANCHOR6,. + 0
 1000              	xNumberOfSuccessfulAllocations:
 1001 0000 00000000 		.space	4
 1002              		.section	.bss.xNumberOfSuccessfulFrees,"aw",%nobits
 1003              		.align	2
 1004              		.set	.LANCHOR7,. + 0
 1007              	xNumberOfSuccessfulFrees:
 1008 0000 00000000 		.space	4
 1009              		.section	.bss.xStart,"aw",%nobits
 1010              		.align	2
 1011              		.set	.LANCHOR1,. + 0
 1014              	xStart:
 1015 0000 00000000 		.space	8
 1015      00000000 
 1016              		.text
 1017              	.Letext0:
 1018              		.file 3 "c:\\work\\arm\\xpack-arm-none-eabi-gcc-9.2.1-1.1\\lib\\gcc\\arm-none-eabi\\9.2.1\\include
 1019              		.file 4 "c:\\work\\arm\\xpack-arm-none-eabi-gcc-9.2.1-1.1\\arm-none-eabi\\include\\machine\\_defau
 1020              		.file 5 "c:\\work\\arm\\xpack-arm-none-eabi-gcc-9.2.1-1.1\\arm-none-eabi\\include\\sys\\lock.h"
 1021              		.file 6 "c:\\work\\arm\\xpack-arm-none-eabi-gcc-9.2.1-1.1\\arm-none-eabi\\include\\sys\\_types.h"
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s 			page 34


 1022              		.file 7 "c:\\work\\arm\\xpack-arm-none-eabi-gcc-9.2.1-1.1\\arm-none-eabi\\include\\sys\\reent.h"
 1023              		.file 8 "c:\\work\\arm\\xpack-arm-none-eabi-gcc-9.2.1-1.1\\arm-none-eabi\\include\\stdlib.h"
 1024              		.file 9 "c:\\work\\arm\\xpack-arm-none-eabi-gcc-9.2.1-1.1\\arm-none-eabi\\include\\sys\\_stdint.h"
 1025              		.file 10 "Core/Inc/FreeRTOSConfig.h"
 1026              		.file 11 "FreeRTOS/include/portable.h"
 1027              		.file 12 "FreeRTOS/include/task.h"
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s 			page 35


DEFINED SYMBOLS
                            *ABS*:0000000000000000 heap_4.c
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:18     .text.prvHeapInit:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:25     .text.prvHeapInit:0000000000000000 prvHeapInit
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:132    .text.prvHeapInit:0000000000000050 $d
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:142    .text.prvInsertBlockIntoFreeList:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:148    .text.prvInsertBlockIntoFreeList:0000000000000000 prvInsertBlockIntoFreeList
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:266    .text.prvInsertBlockIntoFreeList:0000000000000050 $d
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:272    .text.pvPortMalloc:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:279    .text.pvPortMalloc:0000000000000000 pvPortMalloc
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:572    .text.pvPortMalloc:00000000000000f8 $d
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:582    .text.vPortFree:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:589    .text.vPortFree:0000000000000000 vPortFree
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:729    .text.vPortFree:0000000000000070 $d
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:736    .text.xPortGetFreeHeapSize:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:743    .text.xPortGetFreeHeapSize:0000000000000000 xPortGetFreeHeapSize
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:758    .text.xPortGetFreeHeapSize:0000000000000008 $d
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:763    .text.xPortGetMinimumEverFreeHeapSize:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:770    .text.xPortGetMinimumEverFreeHeapSize:0000000000000000 xPortGetMinimumEverFreeHeapSize
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:785    .text.xPortGetMinimumEverFreeHeapSize:0000000000000008 $d
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:790    .text.vPortInitialiseBlocks:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:797    .text.vPortInitialiseBlocks:0000000000000000 vPortInitialiseBlocks
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:810    .text.vPortGetHeapStats:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:817    .text.vPortGetHeapStats:0000000000000000 vPortGetHeapStats
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:951    .text.vPortGetHeapStats:0000000000000068 $d
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:961    .bss.pxEnd:0000000000000000 $d
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:965    .bss.pxEnd:0000000000000000 pxEnd
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:968    .bss.ucHeap:0000000000000000 $d
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:972    .bss.ucHeap:0000000000000000 ucHeap
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:975    .bss.xBlockAllocatedBit:0000000000000000 $d
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:979    .bss.xBlockAllocatedBit:0000000000000000 xBlockAllocatedBit
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:982    .bss.xFreeBytesRemaining:0000000000000000 $d
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:986    .bss.xFreeBytesRemaining:0000000000000000 xFreeBytesRemaining
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:989    .bss.xMinimumEverFreeBytesRemaining:0000000000000000 $d
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:993    .bss.xMinimumEverFreeBytesRemaining:0000000000000000 xMinimumEverFreeBytesRemaining
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:996    .bss.xNumberOfSuccessfulAllocations:0000000000000000 $d
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:1000   .bss.xNumberOfSuccessfulAllocations:0000000000000000 xNumberOfSuccessfulAllocations
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:1003   .bss.xNumberOfSuccessfulFrees:0000000000000000 $d
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:1007   .bss.xNumberOfSuccessfulFrees:0000000000000000 xNumberOfSuccessfulFrees
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:1010   .bss.xStart:0000000000000000 $d
C:\Users\worker\AppData\Local\Temp\ccZCiAA9.s:1014   .bss.xStart:0000000000000000 xStart

UNDEFINED SYMBOLS
vTaskSuspendAll
xTaskResumeAll
vPortEnterCritical
vPortExitCritical
