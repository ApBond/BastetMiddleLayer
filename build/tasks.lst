ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	prvTaskIsTaskSuspended:
  26              	.LVL0:
  27              	.LFB17:
  28              		.file 1 "FreeRTOS/tasks.c"
   1:FreeRTOS/tasks.c **** /*
   2:FreeRTOS/tasks.c ****  * FreeRTOS Kernel V10.4.6
   3:FreeRTOS/tasks.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/tasks.c ****  *
   5:FreeRTOS/tasks.c ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS/tasks.c ****  *
   7:FreeRTOS/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS/tasks.c ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS/tasks.c ****  * subject to the following conditions:
  13:FreeRTOS/tasks.c ****  *
  14:FreeRTOS/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS/tasks.c ****  * copies or substantial portions of the Software.
  16:FreeRTOS/tasks.c ****  *
  17:FreeRTOS/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS/tasks.c ****  *
  24:FreeRTOS/tasks.c ****  * https://www.FreeRTOS.org
  25:FreeRTOS/tasks.c ****  * https://github.com/FreeRTOS
  26:FreeRTOS/tasks.c ****  *
  27:FreeRTOS/tasks.c ****  */
  28:FreeRTOS/tasks.c **** 
  29:FreeRTOS/tasks.c **** /* Standard includes. */
  30:FreeRTOS/tasks.c **** #include <stdlib.h>
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 2


  31:FreeRTOS/tasks.c **** #include <string.h>
  32:FreeRTOS/tasks.c **** 
  33:FreeRTOS/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  34:FreeRTOS/tasks.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  35:FreeRTOS/tasks.c ****  * task.h is included from an application file. */
  36:FreeRTOS/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  37:FreeRTOS/tasks.c **** 
  38:FreeRTOS/tasks.c **** /* FreeRTOS includes. */
  39:FreeRTOS/tasks.c **** #include "FreeRTOS.h"
  40:FreeRTOS/tasks.c **** #include "task.h"
  41:FreeRTOS/tasks.c **** #include "timers.h"
  42:FreeRTOS/tasks.c **** #include "stack_macros.h"
  43:FreeRTOS/tasks.c **** 
  44:FreeRTOS/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  45:FreeRTOS/tasks.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  46:FreeRTOS/tasks.c ****  * for the header files above, but not in this file, in order to generate the
  47:FreeRTOS/tasks.c ****  * correct privileged Vs unprivileged linkage and placement. */
  48:FreeRTOS/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  49:FreeRTOS/tasks.c **** 
  50:FreeRTOS/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  51:FreeRTOS/tasks.c ****  * functions but without including stdio.h here. */
  52:FreeRTOS/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  53:FreeRTOS/tasks.c **** 
  54:FreeRTOS/tasks.c **** /* At the bottom of this file are two optional functions that can be used
  55:FreeRTOS/tasks.c ****  * to generate human readable text from the raw data generated by the
  56:FreeRTOS/tasks.c ****  * uxTaskGetSystemState() function.  Note the formatting functions are provided
  57:FreeRTOS/tasks.c ****  * for convenience only, and are NOT considered part of the kernel. */
  58:FreeRTOS/tasks.c ****     #include <stdio.h>
  59:FreeRTOS/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  60:FreeRTOS/tasks.c **** 
  61:FreeRTOS/tasks.c **** #if ( configUSE_PREEMPTION == 0 )
  62:FreeRTOS/tasks.c **** 
  63:FreeRTOS/tasks.c **** /* If the cooperative scheduler is being used then a yield should not be
  64:FreeRTOS/tasks.c ****  * performed just because a higher priority task has been woken. */
  65:FreeRTOS/tasks.c ****     #define taskYIELD_IF_USING_PREEMPTION()
  66:FreeRTOS/tasks.c **** #else
  67:FreeRTOS/tasks.c ****     #define taskYIELD_IF_USING_PREEMPTION()    portYIELD_WITHIN_API()
  68:FreeRTOS/tasks.c **** #endif
  69:FreeRTOS/tasks.c **** 
  70:FreeRTOS/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  71:FreeRTOS/tasks.c **** #define taskNOT_WAITING_NOTIFICATION              ( ( uint8_t ) 0 ) /* Must be zero as it is the in
  72:FreeRTOS/tasks.c **** #define taskWAITING_NOTIFICATION                  ( ( uint8_t ) 1 )
  73:FreeRTOS/tasks.c **** #define taskNOTIFICATION_RECEIVED                 ( ( uint8_t ) 2 )
  74:FreeRTOS/tasks.c **** 
  75:FreeRTOS/tasks.c **** /*
  76:FreeRTOS/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  77:FreeRTOS/tasks.c ****  * is used purely for checking the high water mark for tasks.
  78:FreeRTOS/tasks.c ****  */
  79:FreeRTOS/tasks.c **** #define tskSTACK_FILL_BYTE                        ( 0xa5U )
  80:FreeRTOS/tasks.c **** 
  81:FreeRTOS/tasks.c **** /* Bits used to record how a task's stack and TCB were allocated. */
  82:FreeRTOS/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB    ( ( uint8_t ) 0 )
  83:FreeRTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY        ( ( uint8_t ) 1 )
  84:FreeRTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB     ( ( uint8_t ) 2 )
  85:FreeRTOS/tasks.c **** 
  86:FreeRTOS/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  87:FreeRTOS/tasks.c ****  * value so the high water mark can be determined.  If none of the following are
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 3


  88:FreeRTOS/tasks.c ****  * set then don't fill the stack so there is no unnecessary dependency on memset. */
  89:FreeRTOS/tasks.c **** #if ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
  90:FreeRTOS/tasks.c ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    1
  91:FreeRTOS/tasks.c **** #else
  92:FreeRTOS/tasks.c ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    0
  93:FreeRTOS/tasks.c **** #endif
  94:FreeRTOS/tasks.c **** 
  95:FreeRTOS/tasks.c **** /*
  96:FreeRTOS/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  97:FreeRTOS/tasks.c ****  */
  98:FreeRTOS/tasks.c **** #define tskRUNNING_CHAR      ( 'X' )
  99:FreeRTOS/tasks.c **** #define tskBLOCKED_CHAR      ( 'B' )
 100:FreeRTOS/tasks.c **** #define tskREADY_CHAR        ( 'R' )
 101:FreeRTOS/tasks.c **** #define tskDELETED_CHAR      ( 'D' )
 102:FreeRTOS/tasks.c **** #define tskSUSPENDED_CHAR    ( 'S' )
 103:FreeRTOS/tasks.c **** 
 104:FreeRTOS/tasks.c **** /*
 105:FreeRTOS/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to to
 106:FreeRTOS/tasks.c ****  * be global, rather than file scope.
 107:FreeRTOS/tasks.c ****  */
 108:FreeRTOS/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 109:FreeRTOS/tasks.c ****     #define static
 110:FreeRTOS/tasks.c **** #endif
 111:FreeRTOS/tasks.c **** 
 112:FreeRTOS/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 113:FreeRTOS/tasks.c ****  * configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 114:FreeRTOS/tasks.c **** #ifndef configIDLE_TASK_NAME
 115:FreeRTOS/tasks.c ****     #define configIDLE_TASK_NAME    "IDLE"
 116:FreeRTOS/tasks.c **** #endif
 117:FreeRTOS/tasks.c **** 
 118:FreeRTOS/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 119:FreeRTOS/tasks.c **** 
 120:FreeRTOS/tasks.c **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 121:FreeRTOS/tasks.c ****  * performed in a generic way that is not optimised to any particular
 122:FreeRTOS/tasks.c ****  * microcontroller architecture. */
 123:FreeRTOS/tasks.c **** 
 124:FreeRTOS/tasks.c **** /* uxTopReadyPriority holds the priority of the highest priority ready
 125:FreeRTOS/tasks.c ****  * state task. */
 126:FreeRTOS/tasks.c ****     #define taskRECORD_READY_PRIORITY( uxPriority ) \
 127:FreeRTOS/tasks.c ****     {                                               \
 128:FreeRTOS/tasks.c ****         if( ( uxPriority ) > uxTopReadyPriority )   \
 129:FreeRTOS/tasks.c ****         {                                           \
 130:FreeRTOS/tasks.c ****             uxTopReadyPriority = ( uxPriority );    \
 131:FreeRTOS/tasks.c ****         }                                           \
 132:FreeRTOS/tasks.c ****     } /* taskRECORD_READY_PRIORITY */
 133:FreeRTOS/tasks.c **** 
 134:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 135:FreeRTOS/tasks.c **** 
 136:FreeRTOS/tasks.c ****     #define taskSELECT_HIGHEST_PRIORITY_TASK()                                \
 137:FreeRTOS/tasks.c ****     {                                                                         \
 138:FreeRTOS/tasks.c ****         UBaseType_t uxTopPriority = uxTopReadyPriority;                       \
 139:FreeRTOS/tasks.c ****                                                                               \
 140:FreeRTOS/tasks.c ****         /* Find the highest priority queue that contains ready tasks. */      \
 141:FreeRTOS/tasks.c ****         while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) ) \
 142:FreeRTOS/tasks.c ****         {                                                                     \
 143:FreeRTOS/tasks.c ****             configASSERT( uxTopPriority );                                    \
 144:FreeRTOS/tasks.c ****             --uxTopPriority;                                                  \
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 4


 145:FreeRTOS/tasks.c ****         }                                                                     \
 146:FreeRTOS/tasks.c ****                                                                               \
 147:FreeRTOS/tasks.c ****         /* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of \
 148:FreeRTOS/tasks.c ****          * the  same priority get an equal share of the processor time. */                    \
 149:FreeRTOS/tasks.c ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) ); \
 150:FreeRTOS/tasks.c ****         uxTopReadyPriority = uxTopPriority;                                                   \
 151:FreeRTOS/tasks.c ****     } /* taskSELECT_HIGHEST_PRIORITY_TASK */
 152:FreeRTOS/tasks.c **** 
 153:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 154:FreeRTOS/tasks.c **** 
 155:FreeRTOS/tasks.c **** /* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 156:FreeRTOS/tasks.c ****  * they are only required when a port optimised method of task selection is
 157:FreeRTOS/tasks.c ****  * being used. */
 158:FreeRTOS/tasks.c ****     #define taskRESET_READY_PRIORITY( uxPriority )
 159:FreeRTOS/tasks.c ****     #define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 160:FreeRTOS/tasks.c **** 
 161:FreeRTOS/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 162:FreeRTOS/tasks.c **** 
 163:FreeRTOS/tasks.c **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 164:FreeRTOS/tasks.c ****  * performed in a way that is tailored to the particular microcontroller
 165:FreeRTOS/tasks.c ****  * architecture being used. */
 166:FreeRTOS/tasks.c **** 
 167:FreeRTOS/tasks.c **** /* A port optimised version is provided.  Call the port defined macros. */
 168:FreeRTOS/tasks.c ****     #define taskRECORD_READY_PRIORITY( uxPriority )    portRECORD_READY_PRIORITY( uxPriority, uxTop
 169:FreeRTOS/tasks.c **** 
 170:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 171:FreeRTOS/tasks.c **** 
 172:FreeRTOS/tasks.c ****     #define taskSELECT_HIGHEST_PRIORITY_TASK()                                                  \
 173:FreeRTOS/tasks.c ****     {                                                                                           \
 174:FreeRTOS/tasks.c ****         UBaseType_t uxTopPriority;                                                              \
 175:FreeRTOS/tasks.c ****                                                                                                 \
 176:FreeRTOS/tasks.c ****         /* Find the highest priority list that contains ready tasks. */                         \
 177:FreeRTOS/tasks.c ****         portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );                          \
 178:FreeRTOS/tasks.c ****         configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 ); \
 179:FreeRTOS/tasks.c ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );   \
 180:FreeRTOS/tasks.c ****     } /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 181:FreeRTOS/tasks.c **** 
 182:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 183:FreeRTOS/tasks.c **** 
 184:FreeRTOS/tasks.c **** /* A port optimised version is provided, call it only if the TCB being reset
 185:FreeRTOS/tasks.c ****  * is being referenced from a ready list.  If it is referenced from a delayed
 186:FreeRTOS/tasks.c ****  * or suspended list then it won't be in a ready list. */
 187:FreeRTOS/tasks.c ****     #define taskRESET_READY_PRIORITY( uxPriority )                                                 
 188:FreeRTOS/tasks.c ****     {                                                                                              
 189:FreeRTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 
 190:FreeRTOS/tasks.c ****         {                                                                                          
 191:FreeRTOS/tasks.c ****             portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );                    
 192:FreeRTOS/tasks.c ****         }                                                                                          
 193:FreeRTOS/tasks.c ****     }
 194:FreeRTOS/tasks.c **** 
 195:FreeRTOS/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 196:FreeRTOS/tasks.c **** 
 197:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 198:FreeRTOS/tasks.c **** 
 199:FreeRTOS/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 200:FreeRTOS/tasks.c ****  * count overflows. */
 201:FreeRTOS/tasks.c **** #define taskSWITCH_DELAYED_LISTS()                                                \
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 5


 202:FreeRTOS/tasks.c ****     {                                                                             \
 203:FreeRTOS/tasks.c ****         List_t * pxTemp;                                                          \
 204:FreeRTOS/tasks.c ****                                                                                   \
 205:FreeRTOS/tasks.c ****         /* The delayed tasks list should be empty when the lists are switched. */ \
 206:FreeRTOS/tasks.c ****         configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );               \
 207:FreeRTOS/tasks.c ****                                                                                   \
 208:FreeRTOS/tasks.c ****         pxTemp = pxDelayedTaskList;                                               \
 209:FreeRTOS/tasks.c ****         pxDelayedTaskList = pxOverflowDelayedTaskList;                            \
 210:FreeRTOS/tasks.c ****         pxOverflowDelayedTaskList = pxTemp;                                       \
 211:FreeRTOS/tasks.c ****         xNumOfOverflows++;                                                        \
 212:FreeRTOS/tasks.c ****         prvResetNextTaskUnblockTime();                                            \
 213:FreeRTOS/tasks.c ****     }
 214:FreeRTOS/tasks.c **** 
 215:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 216:FreeRTOS/tasks.c **** 
 217:FreeRTOS/tasks.c **** /*
 218:FreeRTOS/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 219:FreeRTOS/tasks.c ****  * the task.  It is inserted at the end of the list.
 220:FreeRTOS/tasks.c ****  */
 221:FreeRTOS/tasks.c **** #define prvAddTaskToReadyList( pxTCB )                                                             
 222:FreeRTOS/tasks.c ****     traceMOVED_TASK_TO_READY_STATE( pxTCB );                                                       
 223:FreeRTOS/tasks.c ****     taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );                                            
 224:FreeRTOS/tasks.c ****     listINSERT_END( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem )
 225:FreeRTOS/tasks.c ****     tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 226:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 227:FreeRTOS/tasks.c **** 
 228:FreeRTOS/tasks.c **** /*
 229:FreeRTOS/tasks.c ****  * Several functions take a TaskHandle_t parameter that can optionally be NULL,
 230:FreeRTOS/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 231:FreeRTOS/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 232:FreeRTOS/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 233:FreeRTOS/tasks.c ****  */
 234:FreeRTOS/tasks.c **** #define prvGetTCBFromHandle( pxHandle )    ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle )
 235:FreeRTOS/tasks.c **** 
 236:FreeRTOS/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 237:FreeRTOS/tasks.c ****  * of the task to which it belongs (coded to allow it to be held in reverse
 238:FreeRTOS/tasks.c ****  * priority order).  However, it is occasionally borrowed for other purposes.  It
 239:FreeRTOS/tasks.c ****  * is important its value is not updated due to a task priority change while it is
 240:FreeRTOS/tasks.c ****  * being used for another purpose.  The following bit definition is used to inform
 241:FreeRTOS/tasks.c ****  * the scheduler that the value should not be changed - in which case it is the
 242:FreeRTOS/tasks.c ****  * responsibility of whichever module is using the value to ensure it gets set back
 243:FreeRTOS/tasks.c ****  * to its original value when it is released. */
 244:FreeRTOS/tasks.c **** #if ( configUSE_16_BIT_TICKS == 1 )
 245:FreeRTOS/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    0x8000U
 246:FreeRTOS/tasks.c **** #else
 247:FreeRTOS/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    0x80000000UL
 248:FreeRTOS/tasks.c **** #endif
 249:FreeRTOS/tasks.c **** 
 250:FreeRTOS/tasks.c **** /*
 251:FreeRTOS/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 252:FreeRTOS/tasks.c ****  * and stores task state information, including a pointer to the task's context
 253:FreeRTOS/tasks.c ****  * (the task's run time environment, including register values)
 254:FreeRTOS/tasks.c ****  */
 255:FreeRTOS/tasks.c **** typedef struct tskTaskControlBlock       /* The old naming convention is used to prevent breaking k
 256:FreeRTOS/tasks.c **** {
 257:FreeRTOS/tasks.c ****     volatile StackType_t * pxTopOfStack; /*< Points to the location of the last item placed on the 
 258:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 6


 259:FreeRTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 260:FreeRTOS/tasks.c ****         xMPU_SETTINGS xMPUSettings; /*< The MPU settings are defined as part of the port layer.  TH
 261:FreeRTOS/tasks.c ****     #endif
 262:FreeRTOS/tasks.c **** 
 263:FreeRTOS/tasks.c ****     ListItem_t xStateListItem;                  /*< The list that the state list item of a task is 
 264:FreeRTOS/tasks.c ****     ListItem_t xEventListItem;                  /*< Used to reference a task from an event list. */
 265:FreeRTOS/tasks.c ****     UBaseType_t uxPriority;                     /*< The priority of the task.  0 is the lowest prio
 266:FreeRTOS/tasks.c ****     StackType_t * pxStack;                      /*< Points to the start of the stack. */
 267:FreeRTOS/tasks.c ****     char pcTaskName[ configMAX_TASK_NAME_LEN ]; /*< Descriptive name given to the task when created
 268:FreeRTOS/tasks.c **** 
 269:FreeRTOS/tasks.c ****     #if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 270:FreeRTOS/tasks.c ****         StackType_t * pxEndOfStack; /*< Points to the highest valid address for the stack. */
 271:FreeRTOS/tasks.c ****     #endif
 272:FreeRTOS/tasks.c **** 
 273:FreeRTOS/tasks.c ****     #if ( portCRITICAL_NESTING_IN_TCB == 1 )
 274:FreeRTOS/tasks.c ****         UBaseType_t uxCriticalNesting; /*< Holds the critical section nesting depth for ports that 
 275:FreeRTOS/tasks.c ****     #endif
 276:FreeRTOS/tasks.c **** 
 277:FreeRTOS/tasks.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 278:FreeRTOS/tasks.c ****         UBaseType_t uxTCBNumber;  /*< Stores a number that increments each time a TCB is created.  
 279:FreeRTOS/tasks.c ****         UBaseType_t uxTaskNumber; /*< Stores a number specifically for use by third party trace cod
 280:FreeRTOS/tasks.c ****     #endif
 281:FreeRTOS/tasks.c **** 
 282:FreeRTOS/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 283:FreeRTOS/tasks.c ****         UBaseType_t uxBasePriority; /*< The priority last assigned to the task - used by the priori
 284:FreeRTOS/tasks.c ****         UBaseType_t uxMutexesHeld;
 285:FreeRTOS/tasks.c ****     #endif
 286:FreeRTOS/tasks.c **** 
 287:FreeRTOS/tasks.c ****     #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 288:FreeRTOS/tasks.c ****         TaskHookFunction_t pxTaskTag;
 289:FreeRTOS/tasks.c ****     #endif
 290:FreeRTOS/tasks.c **** 
 291:FreeRTOS/tasks.c ****     #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 292:FreeRTOS/tasks.c ****         void * pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 293:FreeRTOS/tasks.c ****     #endif
 294:FreeRTOS/tasks.c **** 
 295:FreeRTOS/tasks.c ****     #if ( configGENERATE_RUN_TIME_STATS == 1 )
 296:FreeRTOS/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulRunTimeCounter; /*< Stores the amount of time the task has sp
 297:FreeRTOS/tasks.c ****     #endif
 298:FreeRTOS/tasks.c **** 
 299:FreeRTOS/tasks.c ****     #if ( configUSE_NEWLIB_REENTRANT == 1 )
 300:FreeRTOS/tasks.c **** 
 301:FreeRTOS/tasks.c ****         /* Allocate a Newlib reent structure that is specific to this task.
 302:FreeRTOS/tasks.c ****          * Note Newlib support has been included by popular demand, but is not
 303:FreeRTOS/tasks.c ****          * used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 304:FreeRTOS/tasks.c ****          * responsible for resulting newlib operation.  User must be familiar with
 305:FreeRTOS/tasks.c ****          * newlib and must provide system-wide implementations of the necessary
 306:FreeRTOS/tasks.c ****          * stubs. Be warned that (at the time of writing) the current newlib design
 307:FreeRTOS/tasks.c ****          * implements a system-wide malloc() that must be provided with locks.
 308:FreeRTOS/tasks.c ****          *
 309:FreeRTOS/tasks.c ****          * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 310:FreeRTOS/tasks.c ****          * for additional information. */
 311:FreeRTOS/tasks.c ****         struct  _reent xNewLib_reent;
 312:FreeRTOS/tasks.c ****     #endif
 313:FreeRTOS/tasks.c **** 
 314:FreeRTOS/tasks.c ****     #if ( configUSE_TASK_NOTIFICATIONS == 1 )
 315:FreeRTOS/tasks.c ****         volatile uint32_t ulNotifiedValue[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 7


 316:FreeRTOS/tasks.c ****         volatile uint8_t ucNotifyState[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
 317:FreeRTOS/tasks.c ****     #endif
 318:FreeRTOS/tasks.c **** 
 319:FreeRTOS/tasks.c ****     /* See the comments in FreeRTOS.h with the definition of
 320:FreeRTOS/tasks.c ****      * tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 321:FreeRTOS/tasks.c ****     #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been conso
 322:FreeRTOS/tasks.c ****         uint8_t ucStaticallyAllocated;                     /*< Set to pdTRUE if the task is a stati
 323:FreeRTOS/tasks.c ****     #endif
 324:FreeRTOS/tasks.c **** 
 325:FreeRTOS/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
 326:FreeRTOS/tasks.c ****         uint8_t ucDelayAborted;
 327:FreeRTOS/tasks.c ****     #endif
 328:FreeRTOS/tasks.c **** 
 329:FreeRTOS/tasks.c ****     #if ( configUSE_POSIX_ERRNO == 1 )
 330:FreeRTOS/tasks.c ****         int iTaskErrno;
 331:FreeRTOS/tasks.c ****     #endif
 332:FreeRTOS/tasks.c **** } tskTCB;
 333:FreeRTOS/tasks.c **** 
 334:FreeRTOS/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 335:FreeRTOS/tasks.c ****  * below to enable the use of older kernel aware debuggers. */
 336:FreeRTOS/tasks.c **** typedef tskTCB TCB_t;
 337:FreeRTOS/tasks.c **** 
 338:FreeRTOS/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 339:FreeRTOS/tasks.c ****  * which static variables must be declared volatile. */
 340:FreeRTOS/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 341:FreeRTOS/tasks.c **** 
 342:FreeRTOS/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 343:FreeRTOS/tasks.c ****  * xDelayedTaskList1 and xDelayedTaskList2 could be moved to function scope but
 344:FreeRTOS/tasks.c ****  * doing so breaks some kernel aware debuggers and debuggers that rely on removing
 345:FreeRTOS/tasks.c ****  * the static qualifier. */
 346:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ]; /*< Prioritised ready task
 347:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;                         /*< Delayed tasks. */
 348:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;                         /*< Delayed tasks (two lis
 349:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;              /*< Points to the delayed 
 350:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;      /*< Points to the delayed 
 351:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;                         /*< Tasks that have been r
 352:FreeRTOS/tasks.c **** 
 353:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 354:FreeRTOS/tasks.c **** 
 355:FreeRTOS/tasks.c ****     PRIVILEGED_DATA static List_t xTasksWaitingTermination; /*< Tasks that have been deleted - but 
 356:FreeRTOS/tasks.c ****     PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 357:FreeRTOS/tasks.c **** 
 358:FreeRTOS/tasks.c **** #endif
 359:FreeRTOS/tasks.c **** 
 360:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 361:FreeRTOS/tasks.c **** 
 362:FreeRTOS/tasks.c ****     PRIVILEGED_DATA static List_t xSuspendedTaskList; /*< Tasks that are currently suspended. */
 363:FreeRTOS/tasks.c **** 
 364:FreeRTOS/tasks.c **** #endif
 365:FreeRTOS/tasks.c **** 
 366:FreeRTOS/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 367:FreeRTOS/tasks.c ****  * the errno of the currently running task. */
 368:FreeRTOS/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 369:FreeRTOS/tasks.c ****     int FreeRTOS_errno = 0;
 370:FreeRTOS/tasks.c **** #endif
 371:FreeRTOS/tasks.c **** 
 372:FreeRTOS/tasks.c **** /* Other file private variables. --------------------------------*/
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 8


 373:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks = ( UBaseType_t ) 0U;
 374:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 375:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority = tskIDLE_PRIORITY;
 376:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning = pdFALSE;
 377:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks = ( TickType_t ) 0U;
 378:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending = pdFALSE;
 379:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows = ( BaseType_t ) 0;
 380:FreeRTOS/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber = ( UBaseType_t ) 0U;
 381:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime = ( TickType_t ) 0U; /* Initialised
 382:FreeRTOS/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle = NULL;                          /*< Holds the 
 383:FreeRTOS/tasks.c **** 
 384:FreeRTOS/tasks.c **** /* Improve support for OpenOCD. The kernel tracks Ready tasks via priority lists.
 385:FreeRTOS/tasks.c ****  * For tracking the state of remote threads, OpenOCD uses uxTopUsedPriority
 386:FreeRTOS/tasks.c ****  * to determine the number of priority lists to read back from the remote target. */
 387:FreeRTOS/tasks.c **** const volatile UBaseType_t uxTopUsedPriority = configMAX_PRIORITIES - 1U;
 388:FreeRTOS/tasks.c **** 
 389:FreeRTOS/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 390:FreeRTOS/tasks.c ****  * interrupts must not manipulate the xStateListItem of a TCB, or any of the
 391:FreeRTOS/tasks.c ****  * lists the xStateListItem can be referenced from, if the scheduler is suspended.
 392:FreeRTOS/tasks.c ****  * If an interrupt needs to unblock a task while the scheduler is suspended then it
 393:FreeRTOS/tasks.c ****  * moves the task's event list item into the xPendingReadyList, ready for the
 394:FreeRTOS/tasks.c ****  * kernel to move the task from the pending ready list into the real ready list
 395:FreeRTOS/tasks.c ****  * when the scheduler is unsuspended.  The pending ready list itself can only be
 396:FreeRTOS/tasks.c ****  * accessed from a critical section. */
 397:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended = ( UBaseType_t ) pdFALSE;
 398:FreeRTOS/tasks.c **** 
 399:FreeRTOS/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 400:FreeRTOS/tasks.c **** 
 401:FreeRTOS/tasks.c **** /* Do not move these variables to function scope as doing so prevents the
 402:FreeRTOS/tasks.c ****  * code working with debuggers that need to remove the static qualifier. */
 403:FreeRTOS/tasks.c ****     PRIVILEGED_DATA static configRUN_TIME_COUNTER_TYPE ulTaskSwitchedInTime = 0UL;    /*< Holds the
 404:FreeRTOS/tasks.c ****     PRIVILEGED_DATA static volatile configRUN_TIME_COUNTER_TYPE ulTotalRunTime = 0UL; /*< Holds the
 405:FreeRTOS/tasks.c **** 
 406:FreeRTOS/tasks.c **** #endif
 407:FreeRTOS/tasks.c **** 
 408:FreeRTOS/tasks.c **** /*lint -restore */
 409:FreeRTOS/tasks.c **** 
 410:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 411:FreeRTOS/tasks.c **** 
 412:FreeRTOS/tasks.c **** /* File private functions. --------------------------------*/
 413:FreeRTOS/tasks.c **** 
 414:FreeRTOS/tasks.c **** /**
 415:FreeRTOS/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 416:FreeRTOS/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 417:FreeRTOS/tasks.c ****  * is in any other state.
 418:FreeRTOS/tasks.c ****  */
 419:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 420:FreeRTOS/tasks.c **** 
 421:FreeRTOS/tasks.c ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 422:FreeRTOS/tasks.c **** 
 423:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 424:FreeRTOS/tasks.c **** 
 425:FreeRTOS/tasks.c **** /*
 426:FreeRTOS/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 427:FreeRTOS/tasks.c ****  * automatically upon the creation of the first task.
 428:FreeRTOS/tasks.c ****  */
 429:FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 9


 430:FreeRTOS/tasks.c **** 
 431:FreeRTOS/tasks.c **** /*
 432:FreeRTOS/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 433:FreeRTOS/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 434:FreeRTOS/tasks.c ****  * creation of the first user task.
 435:FreeRTOS/tasks.c ****  *
 436:FreeRTOS/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 437:FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 438:FreeRTOS/tasks.c ****  *
 439:FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
 440:FreeRTOS/tasks.c ****  *
 441:FreeRTOS/tasks.c ****  */
 442:FreeRTOS/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters ) PRIVILEGED_FUNCTION;
 443:FreeRTOS/tasks.c **** 
 444:FreeRTOS/tasks.c **** /*
 445:FreeRTOS/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 446:FreeRTOS/tasks.c ****  * including the stack pointed to by the TCB.
 447:FreeRTOS/tasks.c ****  *
 448:FreeRTOS/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 449:FreeRTOS/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 450:FreeRTOS/tasks.c ****  */
 451:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 452:FreeRTOS/tasks.c **** 
 453:FreeRTOS/tasks.c ****     static void prvDeleteTCB( TCB_t * pxTCB ) PRIVILEGED_FUNCTION;
 454:FreeRTOS/tasks.c **** 
 455:FreeRTOS/tasks.c **** #endif
 456:FreeRTOS/tasks.c **** 
 457:FreeRTOS/tasks.c **** /*
 458:FreeRTOS/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 459:FreeRTOS/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 460:FreeRTOS/tasks.c ****  * and its TCB deleted.
 461:FreeRTOS/tasks.c ****  */
 462:FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 463:FreeRTOS/tasks.c **** 
 464:FreeRTOS/tasks.c **** /*
 465:FreeRTOS/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 466:FreeRTOS/tasks.c ****  * either the current or the overflow delayed task list.
 467:FreeRTOS/tasks.c ****  */
 468:FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
 469:FreeRTOS/tasks.c ****                                             const BaseType_t xCanBlockIndefinitely ) PRIVILEGED_FUN
 470:FreeRTOS/tasks.c **** 
 471:FreeRTOS/tasks.c **** /*
 472:FreeRTOS/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 473:FreeRTOS/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 474:FreeRTOS/tasks.c ****  * a suspended list, etc.).
 475:FreeRTOS/tasks.c ****  *
 476:FreeRTOS/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 477:FreeRTOS/tasks.c ****  * NORMAL APPLICATION CODE.
 478:FreeRTOS/tasks.c ****  */
 479:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 480:FreeRTOS/tasks.c **** 
 481:FreeRTOS/tasks.c ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
 482:FreeRTOS/tasks.c ****                                                      List_t * pxList,
 483:FreeRTOS/tasks.c ****                                                      eTaskState eState ) PRIVILEGED_FUNCTION;
 484:FreeRTOS/tasks.c **** 
 485:FreeRTOS/tasks.c **** #endif
 486:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 10


 487:FreeRTOS/tasks.c **** /*
 488:FreeRTOS/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 489:FreeRTOS/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 490:FreeRTOS/tasks.c ****  */
 491:FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 492:FreeRTOS/tasks.c **** 
 493:FreeRTOS/tasks.c ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
 494:FreeRTOS/tasks.c ****                                                      const char pcNameToQuery[] ) PRIVILEGED_FUNCTI
 495:FreeRTOS/tasks.c **** 
 496:FreeRTOS/tasks.c **** #endif
 497:FreeRTOS/tasks.c **** 
 498:FreeRTOS/tasks.c **** /*
 499:FreeRTOS/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 500:FreeRTOS/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 501:FreeRTOS/tasks.c ****  * determining how much of the stack remains at the original preset value.
 502:FreeRTOS/tasks.c ****  */
 503:FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 504:FreeRTOS/tasks.c **** 
 505:FreeRTOS/tasks.c ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVIL
 506:FreeRTOS/tasks.c **** 
 507:FreeRTOS/tasks.c **** #endif
 508:FreeRTOS/tasks.c **** 
 509:FreeRTOS/tasks.c **** /*
 510:FreeRTOS/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 511:FreeRTOS/tasks.c ****  * next move a task from the Blocked state to the Running state.
 512:FreeRTOS/tasks.c ****  *
 513:FreeRTOS/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 514:FreeRTOS/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 515:FreeRTOS/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 516:FreeRTOS/tasks.c ****  * set to a value other than 1.
 517:FreeRTOS/tasks.c ****  */
 518:FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 519:FreeRTOS/tasks.c **** 
 520:FreeRTOS/tasks.c ****     static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 521:FreeRTOS/tasks.c **** 
 522:FreeRTOS/tasks.c **** #endif
 523:FreeRTOS/tasks.c **** 
 524:FreeRTOS/tasks.c **** /*
 525:FreeRTOS/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 526:FreeRTOS/tasks.c ****  * will exit the Blocked state.
 527:FreeRTOS/tasks.c ****  */
 528:FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void ) PRIVILEGED_FUNCTION;
 529:FreeRTOS/tasks.c **** 
 530:FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 531:FreeRTOS/tasks.c **** 
 532:FreeRTOS/tasks.c **** /*
 533:FreeRTOS/tasks.c ****  * Helper function used to pad task names with spaces when printing out
 534:FreeRTOS/tasks.c ****  * human readable tables of task information.
 535:FreeRTOS/tasks.c ****  */
 536:FreeRTOS/tasks.c ****     static char * prvWriteNameToBuffer( char * pcBuffer,
 537:FreeRTOS/tasks.c ****                                         const char * pcTaskName ) PRIVILEGED_FUNCTION;
 538:FreeRTOS/tasks.c **** 
 539:FreeRTOS/tasks.c **** #endif
 540:FreeRTOS/tasks.c **** 
 541:FreeRTOS/tasks.c **** /*
 542:FreeRTOS/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 543:FreeRTOS/tasks.c ****  * dynamically to fill in the structure's members.
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 11


 544:FreeRTOS/tasks.c ****  */
 545:FreeRTOS/tasks.c **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 546:FreeRTOS/tasks.c ****                                   const char * const pcName, /*lint !e971 Unqualified char types ar
 547:FreeRTOS/tasks.c ****                                   const uint32_t ulStackDepth,
 548:FreeRTOS/tasks.c ****                                   void * const pvParameters,
 549:FreeRTOS/tasks.c ****                                   UBaseType_t uxPriority,
 550:FreeRTOS/tasks.c ****                                   TaskHandle_t * const pxCreatedTask,
 551:FreeRTOS/tasks.c ****                                   TCB_t * pxNewTCB,
 552:FreeRTOS/tasks.c ****                                   const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 553:FreeRTOS/tasks.c **** 
 554:FreeRTOS/tasks.c **** /*
 555:FreeRTOS/tasks.c ****  * Called after a new task has been created and initialised to place the task
 556:FreeRTOS/tasks.c ****  * under the control of the scheduler.
 557:FreeRTOS/tasks.c ****  */
 558:FreeRTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB ) PRIVILEGED_FUNCTION;
 559:FreeRTOS/tasks.c **** 
 560:FreeRTOS/tasks.c **** /*
 561:FreeRTOS/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 562:FreeRTOS/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 563:FreeRTOS/tasks.c ****  * called by the function.
 564:FreeRTOS/tasks.c ****  */
 565:FreeRTOS/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 566:FreeRTOS/tasks.c **** 
 567:FreeRTOS/tasks.c ****     static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 568:FreeRTOS/tasks.c **** 
 569:FreeRTOS/tasks.c **** #endif
 570:FreeRTOS/tasks.c **** 
 571:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 572:FreeRTOS/tasks.c **** 
 573:FreeRTOS/tasks.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 574:FreeRTOS/tasks.c **** 
 575:FreeRTOS/tasks.c ****     TaskHandle_t xTaskCreateStatic( TaskFunction_t pxTaskCode,
 576:FreeRTOS/tasks.c ****                                     const char * const pcName, /*lint !e971 Unqualified char types 
 577:FreeRTOS/tasks.c ****                                     const uint32_t ulStackDepth,
 578:FreeRTOS/tasks.c ****                                     void * const pvParameters,
 579:FreeRTOS/tasks.c ****                                     UBaseType_t uxPriority,
 580:FreeRTOS/tasks.c ****                                     StackType_t * const puxStackBuffer,
 581:FreeRTOS/tasks.c ****                                     StaticTask_t * const pxTaskBuffer )
 582:FreeRTOS/tasks.c ****     {
 583:FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 584:FreeRTOS/tasks.c ****         TaskHandle_t xReturn;
 585:FreeRTOS/tasks.c **** 
 586:FreeRTOS/tasks.c ****         configASSERT( puxStackBuffer != NULL );
 587:FreeRTOS/tasks.c ****         configASSERT( pxTaskBuffer != NULL );
 588:FreeRTOS/tasks.c **** 
 589:FreeRTOS/tasks.c ****         #if ( configASSERT_DEFINED == 1 )
 590:FreeRTOS/tasks.c ****             {
 591:FreeRTOS/tasks.c ****                 /* Sanity check that the size of the structure used to declare a
 592:FreeRTOS/tasks.c ****                  * variable of type StaticTask_t equals the size of the real task
 593:FreeRTOS/tasks.c ****                  * structure. */
 594:FreeRTOS/tasks.c ****                 volatile size_t xSize = sizeof( StaticTask_t );
 595:FreeRTOS/tasks.c ****                 configASSERT( xSize == sizeof( TCB_t ) );
 596:FreeRTOS/tasks.c ****                 ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 597:FreeRTOS/tasks.c ****             }
 598:FreeRTOS/tasks.c ****         #endif /* configASSERT_DEFINED */
 599:FreeRTOS/tasks.c **** 
 600:FreeRTOS/tasks.c ****         if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 12


 601:FreeRTOS/tasks.c ****         {
 602:FreeRTOS/tasks.c ****             /* The memory used for the task's TCB and stack are passed into this
 603:FreeRTOS/tasks.c ****              * function - use them. */
 604:FreeRTOS/tasks.c ****             pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the stru
 605:FreeRTOS/tasks.c ****             pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 606:FreeRTOS/tasks.c **** 
 607:FreeRTOS/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has be
 608:FreeRTOS/tasks.c ****                 {
 609:FreeRTOS/tasks.c ****                     /* Tasks can be created statically or dynamically, so note this
 610:FreeRTOS/tasks.c ****                      * task was created statically in case the task is later deleted. */
 611:FreeRTOS/tasks.c ****                     pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 612:FreeRTOS/tasks.c ****                 }
 613:FreeRTOS/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 614:FreeRTOS/tasks.c **** 
 615:FreeRTOS/tasks.c ****             prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xRet
 616:FreeRTOS/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 617:FreeRTOS/tasks.c ****         }
 618:FreeRTOS/tasks.c ****         else
 619:FreeRTOS/tasks.c ****         {
 620:FreeRTOS/tasks.c ****             xReturn = NULL;
 621:FreeRTOS/tasks.c ****         }
 622:FreeRTOS/tasks.c **** 
 623:FreeRTOS/tasks.c ****         return xReturn;
 624:FreeRTOS/tasks.c ****     }
 625:FreeRTOS/tasks.c **** 
 626:FreeRTOS/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 627:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 628:FreeRTOS/tasks.c **** 
 629:FreeRTOS/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 630:FreeRTOS/tasks.c **** 
 631:FreeRTOS/tasks.c ****     BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition,
 632:FreeRTOS/tasks.c ****                                             TaskHandle_t * pxCreatedTask )
 633:FreeRTOS/tasks.c ****     {
 634:FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 635:FreeRTOS/tasks.c ****         BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 636:FreeRTOS/tasks.c **** 
 637:FreeRTOS/tasks.c ****         configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 638:FreeRTOS/tasks.c ****         configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 639:FreeRTOS/tasks.c **** 
 640:FreeRTOS/tasks.c ****         if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NUL
 641:FreeRTOS/tasks.c ****         {
 642:FreeRTOS/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends
 643:FreeRTOS/tasks.c ****              * on the implementation of the port malloc function and whether or
 644:FreeRTOS/tasks.c ****              * not static allocation is being used. */
 645:FreeRTOS/tasks.c ****             pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 646:FreeRTOS/tasks.c **** 
 647:FreeRTOS/tasks.c ****             /* Store the stack location in the TCB. */
 648:FreeRTOS/tasks.c ****             pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 649:FreeRTOS/tasks.c **** 
 650:FreeRTOS/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 651:FreeRTOS/tasks.c ****                 {
 652:FreeRTOS/tasks.c ****                     /* Tasks can be created statically or dynamically, so note this
 653:FreeRTOS/tasks.c ****                      * task was created statically in case the task is later deleted. */
 654:FreeRTOS/tasks.c ****                     pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 655:FreeRTOS/tasks.c ****                 }
 656:FreeRTOS/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 657:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 13


 658:FreeRTOS/tasks.c ****             prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 659:FreeRTOS/tasks.c ****                                   pxTaskDefinition->pcName,
 660:FreeRTOS/tasks.c ****                                   ( uint32_t ) pxTaskDefinition->usStackDepth,
 661:FreeRTOS/tasks.c ****                                   pxTaskDefinition->pvParameters,
 662:FreeRTOS/tasks.c ****                                   pxTaskDefinition->uxPriority,
 663:FreeRTOS/tasks.c ****                                   pxCreatedTask, pxNewTCB,
 664:FreeRTOS/tasks.c ****                                   pxTaskDefinition->xRegions );
 665:FreeRTOS/tasks.c **** 
 666:FreeRTOS/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 667:FreeRTOS/tasks.c ****             xReturn = pdPASS;
 668:FreeRTOS/tasks.c ****         }
 669:FreeRTOS/tasks.c **** 
 670:FreeRTOS/tasks.c ****         return xReturn;
 671:FreeRTOS/tasks.c ****     }
 672:FreeRTOS/tasks.c **** 
 673:FreeRTOS/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 674:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 675:FreeRTOS/tasks.c **** 
 676:FreeRTOS/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 677:FreeRTOS/tasks.c **** 
 678:FreeRTOS/tasks.c ****     BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition,
 679:FreeRTOS/tasks.c ****                                       TaskHandle_t * pxCreatedTask )
 680:FreeRTOS/tasks.c ****     {
 681:FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 682:FreeRTOS/tasks.c ****         BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 683:FreeRTOS/tasks.c **** 
 684:FreeRTOS/tasks.c ****         configASSERT( pxTaskDefinition->puxStackBuffer );
 685:FreeRTOS/tasks.c **** 
 686:FreeRTOS/tasks.c ****         if( pxTaskDefinition->puxStackBuffer != NULL )
 687:FreeRTOS/tasks.c ****         {
 688:FreeRTOS/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends
 689:FreeRTOS/tasks.c ****              * on the implementation of the port malloc function and whether or
 690:FreeRTOS/tasks.c ****              * not static allocation is being used. */
 691:FreeRTOS/tasks.c ****             pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 692:FreeRTOS/tasks.c **** 
 693:FreeRTOS/tasks.c ****             if( pxNewTCB != NULL )
 694:FreeRTOS/tasks.c ****             {
 695:FreeRTOS/tasks.c ****                 /* Store the stack location in the TCB. */
 696:FreeRTOS/tasks.c ****                 pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 697:FreeRTOS/tasks.c **** 
 698:FreeRTOS/tasks.c ****                 #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 699:FreeRTOS/tasks.c ****                     {
 700:FreeRTOS/tasks.c ****                         /* Tasks can be created statically or dynamically, so note
 701:FreeRTOS/tasks.c ****                          * this task had a statically allocated stack in case it is
 702:FreeRTOS/tasks.c ****                          * later deleted.  The TCB was allocated dynamically. */
 703:FreeRTOS/tasks.c ****                         pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 704:FreeRTOS/tasks.c ****                     }
 705:FreeRTOS/tasks.c ****                 #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 706:FreeRTOS/tasks.c **** 
 707:FreeRTOS/tasks.c ****                 prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 708:FreeRTOS/tasks.c ****                                       pxTaskDefinition->pcName,
 709:FreeRTOS/tasks.c ****                                       ( uint32_t ) pxTaskDefinition->usStackDepth,
 710:FreeRTOS/tasks.c ****                                       pxTaskDefinition->pvParameters,
 711:FreeRTOS/tasks.c ****                                       pxTaskDefinition->uxPriority,
 712:FreeRTOS/tasks.c ****                                       pxCreatedTask, pxNewTCB,
 713:FreeRTOS/tasks.c ****                                       pxTaskDefinition->xRegions );
 714:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 14


 715:FreeRTOS/tasks.c ****                 prvAddNewTaskToReadyList( pxNewTCB );
 716:FreeRTOS/tasks.c ****                 xReturn = pdPASS;
 717:FreeRTOS/tasks.c ****             }
 718:FreeRTOS/tasks.c ****         }
 719:FreeRTOS/tasks.c **** 
 720:FreeRTOS/tasks.c ****         return xReturn;
 721:FreeRTOS/tasks.c ****     }
 722:FreeRTOS/tasks.c **** 
 723:FreeRTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 724:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 725:FreeRTOS/tasks.c **** 
 726:FreeRTOS/tasks.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 727:FreeRTOS/tasks.c **** 
 728:FreeRTOS/tasks.c ****     BaseType_t xTaskCreate( TaskFunction_t pxTaskCode,
 729:FreeRTOS/tasks.c ****                             const char * const pcName, /*lint !e971 Unqualified char types are allo
 730:FreeRTOS/tasks.c ****                             const configSTACK_DEPTH_TYPE usStackDepth,
 731:FreeRTOS/tasks.c ****                             void * const pvParameters,
 732:FreeRTOS/tasks.c ****                             UBaseType_t uxPriority,
 733:FreeRTOS/tasks.c ****                             TaskHandle_t * const pxCreatedTask )
 734:FreeRTOS/tasks.c ****     {
 735:FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 736:FreeRTOS/tasks.c ****         BaseType_t xReturn;
 737:FreeRTOS/tasks.c **** 
 738:FreeRTOS/tasks.c ****         /* If the stack grows down then allocate the stack then the TCB so the stack
 739:FreeRTOS/tasks.c ****          * does not grow into the TCB.  Likewise if the stack grows up then allocate
 740:FreeRTOS/tasks.c ****          * the TCB then the stack. */
 741:FreeRTOS/tasks.c ****         #if ( portSTACK_GROWTH > 0 )
 742:FreeRTOS/tasks.c ****             {
 743:FreeRTOS/tasks.c ****                 /* Allocate space for the TCB.  Where the memory comes from depends on
 744:FreeRTOS/tasks.c ****                  * the implementation of the port malloc function and whether or not static
 745:FreeRTOS/tasks.c ****                  * allocation is being used. */
 746:FreeRTOS/tasks.c ****                 pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 747:FreeRTOS/tasks.c **** 
 748:FreeRTOS/tasks.c ****                 if( pxNewTCB != NULL )
 749:FreeRTOS/tasks.c ****                 {
 750:FreeRTOS/tasks.c ****                     /* Allocate space for the stack used by the task being created.
 751:FreeRTOS/tasks.c ****                      * The base of the stack memory stored in the TCB so the task can
 752:FreeRTOS/tasks.c ****                      * be deleted later if required. */
 753:FreeRTOS/tasks.c ****                     pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocStack( ( ( ( size_t ) usStack
 754:FreeRTOS/tasks.c **** 
 755:FreeRTOS/tasks.c ****                     if( pxNewTCB->pxStack == NULL )
 756:FreeRTOS/tasks.c ****                     {
 757:FreeRTOS/tasks.c ****                         /* Could not allocate the stack.  Delete the allocated TCB. */
 758:FreeRTOS/tasks.c ****                         vPortFree( pxNewTCB );
 759:FreeRTOS/tasks.c ****                         pxNewTCB = NULL;
 760:FreeRTOS/tasks.c ****                     }
 761:FreeRTOS/tasks.c ****                 }
 762:FreeRTOS/tasks.c ****             }
 763:FreeRTOS/tasks.c ****         #else /* portSTACK_GROWTH */
 764:FreeRTOS/tasks.c ****             {
 765:FreeRTOS/tasks.c ****                 StackType_t * pxStack;
 766:FreeRTOS/tasks.c **** 
 767:FreeRTOS/tasks.c ****                 /* Allocate space for the stack used by the task being created. */
 768:FreeRTOS/tasks.c ****                 pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 769:FreeRTOS/tasks.c **** 
 770:FreeRTOS/tasks.c ****                 if( pxStack != NULL )
 771:FreeRTOS/tasks.c ****                 {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 15


 772:FreeRTOS/tasks.c ****                     /* Allocate space for the TCB. */
 773:FreeRTOS/tasks.c ****                     pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 Al
 774:FreeRTOS/tasks.c **** 
 775:FreeRTOS/tasks.c ****                     if( pxNewTCB != NULL )
 776:FreeRTOS/tasks.c ****                     {
 777:FreeRTOS/tasks.c ****                         /* Store the stack location in the TCB. */
 778:FreeRTOS/tasks.c ****                         pxNewTCB->pxStack = pxStack;
 779:FreeRTOS/tasks.c ****                     }
 780:FreeRTOS/tasks.c ****                     else
 781:FreeRTOS/tasks.c ****                     {
 782:FreeRTOS/tasks.c ****                         /* The stack cannot be used as the TCB was not created.  Free
 783:FreeRTOS/tasks.c ****                          * it again. */
 784:FreeRTOS/tasks.c ****                         vPortFreeStack( pxStack );
 785:FreeRTOS/tasks.c ****                     }
 786:FreeRTOS/tasks.c ****                 }
 787:FreeRTOS/tasks.c ****                 else
 788:FreeRTOS/tasks.c ****                 {
 789:FreeRTOS/tasks.c ****                     pxNewTCB = NULL;
 790:FreeRTOS/tasks.c ****                 }
 791:FreeRTOS/tasks.c ****             }
 792:FreeRTOS/tasks.c ****         #endif /* portSTACK_GROWTH */
 793:FreeRTOS/tasks.c **** 
 794:FreeRTOS/tasks.c ****         if( pxNewTCB != NULL )
 795:FreeRTOS/tasks.c ****         {
 796:FreeRTOS/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has be
 797:FreeRTOS/tasks.c ****                 {
 798:FreeRTOS/tasks.c ****                     /* Tasks can be created statically or dynamically, so note this
 799:FreeRTOS/tasks.c ****                      * task was created dynamically in case it is later deleted. */
 800:FreeRTOS/tasks.c ****                     pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801:FreeRTOS/tasks.c ****                 }
 802:FreeRTOS/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 803:FreeRTOS/tasks.c **** 
 804:FreeRTOS/tasks.c ****             prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPr
 805:FreeRTOS/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 806:FreeRTOS/tasks.c ****             xReturn = pdPASS;
 807:FreeRTOS/tasks.c ****         }
 808:FreeRTOS/tasks.c ****         else
 809:FreeRTOS/tasks.c ****         {
 810:FreeRTOS/tasks.c ****             xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 811:FreeRTOS/tasks.c ****         }
 812:FreeRTOS/tasks.c **** 
 813:FreeRTOS/tasks.c ****         return xReturn;
 814:FreeRTOS/tasks.c ****     }
 815:FreeRTOS/tasks.c **** 
 816:FreeRTOS/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 817:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 818:FreeRTOS/tasks.c **** 
 819:FreeRTOS/tasks.c **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 820:FreeRTOS/tasks.c ****                                   const char * const pcName, /*lint !e971 Unqualified char types ar
 821:FreeRTOS/tasks.c ****                                   const uint32_t ulStackDepth,
 822:FreeRTOS/tasks.c ****                                   void * const pvParameters,
 823:FreeRTOS/tasks.c ****                                   UBaseType_t uxPriority,
 824:FreeRTOS/tasks.c ****                                   TaskHandle_t * const pxCreatedTask,
 825:FreeRTOS/tasks.c ****                                   TCB_t * pxNewTCB,
 826:FreeRTOS/tasks.c ****                                   const MemoryRegion_t * const xRegions )
 827:FreeRTOS/tasks.c **** {
 828:FreeRTOS/tasks.c ****     StackType_t * pxTopOfStack;
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 16


 829:FreeRTOS/tasks.c ****     UBaseType_t x;
 830:FreeRTOS/tasks.c **** 
 831:FreeRTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 832:FreeRTOS/tasks.c ****         /* Should the task be created in privileged mode? */
 833:FreeRTOS/tasks.c ****         BaseType_t xRunPrivileged;
 834:FreeRTOS/tasks.c **** 
 835:FreeRTOS/tasks.c ****         if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 836:FreeRTOS/tasks.c ****         {
 837:FreeRTOS/tasks.c ****             xRunPrivileged = pdTRUE;
 838:FreeRTOS/tasks.c ****         }
 839:FreeRTOS/tasks.c ****         else
 840:FreeRTOS/tasks.c ****         {
 841:FreeRTOS/tasks.c ****             xRunPrivileged = pdFALSE;
 842:FreeRTOS/tasks.c ****         }
 843:FreeRTOS/tasks.c ****         uxPriority &= ~portPRIVILEGE_BIT;
 844:FreeRTOS/tasks.c ****     #endif /* portUSING_MPU_WRAPPERS == 1 */
 845:FreeRTOS/tasks.c **** 
 846:FreeRTOS/tasks.c ****     /* Avoid dependency on memset() if it is not required. */
 847:FreeRTOS/tasks.c ****     #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 848:FreeRTOS/tasks.c ****         {
 849:FreeRTOS/tasks.c ****             /* Fill the stack with a known value to assist debugging. */
 850:FreeRTOS/tasks.c ****             ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth
 851:FreeRTOS/tasks.c ****         }
 852:FreeRTOS/tasks.c ****     #endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 853:FreeRTOS/tasks.c **** 
 854:FreeRTOS/tasks.c ****     /* Calculate the top of stack address.  This depends on whether the stack
 855:FreeRTOS/tasks.c ****      * grows from high memory to low (as per the 80x86) or vice versa.
 856:FreeRTOS/tasks.c ****      * portSTACK_GROWTH is used to make the result positive or negative as required
 857:FreeRTOS/tasks.c ****      * by the port. */
 858:FreeRTOS/tasks.c ****     #if ( portSTACK_GROWTH < 0 )
 859:FreeRTOS/tasks.c ****         {
 860:FreeRTOS/tasks.c ****             pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 861:FreeRTOS/tasks.c ****             pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( 
 862:FreeRTOS/tasks.c **** 
 863:FreeRTOS/tasks.c ****             /* Check the alignment of the calculated top of stack is correct. */
 864:FreeRTOS/tasks.c ****             configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) po
 865:FreeRTOS/tasks.c **** 
 866:FreeRTOS/tasks.c ****             #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
 867:FreeRTOS/tasks.c ****                 {
 868:FreeRTOS/tasks.c ****                     /* Also record the stack's high address, which may assist
 869:FreeRTOS/tasks.c ****                      * debugging. */
 870:FreeRTOS/tasks.c ****                     pxNewTCB->pxEndOfStack = pxTopOfStack;
 871:FreeRTOS/tasks.c ****                 }
 872:FreeRTOS/tasks.c ****             #endif /* configRECORD_STACK_HIGH_ADDRESS */
 873:FreeRTOS/tasks.c ****         }
 874:FreeRTOS/tasks.c ****     #else /* portSTACK_GROWTH */
 875:FreeRTOS/tasks.c ****         {
 876:FreeRTOS/tasks.c ****             pxTopOfStack = pxNewTCB->pxStack;
 877:FreeRTOS/tasks.c **** 
 878:FreeRTOS/tasks.c ****             /* Check the alignment of the stack buffer is correct. */
 879:FreeRTOS/tasks.c ****             configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE
 880:FreeRTOS/tasks.c **** 
 881:FreeRTOS/tasks.c ****             /* The other extreme of the stack space is required if stack checking is
 882:FreeRTOS/tasks.c ****              * performed. */
 883:FreeRTOS/tasks.c ****             pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 884:FreeRTOS/tasks.c ****         }
 885:FreeRTOS/tasks.c ****     #endif /* portSTACK_GROWTH */
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 17


 886:FreeRTOS/tasks.c **** 
 887:FreeRTOS/tasks.c ****     /* Store the task name in the TCB. */
 888:FreeRTOS/tasks.c ****     if( pcName != NULL )
 889:FreeRTOS/tasks.c ****     {
 890:FreeRTOS/tasks.c ****         for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 891:FreeRTOS/tasks.c ****         {
 892:FreeRTOS/tasks.c ****             pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 893:FreeRTOS/tasks.c **** 
 894:FreeRTOS/tasks.c ****             /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 895:FreeRTOS/tasks.c ****              * configMAX_TASK_NAME_LEN characters just in case the memory after the
 896:FreeRTOS/tasks.c ****              * string is not accessible (extremely unlikely). */
 897:FreeRTOS/tasks.c ****             if( pcName[ x ] == ( char ) 0x00 )
 898:FreeRTOS/tasks.c ****             {
 899:FreeRTOS/tasks.c ****                 break;
 900:FreeRTOS/tasks.c ****             }
 901:FreeRTOS/tasks.c ****             else
 902:FreeRTOS/tasks.c ****             {
 903:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
 904:FreeRTOS/tasks.c ****             }
 905:FreeRTOS/tasks.c ****         }
 906:FreeRTOS/tasks.c **** 
 907:FreeRTOS/tasks.c ****         /* Ensure the name string is terminated in the case that the string length
 908:FreeRTOS/tasks.c ****          * was greater or equal to configMAX_TASK_NAME_LEN. */
 909:FreeRTOS/tasks.c ****         pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 910:FreeRTOS/tasks.c ****     }
 911:FreeRTOS/tasks.c ****     else
 912:FreeRTOS/tasks.c ****     {
 913:FreeRTOS/tasks.c ****         /* The task has not been given a name, so just ensure there is a NULL
 914:FreeRTOS/tasks.c ****          * terminator when it is read out. */
 915:FreeRTOS/tasks.c ****         pxNewTCB->pcTaskName[ 0 ] = 0x00;
 916:FreeRTOS/tasks.c ****     }
 917:FreeRTOS/tasks.c **** 
 918:FreeRTOS/tasks.c ****     /* This is used as an array index so must ensure it's not too large. */
 919:FreeRTOS/tasks.c ****     configASSERT( uxPriority < configMAX_PRIORITIES );
 920:FreeRTOS/tasks.c **** 
 921:FreeRTOS/tasks.c ****     if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 922:FreeRTOS/tasks.c ****     {
 923:FreeRTOS/tasks.c ****         uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 924:FreeRTOS/tasks.c ****     }
 925:FreeRTOS/tasks.c ****     else
 926:FreeRTOS/tasks.c ****     {
 927:FreeRTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
 928:FreeRTOS/tasks.c ****     }
 929:FreeRTOS/tasks.c **** 
 930:FreeRTOS/tasks.c ****     pxNewTCB->uxPriority = uxPriority;
 931:FreeRTOS/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 932:FreeRTOS/tasks.c ****         {
 933:FreeRTOS/tasks.c ****             pxNewTCB->uxBasePriority = uxPriority;
 934:FreeRTOS/tasks.c ****             pxNewTCB->uxMutexesHeld = 0;
 935:FreeRTOS/tasks.c ****         }
 936:FreeRTOS/tasks.c ****     #endif /* configUSE_MUTEXES */
 937:FreeRTOS/tasks.c **** 
 938:FreeRTOS/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 939:FreeRTOS/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 940:FreeRTOS/tasks.c **** 
 941:FreeRTOS/tasks.c ****     /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 942:FreeRTOS/tasks.c ****      * back to  the containing TCB from a generic item in a list. */
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 18


 943:FreeRTOS/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 944:FreeRTOS/tasks.c **** 
 945:FreeRTOS/tasks.c ****     /* Event lists are always in priority order. */
 946:FreeRTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - (
 947:FreeRTOS/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 948:FreeRTOS/tasks.c **** 
 949:FreeRTOS/tasks.c ****     #if ( portCRITICAL_NESTING_IN_TCB == 1 )
 950:FreeRTOS/tasks.c ****         {
 951:FreeRTOS/tasks.c ****             pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 952:FreeRTOS/tasks.c ****         }
 953:FreeRTOS/tasks.c ****     #endif /* portCRITICAL_NESTING_IN_TCB */
 954:FreeRTOS/tasks.c **** 
 955:FreeRTOS/tasks.c ****     #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 956:FreeRTOS/tasks.c ****         {
 957:FreeRTOS/tasks.c ****             pxNewTCB->pxTaskTag = NULL;
 958:FreeRTOS/tasks.c ****         }
 959:FreeRTOS/tasks.c ****     #endif /* configUSE_APPLICATION_TASK_TAG */
 960:FreeRTOS/tasks.c **** 
 961:FreeRTOS/tasks.c ****     #if ( configGENERATE_RUN_TIME_STATS == 1 )
 962:FreeRTOS/tasks.c ****         {
 963:FreeRTOS/tasks.c ****             pxNewTCB->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
 964:FreeRTOS/tasks.c ****         }
 965:FreeRTOS/tasks.c ****     #endif /* configGENERATE_RUN_TIME_STATS */
 966:FreeRTOS/tasks.c **** 
 967:FreeRTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 968:FreeRTOS/tasks.c ****         {
 969:FreeRTOS/tasks.c ****             vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ul
 970:FreeRTOS/tasks.c ****         }
 971:FreeRTOS/tasks.c ****     #else
 972:FreeRTOS/tasks.c ****         {
 973:FreeRTOS/tasks.c ****             /* Avoid compiler warning about unreferenced parameter. */
 974:FreeRTOS/tasks.c ****             ( void ) xRegions;
 975:FreeRTOS/tasks.c ****         }
 976:FreeRTOS/tasks.c ****     #endif
 977:FreeRTOS/tasks.c **** 
 978:FreeRTOS/tasks.c ****     #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 979:FreeRTOS/tasks.c ****         {
 980:FreeRTOS/tasks.c ****             memset( ( void * ) &( pxNewTCB->pvThreadLocalStoragePointers[ 0 ] ), 0x00, sizeof( pxNe
 981:FreeRTOS/tasks.c ****         }
 982:FreeRTOS/tasks.c ****     #endif
 983:FreeRTOS/tasks.c **** 
 984:FreeRTOS/tasks.c ****     #if ( configUSE_TASK_NOTIFICATIONS == 1 )
 985:FreeRTOS/tasks.c ****         {
 986:FreeRTOS/tasks.c ****             memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotif
 987:FreeRTOS/tasks.c ****             memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyS
 988:FreeRTOS/tasks.c ****         }
 989:FreeRTOS/tasks.c ****     #endif
 990:FreeRTOS/tasks.c **** 
 991:FreeRTOS/tasks.c ****     #if ( configUSE_NEWLIB_REENTRANT == 1 )
 992:FreeRTOS/tasks.c ****         {
 993:FreeRTOS/tasks.c ****             /* Initialise this task's Newlib reent structure.
 994:FreeRTOS/tasks.c ****              * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 995:FreeRTOS/tasks.c ****              * for additional information. */
 996:FreeRTOS/tasks.c ****             _REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 997:FreeRTOS/tasks.c ****         }
 998:FreeRTOS/tasks.c ****     #endif
 999:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 19


1000:FreeRTOS/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
1001:FreeRTOS/tasks.c ****         {
1002:FreeRTOS/tasks.c ****             pxNewTCB->ucDelayAborted = pdFALSE;
1003:FreeRTOS/tasks.c ****         }
1004:FreeRTOS/tasks.c ****     #endif
1005:FreeRTOS/tasks.c **** 
1006:FreeRTOS/tasks.c ****     /* Initialize the TCB stack to look as if the task was already running,
1007:FreeRTOS/tasks.c ****      * but had been interrupted by the scheduler.  The return address is set
1008:FreeRTOS/tasks.c ****      * to the start of the task function. Once the stack has been initialised
1009:FreeRTOS/tasks.c ****      * the top of stack variable is updated. */
1010:FreeRTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
1011:FreeRTOS/tasks.c ****         {
1012:FreeRTOS/tasks.c ****             /* If the port has capability to detect stack overflow,
1013:FreeRTOS/tasks.c ****              * pass the stack end address to the stack initialization
1014:FreeRTOS/tasks.c ****              * function as well. */
1015:FreeRTOS/tasks.c ****             #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1016:FreeRTOS/tasks.c ****                 {
1017:FreeRTOS/tasks.c ****                     #if ( portSTACK_GROWTH < 0 )
1018:FreeRTOS/tasks.c ****                         {
1019:FreeRTOS/tasks.c ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1020:FreeRTOS/tasks.c ****                         }
1021:FreeRTOS/tasks.c ****                     #else /* portSTACK_GROWTH */
1022:FreeRTOS/tasks.c ****                         {
1023:FreeRTOS/tasks.c ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1024:FreeRTOS/tasks.c ****                         }
1025:FreeRTOS/tasks.c ****                     #endif /* portSTACK_GROWTH */
1026:FreeRTOS/tasks.c ****                 }
1027:FreeRTOS/tasks.c ****             #else /* portHAS_STACK_OVERFLOW_CHECKING */
1028:FreeRTOS/tasks.c ****                 {
1029:FreeRTOS/tasks.c ****                     pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvPar
1030:FreeRTOS/tasks.c ****                 }
1031:FreeRTOS/tasks.c ****             #endif /* portHAS_STACK_OVERFLOW_CHECKING */
1032:FreeRTOS/tasks.c ****         }
1033:FreeRTOS/tasks.c ****     #else /* portUSING_MPU_WRAPPERS */
1034:FreeRTOS/tasks.c ****         {
1035:FreeRTOS/tasks.c ****             /* If the port has capability to detect stack overflow,
1036:FreeRTOS/tasks.c ****              * pass the stack end address to the stack initialization
1037:FreeRTOS/tasks.c ****              * function as well. */
1038:FreeRTOS/tasks.c ****             #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1039:FreeRTOS/tasks.c ****                 {
1040:FreeRTOS/tasks.c ****                     #if ( portSTACK_GROWTH < 0 )
1041:FreeRTOS/tasks.c ****                         {
1042:FreeRTOS/tasks.c ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1043:FreeRTOS/tasks.c ****                         }
1044:FreeRTOS/tasks.c ****                     #else /* portSTACK_GROWTH */
1045:FreeRTOS/tasks.c ****                         {
1046:FreeRTOS/tasks.c ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1047:FreeRTOS/tasks.c ****                         }
1048:FreeRTOS/tasks.c ****                     #endif /* portSTACK_GROWTH */
1049:FreeRTOS/tasks.c ****                 }
1050:FreeRTOS/tasks.c ****             #else /* portHAS_STACK_OVERFLOW_CHECKING */
1051:FreeRTOS/tasks.c ****                 {
1052:FreeRTOS/tasks.c ****                     pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvPar
1053:FreeRTOS/tasks.c ****                 }
1054:FreeRTOS/tasks.c ****             #endif /* portHAS_STACK_OVERFLOW_CHECKING */
1055:FreeRTOS/tasks.c ****         }
1056:FreeRTOS/tasks.c ****     #endif /* portUSING_MPU_WRAPPERS */
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 20


1057:FreeRTOS/tasks.c **** 
1058:FreeRTOS/tasks.c ****     if( pxCreatedTask != NULL )
1059:FreeRTOS/tasks.c ****     {
1060:FreeRTOS/tasks.c ****         /* Pass the handle out in an anonymous way.  The handle can be used to
1061:FreeRTOS/tasks.c ****          * change the created task's priority, delete the created task, etc.*/
1062:FreeRTOS/tasks.c ****         *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1063:FreeRTOS/tasks.c ****     }
1064:FreeRTOS/tasks.c ****     else
1065:FreeRTOS/tasks.c ****     {
1066:FreeRTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
1067:FreeRTOS/tasks.c ****     }
1068:FreeRTOS/tasks.c **** }
1069:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1070:FreeRTOS/tasks.c **** 
1071:FreeRTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
1072:FreeRTOS/tasks.c **** {
1073:FreeRTOS/tasks.c ****     /* Ensure interrupts don't access the task lists while the lists are being
1074:FreeRTOS/tasks.c ****      * updated. */
1075:FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
1076:FreeRTOS/tasks.c ****     {
1077:FreeRTOS/tasks.c ****         uxCurrentNumberOfTasks++;
1078:FreeRTOS/tasks.c **** 
1079:FreeRTOS/tasks.c ****         if( pxCurrentTCB == NULL )
1080:FreeRTOS/tasks.c ****         {
1081:FreeRTOS/tasks.c ****             /* There are no other tasks, or all the other tasks are in
1082:FreeRTOS/tasks.c ****              * the suspended state - make this the current task. */
1083:FreeRTOS/tasks.c ****             pxCurrentTCB = pxNewTCB;
1084:FreeRTOS/tasks.c **** 
1085:FreeRTOS/tasks.c ****             if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1086:FreeRTOS/tasks.c ****             {
1087:FreeRTOS/tasks.c ****                 /* This is the first task to be created so do the preliminary
1088:FreeRTOS/tasks.c ****                  * initialisation required.  We will not recover if this call
1089:FreeRTOS/tasks.c ****                  * fails, but we will report the failure. */
1090:FreeRTOS/tasks.c ****                 prvInitialiseTaskLists();
1091:FreeRTOS/tasks.c ****             }
1092:FreeRTOS/tasks.c ****             else
1093:FreeRTOS/tasks.c ****             {
1094:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1095:FreeRTOS/tasks.c ****             }
1096:FreeRTOS/tasks.c ****         }
1097:FreeRTOS/tasks.c ****         else
1098:FreeRTOS/tasks.c ****         {
1099:FreeRTOS/tasks.c ****             /* If the scheduler is not already running, make this task the
1100:FreeRTOS/tasks.c ****              * current task if it is the highest priority task to be created
1101:FreeRTOS/tasks.c ****              * so far. */
1102:FreeRTOS/tasks.c ****             if( xSchedulerRunning == pdFALSE )
1103:FreeRTOS/tasks.c ****             {
1104:FreeRTOS/tasks.c ****                 if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1105:FreeRTOS/tasks.c ****                 {
1106:FreeRTOS/tasks.c ****                     pxCurrentTCB = pxNewTCB;
1107:FreeRTOS/tasks.c ****                 }
1108:FreeRTOS/tasks.c ****                 else
1109:FreeRTOS/tasks.c ****                 {
1110:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1111:FreeRTOS/tasks.c ****                 }
1112:FreeRTOS/tasks.c ****             }
1113:FreeRTOS/tasks.c ****             else
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 21


1114:FreeRTOS/tasks.c ****             {
1115:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1116:FreeRTOS/tasks.c ****             }
1117:FreeRTOS/tasks.c ****         }
1118:FreeRTOS/tasks.c **** 
1119:FreeRTOS/tasks.c ****         uxTaskNumber++;
1120:FreeRTOS/tasks.c **** 
1121:FreeRTOS/tasks.c ****         #if ( configUSE_TRACE_FACILITY == 1 )
1122:FreeRTOS/tasks.c ****             {
1123:FreeRTOS/tasks.c ****                 /* Add a counter into the TCB for tracing only. */
1124:FreeRTOS/tasks.c ****                 pxNewTCB->uxTCBNumber = uxTaskNumber;
1125:FreeRTOS/tasks.c ****             }
1126:FreeRTOS/tasks.c ****         #endif /* configUSE_TRACE_FACILITY */
1127:FreeRTOS/tasks.c ****         traceTASK_CREATE( pxNewTCB );
1128:FreeRTOS/tasks.c **** 
1129:FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxNewTCB );
1130:FreeRTOS/tasks.c **** 
1131:FreeRTOS/tasks.c ****         portSETUP_TCB( pxNewTCB );
1132:FreeRTOS/tasks.c ****     }
1133:FreeRTOS/tasks.c ****     taskEXIT_CRITICAL();
1134:FreeRTOS/tasks.c **** 
1135:FreeRTOS/tasks.c ****     if( xSchedulerRunning != pdFALSE )
1136:FreeRTOS/tasks.c ****     {
1137:FreeRTOS/tasks.c ****         /* If the created task is of a higher priority than the current task
1138:FreeRTOS/tasks.c ****          * then it should run now. */
1139:FreeRTOS/tasks.c ****         if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1140:FreeRTOS/tasks.c ****         {
1141:FreeRTOS/tasks.c ****             taskYIELD_IF_USING_PREEMPTION();
1142:FreeRTOS/tasks.c ****         }
1143:FreeRTOS/tasks.c ****         else
1144:FreeRTOS/tasks.c ****         {
1145:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1146:FreeRTOS/tasks.c ****         }
1147:FreeRTOS/tasks.c ****     }
1148:FreeRTOS/tasks.c ****     else
1149:FreeRTOS/tasks.c ****     {
1150:FreeRTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
1151:FreeRTOS/tasks.c ****     }
1152:FreeRTOS/tasks.c **** }
1153:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1154:FreeRTOS/tasks.c **** 
1155:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1156:FreeRTOS/tasks.c **** 
1157:FreeRTOS/tasks.c ****     void vTaskDelete( TaskHandle_t xTaskToDelete )
1158:FreeRTOS/tasks.c ****     {
1159:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
1160:FreeRTOS/tasks.c **** 
1161:FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
1162:FreeRTOS/tasks.c ****         {
1163:FreeRTOS/tasks.c ****             /* If null is passed in here then it is the calling task that is
1164:FreeRTOS/tasks.c ****              * being deleted. */
1165:FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1166:FreeRTOS/tasks.c **** 
1167:FreeRTOS/tasks.c ****             /* Remove task from the ready/delayed list. */
1168:FreeRTOS/tasks.c ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1169:FreeRTOS/tasks.c ****             {
1170:FreeRTOS/tasks.c ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 22


1171:FreeRTOS/tasks.c ****             }
1172:FreeRTOS/tasks.c ****             else
1173:FreeRTOS/tasks.c ****             {
1174:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1175:FreeRTOS/tasks.c ****             }
1176:FreeRTOS/tasks.c **** 
1177:FreeRTOS/tasks.c ****             /* Is the task waiting on an event also? */
1178:FreeRTOS/tasks.c ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1179:FreeRTOS/tasks.c ****             {
1180:FreeRTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1181:FreeRTOS/tasks.c ****             }
1182:FreeRTOS/tasks.c ****             else
1183:FreeRTOS/tasks.c ****             {
1184:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1185:FreeRTOS/tasks.c ****             }
1186:FreeRTOS/tasks.c **** 
1187:FreeRTOS/tasks.c ****             /* Increment the uxTaskNumber also so kernel aware debuggers can
1188:FreeRTOS/tasks.c ****              * detect that the task lists need re-generating.  This is done before
1189:FreeRTOS/tasks.c ****              * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1190:FreeRTOS/tasks.c ****              * not return. */
1191:FreeRTOS/tasks.c ****             uxTaskNumber++;
1192:FreeRTOS/tasks.c **** 
1193:FreeRTOS/tasks.c ****             if( pxTCB == pxCurrentTCB )
1194:FreeRTOS/tasks.c ****             {
1195:FreeRTOS/tasks.c ****                 /* A task is deleting itself.  This cannot complete within the
1196:FreeRTOS/tasks.c ****                  * task itself, as a context switch to another task is required.
1197:FreeRTOS/tasks.c ****                  * Place the task in the termination list.  The idle task will
1198:FreeRTOS/tasks.c ****                  * check the termination list and free up any memory allocated by
1199:FreeRTOS/tasks.c ****                  * the scheduler for the TCB and stack of the deleted task. */
1200:FreeRTOS/tasks.c ****                 vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1201:FreeRTOS/tasks.c **** 
1202:FreeRTOS/tasks.c ****                 /* Increment the ucTasksDeleted variable so the idle task knows
1203:FreeRTOS/tasks.c ****                  * there is a task that has been deleted and that it should therefore
1204:FreeRTOS/tasks.c ****                  * check the xTasksWaitingTermination list. */
1205:FreeRTOS/tasks.c ****                 ++uxDeletedTasksWaitingCleanUp;
1206:FreeRTOS/tasks.c **** 
1207:FreeRTOS/tasks.c ****                 /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1208:FreeRTOS/tasks.c ****                  * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1209:FreeRTOS/tasks.c ****                 traceTASK_DELETE( pxTCB );
1210:FreeRTOS/tasks.c **** 
1211:FreeRTOS/tasks.c ****                 /* The pre-delete hook is primarily for the Windows simulator,
1212:FreeRTOS/tasks.c ****                  * in which Windows specific clean up operations are performed,
1213:FreeRTOS/tasks.c ****                  * after which it is not possible to yield away from this task -
1214:FreeRTOS/tasks.c ****                  * hence xYieldPending is used to latch that a context switch is
1215:FreeRTOS/tasks.c ****                  * required. */
1216:FreeRTOS/tasks.c ****                 portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1217:FreeRTOS/tasks.c ****             }
1218:FreeRTOS/tasks.c ****             else
1219:FreeRTOS/tasks.c ****             {
1220:FreeRTOS/tasks.c ****                 --uxCurrentNumberOfTasks;
1221:FreeRTOS/tasks.c ****                 traceTASK_DELETE( pxTCB );
1222:FreeRTOS/tasks.c **** 
1223:FreeRTOS/tasks.c ****                 /* Reset the next expected unblock time in case it referred to
1224:FreeRTOS/tasks.c ****                  * the task that has just been deleted. */
1225:FreeRTOS/tasks.c ****                 prvResetNextTaskUnblockTime();
1226:FreeRTOS/tasks.c ****             }
1227:FreeRTOS/tasks.c ****         }
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 23


1228:FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
1229:FreeRTOS/tasks.c **** 
1230:FreeRTOS/tasks.c ****         /* If the task is not deleting itself, call prvDeleteTCB from outside of
1231:FreeRTOS/tasks.c ****          * critical section. If a task deletes itself, prvDeleteTCB is called
1232:FreeRTOS/tasks.c ****          * from prvCheckTasksWaitingTermination which is called from Idle task. */
1233:FreeRTOS/tasks.c ****         if( pxTCB != pxCurrentTCB )
1234:FreeRTOS/tasks.c ****         {
1235:FreeRTOS/tasks.c ****             prvDeleteTCB( pxTCB );
1236:FreeRTOS/tasks.c ****         }
1237:FreeRTOS/tasks.c **** 
1238:FreeRTOS/tasks.c ****         /* Force a reschedule if it is the currently running task that has just
1239:FreeRTOS/tasks.c ****          * been deleted. */
1240:FreeRTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
1241:FreeRTOS/tasks.c ****         {
1242:FreeRTOS/tasks.c ****             if( pxTCB == pxCurrentTCB )
1243:FreeRTOS/tasks.c ****             {
1244:FreeRTOS/tasks.c ****                 configASSERT( uxSchedulerSuspended == 0 );
1245:FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
1246:FreeRTOS/tasks.c ****             }
1247:FreeRTOS/tasks.c ****             else
1248:FreeRTOS/tasks.c ****             {
1249:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1250:FreeRTOS/tasks.c ****             }
1251:FreeRTOS/tasks.c ****         }
1252:FreeRTOS/tasks.c ****     }
1253:FreeRTOS/tasks.c **** 
1254:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1255:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1256:FreeRTOS/tasks.c **** 
1257:FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskDelayUntil == 1 )
1258:FreeRTOS/tasks.c **** 
1259:FreeRTOS/tasks.c ****     BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
1260:FreeRTOS/tasks.c ****                                 const TickType_t xTimeIncrement )
1261:FreeRTOS/tasks.c ****     {
1262:FreeRTOS/tasks.c ****         TickType_t xTimeToWake;
1263:FreeRTOS/tasks.c ****         BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1264:FreeRTOS/tasks.c **** 
1265:FreeRTOS/tasks.c ****         configASSERT( pxPreviousWakeTime );
1266:FreeRTOS/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
1267:FreeRTOS/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
1268:FreeRTOS/tasks.c **** 
1269:FreeRTOS/tasks.c ****         vTaskSuspendAll();
1270:FreeRTOS/tasks.c ****         {
1271:FreeRTOS/tasks.c ****             /* Minor optimisation.  The tick count cannot change in this
1272:FreeRTOS/tasks.c ****              * block. */
1273:FreeRTOS/tasks.c ****             const TickType_t xConstTickCount = xTickCount;
1274:FreeRTOS/tasks.c **** 
1275:FreeRTOS/tasks.c ****             /* Generate the tick time at which the task wants to wake. */
1276:FreeRTOS/tasks.c ****             xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1277:FreeRTOS/tasks.c **** 
1278:FreeRTOS/tasks.c ****             if( xConstTickCount < *pxPreviousWakeTime )
1279:FreeRTOS/tasks.c ****             {
1280:FreeRTOS/tasks.c ****                 /* The tick count has overflowed since this function was
1281:FreeRTOS/tasks.c ****                  * lasted called.  In this case the only time we should ever
1282:FreeRTOS/tasks.c ****                  * actually delay is if the wake time has also  overflowed,
1283:FreeRTOS/tasks.c ****                  * and the wake time is greater than the tick time.  When this
1284:FreeRTOS/tasks.c ****                  * is the case it is as if neither time had overflowed. */
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 24


1285:FreeRTOS/tasks.c ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1286:FreeRTOS/tasks.c ****                 {
1287:FreeRTOS/tasks.c ****                     xShouldDelay = pdTRUE;
1288:FreeRTOS/tasks.c ****                 }
1289:FreeRTOS/tasks.c ****                 else
1290:FreeRTOS/tasks.c ****                 {
1291:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1292:FreeRTOS/tasks.c ****                 }
1293:FreeRTOS/tasks.c ****             }
1294:FreeRTOS/tasks.c ****             else
1295:FreeRTOS/tasks.c ****             {
1296:FreeRTOS/tasks.c ****                 /* The tick time has not overflowed.  In this case we will
1297:FreeRTOS/tasks.c ****                  * delay if either the wake time has overflowed, and/or the
1298:FreeRTOS/tasks.c ****                  * tick time is less than the wake time. */
1299:FreeRTOS/tasks.c ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1300:FreeRTOS/tasks.c ****                 {
1301:FreeRTOS/tasks.c ****                     xShouldDelay = pdTRUE;
1302:FreeRTOS/tasks.c ****                 }
1303:FreeRTOS/tasks.c ****                 else
1304:FreeRTOS/tasks.c ****                 {
1305:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1306:FreeRTOS/tasks.c ****                 }
1307:FreeRTOS/tasks.c ****             }
1308:FreeRTOS/tasks.c **** 
1309:FreeRTOS/tasks.c ****             /* Update the wake time ready for the next call. */
1310:FreeRTOS/tasks.c ****             *pxPreviousWakeTime = xTimeToWake;
1311:FreeRTOS/tasks.c **** 
1312:FreeRTOS/tasks.c ****             if( xShouldDelay != pdFALSE )
1313:FreeRTOS/tasks.c ****             {
1314:FreeRTOS/tasks.c ****                 traceTASK_DELAY_UNTIL( xTimeToWake );
1315:FreeRTOS/tasks.c **** 
1316:FreeRTOS/tasks.c ****                 /* prvAddCurrentTaskToDelayedList() needs the block time, not
1317:FreeRTOS/tasks.c ****                  * the time to wake, so subtract the current tick count. */
1318:FreeRTOS/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1319:FreeRTOS/tasks.c ****             }
1320:FreeRTOS/tasks.c ****             else
1321:FreeRTOS/tasks.c ****             {
1322:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1323:FreeRTOS/tasks.c ****             }
1324:FreeRTOS/tasks.c ****         }
1325:FreeRTOS/tasks.c ****         xAlreadyYielded = xTaskResumeAll();
1326:FreeRTOS/tasks.c **** 
1327:FreeRTOS/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
1328:FreeRTOS/tasks.c ****          * have put ourselves to sleep. */
1329:FreeRTOS/tasks.c ****         if( xAlreadyYielded == pdFALSE )
1330:FreeRTOS/tasks.c ****         {
1331:FreeRTOS/tasks.c ****             portYIELD_WITHIN_API();
1332:FreeRTOS/tasks.c ****         }
1333:FreeRTOS/tasks.c ****         else
1334:FreeRTOS/tasks.c ****         {
1335:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1336:FreeRTOS/tasks.c ****         }
1337:FreeRTOS/tasks.c **** 
1338:FreeRTOS/tasks.c ****         return xShouldDelay;
1339:FreeRTOS/tasks.c ****     }
1340:FreeRTOS/tasks.c **** 
1341:FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskDelayUntil */
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 25


1342:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1343:FreeRTOS/tasks.c **** 
1344:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1345:FreeRTOS/tasks.c **** 
1346:FreeRTOS/tasks.c ****     void vTaskDelay( const TickType_t xTicksToDelay )
1347:FreeRTOS/tasks.c ****     {
1348:FreeRTOS/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
1349:FreeRTOS/tasks.c **** 
1350:FreeRTOS/tasks.c ****         /* A delay time of zero just forces a reschedule. */
1351:FreeRTOS/tasks.c ****         if( xTicksToDelay > ( TickType_t ) 0U )
1352:FreeRTOS/tasks.c ****         {
1353:FreeRTOS/tasks.c ****             configASSERT( uxSchedulerSuspended == 0 );
1354:FreeRTOS/tasks.c ****             vTaskSuspendAll();
1355:FreeRTOS/tasks.c ****             {
1356:FreeRTOS/tasks.c ****                 traceTASK_DELAY();
1357:FreeRTOS/tasks.c **** 
1358:FreeRTOS/tasks.c ****                 /* A task that is removed from the event list while the
1359:FreeRTOS/tasks.c ****                  * scheduler is suspended will not get placed in the ready
1360:FreeRTOS/tasks.c ****                  * list or removed from the blocked list until the scheduler
1361:FreeRTOS/tasks.c ****                  * is resumed.
1362:FreeRTOS/tasks.c ****                  *
1363:FreeRTOS/tasks.c ****                  * This task cannot be in an event list as it is the currently
1364:FreeRTOS/tasks.c ****                  * executing task. */
1365:FreeRTOS/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1366:FreeRTOS/tasks.c ****             }
1367:FreeRTOS/tasks.c ****             xAlreadyYielded = xTaskResumeAll();
1368:FreeRTOS/tasks.c ****         }
1369:FreeRTOS/tasks.c ****         else
1370:FreeRTOS/tasks.c ****         {
1371:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1372:FreeRTOS/tasks.c ****         }
1373:FreeRTOS/tasks.c **** 
1374:FreeRTOS/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
1375:FreeRTOS/tasks.c ****          * have put ourselves to sleep. */
1376:FreeRTOS/tasks.c ****         if( xAlreadyYielded == pdFALSE )
1377:FreeRTOS/tasks.c ****         {
1378:FreeRTOS/tasks.c ****             portYIELD_WITHIN_API();
1379:FreeRTOS/tasks.c ****         }
1380:FreeRTOS/tasks.c ****         else
1381:FreeRTOS/tasks.c ****         {
1382:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1383:FreeRTOS/tasks.c ****         }
1384:FreeRTOS/tasks.c ****     }
1385:FreeRTOS/tasks.c **** 
1386:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1387:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1388:FreeRTOS/tasks.c **** 
1389:FreeRTOS/tasks.c **** #if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDe
1390:FreeRTOS/tasks.c **** 
1391:FreeRTOS/tasks.c ****     eTaskState eTaskGetState( TaskHandle_t xTask )
1392:FreeRTOS/tasks.c ****     {
1393:FreeRTOS/tasks.c ****         eTaskState eReturn;
1394:FreeRTOS/tasks.c ****         List_t const * pxStateList, * pxDelayedList, * pxOverflowedDelayedList;
1395:FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
1396:FreeRTOS/tasks.c **** 
1397:FreeRTOS/tasks.c ****         configASSERT( pxTCB );
1398:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 26


1399:FreeRTOS/tasks.c ****         if( pxTCB == pxCurrentTCB )
1400:FreeRTOS/tasks.c ****         {
1401:FreeRTOS/tasks.c ****             /* The task calling this function is querying its own state. */
1402:FreeRTOS/tasks.c ****             eReturn = eRunning;
1403:FreeRTOS/tasks.c ****         }
1404:FreeRTOS/tasks.c ****         else
1405:FreeRTOS/tasks.c ****         {
1406:FreeRTOS/tasks.c ****             taskENTER_CRITICAL();
1407:FreeRTOS/tasks.c ****             {
1408:FreeRTOS/tasks.c ****                 pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1409:FreeRTOS/tasks.c ****                 pxDelayedList = pxDelayedTaskList;
1410:FreeRTOS/tasks.c ****                 pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1411:FreeRTOS/tasks.c ****             }
1412:FreeRTOS/tasks.c ****             taskEXIT_CRITICAL();
1413:FreeRTOS/tasks.c **** 
1414:FreeRTOS/tasks.c ****             if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1415:FreeRTOS/tasks.c ****             {
1416:FreeRTOS/tasks.c ****                 /* The task being queried is referenced from one of the Blocked
1417:FreeRTOS/tasks.c ****                  * lists. */
1418:FreeRTOS/tasks.c ****                 eReturn = eBlocked;
1419:FreeRTOS/tasks.c ****             }
1420:FreeRTOS/tasks.c **** 
1421:FreeRTOS/tasks.c ****             #if ( INCLUDE_vTaskSuspend == 1 )
1422:FreeRTOS/tasks.c ****                 else if( pxStateList == &xSuspendedTaskList )
1423:FreeRTOS/tasks.c ****                 {
1424:FreeRTOS/tasks.c ****                     /* The task being queried is referenced from the suspended
1425:FreeRTOS/tasks.c ****                      * list.  Is it genuinely suspended or is it blocked
1426:FreeRTOS/tasks.c ****                      * indefinitely? */
1427:FreeRTOS/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1428:FreeRTOS/tasks.c ****                     {
1429:FreeRTOS/tasks.c ****                         #if ( configUSE_TASK_NOTIFICATIONS == 1 )
1430:FreeRTOS/tasks.c ****                             {
1431:FreeRTOS/tasks.c ****                                 BaseType_t x;
1432:FreeRTOS/tasks.c **** 
1433:FreeRTOS/tasks.c ****                                 /* The task does not appear on the event list item of
1434:FreeRTOS/tasks.c ****                                  * and of the RTOS objects, but could still be in the
1435:FreeRTOS/tasks.c ****                                  * blocked state if it is waiting on its notification
1436:FreeRTOS/tasks.c ****                                  * rather than waiting on an object.  If not, is
1437:FreeRTOS/tasks.c ****                                  * suspended. */
1438:FreeRTOS/tasks.c ****                                 eReturn = eSuspended;
1439:FreeRTOS/tasks.c **** 
1440:FreeRTOS/tasks.c ****                                 for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
1441:FreeRTOS/tasks.c ****                                 {
1442:FreeRTOS/tasks.c ****                                     if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
1443:FreeRTOS/tasks.c ****                                     {
1444:FreeRTOS/tasks.c ****                                         eReturn = eBlocked;
1445:FreeRTOS/tasks.c ****                                         break;
1446:FreeRTOS/tasks.c ****                                     }
1447:FreeRTOS/tasks.c ****                                 }
1448:FreeRTOS/tasks.c ****                             }
1449:FreeRTOS/tasks.c ****                         #else /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1450:FreeRTOS/tasks.c ****                             {
1451:FreeRTOS/tasks.c ****                                 eReturn = eSuspended;
1452:FreeRTOS/tasks.c ****                             }
1453:FreeRTOS/tasks.c ****                         #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1454:FreeRTOS/tasks.c ****                     }
1455:FreeRTOS/tasks.c ****                     else
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 27


1456:FreeRTOS/tasks.c ****                     {
1457:FreeRTOS/tasks.c ****                         eReturn = eBlocked;
1458:FreeRTOS/tasks.c ****                     }
1459:FreeRTOS/tasks.c ****                 }
1460:FreeRTOS/tasks.c ****             #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */
1461:FreeRTOS/tasks.c **** 
1462:FreeRTOS/tasks.c ****             #if ( INCLUDE_vTaskDelete == 1 )
1463:FreeRTOS/tasks.c ****                 else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1464:FreeRTOS/tasks.c ****                 {
1465:FreeRTOS/tasks.c ****                     /* The task being queried is referenced from the deleted
1466:FreeRTOS/tasks.c ****                      * tasks list, or it is not referenced from any lists at
1467:FreeRTOS/tasks.c ****                      * all. */
1468:FreeRTOS/tasks.c ****                     eReturn = eDeleted;
1469:FreeRTOS/tasks.c ****                 }
1470:FreeRTOS/tasks.c ****             #endif
1471:FreeRTOS/tasks.c **** 
1472:FreeRTOS/tasks.c ****             else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer
1473:FreeRTOS/tasks.c ****             {
1474:FreeRTOS/tasks.c ****                 /* If the task is not in any other state, it must be in the
1475:FreeRTOS/tasks.c ****                  * Ready (including pending ready) state. */
1476:FreeRTOS/tasks.c ****                 eReturn = eReady;
1477:FreeRTOS/tasks.c ****             }
1478:FreeRTOS/tasks.c ****         }
1479:FreeRTOS/tasks.c **** 
1480:FreeRTOS/tasks.c ****         return eReturn;
1481:FreeRTOS/tasks.c ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1482:FreeRTOS/tasks.c **** 
1483:FreeRTOS/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1484:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1485:FreeRTOS/tasks.c **** 
1486:FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1487:FreeRTOS/tasks.c **** 
1488:FreeRTOS/tasks.c ****     UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1489:FreeRTOS/tasks.c ****     {
1490:FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
1491:FreeRTOS/tasks.c ****         UBaseType_t uxReturn;
1492:FreeRTOS/tasks.c **** 
1493:FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
1494:FreeRTOS/tasks.c ****         {
1495:FreeRTOS/tasks.c ****             /* If null is passed in here then it is the priority of the task
1496:FreeRTOS/tasks.c ****              * that called uxTaskPriorityGet() that is being queried. */
1497:FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
1498:FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
1499:FreeRTOS/tasks.c ****         }
1500:FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
1501:FreeRTOS/tasks.c **** 
1502:FreeRTOS/tasks.c ****         return uxReturn;
1503:FreeRTOS/tasks.c ****     }
1504:FreeRTOS/tasks.c **** 
1505:FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1506:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1507:FreeRTOS/tasks.c **** 
1508:FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1509:FreeRTOS/tasks.c **** 
1510:FreeRTOS/tasks.c ****     UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1511:FreeRTOS/tasks.c ****     {
1512:FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 28


1513:FreeRTOS/tasks.c ****         UBaseType_t uxReturn, uxSavedInterruptState;
1514:FreeRTOS/tasks.c **** 
1515:FreeRTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
1516:FreeRTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
1517:FreeRTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
1518:FreeRTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
1519:FreeRTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1520:FreeRTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
1521:FreeRTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1522:FreeRTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
1523:FreeRTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
1524:FreeRTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
1525:FreeRTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
1526:FreeRTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
1527:FreeRTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
1528:FreeRTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
1529:FreeRTOS/tasks.c ****          * provided on the following link:
1530:FreeRTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1531:FreeRTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1532:FreeRTOS/tasks.c **** 
1533:FreeRTOS/tasks.c ****         uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1534:FreeRTOS/tasks.c ****         {
1535:FreeRTOS/tasks.c ****             /* If null is passed in here then it is the priority of the calling
1536:FreeRTOS/tasks.c ****              * task that is being queried. */
1537:FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
1538:FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
1539:FreeRTOS/tasks.c ****         }
1540:FreeRTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1541:FreeRTOS/tasks.c **** 
1542:FreeRTOS/tasks.c ****         return uxReturn;
1543:FreeRTOS/tasks.c ****     }
1544:FreeRTOS/tasks.c **** 
1545:FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1546:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1547:FreeRTOS/tasks.c **** 
1548:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1549:FreeRTOS/tasks.c **** 
1550:FreeRTOS/tasks.c ****     void vTaskPrioritySet( TaskHandle_t xTask,
1551:FreeRTOS/tasks.c ****                            UBaseType_t uxNewPriority )
1552:FreeRTOS/tasks.c ****     {
1553:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
1554:FreeRTOS/tasks.c ****         UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1555:FreeRTOS/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
1556:FreeRTOS/tasks.c **** 
1557:FreeRTOS/tasks.c ****         configASSERT( uxNewPriority < configMAX_PRIORITIES );
1558:FreeRTOS/tasks.c **** 
1559:FreeRTOS/tasks.c ****         /* Ensure the new priority is valid. */
1560:FreeRTOS/tasks.c ****         if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1561:FreeRTOS/tasks.c ****         {
1562:FreeRTOS/tasks.c ****             uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1563:FreeRTOS/tasks.c ****         }
1564:FreeRTOS/tasks.c ****         else
1565:FreeRTOS/tasks.c ****         {
1566:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1567:FreeRTOS/tasks.c ****         }
1568:FreeRTOS/tasks.c **** 
1569:FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 29


1570:FreeRTOS/tasks.c ****         {
1571:FreeRTOS/tasks.c ****             /* If null is passed in here then it is the priority of the calling
1572:FreeRTOS/tasks.c ****              * task that is being changed. */
1573:FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
1574:FreeRTOS/tasks.c **** 
1575:FreeRTOS/tasks.c ****             traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1576:FreeRTOS/tasks.c **** 
1577:FreeRTOS/tasks.c ****             #if ( configUSE_MUTEXES == 1 )
1578:FreeRTOS/tasks.c ****                 {
1579:FreeRTOS/tasks.c ****                     uxCurrentBasePriority = pxTCB->uxBasePriority;
1580:FreeRTOS/tasks.c ****                 }
1581:FreeRTOS/tasks.c ****             #else
1582:FreeRTOS/tasks.c ****                 {
1583:FreeRTOS/tasks.c ****                     uxCurrentBasePriority = pxTCB->uxPriority;
1584:FreeRTOS/tasks.c ****                 }
1585:FreeRTOS/tasks.c ****             #endif
1586:FreeRTOS/tasks.c **** 
1587:FreeRTOS/tasks.c ****             if( uxCurrentBasePriority != uxNewPriority )
1588:FreeRTOS/tasks.c ****             {
1589:FreeRTOS/tasks.c ****                 /* The priority change may have readied a task of higher
1590:FreeRTOS/tasks.c ****                  * priority than the calling task. */
1591:FreeRTOS/tasks.c ****                 if( uxNewPriority > uxCurrentBasePriority )
1592:FreeRTOS/tasks.c ****                 {
1593:FreeRTOS/tasks.c ****                     if( pxTCB != pxCurrentTCB )
1594:FreeRTOS/tasks.c ****                     {
1595:FreeRTOS/tasks.c ****                         /* The priority of a task other than the currently
1596:FreeRTOS/tasks.c ****                          * running task is being raised.  Is the priority being
1597:FreeRTOS/tasks.c ****                          * raised above that of the running task? */
1598:FreeRTOS/tasks.c ****                         if( uxNewPriority >= pxCurrentTCB->uxPriority )
1599:FreeRTOS/tasks.c ****                         {
1600:FreeRTOS/tasks.c ****                             xYieldRequired = pdTRUE;
1601:FreeRTOS/tasks.c ****                         }
1602:FreeRTOS/tasks.c ****                         else
1603:FreeRTOS/tasks.c ****                         {
1604:FreeRTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
1605:FreeRTOS/tasks.c ****                         }
1606:FreeRTOS/tasks.c ****                     }
1607:FreeRTOS/tasks.c ****                     else
1608:FreeRTOS/tasks.c ****                     {
1609:FreeRTOS/tasks.c ****                         /* The priority of the running task is being raised,
1610:FreeRTOS/tasks.c ****                          * but the running task must already be the highest
1611:FreeRTOS/tasks.c ****                          * priority task able to run so no yield is required. */
1612:FreeRTOS/tasks.c ****                     }
1613:FreeRTOS/tasks.c ****                 }
1614:FreeRTOS/tasks.c ****                 else if( pxTCB == pxCurrentTCB )
1615:FreeRTOS/tasks.c ****                 {
1616:FreeRTOS/tasks.c ****                     /* Setting the priority of the running task down means
1617:FreeRTOS/tasks.c ****                      * there may now be another task of higher priority that
1618:FreeRTOS/tasks.c ****                      * is ready to execute. */
1619:FreeRTOS/tasks.c ****                     xYieldRequired = pdTRUE;
1620:FreeRTOS/tasks.c ****                 }
1621:FreeRTOS/tasks.c ****                 else
1622:FreeRTOS/tasks.c ****                 {
1623:FreeRTOS/tasks.c ****                     /* Setting the priority of any other task down does not
1624:FreeRTOS/tasks.c ****                      * require a yield as the running task must be above the
1625:FreeRTOS/tasks.c ****                      * new priority of the task being modified. */
1626:FreeRTOS/tasks.c ****                 }
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 30


1627:FreeRTOS/tasks.c **** 
1628:FreeRTOS/tasks.c ****                 /* Remember the ready list the task might be referenced from
1629:FreeRTOS/tasks.c ****                  * before its uxPriority member is changed so the
1630:FreeRTOS/tasks.c ****                  * taskRESET_READY_PRIORITY() macro can function correctly. */
1631:FreeRTOS/tasks.c ****                 uxPriorityUsedOnEntry = pxTCB->uxPriority;
1632:FreeRTOS/tasks.c **** 
1633:FreeRTOS/tasks.c ****                 #if ( configUSE_MUTEXES == 1 )
1634:FreeRTOS/tasks.c ****                     {
1635:FreeRTOS/tasks.c ****                         /* Only change the priority being used if the task is not
1636:FreeRTOS/tasks.c ****                          * currently using an inherited priority. */
1637:FreeRTOS/tasks.c ****                         if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1638:FreeRTOS/tasks.c ****                         {
1639:FreeRTOS/tasks.c ****                             pxTCB->uxPriority = uxNewPriority;
1640:FreeRTOS/tasks.c ****                         }
1641:FreeRTOS/tasks.c ****                         else
1642:FreeRTOS/tasks.c ****                         {
1643:FreeRTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
1644:FreeRTOS/tasks.c ****                         }
1645:FreeRTOS/tasks.c **** 
1646:FreeRTOS/tasks.c ****                         /* The base priority gets set whatever. */
1647:FreeRTOS/tasks.c ****                         pxTCB->uxBasePriority = uxNewPriority;
1648:FreeRTOS/tasks.c ****                     }
1649:FreeRTOS/tasks.c ****                 #else /* if ( configUSE_MUTEXES == 1 ) */
1650:FreeRTOS/tasks.c ****                     {
1651:FreeRTOS/tasks.c ****                         pxTCB->uxPriority = uxNewPriority;
1652:FreeRTOS/tasks.c ****                     }
1653:FreeRTOS/tasks.c ****                 #endif /* if ( configUSE_MUTEXES == 1 ) */
1654:FreeRTOS/tasks.c **** 
1655:FreeRTOS/tasks.c ****                 /* Only reset the event list item value if the value is not
1656:FreeRTOS/tasks.c ****                  * being used for anything else. */
1657:FreeRTOS/tasks.c ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_V
1658:FreeRTOS/tasks.c ****                 {
1659:FreeRTOS/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX
1660:FreeRTOS/tasks.c ****                 }
1661:FreeRTOS/tasks.c ****                 else
1662:FreeRTOS/tasks.c ****                 {
1663:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1664:FreeRTOS/tasks.c ****                 }
1665:FreeRTOS/tasks.c **** 
1666:FreeRTOS/tasks.c ****                 /* If the task is in the blocked or suspended list we need do
1667:FreeRTOS/tasks.c ****                  * nothing more than change its priority variable. However, if
1668:FreeRTOS/tasks.c ****                  * the task is in a ready list it needs to be removed and placed
1669:FreeRTOS/tasks.c ****                  * in the list appropriate to its new priority. */
1670:FreeRTOS/tasks.c ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( px
1671:FreeRTOS/tasks.c ****                 {
1672:FreeRTOS/tasks.c ****                     /* The task is currently in its ready list - remove before
1673:FreeRTOS/tasks.c ****                      * adding it to its new ready list.  As we are in a critical
1674:FreeRTOS/tasks.c ****                      * section we can do this even if the scheduler is suspended. */
1675:FreeRTOS/tasks.c ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1676:FreeRTOS/tasks.c ****                     {
1677:FreeRTOS/tasks.c ****                         /* It is known that the task is in its ready list so
1678:FreeRTOS/tasks.c ****                          * there is no need to check again and the port level
1679:FreeRTOS/tasks.c ****                          * reset macro can be called directly. */
1680:FreeRTOS/tasks.c ****                         portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1681:FreeRTOS/tasks.c ****                     }
1682:FreeRTOS/tasks.c ****                     else
1683:FreeRTOS/tasks.c ****                     {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 31


1684:FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1685:FreeRTOS/tasks.c ****                     }
1686:FreeRTOS/tasks.c **** 
1687:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
1688:FreeRTOS/tasks.c ****                 }
1689:FreeRTOS/tasks.c ****                 else
1690:FreeRTOS/tasks.c ****                 {
1691:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1692:FreeRTOS/tasks.c ****                 }
1693:FreeRTOS/tasks.c **** 
1694:FreeRTOS/tasks.c ****                 if( xYieldRequired != pdFALSE )
1695:FreeRTOS/tasks.c ****                 {
1696:FreeRTOS/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
1697:FreeRTOS/tasks.c ****                 }
1698:FreeRTOS/tasks.c ****                 else
1699:FreeRTOS/tasks.c ****                 {
1700:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1701:FreeRTOS/tasks.c ****                 }
1702:FreeRTOS/tasks.c **** 
1703:FreeRTOS/tasks.c ****                 /* Remove compiler warning about unused variables when the port
1704:FreeRTOS/tasks.c ****                  * optimised task selection is not being used. */
1705:FreeRTOS/tasks.c ****                 ( void ) uxPriorityUsedOnEntry;
1706:FreeRTOS/tasks.c ****             }
1707:FreeRTOS/tasks.c ****         }
1708:FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
1709:FreeRTOS/tasks.c ****     }
1710:FreeRTOS/tasks.c **** 
1711:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1712:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1713:FreeRTOS/tasks.c **** 
1714:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1715:FreeRTOS/tasks.c **** 
1716:FreeRTOS/tasks.c ****     void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1717:FreeRTOS/tasks.c ****     {
1718:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
1719:FreeRTOS/tasks.c **** 
1720:FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
1721:FreeRTOS/tasks.c ****         {
1722:FreeRTOS/tasks.c ****             /* If null is passed in here then it is the running task that is
1723:FreeRTOS/tasks.c ****              * being suspended. */
1724:FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1725:FreeRTOS/tasks.c **** 
1726:FreeRTOS/tasks.c ****             traceTASK_SUSPEND( pxTCB );
1727:FreeRTOS/tasks.c **** 
1728:FreeRTOS/tasks.c ****             /* Remove task from the ready/delayed list and place in the
1729:FreeRTOS/tasks.c ****              * suspended list. */
1730:FreeRTOS/tasks.c ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1731:FreeRTOS/tasks.c ****             {
1732:FreeRTOS/tasks.c ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1733:FreeRTOS/tasks.c ****             }
1734:FreeRTOS/tasks.c ****             else
1735:FreeRTOS/tasks.c ****             {
1736:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1737:FreeRTOS/tasks.c ****             }
1738:FreeRTOS/tasks.c **** 
1739:FreeRTOS/tasks.c ****             /* Is the task waiting on an event also? */
1740:FreeRTOS/tasks.c ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 32


1741:FreeRTOS/tasks.c ****             {
1742:FreeRTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1743:FreeRTOS/tasks.c ****             }
1744:FreeRTOS/tasks.c ****             else
1745:FreeRTOS/tasks.c ****             {
1746:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1747:FreeRTOS/tasks.c ****             }
1748:FreeRTOS/tasks.c **** 
1749:FreeRTOS/tasks.c ****             vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1750:FreeRTOS/tasks.c **** 
1751:FreeRTOS/tasks.c ****             #if ( configUSE_TASK_NOTIFICATIONS == 1 )
1752:FreeRTOS/tasks.c ****                 {
1753:FreeRTOS/tasks.c ****                     BaseType_t x;
1754:FreeRTOS/tasks.c **** 
1755:FreeRTOS/tasks.c ****                     for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
1756:FreeRTOS/tasks.c ****                     {
1757:FreeRTOS/tasks.c ****                         if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
1758:FreeRTOS/tasks.c ****                         {
1759:FreeRTOS/tasks.c ****                             /* The task was blocked to wait for a notification, but is
1760:FreeRTOS/tasks.c ****                              * now suspended, so no notification was received. */
1761:FreeRTOS/tasks.c ****                             pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
1762:FreeRTOS/tasks.c ****                         }
1763:FreeRTOS/tasks.c ****                     }
1764:FreeRTOS/tasks.c ****                 }
1765:FreeRTOS/tasks.c ****             #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1766:FreeRTOS/tasks.c ****         }
1767:FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
1768:FreeRTOS/tasks.c **** 
1769:FreeRTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
1770:FreeRTOS/tasks.c ****         {
1771:FreeRTOS/tasks.c ****             /* Reset the next expected unblock time in case it referred to the
1772:FreeRTOS/tasks.c ****              * task that is now in the Suspended state. */
1773:FreeRTOS/tasks.c ****             taskENTER_CRITICAL();
1774:FreeRTOS/tasks.c ****             {
1775:FreeRTOS/tasks.c ****                 prvResetNextTaskUnblockTime();
1776:FreeRTOS/tasks.c ****             }
1777:FreeRTOS/tasks.c ****             taskEXIT_CRITICAL();
1778:FreeRTOS/tasks.c ****         }
1779:FreeRTOS/tasks.c ****         else
1780:FreeRTOS/tasks.c ****         {
1781:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1782:FreeRTOS/tasks.c ****         }
1783:FreeRTOS/tasks.c **** 
1784:FreeRTOS/tasks.c ****         if( pxTCB == pxCurrentTCB )
1785:FreeRTOS/tasks.c ****         {
1786:FreeRTOS/tasks.c ****             if( xSchedulerRunning != pdFALSE )
1787:FreeRTOS/tasks.c ****             {
1788:FreeRTOS/tasks.c ****                 /* The current task has just been suspended. */
1789:FreeRTOS/tasks.c ****                 configASSERT( uxSchedulerSuspended == 0 );
1790:FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
1791:FreeRTOS/tasks.c ****             }
1792:FreeRTOS/tasks.c ****             else
1793:FreeRTOS/tasks.c ****             {
1794:FreeRTOS/tasks.c ****                 /* The scheduler is not running, but the task that was pointed
1795:FreeRTOS/tasks.c ****                  * to by pxCurrentTCB has just been suspended and pxCurrentTCB
1796:FreeRTOS/tasks.c ****                  * must be adjusted to point to a different task. */
1797:FreeRTOS/tasks.c ****                 if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*li
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 33


1798:FreeRTOS/tasks.c ****                 {
1799:FreeRTOS/tasks.c ****                     /* No other tasks are ready, so set pxCurrentTCB back to
1800:FreeRTOS/tasks.c ****                      * NULL so when the next task is created pxCurrentTCB will
1801:FreeRTOS/tasks.c ****                      * be set to point to it no matter what its relative priority
1802:FreeRTOS/tasks.c ****                      * is. */
1803:FreeRTOS/tasks.c ****                     pxCurrentTCB = NULL;
1804:FreeRTOS/tasks.c ****                 }
1805:FreeRTOS/tasks.c ****                 else
1806:FreeRTOS/tasks.c ****                 {
1807:FreeRTOS/tasks.c ****                     vTaskSwitchContext();
1808:FreeRTOS/tasks.c ****                 }
1809:FreeRTOS/tasks.c ****             }
1810:FreeRTOS/tasks.c ****         }
1811:FreeRTOS/tasks.c ****         else
1812:FreeRTOS/tasks.c ****         {
1813:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1814:FreeRTOS/tasks.c ****         }
1815:FreeRTOS/tasks.c ****     }
1816:FreeRTOS/tasks.c **** 
1817:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1818:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1819:FreeRTOS/tasks.c **** 
1820:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1821:FreeRTOS/tasks.c **** 
1822:FreeRTOS/tasks.c ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1823:FreeRTOS/tasks.c ****     {
  29              		.loc 1 1823 5 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
1824:FreeRTOS/tasks.c ****         BaseType_t xReturn = pdFALSE;
  34              		.loc 1 1824 9 view .LVU1
1825:FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
  35              		.loc 1 1825 9 view .LVU2
1826:FreeRTOS/tasks.c **** 
1827:FreeRTOS/tasks.c ****         /* Accesses xPendingReadyList so must be called from a critical
1828:FreeRTOS/tasks.c ****          * section. */
1829:FreeRTOS/tasks.c **** 
1830:FreeRTOS/tasks.c ****         /* It does not make sense to check if the calling task is suspended. */
1831:FreeRTOS/tasks.c ****         configASSERT( xTask );
  36              		.loc 1 1831 9 view .LVU3
  37 0000 28B1     		cbz	r0, .L8
  38              		.loc 1 1831 30 discriminator 2 view .LVU4
1832:FreeRTOS/tasks.c **** 
1833:FreeRTOS/tasks.c ****         /* Is the task being resumed actually in the suspended list? */
1834:FreeRTOS/tasks.c ****         if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  39              		.loc 1 1834 9 discriminator 2 view .LVU5
  40              		.loc 1 1834 13 is_stmt 0 discriminator 2 view .LVU6
  41 0002 4169     		ldr	r1, [r0, #20]
  42              		.loc 1 1834 11 discriminator 2 view .LVU7
  43 0004 0C4A     		ldr	r2, .L10
  44 0006 9142     		cmp	r1, r2
  45 0008 0AD0     		beq	.L9
1824:FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
  46              		.loc 1 1824 20 view .LVU8
  47 000a 0020     		movs	r0, #0
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 34


  48              	.LVL1:
1824:FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
  49              		.loc 1 1824 20 view .LVU9
  50 000c 7047     		bx	lr
  51              	.LVL2:
  52              	.L8:
1831:FreeRTOS/tasks.c **** 
  53              		.loc 1 1831 9 is_stmt 1 view .LVU10
  54              	.LBB174:
  55              	.LBI174:
  56              		.file 2 "FreeRTOS/portable/portmacro.h"
   1:FreeRTOS/portable/portmacro.h **** /*
   2:FreeRTOS/portable/portmacro.h ****  * FreeRTOS Kernel V10.4.6
   3:FreeRTOS/portable/portmacro.h ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/portable/portmacro.h ****  *
   5:FreeRTOS/portable/portmacro.h ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS/portable/portmacro.h ****  *
   7:FreeRTOS/portable/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS/portable/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS/portable/portmacro.h ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS/portable/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS/portable/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS/portable/portmacro.h ****  * subject to the following conditions:
  13:FreeRTOS/portable/portmacro.h ****  *
  14:FreeRTOS/portable/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS/portable/portmacro.h ****  * copies or substantial portions of the Software.
  16:FreeRTOS/portable/portmacro.h ****  *
  17:FreeRTOS/portable/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS/portable/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS/portable/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS/portable/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS/portable/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS/portable/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS/portable/portmacro.h ****  *
  24:FreeRTOS/portable/portmacro.h ****  * https://www.FreeRTOS.org
  25:FreeRTOS/portable/portmacro.h ****  * https://github.com/FreeRTOS
  26:FreeRTOS/portable/portmacro.h ****  *
  27:FreeRTOS/portable/portmacro.h ****  */
  28:FreeRTOS/portable/portmacro.h **** 
  29:FreeRTOS/portable/portmacro.h **** 
  30:FreeRTOS/portable/portmacro.h **** #ifndef PORTMACRO_H
  31:FreeRTOS/portable/portmacro.h ****     #define PORTMACRO_H
  32:FreeRTOS/portable/portmacro.h **** 
  33:FreeRTOS/portable/portmacro.h ****     #ifdef __cplusplus
  34:FreeRTOS/portable/portmacro.h ****         extern "C" {
  35:FreeRTOS/portable/portmacro.h ****     #endif
  36:FreeRTOS/portable/portmacro.h **** 
  37:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------
  38:FreeRTOS/portable/portmacro.h ****  * Port specific definitions.
  39:FreeRTOS/portable/portmacro.h ****  *
  40:FreeRTOS/portable/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  41:FreeRTOS/portable/portmacro.h ****  * given hardware and compiler.
  42:FreeRTOS/portable/portmacro.h ****  *
  43:FreeRTOS/portable/portmacro.h ****  * These settings should not be altered.
  44:FreeRTOS/portable/portmacro.h ****  *-----------------------------------------------------------
  45:FreeRTOS/portable/portmacro.h ****  */
  46:FreeRTOS/portable/portmacro.h **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 35


  47:FreeRTOS/portable/portmacro.h **** /* Type definitions. */
  48:FreeRTOS/portable/portmacro.h ****     #define portCHAR          char
  49:FreeRTOS/portable/portmacro.h ****     #define portFLOAT         float
  50:FreeRTOS/portable/portmacro.h ****     #define portDOUBLE        double
  51:FreeRTOS/portable/portmacro.h ****     #define portLONG          long
  52:FreeRTOS/portable/portmacro.h ****     #define portSHORT         short
  53:FreeRTOS/portable/portmacro.h ****     #define portSTACK_TYPE    uint32_t
  54:FreeRTOS/portable/portmacro.h ****     #define portBASE_TYPE     long
  55:FreeRTOS/portable/portmacro.h **** 
  56:FreeRTOS/portable/portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  57:FreeRTOS/portable/portmacro.h ****     typedef long             BaseType_t;
  58:FreeRTOS/portable/portmacro.h ****     typedef unsigned long    UBaseType_t;
  59:FreeRTOS/portable/portmacro.h **** 
  60:FreeRTOS/portable/portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  61:FreeRTOS/portable/portmacro.h ****         typedef uint16_t     TickType_t;
  62:FreeRTOS/portable/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  63:FreeRTOS/portable/portmacro.h ****     #else
  64:FreeRTOS/portable/portmacro.h ****         typedef uint32_t     TickType_t;
  65:FreeRTOS/portable/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  66:FreeRTOS/portable/portmacro.h **** 
  67:FreeRTOS/portable/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  68:FreeRTOS/portable/portmacro.h ****  * not need to be guarded with a critical section. */
  69:FreeRTOS/portable/portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  70:FreeRTOS/portable/portmacro.h ****     #endif
  71:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
  72:FreeRTOS/portable/portmacro.h **** 
  73:FreeRTOS/portable/portmacro.h **** /* Architecture specifics. */
  74:FreeRTOS/portable/portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  75:FreeRTOS/portable/portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  76:FreeRTOS/portable/portmacro.h ****     #define portBYTE_ALIGNMENT    8
  77:FreeRTOS/portable/portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  78:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
  79:FreeRTOS/portable/portmacro.h **** 
  80:FreeRTOS/portable/portmacro.h **** /* Scheduler utilities. */
  81:FreeRTOS/portable/portmacro.h ****     #define portYIELD()                                 \
  82:FreeRTOS/portable/portmacro.h ****     {                                                   \
  83:FreeRTOS/portable/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  84:FreeRTOS/portable/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  85:FreeRTOS/portable/portmacro.h ****                                                         \
  86:FreeRTOS/portable/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  87:FreeRTOS/portable/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  88:FreeRTOS/portable/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  89:FreeRTOS/portable/portmacro.h ****         __asm volatile ( "isb" );                                  \
  90:FreeRTOS/portable/portmacro.h ****     }
  91:FreeRTOS/portable/portmacro.h **** 
  92:FreeRTOS/portable/portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  93:FreeRTOS/portable/portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  94:FreeRTOS/portable/portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    do { if( xSwitchRequired != pdFALSE ) portY
  95:FreeRTOS/portable/portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  96:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
  97:FreeRTOS/portable/portmacro.h **** 
  98:FreeRTOS/portable/portmacro.h **** /* Critical section management. */
  99:FreeRTOS/portable/portmacro.h ****     extern void vPortEnterCritical( void );
 100:FreeRTOS/portable/portmacro.h ****     extern void vPortExitCritical( void );
 101:FreeRTOS/portable/portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 102:FreeRTOS/portable/portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 103:FreeRTOS/portable/portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 36


 104:FreeRTOS/portable/portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 105:FreeRTOS/portable/portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 106:FreeRTOS/portable/portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 107:FreeRTOS/portable/portmacro.h **** 
 108:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
 109:FreeRTOS/portable/portmacro.h **** 
 110:FreeRTOS/portable/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 111:FreeRTOS/portable/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 112:FreeRTOS/portable/portmacro.h ****  * (which build with all the ports) will build. */
 113:FreeRTOS/portable/portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 114:FreeRTOS/portable/portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 115:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
 116:FreeRTOS/portable/portmacro.h **** 
 117:FreeRTOS/portable/portmacro.h **** /* Tickless idle/low power functionality. */
 118:FreeRTOS/portable/portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 119:FreeRTOS/portable/portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 120:FreeRTOS/portable/portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 121:FreeRTOS/portable/portmacro.h ****     #endif
 122:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
 123:FreeRTOS/portable/portmacro.h **** 
 124:FreeRTOS/portable/portmacro.h **** /* Architecture specific optimisations. */
 125:FreeRTOS/portable/portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 126:FreeRTOS/portable/portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 127:FreeRTOS/portable/portmacro.h ****     #endif
 128:FreeRTOS/portable/portmacro.h **** 
 129:FreeRTOS/portable/portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 130:FreeRTOS/portable/portmacro.h **** 
 131:FreeRTOS/portable/portmacro.h **** /* Generic helper function. */
 132:FreeRTOS/portable/portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 133:FreeRTOS/portable/portmacro.h ****         {
 134:FreeRTOS/portable/portmacro.h ****             uint8_t ucReturn;
 135:FreeRTOS/portable/portmacro.h **** 
 136:FreeRTOS/portable/portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 137:FreeRTOS/portable/portmacro.h **** 
 138:FreeRTOS/portable/portmacro.h ****             return ucReturn;
 139:FreeRTOS/portable/portmacro.h ****         }
 140:FreeRTOS/portable/portmacro.h **** 
 141:FreeRTOS/portable/portmacro.h **** /* Check the configuration. */
 142:FreeRTOS/portable/portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 143:FreeRTOS/portable/portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 144:FreeRTOS/portable/portmacro.h ****         #endif
 145:FreeRTOS/portable/portmacro.h **** 
 146:FreeRTOS/portable/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 147:FreeRTOS/portable/portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 148:FreeRTOS/portable/portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 149:FreeRTOS/portable/portmacro.h **** 
 150:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
 151:FreeRTOS/portable/portmacro.h **** 
 152:FreeRTOS/portable/portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 153:FreeRTOS/portable/portmacro.h **** 
 154:FreeRTOS/portable/portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 155:FreeRTOS/portable/portmacro.h **** 
 156:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
 157:FreeRTOS/portable/portmacro.h **** 
 158:FreeRTOS/portable/portmacro.h ****     #ifdef configASSERT
 159:FreeRTOS/portable/portmacro.h ****         void vPortValidateInterruptPriority( void );
 160:FreeRTOS/portable/portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 37


 161:FreeRTOS/portable/portmacro.h ****     #endif
 162:FreeRTOS/portable/portmacro.h **** 
 163:FreeRTOS/portable/portmacro.h **** /* portNOP() is not required by this port. */
 164:FreeRTOS/portable/portmacro.h ****     #define portNOP()
 165:FreeRTOS/portable/portmacro.h **** 
 166:FreeRTOS/portable/portmacro.h ****     #define portINLINE              __inline
 167:FreeRTOS/portable/portmacro.h **** 
 168:FreeRTOS/portable/portmacro.h ****     #ifndef portFORCE_INLINE
 169:FreeRTOS/portable/portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 170:FreeRTOS/portable/portmacro.h ****     #endif
 171:FreeRTOS/portable/portmacro.h **** 
 172:FreeRTOS/portable/portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 173:FreeRTOS/portable/portmacro.h ****     {
 174:FreeRTOS/portable/portmacro.h ****         uint32_t ulCurrentInterrupt;
 175:FreeRTOS/portable/portmacro.h ****         BaseType_t xReturn;
 176:FreeRTOS/portable/portmacro.h **** 
 177:FreeRTOS/portable/portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 178:FreeRTOS/portable/portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 179:FreeRTOS/portable/portmacro.h **** 
 180:FreeRTOS/portable/portmacro.h ****         if( ulCurrentInterrupt == 0 )
 181:FreeRTOS/portable/portmacro.h ****         {
 182:FreeRTOS/portable/portmacro.h ****             xReturn = pdFALSE;
 183:FreeRTOS/portable/portmacro.h ****         }
 184:FreeRTOS/portable/portmacro.h ****         else
 185:FreeRTOS/portable/portmacro.h ****         {
 186:FreeRTOS/portable/portmacro.h ****             xReturn = pdTRUE;
 187:FreeRTOS/portable/portmacro.h ****         }
 188:FreeRTOS/portable/portmacro.h **** 
 189:FreeRTOS/portable/portmacro.h ****         return xReturn;
 190:FreeRTOS/portable/portmacro.h ****     }
 191:FreeRTOS/portable/portmacro.h **** 
 192:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
 193:FreeRTOS/portable/portmacro.h **** 
 194:FreeRTOS/portable/portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
  57              		.loc 2 194 34 view .LVU11
  58              	.LBB175:
 195:FreeRTOS/portable/portmacro.h ****     {
 196:FreeRTOS/portable/portmacro.h ****         uint32_t ulNewBASEPRI;
  59              		.loc 2 196 9 view .LVU12
 197:FreeRTOS/portable/portmacro.h **** 
 198:FreeRTOS/portable/portmacro.h ****         __asm volatile
  60              		.loc 2 198 9 view .LVU13
  61              		.syntax unified
  62              	@ 198 "FreeRTOS/portable/portmacro.h" 1
  63 000e 4FF05003 			mov r3, #80												
  64 0012 83F31188 		msr basepri, r3											
  65 0016 BFF36F8F 		isb														
  66 001a BFF34F8F 		dsb														
  67              	
  68              	@ 0 "" 2
  69              	.LVL3:
  70              		.thumb
  71              		.syntax unified
  72              	.L3:
  73              		.loc 2 198 9 is_stmt 0 view .LVU14
  74              	.LBE175:
  75              	.LBE174:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 38


1831:FreeRTOS/tasks.c **** 
  76              		.loc 1 1831 9 is_stmt 1 discriminator 1 view .LVU15
1831:FreeRTOS/tasks.c **** 
  77              		.loc 1 1831 9 discriminator 1 view .LVU16
1831:FreeRTOS/tasks.c **** 
  78              		.loc 1 1831 9 discriminator 1 view .LVU17
  79 001e FEE7     		b	.L3
  80              	.L9:
1835:FreeRTOS/tasks.c ****         {
1836:FreeRTOS/tasks.c ****             /* Has the task already been resumed from within an ISR? */
1837:FreeRTOS/tasks.c ****             if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALS
  81              		.loc 1 1837 13 view .LVU18
  82              		.loc 1 1837 17 is_stmt 0 view .LVU19
  83 0020 836A     		ldr	r3, [r0, #40]
  84              		.loc 1 1837 15 view .LVU20
  85 0022 064A     		ldr	r2, .L10+4
  86 0024 9342     		cmp	r3, r2
  87 0026 02D0     		beq	.L6
1838:FreeRTOS/tasks.c ****             {
1839:FreeRTOS/tasks.c ****                 /* Is it in the suspended list because it is in the Suspended
1840:FreeRTOS/tasks.c ****                  * state, or because is is blocked with no timeout? */
1841:FreeRTOS/tasks.c ****                 if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint
  88              		.loc 1 1841 17 is_stmt 1 view .LVU21
  89              		.loc 1 1841 19 is_stmt 0 view .LVU22
  90 0028 1BB1     		cbz	r3, .L7
1824:FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
  91              		.loc 1 1824 20 view .LVU23
  92 002a 0020     		movs	r0, #0
  93              	.LVL4:
1824:FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
  94              		.loc 1 1824 20 view .LVU24
  95 002c 7047     		bx	lr
  96              	.LVL5:
  97              	.L6:
1824:FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
  98              		.loc 1 1824 20 view .LVU25
  99 002e 0020     		movs	r0, #0
 100              	.LVL6:
1824:FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
 101              		.loc 1 1824 20 view .LVU26
 102 0030 7047     		bx	lr
 103              	.LVL7:
 104              	.L7:
1842:FreeRTOS/tasks.c ****                 {
1843:FreeRTOS/tasks.c ****                     xReturn = pdTRUE;
 105              		.loc 1 1843 29 view .LVU27
 106 0032 0120     		movs	r0, #1
 107              	.LVL8:
1844:FreeRTOS/tasks.c ****                 }
1845:FreeRTOS/tasks.c ****                 else
1846:FreeRTOS/tasks.c ****                 {
1847:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1848:FreeRTOS/tasks.c ****                 }
1849:FreeRTOS/tasks.c ****             }
1850:FreeRTOS/tasks.c ****             else
1851:FreeRTOS/tasks.c ****             {
1852:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 39


1853:FreeRTOS/tasks.c ****             }
1854:FreeRTOS/tasks.c ****         }
1855:FreeRTOS/tasks.c ****         else
1856:FreeRTOS/tasks.c ****         {
1857:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
 108              		.loc 1 1857 37 is_stmt 1 view .LVU28
1858:FreeRTOS/tasks.c ****         }
1859:FreeRTOS/tasks.c **** 
1860:FreeRTOS/tasks.c ****         return xReturn;
 109              		.loc 1 1860 9 view .LVU29
1861:FreeRTOS/tasks.c ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 110              		.loc 1 1861 5 is_stmt 0 view .LVU30
 111 0034 7047     		bx	lr
 112              	.L11:
 113 0036 00BF     		.align	2
 114              	.L10:
 115 0038 00000000 		.word	.LANCHOR0
 116 003c 00000000 		.word	.LANCHOR1
 117              		.cfi_endproc
 118              	.LFE17:
 120              		.section	.text.prvGetExpectedIdleTime,"ax",%progbits
 121              		.align	1
 122              		.syntax unified
 123              		.thumb
 124              		.thumb_func
 125              		.fpu fpv4-sp-d16
 127              	prvGetExpectedIdleTime:
 128              	.LFB23:
1862:FreeRTOS/tasks.c **** 
1863:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1864:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1865:FreeRTOS/tasks.c **** 
1866:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1867:FreeRTOS/tasks.c **** 
1868:FreeRTOS/tasks.c ****     void vTaskResume( TaskHandle_t xTaskToResume )
1869:FreeRTOS/tasks.c ****     {
1870:FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
1871:FreeRTOS/tasks.c **** 
1872:FreeRTOS/tasks.c ****         /* It does not make sense to resume the calling task. */
1873:FreeRTOS/tasks.c ****         configASSERT( xTaskToResume );
1874:FreeRTOS/tasks.c **** 
1875:FreeRTOS/tasks.c ****         /* The parameter cannot be NULL as it is impossible to resume the
1876:FreeRTOS/tasks.c ****          * currently executing task. */
1877:FreeRTOS/tasks.c ****         if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1878:FreeRTOS/tasks.c ****         {
1879:FreeRTOS/tasks.c ****             taskENTER_CRITICAL();
1880:FreeRTOS/tasks.c ****             {
1881:FreeRTOS/tasks.c ****                 if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1882:FreeRTOS/tasks.c ****                 {
1883:FreeRTOS/tasks.c ****                     traceTASK_RESUME( pxTCB );
1884:FreeRTOS/tasks.c **** 
1885:FreeRTOS/tasks.c ****                     /* The ready list can be accessed even if the scheduler is
1886:FreeRTOS/tasks.c ****                      * suspended because this is inside a critical section. */
1887:FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1888:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
1889:FreeRTOS/tasks.c **** 
1890:FreeRTOS/tasks.c ****                     /* A higher priority task may have just been resumed. */
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 40


1891:FreeRTOS/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1892:FreeRTOS/tasks.c ****                     {
1893:FreeRTOS/tasks.c ****                         /* This yield may not cause the task just resumed to run,
1894:FreeRTOS/tasks.c ****                          * but will leave the lists in the correct state for the
1895:FreeRTOS/tasks.c ****                          * next yield. */
1896:FreeRTOS/tasks.c ****                         taskYIELD_IF_USING_PREEMPTION();
1897:FreeRTOS/tasks.c ****                     }
1898:FreeRTOS/tasks.c ****                     else
1899:FreeRTOS/tasks.c ****                     {
1900:FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1901:FreeRTOS/tasks.c ****                     }
1902:FreeRTOS/tasks.c ****                 }
1903:FreeRTOS/tasks.c ****                 else
1904:FreeRTOS/tasks.c ****                 {
1905:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1906:FreeRTOS/tasks.c ****                 }
1907:FreeRTOS/tasks.c ****             }
1908:FreeRTOS/tasks.c ****             taskEXIT_CRITICAL();
1909:FreeRTOS/tasks.c ****         }
1910:FreeRTOS/tasks.c ****         else
1911:FreeRTOS/tasks.c ****         {
1912:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1913:FreeRTOS/tasks.c ****         }
1914:FreeRTOS/tasks.c ****     }
1915:FreeRTOS/tasks.c **** 
1916:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1917:FreeRTOS/tasks.c **** 
1918:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1919:FreeRTOS/tasks.c **** 
1920:FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1921:FreeRTOS/tasks.c **** 
1922:FreeRTOS/tasks.c ****     BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1923:FreeRTOS/tasks.c ****     {
1924:FreeRTOS/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
1925:FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
1926:FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
1927:FreeRTOS/tasks.c **** 
1928:FreeRTOS/tasks.c ****         configASSERT( xTaskToResume );
1929:FreeRTOS/tasks.c **** 
1930:FreeRTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
1931:FreeRTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
1932:FreeRTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
1933:FreeRTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
1934:FreeRTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1935:FreeRTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
1936:FreeRTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1937:FreeRTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
1938:FreeRTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
1939:FreeRTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
1940:FreeRTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
1941:FreeRTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
1942:FreeRTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
1943:FreeRTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
1944:FreeRTOS/tasks.c ****          * provided on the following link:
1945:FreeRTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1946:FreeRTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1947:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 41


1948:FreeRTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1949:FreeRTOS/tasks.c ****         {
1950:FreeRTOS/tasks.c ****             if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1951:FreeRTOS/tasks.c ****             {
1952:FreeRTOS/tasks.c ****                 traceTASK_RESUME_FROM_ISR( pxTCB );
1953:FreeRTOS/tasks.c **** 
1954:FreeRTOS/tasks.c ****                 /* Check the ready lists can be accessed. */
1955:FreeRTOS/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1956:FreeRTOS/tasks.c ****                 {
1957:FreeRTOS/tasks.c ****                     /* Ready lists can be accessed so move the task from the
1958:FreeRTOS/tasks.c ****                      * suspended list to the ready list directly. */
1959:FreeRTOS/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1960:FreeRTOS/tasks.c ****                     {
1961:FreeRTOS/tasks.c ****                         xYieldRequired = pdTRUE;
1962:FreeRTOS/tasks.c **** 
1963:FreeRTOS/tasks.c ****                         /* Mark that a yield is pending in case the user is not
1964:FreeRTOS/tasks.c ****                          * using the return value to initiate a context switch
1965:FreeRTOS/tasks.c ****                          * from the ISR using portYIELD_FROM_ISR. */
1966:FreeRTOS/tasks.c ****                         xYieldPending = pdTRUE;
1967:FreeRTOS/tasks.c ****                     }
1968:FreeRTOS/tasks.c ****                     else
1969:FreeRTOS/tasks.c ****                     {
1970:FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1971:FreeRTOS/tasks.c ****                     }
1972:FreeRTOS/tasks.c **** 
1973:FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1974:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
1975:FreeRTOS/tasks.c ****                 }
1976:FreeRTOS/tasks.c ****                 else
1977:FreeRTOS/tasks.c ****                 {
1978:FreeRTOS/tasks.c ****                     /* The delayed or ready lists cannot be accessed so the task
1979:FreeRTOS/tasks.c ****                      * is held in the pending ready list until the scheduler is
1980:FreeRTOS/tasks.c ****                      * unsuspended. */
1981:FreeRTOS/tasks.c ****                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1982:FreeRTOS/tasks.c ****                 }
1983:FreeRTOS/tasks.c ****             }
1984:FreeRTOS/tasks.c ****             else
1985:FreeRTOS/tasks.c ****             {
1986:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1987:FreeRTOS/tasks.c ****             }
1988:FreeRTOS/tasks.c ****         }
1989:FreeRTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1990:FreeRTOS/tasks.c **** 
1991:FreeRTOS/tasks.c ****         return xYieldRequired;
1992:FreeRTOS/tasks.c ****     }
1993:FreeRTOS/tasks.c **** 
1994:FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1995:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1996:FreeRTOS/tasks.c **** 
1997:FreeRTOS/tasks.c **** void vTaskStartScheduler( void )
1998:FreeRTOS/tasks.c **** {
1999:FreeRTOS/tasks.c ****     BaseType_t xReturn;
2000:FreeRTOS/tasks.c **** 
2001:FreeRTOS/tasks.c ****     /* Add the idle task at the lowest priority. */
2002:FreeRTOS/tasks.c ****     #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
2003:FreeRTOS/tasks.c ****         {
2004:FreeRTOS/tasks.c ****             StaticTask_t * pxIdleTaskTCBBuffer = NULL;
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 42


2005:FreeRTOS/tasks.c ****             StackType_t * pxIdleTaskStackBuffer = NULL;
2006:FreeRTOS/tasks.c ****             uint32_t ulIdleTaskStackSize;
2007:FreeRTOS/tasks.c **** 
2008:FreeRTOS/tasks.c ****             /* The Idle task is created using user provided RAM - obtain the
2009:FreeRTOS/tasks.c ****              * address of the RAM then create the idle task. */
2010:FreeRTOS/tasks.c ****             vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTas
2011:FreeRTOS/tasks.c ****             xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
2012:FreeRTOS/tasks.c ****                                                  configIDLE_TASK_NAME,
2013:FreeRTOS/tasks.c ****                                                  ulIdleTaskStackSize,
2014:FreeRTOS/tasks.c ****                                                  ( void * ) NULL,       /*lint !e961.  The cast is 
2015:FreeRTOS/tasks.c ****                                                  portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIO
2016:FreeRTOS/tasks.c ****                                                  pxIdleTaskStackBuffer,
2017:FreeRTOS/tasks.c ****                                                  pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exceptio
2018:FreeRTOS/tasks.c **** 
2019:FreeRTOS/tasks.c ****             if( xIdleTaskHandle != NULL )
2020:FreeRTOS/tasks.c ****             {
2021:FreeRTOS/tasks.c ****                 xReturn = pdPASS;
2022:FreeRTOS/tasks.c ****             }
2023:FreeRTOS/tasks.c ****             else
2024:FreeRTOS/tasks.c ****             {
2025:FreeRTOS/tasks.c ****                 xReturn = pdFAIL;
2026:FreeRTOS/tasks.c ****             }
2027:FreeRTOS/tasks.c ****         }
2028:FreeRTOS/tasks.c ****     #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
2029:FreeRTOS/tasks.c ****         {
2030:FreeRTOS/tasks.c ****             /* The Idle task is being created using dynamically allocated RAM. */
2031:FreeRTOS/tasks.c ****             xReturn = xTaskCreate( prvIdleTask,
2032:FreeRTOS/tasks.c ****                                    configIDLE_TASK_NAME,
2033:FreeRTOS/tasks.c ****                                    configMINIMAL_STACK_SIZE,
2034:FreeRTOS/tasks.c ****                                    ( void * ) NULL,
2035:FreeRTOS/tasks.c ****                                    portPRIVILEGE_BIT,  /* In effect ( tskIDLE_PRIORITY | portPRIVIL
2036:FreeRTOS/tasks.c ****                                    &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as i
2037:FreeRTOS/tasks.c ****         }
2038:FreeRTOS/tasks.c ****     #endif /* configSUPPORT_STATIC_ALLOCATION */
2039:FreeRTOS/tasks.c **** 
2040:FreeRTOS/tasks.c ****     #if ( configUSE_TIMERS == 1 )
2041:FreeRTOS/tasks.c ****         {
2042:FreeRTOS/tasks.c ****             if( xReturn == pdPASS )
2043:FreeRTOS/tasks.c ****             {
2044:FreeRTOS/tasks.c ****                 xReturn = xTimerCreateTimerTask();
2045:FreeRTOS/tasks.c ****             }
2046:FreeRTOS/tasks.c ****             else
2047:FreeRTOS/tasks.c ****             {
2048:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2049:FreeRTOS/tasks.c ****             }
2050:FreeRTOS/tasks.c ****         }
2051:FreeRTOS/tasks.c ****     #endif /* configUSE_TIMERS */
2052:FreeRTOS/tasks.c **** 
2053:FreeRTOS/tasks.c ****     if( xReturn == pdPASS )
2054:FreeRTOS/tasks.c ****     {
2055:FreeRTOS/tasks.c ****         /* freertos_tasks_c_additions_init() should only be called if the user
2056:FreeRTOS/tasks.c ****          * definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2057:FreeRTOS/tasks.c ****          * the only macro called by the function. */
2058:FreeRTOS/tasks.c ****         #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2059:FreeRTOS/tasks.c ****             {
2060:FreeRTOS/tasks.c ****                 freertos_tasks_c_additions_init();
2061:FreeRTOS/tasks.c ****             }
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 43


2062:FreeRTOS/tasks.c ****         #endif
2063:FreeRTOS/tasks.c **** 
2064:FreeRTOS/tasks.c ****         /* Interrupts are turned off here, to ensure a tick does not occur
2065:FreeRTOS/tasks.c ****          * before or during the call to xPortStartScheduler().  The stacks of
2066:FreeRTOS/tasks.c ****          * the created tasks contain a status word with interrupts switched on
2067:FreeRTOS/tasks.c ****          * so interrupts will automatically get re-enabled when the first task
2068:FreeRTOS/tasks.c ****          * starts to run. */
2069:FreeRTOS/tasks.c ****         portDISABLE_INTERRUPTS();
2070:FreeRTOS/tasks.c **** 
2071:FreeRTOS/tasks.c ****         #if ( configUSE_NEWLIB_REENTRANT == 1 )
2072:FreeRTOS/tasks.c ****             {
2073:FreeRTOS/tasks.c ****                 /* Switch Newlib's _impure_ptr variable to point to the _reent
2074:FreeRTOS/tasks.c ****                  * structure specific to the task that will run first.
2075:FreeRTOS/tasks.c ****                  * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
2076:FreeRTOS/tasks.c ****                  * for additional information. */
2077:FreeRTOS/tasks.c ****                 _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2078:FreeRTOS/tasks.c ****             }
2079:FreeRTOS/tasks.c ****         #endif /* configUSE_NEWLIB_REENTRANT */
2080:FreeRTOS/tasks.c **** 
2081:FreeRTOS/tasks.c ****         xNextTaskUnblockTime = portMAX_DELAY;
2082:FreeRTOS/tasks.c ****         xSchedulerRunning = pdTRUE;
2083:FreeRTOS/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2084:FreeRTOS/tasks.c **** 
2085:FreeRTOS/tasks.c ****         /* If configGENERATE_RUN_TIME_STATS is defined then the following
2086:FreeRTOS/tasks.c ****          * macro must be defined to configure the timer/counter used to generate
2087:FreeRTOS/tasks.c ****          * the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2088:FreeRTOS/tasks.c ****          * is set to 0 and the following line fails to build then ensure you do not
2089:FreeRTOS/tasks.c ****          * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2090:FreeRTOS/tasks.c ****          * FreeRTOSConfig.h file. */
2091:FreeRTOS/tasks.c ****         portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2092:FreeRTOS/tasks.c **** 
2093:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
2094:FreeRTOS/tasks.c **** 
2095:FreeRTOS/tasks.c ****         /* Setting up the timer tick is hardware specific and thus in the
2096:FreeRTOS/tasks.c ****          * portable interface. */
2097:FreeRTOS/tasks.c ****         if( xPortStartScheduler() != pdFALSE )
2098:FreeRTOS/tasks.c ****         {
2099:FreeRTOS/tasks.c ****             /* Should not reach here as if the scheduler is running the
2100:FreeRTOS/tasks.c ****              * function will not return. */
2101:FreeRTOS/tasks.c ****         }
2102:FreeRTOS/tasks.c ****         else
2103:FreeRTOS/tasks.c ****         {
2104:FreeRTOS/tasks.c ****             /* Should only reach here if a task calls xTaskEndScheduler(). */
2105:FreeRTOS/tasks.c ****         }
2106:FreeRTOS/tasks.c ****     }
2107:FreeRTOS/tasks.c ****     else
2108:FreeRTOS/tasks.c ****     {
2109:FreeRTOS/tasks.c ****         /* This line will only be reached if the kernel could not be started,
2110:FreeRTOS/tasks.c ****          * because there was not enough FreeRTOS heap to create the idle task
2111:FreeRTOS/tasks.c ****          * or the timer task. */
2112:FreeRTOS/tasks.c ****         configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2113:FreeRTOS/tasks.c ****     }
2114:FreeRTOS/tasks.c **** 
2115:FreeRTOS/tasks.c ****     /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2116:FreeRTOS/tasks.c ****      * meaning xIdleTaskHandle is not used anywhere else. */
2117:FreeRTOS/tasks.c ****     ( void ) xIdleTaskHandle;
2118:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 44


2119:FreeRTOS/tasks.c ****     /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
2120:FreeRTOS/tasks.c ****      * from getting optimized out as it is no longer used by the kernel. */
2121:FreeRTOS/tasks.c ****     ( void ) uxTopUsedPriority;
2122:FreeRTOS/tasks.c **** }
2123:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2124:FreeRTOS/tasks.c **** 
2125:FreeRTOS/tasks.c **** void vTaskEndScheduler( void )
2126:FreeRTOS/tasks.c **** {
2127:FreeRTOS/tasks.c ****     /* Stop the scheduler interrupts and call the portable scheduler end
2128:FreeRTOS/tasks.c ****      * routine so the original ISRs can be restored if necessary.  The port
2129:FreeRTOS/tasks.c ****      * layer must ensure interrupts enable  bit is left in the correct state. */
2130:FreeRTOS/tasks.c ****     portDISABLE_INTERRUPTS();
2131:FreeRTOS/tasks.c ****     xSchedulerRunning = pdFALSE;
2132:FreeRTOS/tasks.c ****     vPortEndScheduler();
2133:FreeRTOS/tasks.c **** }
2134:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2135:FreeRTOS/tasks.c **** 
2136:FreeRTOS/tasks.c **** void vTaskSuspendAll( void )
2137:FreeRTOS/tasks.c **** {
2138:FreeRTOS/tasks.c ****     /* A critical section is not required as the variable is of type
2139:FreeRTOS/tasks.c ****      * BaseType_t.  Please read Richard Barry's reply in the following link to a
2140:FreeRTOS/tasks.c ****      * post in the FreeRTOS support forum before reporting this as a bug! -
2141:FreeRTOS/tasks.c ****      * https://goo.gl/wu4acr */
2142:FreeRTOS/tasks.c **** 
2143:FreeRTOS/tasks.c ****     /* portSOFTWARE_BARRIER() is only implemented for emulated/simulated ports that
2144:FreeRTOS/tasks.c ****      * do not otherwise exhibit real time behaviour. */
2145:FreeRTOS/tasks.c ****     portSOFTWARE_BARRIER();
2146:FreeRTOS/tasks.c **** 
2147:FreeRTOS/tasks.c ****     /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2148:FreeRTOS/tasks.c ****      * is used to allow calls to vTaskSuspendAll() to nest. */
2149:FreeRTOS/tasks.c ****     ++uxSchedulerSuspended;
2150:FreeRTOS/tasks.c **** 
2151:FreeRTOS/tasks.c ****     /* Enforces ordering for ports and optimised compilers that may otherwise place
2152:FreeRTOS/tasks.c ****      * the above increment elsewhere. */
2153:FreeRTOS/tasks.c ****     portMEMORY_BARRIER();
2154:FreeRTOS/tasks.c **** }
2155:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2156:FreeRTOS/tasks.c **** 
2157:FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2158:FreeRTOS/tasks.c **** 
2159:FreeRTOS/tasks.c ****     static TickType_t prvGetExpectedIdleTime( void )
2160:FreeRTOS/tasks.c ****     {
 129              		.loc 1 2160 5 is_stmt 1 view -0
 130              		.cfi_startproc
 131              		@ args = 0, pretend = 0, frame = 0
 132              		@ frame_needed = 0, uses_anonymous_args = 0
 133              		@ link register save eliminated.
2161:FreeRTOS/tasks.c ****         TickType_t xReturn;
 134              		.loc 1 2161 9 view .LVU32
2162:FreeRTOS/tasks.c ****         UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 135              		.loc 1 2162 9 view .LVU33
 136              	.LVL9:
 137              	.LBB176:
2163:FreeRTOS/tasks.c **** 
2164:FreeRTOS/tasks.c ****         /* uxHigherPriorityReadyTasks takes care of the case where
2165:FreeRTOS/tasks.c ****          * configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2166:FreeRTOS/tasks.c ****          * task that are in the Ready state, even though the idle task is
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 45


2167:FreeRTOS/tasks.c ****          * running. */
2168:FreeRTOS/tasks.c ****         #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2169:FreeRTOS/tasks.c ****             {
2170:FreeRTOS/tasks.c ****                 if( uxTopReadyPriority > tskIDLE_PRIORITY )
2171:FreeRTOS/tasks.c ****                 {
2172:FreeRTOS/tasks.c ****                     uxHigherPriorityReadyTasks = pdTRUE;
2173:FreeRTOS/tasks.c ****                 }
2174:FreeRTOS/tasks.c ****             }
2175:FreeRTOS/tasks.c ****         #else
2176:FreeRTOS/tasks.c ****             {
2177:FreeRTOS/tasks.c ****                 const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
 138              		.loc 1 2177 17 view .LVU34
2178:FreeRTOS/tasks.c **** 
2179:FreeRTOS/tasks.c ****                 /* When port optimised task selection is used the uxTopReadyPriority
2180:FreeRTOS/tasks.c ****                  * variable is used as a bit map.  If bits other than the least
2181:FreeRTOS/tasks.c ****                  * significant bit are set then there are tasks that have a priority
2182:FreeRTOS/tasks.c ****                  * above the idle priority that are in the Ready state.  This takes
2183:FreeRTOS/tasks.c ****                  * care of the case where the co-operative scheduler is in use. */
2184:FreeRTOS/tasks.c ****                 if( uxTopReadyPriority > uxLeastSignificantBit )
 139              		.loc 1 2184 17 view .LVU35
 140              		.loc 1 2184 40 is_stmt 0 view .LVU36
 141 0000 0B4B     		ldr	r3, .L18
 142 0002 1B68     		ldr	r3, [r3]
 143              		.loc 1 2184 19 view .LVU37
 144 0004 012B     		cmp	r3, #1
 145 0006 0FD9     		bls	.L17
2185:FreeRTOS/tasks.c ****                 {
2186:FreeRTOS/tasks.c ****                     uxHigherPriorityReadyTasks = pdTRUE;
 146              		.loc 1 2186 48 view .LVU38
 147 0008 0122     		movs	r2, #1
 148              	.L13:
 149              	.LVL10:
 150              		.loc 1 2186 48 view .LVU39
 151              	.LBE176:
2187:FreeRTOS/tasks.c ****                 }
2188:FreeRTOS/tasks.c ****             }
2189:FreeRTOS/tasks.c ****         #endif /* if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 ) */
2190:FreeRTOS/tasks.c **** 
2191:FreeRTOS/tasks.c ****         if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 152              		.loc 1 2191 9 is_stmt 1 view .LVU40
 153              		.loc 1 2191 25 is_stmt 0 view .LVU41
 154 000a 0A4B     		ldr	r3, .L18+4
 155 000c 1B68     		ldr	r3, [r3]
 156 000e D86A     		ldr	r0, [r3, #44]
 157              		.loc 1 2191 11 view .LVU42
 158 0010 60B9     		cbnz	r0, .L16
2192:FreeRTOS/tasks.c ****         {
2193:FreeRTOS/tasks.c ****             xReturn = 0;
2194:FreeRTOS/tasks.c ****         }
2195:FreeRTOS/tasks.c ****         else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 159              		.loc 1 2195 14 is_stmt 1 view .LVU43
 160              		.loc 1 2195 18 is_stmt 0 view .LVU44
 161 0012 094B     		ldr	r3, .L18+8
 162 0014 1B68     		ldr	r3, [r3]
 163              		.loc 1 2195 16 view .LVU45
 164 0016 012B     		cmp	r3, #1
 165 0018 09D8     		bhi	.L12
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 46


2196:FreeRTOS/tasks.c ****         {
2197:FreeRTOS/tasks.c ****             /* There are other idle priority tasks in the ready state.  If
2198:FreeRTOS/tasks.c ****              * time slicing is used then the very next tick interrupt must be
2199:FreeRTOS/tasks.c ****              * processed. */
2200:FreeRTOS/tasks.c ****             xReturn = 0;
2201:FreeRTOS/tasks.c ****         }
2202:FreeRTOS/tasks.c ****         else if( uxHigherPriorityReadyTasks != pdFALSE )
 166              		.loc 1 2202 14 is_stmt 1 view .LVU46
 167              		.loc 1 2202 16 is_stmt 0 view .LVU47
 168 001a 42B9     		cbnz	r2, .L12
2203:FreeRTOS/tasks.c ****         {
2204:FreeRTOS/tasks.c ****             /* There are tasks in the Ready state that have a priority above the
2205:FreeRTOS/tasks.c ****              * idle priority.  This path can only be reached if
2206:FreeRTOS/tasks.c ****              * configUSE_PREEMPTION is 0. */
2207:FreeRTOS/tasks.c ****             xReturn = 0;
2208:FreeRTOS/tasks.c ****         }
2209:FreeRTOS/tasks.c ****         else
2210:FreeRTOS/tasks.c ****         {
2211:FreeRTOS/tasks.c ****             xReturn = xNextTaskUnblockTime - xTickCount;
 169              		.loc 1 2211 13 is_stmt 1 view .LVU48
 170              		.loc 1 2211 44 is_stmt 0 view .LVU49
 171 001c 074B     		ldr	r3, .L18+12
 172 001e 1868     		ldr	r0, [r3]
 173 0020 074B     		ldr	r3, .L18+16
 174 0022 1B68     		ldr	r3, [r3]
 175              		.loc 1 2211 21 view .LVU50
 176 0024 C01A     		subs	r0, r0, r3
 177              	.LVL11:
 178              		.loc 1 2211 21 view .LVU51
 179 0026 7047     		bx	lr
 180              	.LVL12:
 181              	.L17:
2162:FreeRTOS/tasks.c **** 
 182              		.loc 1 2162 21 view .LVU52
 183 0028 0022     		movs	r2, #0
 184 002a EEE7     		b	.L13
 185              	.LVL13:
 186              	.L16:
2193:FreeRTOS/tasks.c ****         }
 187              		.loc 1 2193 21 view .LVU53
 188 002c 0020     		movs	r0, #0
 189              	.LVL14:
2212:FreeRTOS/tasks.c ****         }
2213:FreeRTOS/tasks.c **** 
2214:FreeRTOS/tasks.c ****         return xReturn;
 190              		.loc 1 2214 9 is_stmt 1 view .LVU54
 191              	.L12:
2215:FreeRTOS/tasks.c ****     }
 192              		.loc 1 2215 5 is_stmt 0 view .LVU55
 193 002e 7047     		bx	lr
 194              	.L19:
 195              		.align	2
 196              	.L18:
 197 0030 00000000 		.word	.LANCHOR2
 198 0034 00000000 		.word	.LANCHOR3
 199 0038 00000000 		.word	.LANCHOR4
 200 003c 00000000 		.word	.LANCHOR5
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 47


 201 0040 00000000 		.word	.LANCHOR6
 202              		.cfi_endproc
 203              	.LFE23:
 205              		.section	.text.prvSearchForNameWithinSingleList,"ax",%progbits
 206              		.align	1
 207              		.syntax unified
 208              		.thumb
 209              		.thumb_func
 210              		.fpu fpv4-sp-d16
 212              	prvSearchForNameWithinSingleList:
 213              	.LVL15:
 214              	.LFB29:
2216:FreeRTOS/tasks.c **** 
2217:FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2218:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2219:FreeRTOS/tasks.c **** 
2220:FreeRTOS/tasks.c **** BaseType_t xTaskResumeAll( void )
2221:FreeRTOS/tasks.c **** {
2222:FreeRTOS/tasks.c ****     TCB_t * pxTCB = NULL;
2223:FreeRTOS/tasks.c ****     BaseType_t xAlreadyYielded = pdFALSE;
2224:FreeRTOS/tasks.c **** 
2225:FreeRTOS/tasks.c ****     /* If uxSchedulerSuspended is zero then this function does not match a
2226:FreeRTOS/tasks.c ****      * previous call to vTaskSuspendAll(). */
2227:FreeRTOS/tasks.c ****     configASSERT( uxSchedulerSuspended );
2228:FreeRTOS/tasks.c **** 
2229:FreeRTOS/tasks.c ****     /* It is possible that an ISR caused a task to be removed from an event
2230:FreeRTOS/tasks.c ****      * list while the scheduler was suspended.  If this was the case then the
2231:FreeRTOS/tasks.c ****      * removed task will have been added to the xPendingReadyList.  Once the
2232:FreeRTOS/tasks.c ****      * scheduler has been resumed it is safe to move all the pending ready
2233:FreeRTOS/tasks.c ****      * tasks from this list into their appropriate ready list. */
2234:FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
2235:FreeRTOS/tasks.c ****     {
2236:FreeRTOS/tasks.c ****         --uxSchedulerSuspended;
2237:FreeRTOS/tasks.c **** 
2238:FreeRTOS/tasks.c ****         if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2239:FreeRTOS/tasks.c ****         {
2240:FreeRTOS/tasks.c ****             if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2241:FreeRTOS/tasks.c ****             {
2242:FreeRTOS/tasks.c ****                 /* Move any readied tasks from the pending list into the
2243:FreeRTOS/tasks.c ****                  * appropriate ready list. */
2244:FreeRTOS/tasks.c ****                 while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2245:FreeRTOS/tasks.c ****                 {
2246:FreeRTOS/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 vo
2247:FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
2248:FreeRTOS/tasks.c ****                     portMEMORY_BARRIER();
2249:FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
2250:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
2251:FreeRTOS/tasks.c **** 
2252:FreeRTOS/tasks.c ****                     /* If the moved task has a priority higher than or equal to
2253:FreeRTOS/tasks.c ****                      * the current task then a yield must be performed. */
2254:FreeRTOS/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2255:FreeRTOS/tasks.c ****                     {
2256:FreeRTOS/tasks.c ****                         xYieldPending = pdTRUE;
2257:FreeRTOS/tasks.c ****                     }
2258:FreeRTOS/tasks.c ****                     else
2259:FreeRTOS/tasks.c ****                     {
2260:FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 48


2261:FreeRTOS/tasks.c ****                     }
2262:FreeRTOS/tasks.c ****                 }
2263:FreeRTOS/tasks.c **** 
2264:FreeRTOS/tasks.c ****                 if( pxTCB != NULL )
2265:FreeRTOS/tasks.c ****                 {
2266:FreeRTOS/tasks.c ****                     /* A task was unblocked while the scheduler was suspended,
2267:FreeRTOS/tasks.c ****                      * which may have prevented the next unblock time from being
2268:FreeRTOS/tasks.c ****                      * re-calculated, in which case re-calculate it now.  Mainly
2269:FreeRTOS/tasks.c ****                      * important for low power tickless implementations, where
2270:FreeRTOS/tasks.c ****                      * this can prevent an unnecessary exit from low power
2271:FreeRTOS/tasks.c ****                      * state. */
2272:FreeRTOS/tasks.c ****                     prvResetNextTaskUnblockTime();
2273:FreeRTOS/tasks.c ****                 }
2274:FreeRTOS/tasks.c **** 
2275:FreeRTOS/tasks.c ****                 /* If any ticks occurred while the scheduler was suspended then
2276:FreeRTOS/tasks.c ****                  * they should be processed now.  This ensures the tick count does
2277:FreeRTOS/tasks.c ****                  * not  slip, and that any delayed tasks are resumed at the correct
2278:FreeRTOS/tasks.c ****                  * time. */
2279:FreeRTOS/tasks.c ****                 {
2280:FreeRTOS/tasks.c ****                     TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
2281:FreeRTOS/tasks.c **** 
2282:FreeRTOS/tasks.c ****                     if( xPendedCounts > ( TickType_t ) 0U )
2283:FreeRTOS/tasks.c ****                     {
2284:FreeRTOS/tasks.c ****                         do
2285:FreeRTOS/tasks.c ****                         {
2286:FreeRTOS/tasks.c ****                             if( xTaskIncrementTick() != pdFALSE )
2287:FreeRTOS/tasks.c ****                             {
2288:FreeRTOS/tasks.c ****                                 xYieldPending = pdTRUE;
2289:FreeRTOS/tasks.c ****                             }
2290:FreeRTOS/tasks.c ****                             else
2291:FreeRTOS/tasks.c ****                             {
2292:FreeRTOS/tasks.c ****                                 mtCOVERAGE_TEST_MARKER();
2293:FreeRTOS/tasks.c ****                             }
2294:FreeRTOS/tasks.c **** 
2295:FreeRTOS/tasks.c ****                             --xPendedCounts;
2296:FreeRTOS/tasks.c ****                         } while( xPendedCounts > ( TickType_t ) 0U );
2297:FreeRTOS/tasks.c **** 
2298:FreeRTOS/tasks.c ****                         xPendedTicks = 0;
2299:FreeRTOS/tasks.c ****                     }
2300:FreeRTOS/tasks.c ****                     else
2301:FreeRTOS/tasks.c ****                     {
2302:FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2303:FreeRTOS/tasks.c ****                     }
2304:FreeRTOS/tasks.c ****                 }
2305:FreeRTOS/tasks.c **** 
2306:FreeRTOS/tasks.c ****                 if( xYieldPending != pdFALSE )
2307:FreeRTOS/tasks.c ****                 {
2308:FreeRTOS/tasks.c ****                     #if ( configUSE_PREEMPTION != 0 )
2309:FreeRTOS/tasks.c ****                         {
2310:FreeRTOS/tasks.c ****                             xAlreadyYielded = pdTRUE;
2311:FreeRTOS/tasks.c ****                         }
2312:FreeRTOS/tasks.c ****                     #endif
2313:FreeRTOS/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
2314:FreeRTOS/tasks.c ****                 }
2315:FreeRTOS/tasks.c ****                 else
2316:FreeRTOS/tasks.c ****                 {
2317:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 49


2318:FreeRTOS/tasks.c ****                 }
2319:FreeRTOS/tasks.c ****             }
2320:FreeRTOS/tasks.c ****         }
2321:FreeRTOS/tasks.c ****         else
2322:FreeRTOS/tasks.c ****         {
2323:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2324:FreeRTOS/tasks.c ****         }
2325:FreeRTOS/tasks.c ****     }
2326:FreeRTOS/tasks.c ****     taskEXIT_CRITICAL();
2327:FreeRTOS/tasks.c **** 
2328:FreeRTOS/tasks.c ****     return xAlreadyYielded;
2329:FreeRTOS/tasks.c **** }
2330:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2331:FreeRTOS/tasks.c **** 
2332:FreeRTOS/tasks.c **** TickType_t xTaskGetTickCount( void )
2333:FreeRTOS/tasks.c **** {
2334:FreeRTOS/tasks.c ****     TickType_t xTicks;
2335:FreeRTOS/tasks.c **** 
2336:FreeRTOS/tasks.c ****     /* Critical section required if running on a 16 bit processor. */
2337:FreeRTOS/tasks.c ****     portTICK_TYPE_ENTER_CRITICAL();
2338:FreeRTOS/tasks.c ****     {
2339:FreeRTOS/tasks.c ****         xTicks = xTickCount;
2340:FreeRTOS/tasks.c ****     }
2341:FreeRTOS/tasks.c ****     portTICK_TYPE_EXIT_CRITICAL();
2342:FreeRTOS/tasks.c **** 
2343:FreeRTOS/tasks.c ****     return xTicks;
2344:FreeRTOS/tasks.c **** }
2345:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2346:FreeRTOS/tasks.c **** 
2347:FreeRTOS/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2348:FreeRTOS/tasks.c **** {
2349:FreeRTOS/tasks.c ****     TickType_t xReturn;
2350:FreeRTOS/tasks.c ****     UBaseType_t uxSavedInterruptStatus;
2351:FreeRTOS/tasks.c **** 
2352:FreeRTOS/tasks.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
2353:FreeRTOS/tasks.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
2354:FreeRTOS/tasks.c ****      * above the maximum system call priority are kept permanently enabled, even
2355:FreeRTOS/tasks.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
2356:FreeRTOS/tasks.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2357:FreeRTOS/tasks.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2358:FreeRTOS/tasks.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
2359:FreeRTOS/tasks.c ****      * assigned a priority above the configured maximum system call priority.
2360:FreeRTOS/tasks.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
2361:FreeRTOS/tasks.c ****      * that have been assigned a priority at or (logically) below the maximum
2362:FreeRTOS/tasks.c ****      * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
2363:FreeRTOS/tasks.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
2364:FreeRTOS/tasks.c ****      * More information (albeit Cortex-M specific) is provided on the following
2365:FreeRTOS/tasks.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
2366:FreeRTOS/tasks.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2367:FreeRTOS/tasks.c **** 
2368:FreeRTOS/tasks.c ****     uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2369:FreeRTOS/tasks.c ****     {
2370:FreeRTOS/tasks.c ****         xReturn = xTickCount;
2371:FreeRTOS/tasks.c ****     }
2372:FreeRTOS/tasks.c ****     portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2373:FreeRTOS/tasks.c **** 
2374:FreeRTOS/tasks.c ****     return xReturn;
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 50


2375:FreeRTOS/tasks.c **** }
2376:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2377:FreeRTOS/tasks.c **** 
2378:FreeRTOS/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2379:FreeRTOS/tasks.c **** {
2380:FreeRTOS/tasks.c ****     /* A critical section is not required because the variables are of type
2381:FreeRTOS/tasks.c ****      * BaseType_t. */
2382:FreeRTOS/tasks.c ****     return uxCurrentNumberOfTasks;
2383:FreeRTOS/tasks.c **** }
2384:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2385:FreeRTOS/tasks.c **** 
2386:FreeRTOS/tasks.c **** char * pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed f
2387:FreeRTOS/tasks.c **** {
2388:FreeRTOS/tasks.c ****     TCB_t * pxTCB;
2389:FreeRTOS/tasks.c **** 
2390:FreeRTOS/tasks.c ****     /* If null is passed in here then the name of the calling task is being
2391:FreeRTOS/tasks.c ****      * queried. */
2392:FreeRTOS/tasks.c ****     pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2393:FreeRTOS/tasks.c ****     configASSERT( pxTCB );
2394:FreeRTOS/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
2395:FreeRTOS/tasks.c **** }
2396:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2397:FreeRTOS/tasks.c **** 
2398:FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2399:FreeRTOS/tasks.c **** 
2400:FreeRTOS/tasks.c ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
2401:FreeRTOS/tasks.c ****                                                      const char pcNameToQuery[] )
2402:FreeRTOS/tasks.c ****     {
 215              		.loc 1 2402 5 is_stmt 1 view -0
 216              		.cfi_startproc
 217              		@ args = 0, pretend = 0, frame = 0
 218              		@ frame_needed = 0, uses_anonymous_args = 0
 219              		@ link register save eliminated.
2403:FreeRTOS/tasks.c ****         TCB_t * pxNextTCB, * pxFirstTCB, * pxReturn = NULL;
 220              		.loc 1 2403 9 view .LVU57
2404:FreeRTOS/tasks.c ****         UBaseType_t x;
 221              		.loc 1 2404 9 view .LVU58
2405:FreeRTOS/tasks.c ****         char cNextChar;
 222              		.loc 1 2405 9 view .LVU59
2406:FreeRTOS/tasks.c ****         BaseType_t xBreakLoop;
 223              		.loc 1 2406 9 view .LVU60
2407:FreeRTOS/tasks.c **** 
2408:FreeRTOS/tasks.c ****         /* This function is called with the scheduler suspended. */
2409:FreeRTOS/tasks.c **** 
2410:FreeRTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 224              		.loc 1 2410 9 view .LVU61
 225              		.loc 1 2410 13 is_stmt 0 view .LVU62
 226 0000 0368     		ldr	r3, [r0]
 227              		.loc 1 2410 11 view .LVU63
 228 0002 5BB3     		cbz	r3, .L28
2402:FreeRTOS/tasks.c ****         TCB_t * pxNextTCB, * pxFirstTCB, * pxReturn = NULL;
 229              		.loc 1 2402 5 view .LVU64
 230 0004 F0B4     		push	{r4, r5, r6, r7}
 231              	.LCFI0:
 232              		.cfi_def_cfa_offset 16
 233              		.cfi_offset 4, -16
 234              		.cfi_offset 5, -12
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 51


 235              		.cfi_offset 6, -8
 236              		.cfi_offset 7, -4
 237 0006 0646     		mov	r6, r0
 238              	.LBB177:
2411:FreeRTOS/tasks.c ****         {
2412:FreeRTOS/tasks.c ****             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this
 239              		.loc 1 2412 13 is_stmt 1 view .LVU65
 240              	.LVL16:
 241              		.loc 1 2412 13 view .LVU66
 242 0008 4368     		ldr	r3, [r0, #4]
 243 000a 5B68     		ldr	r3, [r3, #4]
 244 000c 4360     		str	r3, [r0, #4]
 245              		.loc 1 2412 13 view .LVU67
 246 000e 00F10807 		add	r7, r0, #8
 247 0012 BB42     		cmp	r3, r7
 248 0014 04D0     		beq	.L34
 249              	.L22:
 250              		.loc 1 2412 13 discriminator 3 view .LVU68
 251 0016 7368     		ldr	r3, [r6, #4]
 252 0018 D3F80CC0 		ldr	ip, [r3, #12]
 253              	.LVL17:
 254              		.loc 1 2412 13 is_stmt 0 discriminator 3 view .LVU69
 255              	.LBE177:
2403:FreeRTOS/tasks.c ****         UBaseType_t x;
 256              		.loc 1 2403 44 discriminator 3 view .LVU70
 257 001c 0020     		movs	r0, #0
 258              	.LVL18:
2403:FreeRTOS/tasks.c ****         UBaseType_t x;
 259              		.loc 1 2403 44 discriminator 3 view .LVU71
 260 001e 14E0     		b	.L27
 261              	.LVL19:
 262              	.L34:
 263              	.LBB178:
 264              		.loc 1 2412 13 is_stmt 1 discriminator 1 view .LVU72
 265 0020 5B68     		ldr	r3, [r3, #4]
 266 0022 4360     		str	r3, [r0, #4]
 267 0024 F7E7     		b	.L22
 268              	.LVL20:
 269              	.L36:
 270              		.loc 1 2412 13 is_stmt 0 discriminator 1 view .LVU73
 271              	.LBE178:
 272              	.LBB179:
2413:FreeRTOS/tasks.c **** 
2414:FreeRTOS/tasks.c ****             do
2415:FreeRTOS/tasks.c ****             {
2416:FreeRTOS/tasks.c ****                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as t
 273              		.loc 1 2416 17 is_stmt 1 discriminator 1 view .LVU74
 274 0026 5B68     		ldr	r3, [r3, #4]
 275 0028 7360     		str	r3, [r6, #4]
 276 002a 13E0     		b	.L23
 277              	.LVL21:
 278              	.L35:
 279              		.loc 1 2416 17 is_stmt 0 discriminator 1 view .LVU75
 280              	.LBE179:
2417:FreeRTOS/tasks.c **** 
2418:FreeRTOS/tasks.c ****                 /* Check each character in the name looking for a match or
2419:FreeRTOS/tasks.c ****                  * mismatch. */
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 52


2420:FreeRTOS/tasks.c ****                 xBreakLoop = pdFALSE;
2421:FreeRTOS/tasks.c **** 
2422:FreeRTOS/tasks.c ****                 for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2423:FreeRTOS/tasks.c ****                 {
2424:FreeRTOS/tasks.c ****                     cNextChar = pxNextTCB->pcTaskName[ x ];
2425:FreeRTOS/tasks.c **** 
2426:FreeRTOS/tasks.c ****                     if( cNextChar != pcNameToQuery[ x ] )
2427:FreeRTOS/tasks.c ****                     {
2428:FreeRTOS/tasks.c ****                         /* Characters didn't match. */
2429:FreeRTOS/tasks.c ****                         xBreakLoop = pdTRUE;
2430:FreeRTOS/tasks.c ****                     }
2431:FreeRTOS/tasks.c ****                     else if( cNextChar == ( char ) 0x00 )
2432:FreeRTOS/tasks.c ****                     {
2433:FreeRTOS/tasks.c ****                         /* Both strings terminated, a match must have been
2434:FreeRTOS/tasks.c ****                          * found. */
2435:FreeRTOS/tasks.c ****                         pxReturn = pxNextTCB;
2436:FreeRTOS/tasks.c ****                         xBreakLoop = pdTRUE;
2437:FreeRTOS/tasks.c ****                     }
2438:FreeRTOS/tasks.c ****                     else
2439:FreeRTOS/tasks.c ****                     {
2440:FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
 281              		.loc 1 2440 49 is_stmt 1 discriminator 2 view .LVU76
2441:FreeRTOS/tasks.c ****                     }
2442:FreeRTOS/tasks.c **** 
2443:FreeRTOS/tasks.c ****                     if( xBreakLoop != pdFALSE )
 282              		.loc 1 2443 21 discriminator 2 view .LVU77
2422:FreeRTOS/tasks.c ****                 {
 283              		.loc 1 2422 90 discriminator 2 view .LVU78
2422:FreeRTOS/tasks.c ****                 {
 284              		.loc 1 2422 91 is_stmt 0 discriminator 2 view .LVU79
 285 002c 0133     		adds	r3, r3, #1
 286              	.LVL22:
 287              	.L24:
2422:FreeRTOS/tasks.c ****                 {
 288              		.loc 1 2422 45 is_stmt 1 discriminator 1 view .LVU80
2422:FreeRTOS/tasks.c ****                 {
 289              		.loc 1 2422 17 is_stmt 0 discriminator 1 view .LVU81
 290 002e 092B     		cmp	r3, #9
 291 0030 08D8     		bhi	.L25
2424:FreeRTOS/tasks.c **** 
 292              		.loc 1 2424 21 is_stmt 1 view .LVU82
2424:FreeRTOS/tasks.c **** 
 293              		.loc 1 2424 31 is_stmt 0 view .LVU83
 294 0032 EA18     		adds	r2, r5, r3
 295 0034 92F83420 		ldrb	r2, [r2, #52]	@ zero_extendqisi2
 296              	.LVL23:
2426:FreeRTOS/tasks.c ****                     {
 297              		.loc 1 2426 21 is_stmt 1 view .LVU84
2426:FreeRTOS/tasks.c ****                     {
 298              		.loc 1 2426 51 is_stmt 0 view .LVU85
 299 0038 CC5C     		ldrb	r4, [r1, r3]	@ zero_extendqisi2
2426:FreeRTOS/tasks.c ****                     {
 300              		.loc 1 2426 23 view .LVU86
 301 003a 9442     		cmp	r4, r2
 302 003c 02D1     		bne	.L25
2431:FreeRTOS/tasks.c ****                     {
 303              		.loc 1 2431 26 is_stmt 1 view .LVU87
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 53


2431:FreeRTOS/tasks.c ****                     {
 304              		.loc 1 2431 28 is_stmt 0 view .LVU88
 305 003e 002A     		cmp	r2, #0
 306 0040 F4D1     		bne	.L35
2435:FreeRTOS/tasks.c ****                         xBreakLoop = pdTRUE;
 307              		.loc 1 2435 34 view .LVU89
 308 0042 2846     		mov	r0, r5
 309              	.LVL24:
 310              	.L25:
2444:FreeRTOS/tasks.c ****                     {
2445:FreeRTOS/tasks.c ****                         break;
2446:FreeRTOS/tasks.c ****                     }
2447:FreeRTOS/tasks.c ****                 }
2448:FreeRTOS/tasks.c **** 
2449:FreeRTOS/tasks.c ****                 if( pxReturn != NULL )
 311              		.loc 1 2449 17 is_stmt 1 view .LVU90
 312              		.loc 1 2449 19 is_stmt 0 view .LVU91
 313 0044 60B9     		cbnz	r0, .L20
2450:FreeRTOS/tasks.c ****                 {
2451:FreeRTOS/tasks.c ****                     /* The handle has been found. */
2452:FreeRTOS/tasks.c ****                     break;
2453:FreeRTOS/tasks.c ****                 }
2454:FreeRTOS/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
 314              		.loc 1 2454 20 is_stmt 1 view .LVU92
 315              		.loc 1 2454 13 is_stmt 0 view .LVU93
 316 0046 AC45     		cmp	ip, r5
 317 0048 0AD0     		beq	.L20
 318              	.LVL25:
 319              	.L27:
2412:FreeRTOS/tasks.c **** 
 320              		.loc 1 2412 62 is_stmt 1 discriminator 4 view .LVU94
2414:FreeRTOS/tasks.c ****             {
 321              		.loc 1 2414 13 discriminator 4 view .LVU95
 322              	.LBB180:
2416:FreeRTOS/tasks.c **** 
 323              		.loc 1 2416 17 discriminator 4 view .LVU96
2416:FreeRTOS/tasks.c **** 
 324              		.loc 1 2416 17 discriminator 4 view .LVU97
 325 004a 7368     		ldr	r3, [r6, #4]
 326 004c 5B68     		ldr	r3, [r3, #4]
 327 004e 7360     		str	r3, [r6, #4]
2416:FreeRTOS/tasks.c **** 
 328              		.loc 1 2416 17 discriminator 4 view .LVU98
 329 0050 9F42     		cmp	r7, r3
 330 0052 E8D0     		beq	.L36
 331              	.L23:
2416:FreeRTOS/tasks.c **** 
 332              		.loc 1 2416 17 discriminator 3 view .LVU99
 333 0054 7368     		ldr	r3, [r6, #4]
 334 0056 DD68     		ldr	r5, [r3, #12]
 335              	.LVL26:
2416:FreeRTOS/tasks.c **** 
 336              		.loc 1 2416 17 is_stmt 0 discriminator 3 view .LVU100
 337              	.LBE180:
2416:FreeRTOS/tasks.c **** 
 338              		.loc 1 2416 65 is_stmt 1 discriminator 3 view .LVU101
2420:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 54


 339              		.loc 1 2420 17 discriminator 3 view .LVU102
2422:FreeRTOS/tasks.c ****                 {
 340              		.loc 1 2422 17 discriminator 3 view .LVU103
2422:FreeRTOS/tasks.c ****                 {
 341              		.loc 1 2422 24 is_stmt 0 discriminator 3 view .LVU104
 342 0058 0023     		movs	r3, #0
2422:FreeRTOS/tasks.c ****                 {
 343              		.loc 1 2422 17 discriminator 3 view .LVU105
 344 005a E8E7     		b	.L24
 345              	.LVL27:
 346              	.L28:
 347              	.LCFI1:
 348              		.cfi_def_cfa_offset 0
 349              		.cfi_restore 4
 350              		.cfi_restore 5
 351              		.cfi_restore 6
 352              		.cfi_restore 7
2403:FreeRTOS/tasks.c ****         UBaseType_t x;
 353              		.loc 1 2403 44 view .LVU106
 354 005c 0020     		movs	r0, #0
 355              	.LVL28:
2455:FreeRTOS/tasks.c ****         }
2456:FreeRTOS/tasks.c ****         else
2457:FreeRTOS/tasks.c ****         {
2458:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
 356              		.loc 1 2458 37 is_stmt 1 view .LVU107
2459:FreeRTOS/tasks.c ****         }
2460:FreeRTOS/tasks.c **** 
2461:FreeRTOS/tasks.c ****         return pxReturn;
 357              		.loc 1 2461 9 view .LVU108
2462:FreeRTOS/tasks.c ****     }
 358              		.loc 1 2462 5 is_stmt 0 view .LVU109
 359 005e 7047     		bx	lr
 360              	.LVL29:
 361              	.L20:
 362              	.LCFI2:
 363              		.cfi_def_cfa_offset 16
 364              		.cfi_offset 4, -16
 365              		.cfi_offset 5, -12
 366              		.cfi_offset 6, -8
 367              		.cfi_offset 7, -4
 368              		.loc 1 2462 5 view .LVU110
 369 0060 F0BC     		pop	{r4, r5, r6, r7}
 370              	.LCFI3:
 371              		.cfi_restore 7
 372              		.cfi_restore 6
 373              		.cfi_restore 5
 374              		.cfi_restore 4
 375              		.cfi_def_cfa_offset 0
 376              	.LVL30:
 377              		.loc 1 2462 5 view .LVU111
 378 0062 7047     		bx	lr
 379              		.cfi_endproc
 380              	.LFE29:
 382              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 383              		.align	1
 384              		.syntax unified
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 55


 385              		.thumb
 386              		.thumb_func
 387              		.fpu fpv4-sp-d16
 389              	prvTaskCheckFreeStackSpace:
 390              	.LVL31:
 391              	.LFB54:
2463:FreeRTOS/tasks.c **** 
2464:FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2465:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2466:FreeRTOS/tasks.c **** 
2467:FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2468:FreeRTOS/tasks.c **** 
2469:FreeRTOS/tasks.c ****     TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types a
2470:FreeRTOS/tasks.c ****     {
2471:FreeRTOS/tasks.c ****         UBaseType_t uxQueue = configMAX_PRIORITIES;
2472:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
2473:FreeRTOS/tasks.c **** 
2474:FreeRTOS/tasks.c ****         /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2475:FreeRTOS/tasks.c ****         configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2476:FreeRTOS/tasks.c **** 
2477:FreeRTOS/tasks.c ****         vTaskSuspendAll();
2478:FreeRTOS/tasks.c ****         {
2479:FreeRTOS/tasks.c ****             /* Search the ready lists. */
2480:FreeRTOS/tasks.c ****             do
2481:FreeRTOS/tasks.c ****             {
2482:FreeRTOS/tasks.c ****                 uxQueue--;
2483:FreeRTOS/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueu
2484:FreeRTOS/tasks.c **** 
2485:FreeRTOS/tasks.c ****                 if( pxTCB != NULL )
2486:FreeRTOS/tasks.c ****                 {
2487:FreeRTOS/tasks.c ****                     /* Found the handle. */
2488:FreeRTOS/tasks.c ****                     break;
2489:FreeRTOS/tasks.c ****                 }
2490:FreeRTOS/tasks.c ****             } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as 
2491:FreeRTOS/tasks.c **** 
2492:FreeRTOS/tasks.c ****             /* Search the delayed lists. */
2493:FreeRTOS/tasks.c ****             if( pxTCB == NULL )
2494:FreeRTOS/tasks.c ****             {
2495:FreeRTOS/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQ
2496:FreeRTOS/tasks.c ****             }
2497:FreeRTOS/tasks.c **** 
2498:FreeRTOS/tasks.c ****             if( pxTCB == NULL )
2499:FreeRTOS/tasks.c ****             {
2500:FreeRTOS/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, p
2501:FreeRTOS/tasks.c ****             }
2502:FreeRTOS/tasks.c **** 
2503:FreeRTOS/tasks.c ****             #if ( INCLUDE_vTaskSuspend == 1 )
2504:FreeRTOS/tasks.c ****                 {
2505:FreeRTOS/tasks.c ****                     if( pxTCB == NULL )
2506:FreeRTOS/tasks.c ****                     {
2507:FreeRTOS/tasks.c ****                         /* Search the suspended list. */
2508:FreeRTOS/tasks.c ****                         pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuer
2509:FreeRTOS/tasks.c ****                     }
2510:FreeRTOS/tasks.c ****                 }
2511:FreeRTOS/tasks.c ****             #endif
2512:FreeRTOS/tasks.c **** 
2513:FreeRTOS/tasks.c ****             #if ( INCLUDE_vTaskDelete == 1 )
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 56


2514:FreeRTOS/tasks.c ****                 {
2515:FreeRTOS/tasks.c ****                     if( pxTCB == NULL )
2516:FreeRTOS/tasks.c ****                     {
2517:FreeRTOS/tasks.c ****                         /* Search the deleted list. */
2518:FreeRTOS/tasks.c ****                         pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcName
2519:FreeRTOS/tasks.c ****                     }
2520:FreeRTOS/tasks.c ****                 }
2521:FreeRTOS/tasks.c ****             #endif
2522:FreeRTOS/tasks.c ****         }
2523:FreeRTOS/tasks.c ****         ( void ) xTaskResumeAll();
2524:FreeRTOS/tasks.c **** 
2525:FreeRTOS/tasks.c ****         return pxTCB;
2526:FreeRTOS/tasks.c ****     }
2527:FreeRTOS/tasks.c **** 
2528:FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2529:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2530:FreeRTOS/tasks.c **** 
2531:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2532:FreeRTOS/tasks.c **** 
2533:FreeRTOS/tasks.c ****     UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
2534:FreeRTOS/tasks.c ****                                       const UBaseType_t uxArraySize,
2535:FreeRTOS/tasks.c ****                                       configRUN_TIME_COUNTER_TYPE * const pulTotalRunTime )
2536:FreeRTOS/tasks.c ****     {
2537:FreeRTOS/tasks.c ****         UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2538:FreeRTOS/tasks.c **** 
2539:FreeRTOS/tasks.c ****         vTaskSuspendAll();
2540:FreeRTOS/tasks.c ****         {
2541:FreeRTOS/tasks.c ****             /* Is there a space in the array for each task in the system? */
2542:FreeRTOS/tasks.c ****             if( uxArraySize >= uxCurrentNumberOfTasks )
2543:FreeRTOS/tasks.c ****             {
2544:FreeRTOS/tasks.c ****                 /* Fill in an TaskStatus_t structure with information on each
2545:FreeRTOS/tasks.c ****                  * task in the Ready state. */
2546:FreeRTOS/tasks.c ****                 do
2547:FreeRTOS/tasks.c ****                 {
2548:FreeRTOS/tasks.c ****                     uxQueue--;
2549:FreeRTOS/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( px
2550:FreeRTOS/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
2551:FreeRTOS/tasks.c **** 
2552:FreeRTOS/tasks.c ****                 /* Fill in an TaskStatus_t structure with information on each
2553:FreeRTOS/tasks.c ****                  * task in the Blocked state. */
2554:FreeRTOS/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
2555:FreeRTOS/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
2556:FreeRTOS/tasks.c **** 
2557:FreeRTOS/tasks.c ****                 #if ( INCLUDE_vTaskDelete == 1 )
2558:FreeRTOS/tasks.c ****                     {
2559:FreeRTOS/tasks.c ****                         /* Fill in an TaskStatus_t structure with information on
2560:FreeRTOS/tasks.c ****                          * each task that has been deleted but not yet cleaned up. */
2561:FreeRTOS/tasks.c ****                         uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &
2562:FreeRTOS/tasks.c ****                     }
2563:FreeRTOS/tasks.c ****                 #endif
2564:FreeRTOS/tasks.c **** 
2565:FreeRTOS/tasks.c ****                 #if ( INCLUDE_vTaskSuspend == 1 )
2566:FreeRTOS/tasks.c ****                     {
2567:FreeRTOS/tasks.c ****                         /* Fill in an TaskStatus_t structure with information on
2568:FreeRTOS/tasks.c ****                          * each task in the Suspended state. */
2569:FreeRTOS/tasks.c ****                         uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &
2570:FreeRTOS/tasks.c ****                     }
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 57


2571:FreeRTOS/tasks.c ****                 #endif
2572:FreeRTOS/tasks.c **** 
2573:FreeRTOS/tasks.c ****                 #if ( configGENERATE_RUN_TIME_STATS == 1 )
2574:FreeRTOS/tasks.c ****                     {
2575:FreeRTOS/tasks.c ****                         if( pulTotalRunTime != NULL )
2576:FreeRTOS/tasks.c ****                         {
2577:FreeRTOS/tasks.c ****                             #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2578:FreeRTOS/tasks.c ****                                 portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2579:FreeRTOS/tasks.c ****                             #else
2580:FreeRTOS/tasks.c ****                                 *pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2581:FreeRTOS/tasks.c ****                             #endif
2582:FreeRTOS/tasks.c ****                         }
2583:FreeRTOS/tasks.c ****                     }
2584:FreeRTOS/tasks.c ****                 #else /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
2585:FreeRTOS/tasks.c ****                     {
2586:FreeRTOS/tasks.c ****                         if( pulTotalRunTime != NULL )
2587:FreeRTOS/tasks.c ****                         {
2588:FreeRTOS/tasks.c ****                             *pulTotalRunTime = 0;
2589:FreeRTOS/tasks.c ****                         }
2590:FreeRTOS/tasks.c ****                     }
2591:FreeRTOS/tasks.c ****                 #endif /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
2592:FreeRTOS/tasks.c ****             }
2593:FreeRTOS/tasks.c ****             else
2594:FreeRTOS/tasks.c ****             {
2595:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2596:FreeRTOS/tasks.c ****             }
2597:FreeRTOS/tasks.c ****         }
2598:FreeRTOS/tasks.c ****         ( void ) xTaskResumeAll();
2599:FreeRTOS/tasks.c **** 
2600:FreeRTOS/tasks.c ****         return uxTask;
2601:FreeRTOS/tasks.c ****     }
2602:FreeRTOS/tasks.c **** 
2603:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2604:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2605:FreeRTOS/tasks.c **** 
2606:FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2607:FreeRTOS/tasks.c **** 
2608:FreeRTOS/tasks.c ****     TaskHandle_t xTaskGetIdleTaskHandle( void )
2609:FreeRTOS/tasks.c ****     {
2610:FreeRTOS/tasks.c ****         /* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2611:FreeRTOS/tasks.c ****          * started, then xIdleTaskHandle will be NULL. */
2612:FreeRTOS/tasks.c ****         configASSERT( ( xIdleTaskHandle != NULL ) );
2613:FreeRTOS/tasks.c ****         return xIdleTaskHandle;
2614:FreeRTOS/tasks.c ****     }
2615:FreeRTOS/tasks.c **** 
2616:FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2617:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2618:FreeRTOS/tasks.c **** 
2619:FreeRTOS/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2620:FreeRTOS/tasks.c ****  * This is to ensure vTaskStepTick() is available when user defined low power mode
2621:FreeRTOS/tasks.c ****  * implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2622:FreeRTOS/tasks.c ****  * 1. */
2623:FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2624:FreeRTOS/tasks.c **** 
2625:FreeRTOS/tasks.c ****     void vTaskStepTick( const TickType_t xTicksToJump )
2626:FreeRTOS/tasks.c ****     {
2627:FreeRTOS/tasks.c ****         /* Correct the tick count value after a period during which the tick
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 58


2628:FreeRTOS/tasks.c ****          * was suppressed.  Note this does *not* call the tick hook function for
2629:FreeRTOS/tasks.c ****          * each stepped tick. */
2630:FreeRTOS/tasks.c ****         configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2631:FreeRTOS/tasks.c ****         xTickCount += xTicksToJump;
2632:FreeRTOS/tasks.c ****         traceINCREASE_TICK_COUNT( xTicksToJump );
2633:FreeRTOS/tasks.c ****     }
2634:FreeRTOS/tasks.c **** 
2635:FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2636:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2637:FreeRTOS/tasks.c **** 
2638:FreeRTOS/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2639:FreeRTOS/tasks.c **** {
2640:FreeRTOS/tasks.c ****     BaseType_t xYieldOccurred;
2641:FreeRTOS/tasks.c **** 
2642:FreeRTOS/tasks.c ****     /* Must not be called with the scheduler suspended as the implementation
2643:FreeRTOS/tasks.c ****      * relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2644:FreeRTOS/tasks.c ****     configASSERT( uxSchedulerSuspended == 0 );
2645:FreeRTOS/tasks.c **** 
2646:FreeRTOS/tasks.c ****     /* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2647:FreeRTOS/tasks.c ****      * the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2648:FreeRTOS/tasks.c ****     vTaskSuspendAll();
2649:FreeRTOS/tasks.c ****     xPendedTicks += xTicksToCatchUp;
2650:FreeRTOS/tasks.c ****     xYieldOccurred = xTaskResumeAll();
2651:FreeRTOS/tasks.c **** 
2652:FreeRTOS/tasks.c ****     return xYieldOccurred;
2653:FreeRTOS/tasks.c **** }
2654:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2655:FreeRTOS/tasks.c **** 
2656:FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2657:FreeRTOS/tasks.c **** 
2658:FreeRTOS/tasks.c ****     BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2659:FreeRTOS/tasks.c ****     {
2660:FreeRTOS/tasks.c ****         TCB_t * pxTCB = xTask;
2661:FreeRTOS/tasks.c ****         BaseType_t xReturn;
2662:FreeRTOS/tasks.c **** 
2663:FreeRTOS/tasks.c ****         configASSERT( pxTCB );
2664:FreeRTOS/tasks.c **** 
2665:FreeRTOS/tasks.c ****         vTaskSuspendAll();
2666:FreeRTOS/tasks.c ****         {
2667:FreeRTOS/tasks.c ****             /* A task can only be prematurely removed from the Blocked state if
2668:FreeRTOS/tasks.c ****              * it is actually in the Blocked state. */
2669:FreeRTOS/tasks.c ****             if( eTaskGetState( xTask ) == eBlocked )
2670:FreeRTOS/tasks.c ****             {
2671:FreeRTOS/tasks.c ****                 xReturn = pdPASS;
2672:FreeRTOS/tasks.c **** 
2673:FreeRTOS/tasks.c ****                 /* Remove the reference to the task from the blocked list.  An
2674:FreeRTOS/tasks.c ****                  * interrupt won't touch the xStateListItem because the
2675:FreeRTOS/tasks.c ****                  * scheduler is suspended. */
2676:FreeRTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2677:FreeRTOS/tasks.c **** 
2678:FreeRTOS/tasks.c ****                 /* Is the task waiting on an event also?  If so remove it from
2679:FreeRTOS/tasks.c ****                  * the event list too.  Interrupts can touch the event list item,
2680:FreeRTOS/tasks.c ****                  * even though the scheduler is suspended, so a critical section
2681:FreeRTOS/tasks.c ****                  * is used. */
2682:FreeRTOS/tasks.c ****                 taskENTER_CRITICAL();
2683:FreeRTOS/tasks.c ****                 {
2684:FreeRTOS/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 59


2685:FreeRTOS/tasks.c ****                     {
2686:FreeRTOS/tasks.c ****                         ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2687:FreeRTOS/tasks.c **** 
2688:FreeRTOS/tasks.c ****                         /* This lets the task know it was forcibly removed from the
2689:FreeRTOS/tasks.c ****                          * blocked state so it should not re-evaluate its block time and
2690:FreeRTOS/tasks.c ****                          * then block again. */
2691:FreeRTOS/tasks.c ****                         pxTCB->ucDelayAborted = pdTRUE;
2692:FreeRTOS/tasks.c ****                     }
2693:FreeRTOS/tasks.c ****                     else
2694:FreeRTOS/tasks.c ****                     {
2695:FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2696:FreeRTOS/tasks.c ****                     }
2697:FreeRTOS/tasks.c ****                 }
2698:FreeRTOS/tasks.c ****                 taskEXIT_CRITICAL();
2699:FreeRTOS/tasks.c **** 
2700:FreeRTOS/tasks.c ****                 /* Place the unblocked task into the appropriate ready list. */
2701:FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
2702:FreeRTOS/tasks.c **** 
2703:FreeRTOS/tasks.c ****                 /* A task being unblocked cannot cause an immediate context
2704:FreeRTOS/tasks.c ****                  * switch if preemption is turned off. */
2705:FreeRTOS/tasks.c ****                 #if ( configUSE_PREEMPTION == 1 )
2706:FreeRTOS/tasks.c ****                     {
2707:FreeRTOS/tasks.c ****                         /* Preemption is on, but a context switch should only be
2708:FreeRTOS/tasks.c ****                          * performed if the unblocked task has a priority that is
2709:FreeRTOS/tasks.c ****                          * higher than the currently executing task. */
2710:FreeRTOS/tasks.c ****                         if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2711:FreeRTOS/tasks.c ****                         {
2712:FreeRTOS/tasks.c ****                             /* Pend the yield to be performed when the scheduler
2713:FreeRTOS/tasks.c ****                              * is unsuspended. */
2714:FreeRTOS/tasks.c ****                             xYieldPending = pdTRUE;
2715:FreeRTOS/tasks.c ****                         }
2716:FreeRTOS/tasks.c ****                         else
2717:FreeRTOS/tasks.c ****                         {
2718:FreeRTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
2719:FreeRTOS/tasks.c ****                         }
2720:FreeRTOS/tasks.c ****                     }
2721:FreeRTOS/tasks.c ****                 #endif /* configUSE_PREEMPTION */
2722:FreeRTOS/tasks.c ****             }
2723:FreeRTOS/tasks.c ****             else
2724:FreeRTOS/tasks.c ****             {
2725:FreeRTOS/tasks.c ****                 xReturn = pdFAIL;
2726:FreeRTOS/tasks.c ****             }
2727:FreeRTOS/tasks.c ****         }
2728:FreeRTOS/tasks.c ****         ( void ) xTaskResumeAll();
2729:FreeRTOS/tasks.c **** 
2730:FreeRTOS/tasks.c ****         return xReturn;
2731:FreeRTOS/tasks.c ****     }
2732:FreeRTOS/tasks.c **** 
2733:FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2734:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2735:FreeRTOS/tasks.c **** 
2736:FreeRTOS/tasks.c **** BaseType_t xTaskIncrementTick( void )
2737:FreeRTOS/tasks.c **** {
2738:FreeRTOS/tasks.c ****     TCB_t * pxTCB;
2739:FreeRTOS/tasks.c ****     TickType_t xItemValue;
2740:FreeRTOS/tasks.c ****     BaseType_t xSwitchRequired = pdFALSE;
2741:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 60


2742:FreeRTOS/tasks.c ****     /* Called by the portable layer each time a tick interrupt occurs.
2743:FreeRTOS/tasks.c ****      * Increments the tick then checks to see if the new tick value will cause any
2744:FreeRTOS/tasks.c ****      * tasks to be unblocked. */
2745:FreeRTOS/tasks.c ****     traceTASK_INCREMENT_TICK( xTickCount );
2746:FreeRTOS/tasks.c **** 
2747:FreeRTOS/tasks.c ****     if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2748:FreeRTOS/tasks.c ****     {
2749:FreeRTOS/tasks.c ****         /* Minor optimisation.  The tick count cannot change in this
2750:FreeRTOS/tasks.c ****          * block. */
2751:FreeRTOS/tasks.c ****         const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2752:FreeRTOS/tasks.c **** 
2753:FreeRTOS/tasks.c ****         /* Increment the RTOS tick, switching the delayed and overflowed
2754:FreeRTOS/tasks.c ****          * delayed lists if it wraps to 0. */
2755:FreeRTOS/tasks.c ****         xTickCount = xConstTickCount;
2756:FreeRTOS/tasks.c **** 
2757:FreeRTOS/tasks.c ****         if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to fa
2758:FreeRTOS/tasks.c ****         {
2759:FreeRTOS/tasks.c ****             taskSWITCH_DELAYED_LISTS();
2760:FreeRTOS/tasks.c ****         }
2761:FreeRTOS/tasks.c ****         else
2762:FreeRTOS/tasks.c ****         {
2763:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2764:FreeRTOS/tasks.c ****         }
2765:FreeRTOS/tasks.c **** 
2766:FreeRTOS/tasks.c ****         /* See if this tick has made a timeout expire.  Tasks are stored in
2767:FreeRTOS/tasks.c ****          * the  queue in the order of their wake time - meaning once one task
2768:FreeRTOS/tasks.c ****          * has been found whose block time has not expired there is no need to
2769:FreeRTOS/tasks.c ****          * look any further down the list. */
2770:FreeRTOS/tasks.c ****         if( xConstTickCount >= xNextTaskUnblockTime )
2771:FreeRTOS/tasks.c ****         {
2772:FreeRTOS/tasks.c ****             for( ; ; )
2773:FreeRTOS/tasks.c ****             {
2774:FreeRTOS/tasks.c ****                 if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2775:FreeRTOS/tasks.c ****                 {
2776:FreeRTOS/tasks.c ****                     /* The delayed list is empty.  Set xNextTaskUnblockTime
2777:FreeRTOS/tasks.c ****                      * to the maximum possible value so it is extremely
2778:FreeRTOS/tasks.c ****                      * unlikely that the
2779:FreeRTOS/tasks.c ****                      * if( xTickCount >= xNextTaskUnblockTime ) test will pass
2780:FreeRTOS/tasks.c ****                      * next time through. */
2781:FreeRTOS/tasks.c ****                     xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts
2782:FreeRTOS/tasks.c ****                     break;
2783:FreeRTOS/tasks.c ****                 }
2784:FreeRTOS/tasks.c ****                 else
2785:FreeRTOS/tasks.c ****                 {
2786:FreeRTOS/tasks.c ****                     /* The delayed list is not empty, get the value of the
2787:FreeRTOS/tasks.c ****                      * item at the head of the delayed list.  This is the time
2788:FreeRTOS/tasks.c ****                      * at which the task at the head of the delayed list must
2789:FreeRTOS/tasks.c ****                      * be removed from the Blocked state. */
2790:FreeRTOS/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * 
2791:FreeRTOS/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2792:FreeRTOS/tasks.c **** 
2793:FreeRTOS/tasks.c ****                     if( xConstTickCount < xItemValue )
2794:FreeRTOS/tasks.c ****                     {
2795:FreeRTOS/tasks.c ****                         /* It is not time to unblock this item yet, but the
2796:FreeRTOS/tasks.c ****                          * item value is the time at which the task at the head
2797:FreeRTOS/tasks.c ****                          * of the blocked list must be removed from the Blocked
2798:FreeRTOS/tasks.c ****                          * state -  so record the item value in
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 61


2799:FreeRTOS/tasks.c ****                          * xNextTaskUnblockTime. */
2800:FreeRTOS/tasks.c ****                         xNextTaskUnblockTime = xItemValue;
2801:FreeRTOS/tasks.c ****                         break; /*lint !e9011 Code structure here is deemed easier to understand wit
2802:FreeRTOS/tasks.c ****                     }
2803:FreeRTOS/tasks.c ****                     else
2804:FreeRTOS/tasks.c ****                     {
2805:FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2806:FreeRTOS/tasks.c ****                     }
2807:FreeRTOS/tasks.c **** 
2808:FreeRTOS/tasks.c ****                     /* It is time to remove the item from the Blocked state. */
2809:FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
2810:FreeRTOS/tasks.c **** 
2811:FreeRTOS/tasks.c ****                     /* Is the task waiting on an event also?  If so remove
2812:FreeRTOS/tasks.c ****                      * it from the event list. */
2813:FreeRTOS/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2814:FreeRTOS/tasks.c ****                     {
2815:FreeRTOS/tasks.c ****                         listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
2816:FreeRTOS/tasks.c ****                     }
2817:FreeRTOS/tasks.c ****                     else
2818:FreeRTOS/tasks.c ****                     {
2819:FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2820:FreeRTOS/tasks.c ****                     }
2821:FreeRTOS/tasks.c **** 
2822:FreeRTOS/tasks.c ****                     /* Place the unblocked task into the appropriate ready
2823:FreeRTOS/tasks.c ****                      * list. */
2824:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
2825:FreeRTOS/tasks.c **** 
2826:FreeRTOS/tasks.c ****                     /* A task being unblocked cannot cause an immediate
2827:FreeRTOS/tasks.c ****                      * context switch if preemption is turned off. */
2828:FreeRTOS/tasks.c ****                     #if ( configUSE_PREEMPTION == 1 )
2829:FreeRTOS/tasks.c ****                         {
2830:FreeRTOS/tasks.c ****                             /* Preemption is on, but a context switch should
2831:FreeRTOS/tasks.c ****                              * only be performed if the unblocked task has a
2832:FreeRTOS/tasks.c ****                              * priority that is equal to or higher than the
2833:FreeRTOS/tasks.c ****                              * currently executing task. */
2834:FreeRTOS/tasks.c ****                             if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2835:FreeRTOS/tasks.c ****                             {
2836:FreeRTOS/tasks.c ****                                 xSwitchRequired = pdTRUE;
2837:FreeRTOS/tasks.c ****                             }
2838:FreeRTOS/tasks.c ****                             else
2839:FreeRTOS/tasks.c ****                             {
2840:FreeRTOS/tasks.c ****                                 mtCOVERAGE_TEST_MARKER();
2841:FreeRTOS/tasks.c ****                             }
2842:FreeRTOS/tasks.c ****                         }
2843:FreeRTOS/tasks.c ****                     #endif /* configUSE_PREEMPTION */
2844:FreeRTOS/tasks.c ****                 }
2845:FreeRTOS/tasks.c ****             }
2846:FreeRTOS/tasks.c ****         }
2847:FreeRTOS/tasks.c **** 
2848:FreeRTOS/tasks.c ****         /* Tasks of equal priority to the currently running task will share
2849:FreeRTOS/tasks.c ****          * processing time (time slice) if preemption is on, and the application
2850:FreeRTOS/tasks.c ****          * writer has not explicitly turned time slicing off. */
2851:FreeRTOS/tasks.c ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2852:FreeRTOS/tasks.c ****             {
2853:FreeRTOS/tasks.c ****                 if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) >
2854:FreeRTOS/tasks.c ****                 {
2855:FreeRTOS/tasks.c ****                     xSwitchRequired = pdTRUE;
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 62


2856:FreeRTOS/tasks.c ****                 }
2857:FreeRTOS/tasks.c ****                 else
2858:FreeRTOS/tasks.c ****                 {
2859:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2860:FreeRTOS/tasks.c ****                 }
2861:FreeRTOS/tasks.c ****             }
2862:FreeRTOS/tasks.c ****         #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2863:FreeRTOS/tasks.c **** 
2864:FreeRTOS/tasks.c ****         #if ( configUSE_TICK_HOOK == 1 )
2865:FreeRTOS/tasks.c ****             {
2866:FreeRTOS/tasks.c ****                 /* Guard against the tick hook being called when the pended tick
2867:FreeRTOS/tasks.c ****                  * count is being unwound (when the scheduler is being unlocked). */
2868:FreeRTOS/tasks.c ****                 if( xPendedTicks == ( TickType_t ) 0 )
2869:FreeRTOS/tasks.c ****                 {
2870:FreeRTOS/tasks.c ****                     vApplicationTickHook();
2871:FreeRTOS/tasks.c ****                 }
2872:FreeRTOS/tasks.c ****                 else
2873:FreeRTOS/tasks.c ****                 {
2874:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2875:FreeRTOS/tasks.c ****                 }
2876:FreeRTOS/tasks.c ****             }
2877:FreeRTOS/tasks.c ****         #endif /* configUSE_TICK_HOOK */
2878:FreeRTOS/tasks.c **** 
2879:FreeRTOS/tasks.c ****         #if ( configUSE_PREEMPTION == 1 )
2880:FreeRTOS/tasks.c ****             {
2881:FreeRTOS/tasks.c ****                 if( xYieldPending != pdFALSE )
2882:FreeRTOS/tasks.c ****                 {
2883:FreeRTOS/tasks.c ****                     xSwitchRequired = pdTRUE;
2884:FreeRTOS/tasks.c ****                 }
2885:FreeRTOS/tasks.c ****                 else
2886:FreeRTOS/tasks.c ****                 {
2887:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2888:FreeRTOS/tasks.c ****                 }
2889:FreeRTOS/tasks.c ****             }
2890:FreeRTOS/tasks.c ****         #endif /* configUSE_PREEMPTION */
2891:FreeRTOS/tasks.c ****     }
2892:FreeRTOS/tasks.c ****     else
2893:FreeRTOS/tasks.c ****     {
2894:FreeRTOS/tasks.c ****         ++xPendedTicks;
2895:FreeRTOS/tasks.c **** 
2896:FreeRTOS/tasks.c ****         /* The tick hook gets called at regular intervals, even if the
2897:FreeRTOS/tasks.c ****          * scheduler is locked. */
2898:FreeRTOS/tasks.c ****         #if ( configUSE_TICK_HOOK == 1 )
2899:FreeRTOS/tasks.c ****             {
2900:FreeRTOS/tasks.c ****                 vApplicationTickHook();
2901:FreeRTOS/tasks.c ****             }
2902:FreeRTOS/tasks.c ****         #endif
2903:FreeRTOS/tasks.c ****     }
2904:FreeRTOS/tasks.c **** 
2905:FreeRTOS/tasks.c ****     return xSwitchRequired;
2906:FreeRTOS/tasks.c **** }
2907:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2908:FreeRTOS/tasks.c **** 
2909:FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2910:FreeRTOS/tasks.c **** 
2911:FreeRTOS/tasks.c ****     void vTaskSetApplicationTaskTag( TaskHandle_t xTask,
2912:FreeRTOS/tasks.c ****                                      TaskHookFunction_t pxHookFunction )
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 63


2913:FreeRTOS/tasks.c ****     {
2914:FreeRTOS/tasks.c ****         TCB_t * xTCB;
2915:FreeRTOS/tasks.c **** 
2916:FreeRTOS/tasks.c ****         /* If xTask is NULL then it is the task hook of the calling task that is
2917:FreeRTOS/tasks.c ****          * getting set. */
2918:FreeRTOS/tasks.c ****         if( xTask == NULL )
2919:FreeRTOS/tasks.c ****         {
2920:FreeRTOS/tasks.c ****             xTCB = ( TCB_t * ) pxCurrentTCB;
2921:FreeRTOS/tasks.c ****         }
2922:FreeRTOS/tasks.c ****         else
2923:FreeRTOS/tasks.c ****         {
2924:FreeRTOS/tasks.c ****             xTCB = xTask;
2925:FreeRTOS/tasks.c ****         }
2926:FreeRTOS/tasks.c **** 
2927:FreeRTOS/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2928:FreeRTOS/tasks.c ****          * the value can be accessed from an interrupt. */
2929:FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
2930:FreeRTOS/tasks.c ****         {
2931:FreeRTOS/tasks.c ****             xTCB->pxTaskTag = pxHookFunction;
2932:FreeRTOS/tasks.c ****         }
2933:FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
2934:FreeRTOS/tasks.c ****     }
2935:FreeRTOS/tasks.c **** 
2936:FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2937:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2938:FreeRTOS/tasks.c **** 
2939:FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2940:FreeRTOS/tasks.c **** 
2941:FreeRTOS/tasks.c ****     TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2942:FreeRTOS/tasks.c ****     {
2943:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
2944:FreeRTOS/tasks.c ****         TaskHookFunction_t xReturn;
2945:FreeRTOS/tasks.c **** 
2946:FreeRTOS/tasks.c ****         /* If xTask is NULL then set the calling task's hook. */
2947:FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
2948:FreeRTOS/tasks.c **** 
2949:FreeRTOS/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2950:FreeRTOS/tasks.c ****          * the value can be accessed from an interrupt. */
2951:FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
2952:FreeRTOS/tasks.c ****         {
2953:FreeRTOS/tasks.c ****             xReturn = pxTCB->pxTaskTag;
2954:FreeRTOS/tasks.c ****         }
2955:FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
2956:FreeRTOS/tasks.c **** 
2957:FreeRTOS/tasks.c ****         return xReturn;
2958:FreeRTOS/tasks.c ****     }
2959:FreeRTOS/tasks.c **** 
2960:FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2961:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2962:FreeRTOS/tasks.c **** 
2963:FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2964:FreeRTOS/tasks.c **** 
2965:FreeRTOS/tasks.c ****     TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2966:FreeRTOS/tasks.c ****     {
2967:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
2968:FreeRTOS/tasks.c ****         TaskHookFunction_t xReturn;
2969:FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 64


2970:FreeRTOS/tasks.c **** 
2971:FreeRTOS/tasks.c ****         /* If xTask is NULL then set the calling task's hook. */
2972:FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
2973:FreeRTOS/tasks.c **** 
2974:FreeRTOS/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2975:FreeRTOS/tasks.c ****          * the value can be accessed from an interrupt. */
2976:FreeRTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2977:FreeRTOS/tasks.c ****         {
2978:FreeRTOS/tasks.c ****             xReturn = pxTCB->pxTaskTag;
2979:FreeRTOS/tasks.c ****         }
2980:FreeRTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2981:FreeRTOS/tasks.c **** 
2982:FreeRTOS/tasks.c ****         return xReturn;
2983:FreeRTOS/tasks.c ****     }
2984:FreeRTOS/tasks.c **** 
2985:FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2986:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2987:FreeRTOS/tasks.c **** 
2988:FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2989:FreeRTOS/tasks.c **** 
2990:FreeRTOS/tasks.c ****     BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask,
2991:FreeRTOS/tasks.c ****                                              void * pvParameter )
2992:FreeRTOS/tasks.c ****     {
2993:FreeRTOS/tasks.c ****         TCB_t * xTCB;
2994:FreeRTOS/tasks.c ****         BaseType_t xReturn;
2995:FreeRTOS/tasks.c **** 
2996:FreeRTOS/tasks.c ****         /* If xTask is NULL then we are calling our own task hook. */
2997:FreeRTOS/tasks.c ****         if( xTask == NULL )
2998:FreeRTOS/tasks.c ****         {
2999:FreeRTOS/tasks.c ****             xTCB = pxCurrentTCB;
3000:FreeRTOS/tasks.c ****         }
3001:FreeRTOS/tasks.c ****         else
3002:FreeRTOS/tasks.c ****         {
3003:FreeRTOS/tasks.c ****             xTCB = xTask;
3004:FreeRTOS/tasks.c ****         }
3005:FreeRTOS/tasks.c **** 
3006:FreeRTOS/tasks.c ****         if( xTCB->pxTaskTag != NULL )
3007:FreeRTOS/tasks.c ****         {
3008:FreeRTOS/tasks.c ****             xReturn = xTCB->pxTaskTag( pvParameter );
3009:FreeRTOS/tasks.c ****         }
3010:FreeRTOS/tasks.c ****         else
3011:FreeRTOS/tasks.c ****         {
3012:FreeRTOS/tasks.c ****             xReturn = pdFAIL;
3013:FreeRTOS/tasks.c ****         }
3014:FreeRTOS/tasks.c **** 
3015:FreeRTOS/tasks.c ****         return xReturn;
3016:FreeRTOS/tasks.c ****     }
3017:FreeRTOS/tasks.c **** 
3018:FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
3019:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3020:FreeRTOS/tasks.c **** 
3021:FreeRTOS/tasks.c **** void vTaskSwitchContext( void )
3022:FreeRTOS/tasks.c **** {
3023:FreeRTOS/tasks.c ****     if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
3024:FreeRTOS/tasks.c ****     {
3025:FreeRTOS/tasks.c ****         /* The scheduler is currently suspended - do not allow a context
3026:FreeRTOS/tasks.c ****          * switch. */
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 65


3027:FreeRTOS/tasks.c ****         xYieldPending = pdTRUE;
3028:FreeRTOS/tasks.c ****     }
3029:FreeRTOS/tasks.c ****     else
3030:FreeRTOS/tasks.c ****     {
3031:FreeRTOS/tasks.c ****         xYieldPending = pdFALSE;
3032:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_OUT();
3033:FreeRTOS/tasks.c **** 
3034:FreeRTOS/tasks.c ****         #if ( configGENERATE_RUN_TIME_STATS == 1 )
3035:FreeRTOS/tasks.c ****             {
3036:FreeRTOS/tasks.c ****                 #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3037:FreeRTOS/tasks.c ****                     portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3038:FreeRTOS/tasks.c ****                 #else
3039:FreeRTOS/tasks.c ****                     ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
3040:FreeRTOS/tasks.c ****                 #endif
3041:FreeRTOS/tasks.c **** 
3042:FreeRTOS/tasks.c ****                 /* Add the amount of time the task has been running to the
3043:FreeRTOS/tasks.c ****                  * accumulated time so far.  The time the task started running was
3044:FreeRTOS/tasks.c ****                  * stored in ulTaskSwitchedInTime.  Note that there is no overflow
3045:FreeRTOS/tasks.c ****                  * protection here so count values are only valid until the timer
3046:FreeRTOS/tasks.c ****                  * overflows.  The guard against negative values is to protect
3047:FreeRTOS/tasks.c ****                  * against suspect run time stat counter implementations - which
3048:FreeRTOS/tasks.c ****                  * are provided by the application, not the kernel. */
3049:FreeRTOS/tasks.c ****                 if( ulTotalRunTime > ulTaskSwitchedInTime )
3050:FreeRTOS/tasks.c ****                 {
3051:FreeRTOS/tasks.c ****                     pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3052:FreeRTOS/tasks.c ****                 }
3053:FreeRTOS/tasks.c ****                 else
3054:FreeRTOS/tasks.c ****                 {
3055:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3056:FreeRTOS/tasks.c ****                 }
3057:FreeRTOS/tasks.c **** 
3058:FreeRTOS/tasks.c ****                 ulTaskSwitchedInTime = ulTotalRunTime;
3059:FreeRTOS/tasks.c ****             }
3060:FreeRTOS/tasks.c ****         #endif /* configGENERATE_RUN_TIME_STATS */
3061:FreeRTOS/tasks.c **** 
3062:FreeRTOS/tasks.c ****         /* Check for stack overflow, if configured. */
3063:FreeRTOS/tasks.c ****         taskCHECK_FOR_STACK_OVERFLOW();
3064:FreeRTOS/tasks.c **** 
3065:FreeRTOS/tasks.c ****         /* Before the currently running task is switched out, save its errno. */
3066:FreeRTOS/tasks.c ****         #if ( configUSE_POSIX_ERRNO == 1 )
3067:FreeRTOS/tasks.c ****             {
3068:FreeRTOS/tasks.c ****                 pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3069:FreeRTOS/tasks.c ****             }
3070:FreeRTOS/tasks.c ****         #endif
3071:FreeRTOS/tasks.c **** 
3072:FreeRTOS/tasks.c ****         /* Select a new task to run using either the generic C or port
3073:FreeRTOS/tasks.c ****          * optimised asm code. */
3074:FreeRTOS/tasks.c ****         taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with
3075:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
3076:FreeRTOS/tasks.c **** 
3077:FreeRTOS/tasks.c ****         /* After the new task is switched in, update the global errno. */
3078:FreeRTOS/tasks.c ****         #if ( configUSE_POSIX_ERRNO == 1 )
3079:FreeRTOS/tasks.c ****             {
3080:FreeRTOS/tasks.c ****                 FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3081:FreeRTOS/tasks.c ****             }
3082:FreeRTOS/tasks.c ****         #endif
3083:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 66


3084:FreeRTOS/tasks.c ****         #if ( configUSE_NEWLIB_REENTRANT == 1 )
3085:FreeRTOS/tasks.c ****             {
3086:FreeRTOS/tasks.c ****                 /* Switch Newlib's _impure_ptr variable to point to the _reent
3087:FreeRTOS/tasks.c ****                  * structure specific to this task.
3088:FreeRTOS/tasks.c ****                  * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3089:FreeRTOS/tasks.c ****                  * for additional information. */
3090:FreeRTOS/tasks.c ****                 _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3091:FreeRTOS/tasks.c ****             }
3092:FreeRTOS/tasks.c ****         #endif /* configUSE_NEWLIB_REENTRANT */
3093:FreeRTOS/tasks.c ****     }
3094:FreeRTOS/tasks.c **** }
3095:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3096:FreeRTOS/tasks.c **** 
3097:FreeRTOS/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList,
3098:FreeRTOS/tasks.c ****                             const TickType_t xTicksToWait )
3099:FreeRTOS/tasks.c **** {
3100:FreeRTOS/tasks.c ****     configASSERT( pxEventList );
3101:FreeRTOS/tasks.c **** 
3102:FreeRTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3103:FreeRTOS/tasks.c ****      * SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3104:FreeRTOS/tasks.c **** 
3105:FreeRTOS/tasks.c ****     /* Place the event list item of the TCB in the appropriate event list.
3106:FreeRTOS/tasks.c ****      * This is placed in the list in priority order so the highest priority task
3107:FreeRTOS/tasks.c ****      * is the first to be woken by the event.
3108:FreeRTOS/tasks.c ****      *
3109:FreeRTOS/tasks.c ****      * Note: Lists are sorted in ascending order by ListItem_t.xItemValue.
3110:FreeRTOS/tasks.c ****      * Normally, the xItemValue of a TCB's ListItem_t members is:
3111:FreeRTOS/tasks.c ****      *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
3112:FreeRTOS/tasks.c ****      * Therefore, the event list is sorted in descending priority order.
3113:FreeRTOS/tasks.c ****      *
3114:FreeRTOS/tasks.c ****      * The queue that contains the event list is locked, preventing
3115:FreeRTOS/tasks.c ****      * simultaneous access from interrupts. */
3116:FreeRTOS/tasks.c ****     vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3117:FreeRTOS/tasks.c **** 
3118:FreeRTOS/tasks.c ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3119:FreeRTOS/tasks.c **** }
3120:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3121:FreeRTOS/tasks.c **** 
3122:FreeRTOS/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
3123:FreeRTOS/tasks.c ****                                      const TickType_t xItemValue,
3124:FreeRTOS/tasks.c ****                                      const TickType_t xTicksToWait )
3125:FreeRTOS/tasks.c **** {
3126:FreeRTOS/tasks.c ****     configASSERT( pxEventList );
3127:FreeRTOS/tasks.c **** 
3128:FreeRTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3129:FreeRTOS/tasks.c ****      * the event groups implementation. */
3130:FreeRTOS/tasks.c ****     configASSERT( uxSchedulerSuspended != 0 );
3131:FreeRTOS/tasks.c **** 
3132:FreeRTOS/tasks.c ****     /* Store the item value in the event list item.  It is safe to access the
3133:FreeRTOS/tasks.c ****      * event list item here as interrupts won't access the event list item of a
3134:FreeRTOS/tasks.c ****      * task that is not in the Blocked state. */
3135:FreeRTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VA
3136:FreeRTOS/tasks.c **** 
3137:FreeRTOS/tasks.c ****     /* Place the event list item of the TCB at the end of the appropriate event
3138:FreeRTOS/tasks.c ****      * list.  It is safe to access the event list here because it is part of an
3139:FreeRTOS/tasks.c ****      * event group implementation - and interrupts don't access event groups
3140:FreeRTOS/tasks.c ****      * directly (instead they access them indirectly by pending function calls to
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 67


3141:FreeRTOS/tasks.c ****      * the task level). */
3142:FreeRTOS/tasks.c ****     listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3143:FreeRTOS/tasks.c **** 
3144:FreeRTOS/tasks.c ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3145:FreeRTOS/tasks.c **** }
3146:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3147:FreeRTOS/tasks.c **** 
3148:FreeRTOS/tasks.c **** #if ( configUSE_TIMERS == 1 )
3149:FreeRTOS/tasks.c **** 
3150:FreeRTOS/tasks.c ****     void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
3151:FreeRTOS/tasks.c ****                                           TickType_t xTicksToWait,
3152:FreeRTOS/tasks.c ****                                           const BaseType_t xWaitIndefinitely )
3153:FreeRTOS/tasks.c ****     {
3154:FreeRTOS/tasks.c ****         configASSERT( pxEventList );
3155:FreeRTOS/tasks.c **** 
3156:FreeRTOS/tasks.c ****         /* This function should not be called by application code hence the
3157:FreeRTOS/tasks.c ****          * 'Restricted' in its name.  It is not part of the public API.  It is
3158:FreeRTOS/tasks.c ****          * designed for use by kernel code, and has special calling requirements -
3159:FreeRTOS/tasks.c ****          * it should be called with the scheduler suspended. */
3160:FreeRTOS/tasks.c **** 
3161:FreeRTOS/tasks.c **** 
3162:FreeRTOS/tasks.c ****         /* Place the event list item of the TCB in the appropriate event list.
3163:FreeRTOS/tasks.c ****          * In this case it is assume that this is the only task that is going to
3164:FreeRTOS/tasks.c ****          * be waiting on this event list, so the faster vListInsertEnd() function
3165:FreeRTOS/tasks.c ****          * can be used in place of vListInsert. */
3166:FreeRTOS/tasks.c ****         listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3167:FreeRTOS/tasks.c **** 
3168:FreeRTOS/tasks.c ****         /* If the task should block indefinitely then set the block time to a
3169:FreeRTOS/tasks.c ****          * value that will be recognised as an indefinite delay inside the
3170:FreeRTOS/tasks.c ****          * prvAddCurrentTaskToDelayedList() function. */
3171:FreeRTOS/tasks.c ****         if( xWaitIndefinitely != pdFALSE )
3172:FreeRTOS/tasks.c ****         {
3173:FreeRTOS/tasks.c ****             xTicksToWait = portMAX_DELAY;
3174:FreeRTOS/tasks.c ****         }
3175:FreeRTOS/tasks.c **** 
3176:FreeRTOS/tasks.c ****         traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3177:FreeRTOS/tasks.c ****         prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3178:FreeRTOS/tasks.c ****     }
3179:FreeRTOS/tasks.c **** 
3180:FreeRTOS/tasks.c **** #endif /* configUSE_TIMERS */
3181:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3182:FreeRTOS/tasks.c **** 
3183:FreeRTOS/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3184:FreeRTOS/tasks.c **** {
3185:FreeRTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
3186:FreeRTOS/tasks.c ****     BaseType_t xReturn;
3187:FreeRTOS/tasks.c **** 
3188:FreeRTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3189:FreeRTOS/tasks.c ****      * called from a critical section within an ISR. */
3190:FreeRTOS/tasks.c **** 
3191:FreeRTOS/tasks.c ****     /* The event list is sorted in priority order, so the first in the list can
3192:FreeRTOS/tasks.c ****      * be removed as it is known to be the highest priority.  Remove the TCB from
3193:FreeRTOS/tasks.c ****      * the delayed list, and add it to the ready list.
3194:FreeRTOS/tasks.c ****      *
3195:FreeRTOS/tasks.c ****      * If an event is for a queue that is locked then this function will never
3196:FreeRTOS/tasks.c ****      * get called - the lock count on the queue will get modified instead.  This
3197:FreeRTOS/tasks.c ****      * means exclusive access to the event list is guaranteed here.
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 68


3198:FreeRTOS/tasks.c ****      *
3199:FreeRTOS/tasks.c ****      * This function assumes that a check has already been made to ensure that
3200:FreeRTOS/tasks.c ****      * pxEventList is not empty. */
3201:FreeRTOS/tasks.c ****     pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as th
3202:FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
3203:FreeRTOS/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
3204:FreeRTOS/tasks.c **** 
3205:FreeRTOS/tasks.c ****     if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3206:FreeRTOS/tasks.c ****     {
3207:FreeRTOS/tasks.c ****         listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
3208:FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
3209:FreeRTOS/tasks.c **** 
3210:FreeRTOS/tasks.c ****         #if ( configUSE_TICKLESS_IDLE != 0 )
3211:FreeRTOS/tasks.c ****             {
3212:FreeRTOS/tasks.c ****                 /* If a task is blocked on a kernel object then xNextTaskUnblockTime
3213:FreeRTOS/tasks.c ****                  * might be set to the blocked task's time out time.  If the task is
3214:FreeRTOS/tasks.c ****                  * unblocked for a reason other than a timeout xNextTaskUnblockTime is
3215:FreeRTOS/tasks.c ****                  * normally left unchanged, because it is automatically reset to a new
3216:FreeRTOS/tasks.c ****                  * value when the tick count equals xNextTaskUnblockTime.  However if
3217:FreeRTOS/tasks.c ****                  * tickless idling is used it might be more important to enter sleep mode
3218:FreeRTOS/tasks.c ****                  * at the earliest possible time - so reset xNextTaskUnblockTime here to
3219:FreeRTOS/tasks.c ****                  * ensure it is updated at the earliest possible time. */
3220:FreeRTOS/tasks.c ****                 prvResetNextTaskUnblockTime();
3221:FreeRTOS/tasks.c ****             }
3222:FreeRTOS/tasks.c ****         #endif
3223:FreeRTOS/tasks.c ****     }
3224:FreeRTOS/tasks.c ****     else
3225:FreeRTOS/tasks.c ****     {
3226:FreeRTOS/tasks.c ****         /* The delayed and ready lists cannot be accessed, so hold this task
3227:FreeRTOS/tasks.c ****          * pending until the scheduler is resumed. */
3228:FreeRTOS/tasks.c ****         listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3229:FreeRTOS/tasks.c ****     }
3230:FreeRTOS/tasks.c **** 
3231:FreeRTOS/tasks.c ****     if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3232:FreeRTOS/tasks.c ****     {
3233:FreeRTOS/tasks.c ****         /* Return true if the task removed from the event list has a higher
3234:FreeRTOS/tasks.c ****          * priority than the calling task.  This allows the calling task to know if
3235:FreeRTOS/tasks.c ****          * it should force a context switch now. */
3236:FreeRTOS/tasks.c ****         xReturn = pdTRUE;
3237:FreeRTOS/tasks.c **** 
3238:FreeRTOS/tasks.c ****         /* Mark that a yield is pending in case the user is not using the
3239:FreeRTOS/tasks.c ****          * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3240:FreeRTOS/tasks.c ****         xYieldPending = pdTRUE;
3241:FreeRTOS/tasks.c ****     }
3242:FreeRTOS/tasks.c ****     else
3243:FreeRTOS/tasks.c ****     {
3244:FreeRTOS/tasks.c ****         xReturn = pdFALSE;
3245:FreeRTOS/tasks.c ****     }
3246:FreeRTOS/tasks.c **** 
3247:FreeRTOS/tasks.c ****     return xReturn;
3248:FreeRTOS/tasks.c **** }
3249:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3250:FreeRTOS/tasks.c **** 
3251:FreeRTOS/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
3252:FreeRTOS/tasks.c ****                                         const TickType_t xItemValue )
3253:FreeRTOS/tasks.c **** {
3254:FreeRTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 69


3255:FreeRTOS/tasks.c **** 
3256:FreeRTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3257:FreeRTOS/tasks.c ****      * the event flags implementation. */
3258:FreeRTOS/tasks.c ****     configASSERT( uxSchedulerSuspended != pdFALSE );
3259:FreeRTOS/tasks.c **** 
3260:FreeRTOS/tasks.c ****     /* Store the new item value in the event list. */
3261:FreeRTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3262:FreeRTOS/tasks.c **** 
3263:FreeRTOS/tasks.c ****     /* Remove the event list form the event flag.  Interrupts do not access
3264:FreeRTOS/tasks.c ****      * event flags. */
3265:FreeRTOS/tasks.c ****     pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as th
3266:FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
3267:FreeRTOS/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
3268:FreeRTOS/tasks.c **** 
3269:FreeRTOS/tasks.c ****     #if ( configUSE_TICKLESS_IDLE != 0 )
3270:FreeRTOS/tasks.c ****         {
3271:FreeRTOS/tasks.c ****             /* If a task is blocked on a kernel object then xNextTaskUnblockTime
3272:FreeRTOS/tasks.c ****              * might be set to the blocked task's time out time.  If the task is
3273:FreeRTOS/tasks.c ****              * unblocked for a reason other than a timeout xNextTaskUnblockTime is
3274:FreeRTOS/tasks.c ****              * normally left unchanged, because it is automatically reset to a new
3275:FreeRTOS/tasks.c ****              * value when the tick count equals xNextTaskUnblockTime.  However if
3276:FreeRTOS/tasks.c ****              * tickless idling is used it might be more important to enter sleep mode
3277:FreeRTOS/tasks.c ****              * at the earliest possible time - so reset xNextTaskUnblockTime here to
3278:FreeRTOS/tasks.c ****              * ensure it is updated at the earliest possible time. */
3279:FreeRTOS/tasks.c ****             prvResetNextTaskUnblockTime();
3280:FreeRTOS/tasks.c ****         }
3281:FreeRTOS/tasks.c ****     #endif
3282:FreeRTOS/tasks.c **** 
3283:FreeRTOS/tasks.c ****     /* Remove the task from the delayed list and add it to the ready list.  The
3284:FreeRTOS/tasks.c ****      * scheduler is suspended so interrupts will not be accessing the ready
3285:FreeRTOS/tasks.c ****      * lists. */
3286:FreeRTOS/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
3287:FreeRTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
3288:FreeRTOS/tasks.c **** 
3289:FreeRTOS/tasks.c ****     if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3290:FreeRTOS/tasks.c ****     {
3291:FreeRTOS/tasks.c ****         /* The unblocked task has a priority above that of the calling task, so
3292:FreeRTOS/tasks.c ****          * a context switch is required.  This function is called with the
3293:FreeRTOS/tasks.c ****          * scheduler suspended so xYieldPending is set so the context switch
3294:FreeRTOS/tasks.c ****          * occurs immediately that the scheduler is resumed (unsuspended). */
3295:FreeRTOS/tasks.c ****         xYieldPending = pdTRUE;
3296:FreeRTOS/tasks.c ****     }
3297:FreeRTOS/tasks.c **** }
3298:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3299:FreeRTOS/tasks.c **** 
3300:FreeRTOS/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3301:FreeRTOS/tasks.c **** {
3302:FreeRTOS/tasks.c ****     configASSERT( pxTimeOut );
3303:FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
3304:FreeRTOS/tasks.c ****     {
3305:FreeRTOS/tasks.c ****         pxTimeOut->xOverflowCount = xNumOfOverflows;
3306:FreeRTOS/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
3307:FreeRTOS/tasks.c ****     }
3308:FreeRTOS/tasks.c ****     taskEXIT_CRITICAL();
3309:FreeRTOS/tasks.c **** }
3310:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3311:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 70


3312:FreeRTOS/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3313:FreeRTOS/tasks.c **** {
3314:FreeRTOS/tasks.c ****     /* For internal use only as it does not use a critical section. */
3315:FreeRTOS/tasks.c ****     pxTimeOut->xOverflowCount = xNumOfOverflows;
3316:FreeRTOS/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
3317:FreeRTOS/tasks.c **** }
3318:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3319:FreeRTOS/tasks.c **** 
3320:FreeRTOS/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
3321:FreeRTOS/tasks.c ****                                  TickType_t * const pxTicksToWait )
3322:FreeRTOS/tasks.c **** {
3323:FreeRTOS/tasks.c ****     BaseType_t xReturn;
3324:FreeRTOS/tasks.c **** 
3325:FreeRTOS/tasks.c ****     configASSERT( pxTimeOut );
3326:FreeRTOS/tasks.c ****     configASSERT( pxTicksToWait );
3327:FreeRTOS/tasks.c **** 
3328:FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
3329:FreeRTOS/tasks.c ****     {
3330:FreeRTOS/tasks.c ****         /* Minor optimisation.  The tick count cannot change in this block. */
3331:FreeRTOS/tasks.c ****         const TickType_t xConstTickCount = xTickCount;
3332:FreeRTOS/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3333:FreeRTOS/tasks.c **** 
3334:FreeRTOS/tasks.c ****         #if ( INCLUDE_xTaskAbortDelay == 1 )
3335:FreeRTOS/tasks.c ****             if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3336:FreeRTOS/tasks.c ****             {
3337:FreeRTOS/tasks.c ****                 /* The delay was aborted, which is not the same as a time out,
3338:FreeRTOS/tasks.c ****                  * but has the same result. */
3339:FreeRTOS/tasks.c ****                 pxCurrentTCB->ucDelayAborted = pdFALSE;
3340:FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
3341:FreeRTOS/tasks.c ****             }
3342:FreeRTOS/tasks.c ****             else
3343:FreeRTOS/tasks.c ****         #endif
3344:FreeRTOS/tasks.c **** 
3345:FreeRTOS/tasks.c ****         #if ( INCLUDE_vTaskSuspend == 1 )
3346:FreeRTOS/tasks.c ****             if( *pxTicksToWait == portMAX_DELAY )
3347:FreeRTOS/tasks.c ****             {
3348:FreeRTOS/tasks.c ****                 /* If INCLUDE_vTaskSuspend is set to 1 and the block time
3349:FreeRTOS/tasks.c ****                  * specified is the maximum block time then the task should block
3350:FreeRTOS/tasks.c ****                  * indefinitely, and therefore never time out. */
3351:FreeRTOS/tasks.c ****                 xReturn = pdFALSE;
3352:FreeRTOS/tasks.c ****             }
3353:FreeRTOS/tasks.c ****             else
3354:FreeRTOS/tasks.c ****         #endif
3355:FreeRTOS/tasks.c **** 
3356:FreeRTOS/tasks.c ****         if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTi
3357:FreeRTOS/tasks.c ****         {
3358:FreeRTOS/tasks.c ****             /* The tick count is greater than the time at which
3359:FreeRTOS/tasks.c ****              * vTaskSetTimeout() was called, but has also overflowed since
3360:FreeRTOS/tasks.c ****              * vTaskSetTimeOut() was called.  It must have wrapped all the way
3361:FreeRTOS/tasks.c ****              * around and gone past again. This passed since vTaskSetTimeout()
3362:FreeRTOS/tasks.c ****              * was called. */
3363:FreeRTOS/tasks.c ****             xReturn = pdTRUE;
3364:FreeRTOS/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
3365:FreeRTOS/tasks.c ****         }
3366:FreeRTOS/tasks.c ****         else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant wi
3367:FreeRTOS/tasks.c ****         {
3368:FreeRTOS/tasks.c ****             /* Not a genuine timeout. Adjust parameters for time remaining. */
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 71


3369:FreeRTOS/tasks.c ****             *pxTicksToWait -= xElapsedTime;
3370:FreeRTOS/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
3371:FreeRTOS/tasks.c ****             xReturn = pdFALSE;
3372:FreeRTOS/tasks.c ****         }
3373:FreeRTOS/tasks.c ****         else
3374:FreeRTOS/tasks.c ****         {
3375:FreeRTOS/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
3376:FreeRTOS/tasks.c ****             xReturn = pdTRUE;
3377:FreeRTOS/tasks.c ****         }
3378:FreeRTOS/tasks.c ****     }
3379:FreeRTOS/tasks.c ****     taskEXIT_CRITICAL();
3380:FreeRTOS/tasks.c **** 
3381:FreeRTOS/tasks.c ****     return xReturn;
3382:FreeRTOS/tasks.c **** }
3383:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3384:FreeRTOS/tasks.c **** 
3385:FreeRTOS/tasks.c **** void vTaskMissedYield( void )
3386:FreeRTOS/tasks.c **** {
3387:FreeRTOS/tasks.c ****     xYieldPending = pdTRUE;
3388:FreeRTOS/tasks.c **** }
3389:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3390:FreeRTOS/tasks.c **** 
3391:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3392:FreeRTOS/tasks.c **** 
3393:FreeRTOS/tasks.c ****     UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3394:FreeRTOS/tasks.c ****     {
3395:FreeRTOS/tasks.c ****         UBaseType_t uxReturn;
3396:FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
3397:FreeRTOS/tasks.c **** 
3398:FreeRTOS/tasks.c ****         if( xTask != NULL )
3399:FreeRTOS/tasks.c ****         {
3400:FreeRTOS/tasks.c ****             pxTCB = xTask;
3401:FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxTaskNumber;
3402:FreeRTOS/tasks.c ****         }
3403:FreeRTOS/tasks.c ****         else
3404:FreeRTOS/tasks.c ****         {
3405:FreeRTOS/tasks.c ****             uxReturn = 0U;
3406:FreeRTOS/tasks.c ****         }
3407:FreeRTOS/tasks.c **** 
3408:FreeRTOS/tasks.c ****         return uxReturn;
3409:FreeRTOS/tasks.c ****     }
3410:FreeRTOS/tasks.c **** 
3411:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3412:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3413:FreeRTOS/tasks.c **** 
3414:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3415:FreeRTOS/tasks.c **** 
3416:FreeRTOS/tasks.c ****     void vTaskSetTaskNumber( TaskHandle_t xTask,
3417:FreeRTOS/tasks.c ****                              const UBaseType_t uxHandle )
3418:FreeRTOS/tasks.c ****     {
3419:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3420:FreeRTOS/tasks.c **** 
3421:FreeRTOS/tasks.c ****         if( xTask != NULL )
3422:FreeRTOS/tasks.c ****         {
3423:FreeRTOS/tasks.c ****             pxTCB = xTask;
3424:FreeRTOS/tasks.c ****             pxTCB->uxTaskNumber = uxHandle;
3425:FreeRTOS/tasks.c ****         }
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 72


3426:FreeRTOS/tasks.c ****     }
3427:FreeRTOS/tasks.c **** 
3428:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3429:FreeRTOS/tasks.c **** 
3430:FreeRTOS/tasks.c **** /*
3431:FreeRTOS/tasks.c ****  * -----------------------------------------------------------
3432:FreeRTOS/tasks.c ****  * The Idle task.
3433:FreeRTOS/tasks.c ****  * ----------------------------------------------------------
3434:FreeRTOS/tasks.c ****  *
3435:FreeRTOS/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3436:FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3437:FreeRTOS/tasks.c ****  *
3438:FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
3439:FreeRTOS/tasks.c ****  *
3440:FreeRTOS/tasks.c ****  */
3441:FreeRTOS/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3442:FreeRTOS/tasks.c **** {
3443:FreeRTOS/tasks.c ****     /* Stop warnings. */
3444:FreeRTOS/tasks.c ****     ( void ) pvParameters;
3445:FreeRTOS/tasks.c **** 
3446:FreeRTOS/tasks.c ****     /** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3447:FreeRTOS/tasks.c ****      * SCHEDULER IS STARTED. **/
3448:FreeRTOS/tasks.c **** 
3449:FreeRTOS/tasks.c ****     /* In case a task that has a secure context deletes itself, in which case
3450:FreeRTOS/tasks.c ****      * the idle task is responsible for deleting the task's secure context, if
3451:FreeRTOS/tasks.c ****      * any. */
3452:FreeRTOS/tasks.c ****     portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3453:FreeRTOS/tasks.c **** 
3454:FreeRTOS/tasks.c ****     for( ; ; )
3455:FreeRTOS/tasks.c ****     {
3456:FreeRTOS/tasks.c ****         /* See if any tasks have deleted themselves - if so then the idle task
3457:FreeRTOS/tasks.c ****          * is responsible for freeing the deleted task's TCB and stack. */
3458:FreeRTOS/tasks.c ****         prvCheckTasksWaitingTermination();
3459:FreeRTOS/tasks.c **** 
3460:FreeRTOS/tasks.c ****         #if ( configUSE_PREEMPTION == 0 )
3461:FreeRTOS/tasks.c ****             {
3462:FreeRTOS/tasks.c ****                 /* If we are not using preemption we keep forcing a task switch to
3463:FreeRTOS/tasks.c ****                  * see if any other task has become available.  If we are using
3464:FreeRTOS/tasks.c ****                  * preemption we don't need to do this as any task becoming available
3465:FreeRTOS/tasks.c ****                  * will automatically get the processor anyway. */
3466:FreeRTOS/tasks.c ****                 taskYIELD();
3467:FreeRTOS/tasks.c ****             }
3468:FreeRTOS/tasks.c ****         #endif /* configUSE_PREEMPTION */
3469:FreeRTOS/tasks.c **** 
3470:FreeRTOS/tasks.c ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3471:FreeRTOS/tasks.c ****             {
3472:FreeRTOS/tasks.c ****                 /* When using preemption tasks of equal priority will be
3473:FreeRTOS/tasks.c ****                  * timesliced.  If a task that is sharing the idle priority is ready
3474:FreeRTOS/tasks.c ****                  * to run then the idle task should yield before the end of the
3475:FreeRTOS/tasks.c ****                  * timeslice.
3476:FreeRTOS/tasks.c ****                  *
3477:FreeRTOS/tasks.c ****                  * A critical region is not required here as we are just reading from
3478:FreeRTOS/tasks.c ****                  * the list, and an occasional incorrect value will not matter.  If
3479:FreeRTOS/tasks.c ****                  * the ready list at the idle priority contains more than one task
3480:FreeRTOS/tasks.c ****                  * then a task other than the idle task is ready to execute. */
3481:FreeRTOS/tasks.c ****                 if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBase
3482:FreeRTOS/tasks.c ****                 {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 73


3483:FreeRTOS/tasks.c ****                     taskYIELD();
3484:FreeRTOS/tasks.c ****                 }
3485:FreeRTOS/tasks.c ****                 else
3486:FreeRTOS/tasks.c ****                 {
3487:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3488:FreeRTOS/tasks.c ****                 }
3489:FreeRTOS/tasks.c ****             }
3490:FreeRTOS/tasks.c ****         #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3491:FreeRTOS/tasks.c **** 
3492:FreeRTOS/tasks.c ****         #if ( configUSE_IDLE_HOOK == 1 )
3493:FreeRTOS/tasks.c ****             {
3494:FreeRTOS/tasks.c ****                 extern void vApplicationIdleHook( void );
3495:FreeRTOS/tasks.c **** 
3496:FreeRTOS/tasks.c ****                 /* Call the user defined function from within the idle task.  This
3497:FreeRTOS/tasks.c ****                  * allows the application designer to add background functionality
3498:FreeRTOS/tasks.c ****                  * without the overhead of a separate task.
3499:FreeRTOS/tasks.c ****                  * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3500:FreeRTOS/tasks.c ****                  * CALL A FUNCTION THAT MIGHT BLOCK. */
3501:FreeRTOS/tasks.c ****                 vApplicationIdleHook();
3502:FreeRTOS/tasks.c ****             }
3503:FreeRTOS/tasks.c ****         #endif /* configUSE_IDLE_HOOK */
3504:FreeRTOS/tasks.c **** 
3505:FreeRTOS/tasks.c ****         /* This conditional compilation should use inequality to 0, not equality
3506:FreeRTOS/tasks.c ****          * to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3507:FreeRTOS/tasks.c ****          * user defined low power mode  implementations require
3508:FreeRTOS/tasks.c ****          * configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3509:FreeRTOS/tasks.c ****         #if ( configUSE_TICKLESS_IDLE != 0 )
3510:FreeRTOS/tasks.c ****             {
3511:FreeRTOS/tasks.c ****                 TickType_t xExpectedIdleTime;
3512:FreeRTOS/tasks.c **** 
3513:FreeRTOS/tasks.c ****                 /* It is not desirable to suspend then resume the scheduler on
3514:FreeRTOS/tasks.c ****                  * each iteration of the idle task.  Therefore, a preliminary
3515:FreeRTOS/tasks.c ****                  * test of the expected idle time is performed without the
3516:FreeRTOS/tasks.c ****                  * scheduler suspended.  The result here is not necessarily
3517:FreeRTOS/tasks.c ****                  * valid. */
3518:FreeRTOS/tasks.c ****                 xExpectedIdleTime = prvGetExpectedIdleTime();
3519:FreeRTOS/tasks.c **** 
3520:FreeRTOS/tasks.c ****                 if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3521:FreeRTOS/tasks.c ****                 {
3522:FreeRTOS/tasks.c ****                     vTaskSuspendAll();
3523:FreeRTOS/tasks.c ****                     {
3524:FreeRTOS/tasks.c ****                         /* Now the scheduler is suspended, the expected idle
3525:FreeRTOS/tasks.c ****                          * time can be sampled again, and this time its value can
3526:FreeRTOS/tasks.c ****                          * be used. */
3527:FreeRTOS/tasks.c ****                         configASSERT( xNextTaskUnblockTime >= xTickCount );
3528:FreeRTOS/tasks.c ****                         xExpectedIdleTime = prvGetExpectedIdleTime();
3529:FreeRTOS/tasks.c **** 
3530:FreeRTOS/tasks.c ****                         /* Define the following macro to set xExpectedIdleTime to 0
3531:FreeRTOS/tasks.c ****                          * if the application does not want
3532:FreeRTOS/tasks.c ****                          * portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3533:FreeRTOS/tasks.c ****                         configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3534:FreeRTOS/tasks.c **** 
3535:FreeRTOS/tasks.c ****                         if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3536:FreeRTOS/tasks.c ****                         {
3537:FreeRTOS/tasks.c ****                             traceLOW_POWER_IDLE_BEGIN();
3538:FreeRTOS/tasks.c ****                             portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3539:FreeRTOS/tasks.c ****                             traceLOW_POWER_IDLE_END();
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 74


3540:FreeRTOS/tasks.c ****                         }
3541:FreeRTOS/tasks.c ****                         else
3542:FreeRTOS/tasks.c ****                         {
3543:FreeRTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
3544:FreeRTOS/tasks.c ****                         }
3545:FreeRTOS/tasks.c ****                     }
3546:FreeRTOS/tasks.c ****                     ( void ) xTaskResumeAll();
3547:FreeRTOS/tasks.c ****                 }
3548:FreeRTOS/tasks.c ****                 else
3549:FreeRTOS/tasks.c ****                 {
3550:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3551:FreeRTOS/tasks.c ****                 }
3552:FreeRTOS/tasks.c ****             }
3553:FreeRTOS/tasks.c ****         #endif /* configUSE_TICKLESS_IDLE */
3554:FreeRTOS/tasks.c ****     }
3555:FreeRTOS/tasks.c **** }
3556:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3557:FreeRTOS/tasks.c **** 
3558:FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
3559:FreeRTOS/tasks.c **** 
3560:FreeRTOS/tasks.c ****     eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3561:FreeRTOS/tasks.c ****     {
3562:FreeRTOS/tasks.c ****         /* The idle task exists in addition to the application tasks. */
3563:FreeRTOS/tasks.c ****         const UBaseType_t uxNonApplicationTasks = 1;
3564:FreeRTOS/tasks.c ****         eSleepModeStatus eReturn = eStandardSleep;
3565:FreeRTOS/tasks.c **** 
3566:FreeRTOS/tasks.c ****         /* This function must be called from a critical section. */
3567:FreeRTOS/tasks.c **** 
3568:FreeRTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3569:FreeRTOS/tasks.c ****         {
3570:FreeRTOS/tasks.c ****             /* A task was made ready while the scheduler was suspended. */
3571:FreeRTOS/tasks.c ****             eReturn = eAbortSleep;
3572:FreeRTOS/tasks.c ****         }
3573:FreeRTOS/tasks.c ****         else if( xYieldPending != pdFALSE )
3574:FreeRTOS/tasks.c ****         {
3575:FreeRTOS/tasks.c ****             /* A yield was pended while the scheduler was suspended. */
3576:FreeRTOS/tasks.c ****             eReturn = eAbortSleep;
3577:FreeRTOS/tasks.c ****         }
3578:FreeRTOS/tasks.c ****         else if( xPendedTicks != 0 )
3579:FreeRTOS/tasks.c ****         {
3580:FreeRTOS/tasks.c ****             /* A tick interrupt has already occurred but was held pending
3581:FreeRTOS/tasks.c ****              * because the scheduler is suspended. */
3582:FreeRTOS/tasks.c ****             eReturn = eAbortSleep;
3583:FreeRTOS/tasks.c ****         }
3584:FreeRTOS/tasks.c ****         else
3585:FreeRTOS/tasks.c ****         {
3586:FreeRTOS/tasks.c ****             /* If all the tasks are in the suspended list (which might mean they
3587:FreeRTOS/tasks.c ****              * have an infinite block time rather than actually being suspended)
3588:FreeRTOS/tasks.c ****              * then it is safe to turn all clocks off and just wait for external
3589:FreeRTOS/tasks.c ****              * interrupts. */
3590:FreeRTOS/tasks.c ****             if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonA
3591:FreeRTOS/tasks.c ****             {
3592:FreeRTOS/tasks.c ****                 eReturn = eNoTasksWaitingTimeout;
3593:FreeRTOS/tasks.c ****             }
3594:FreeRTOS/tasks.c ****             else
3595:FreeRTOS/tasks.c ****             {
3596:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 75


3597:FreeRTOS/tasks.c ****             }
3598:FreeRTOS/tasks.c ****         }
3599:FreeRTOS/tasks.c **** 
3600:FreeRTOS/tasks.c ****         return eReturn;
3601:FreeRTOS/tasks.c ****     }
3602:FreeRTOS/tasks.c **** 
3603:FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3604:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3605:FreeRTOS/tasks.c **** 
3606:FreeRTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3607:FreeRTOS/tasks.c **** 
3608:FreeRTOS/tasks.c ****     void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet,
3609:FreeRTOS/tasks.c ****                                             BaseType_t xIndex,
3610:FreeRTOS/tasks.c ****                                             void * pvValue )
3611:FreeRTOS/tasks.c ****     {
3612:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3613:FreeRTOS/tasks.c **** 
3614:FreeRTOS/tasks.c ****         if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3615:FreeRTOS/tasks.c ****         {
3616:FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToSet );
3617:FreeRTOS/tasks.c ****             configASSERT( pxTCB != NULL );
3618:FreeRTOS/tasks.c ****             pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3619:FreeRTOS/tasks.c ****         }
3620:FreeRTOS/tasks.c ****     }
3621:FreeRTOS/tasks.c **** 
3622:FreeRTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3623:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3624:FreeRTOS/tasks.c **** 
3625:FreeRTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3626:FreeRTOS/tasks.c **** 
3627:FreeRTOS/tasks.c ****     void * pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery,
3628:FreeRTOS/tasks.c ****                                                BaseType_t xIndex )
3629:FreeRTOS/tasks.c ****     {
3630:FreeRTOS/tasks.c ****         void * pvReturn = NULL;
3631:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3632:FreeRTOS/tasks.c **** 
3633:FreeRTOS/tasks.c ****         if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3634:FreeRTOS/tasks.c ****         {
3635:FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3636:FreeRTOS/tasks.c ****             pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3637:FreeRTOS/tasks.c ****         }
3638:FreeRTOS/tasks.c ****         else
3639:FreeRTOS/tasks.c ****         {
3640:FreeRTOS/tasks.c ****             pvReturn = NULL;
3641:FreeRTOS/tasks.c ****         }
3642:FreeRTOS/tasks.c **** 
3643:FreeRTOS/tasks.c ****         return pvReturn;
3644:FreeRTOS/tasks.c ****     }
3645:FreeRTOS/tasks.c **** 
3646:FreeRTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3647:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3648:FreeRTOS/tasks.c **** 
3649:FreeRTOS/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3650:FreeRTOS/tasks.c **** 
3651:FreeRTOS/tasks.c ****     void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify,
3652:FreeRTOS/tasks.c ****                                   const MemoryRegion_t * const xRegions )
3653:FreeRTOS/tasks.c ****     {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 76


3654:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3655:FreeRTOS/tasks.c **** 
3656:FreeRTOS/tasks.c ****         /* If null is passed in here then we are modifying the MPU settings of
3657:FreeRTOS/tasks.c ****          * the calling task. */
3658:FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTaskToModify );
3659:FreeRTOS/tasks.c **** 
3660:FreeRTOS/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3661:FreeRTOS/tasks.c ****     }
3662:FreeRTOS/tasks.c **** 
3663:FreeRTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3664:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3665:FreeRTOS/tasks.c **** 
3666:FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void )
3667:FreeRTOS/tasks.c **** {
3668:FreeRTOS/tasks.c ****     UBaseType_t uxPriority;
3669:FreeRTOS/tasks.c **** 
3670:FreeRTOS/tasks.c ****     for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPrio
3671:FreeRTOS/tasks.c ****     {
3672:FreeRTOS/tasks.c ****         vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3673:FreeRTOS/tasks.c ****     }
3674:FreeRTOS/tasks.c **** 
3675:FreeRTOS/tasks.c ****     vListInitialise( &xDelayedTaskList1 );
3676:FreeRTOS/tasks.c ****     vListInitialise( &xDelayedTaskList2 );
3677:FreeRTOS/tasks.c ****     vListInitialise( &xPendingReadyList );
3678:FreeRTOS/tasks.c **** 
3679:FreeRTOS/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
3680:FreeRTOS/tasks.c ****         {
3681:FreeRTOS/tasks.c ****             vListInitialise( &xTasksWaitingTermination );
3682:FreeRTOS/tasks.c ****         }
3683:FreeRTOS/tasks.c ****     #endif /* INCLUDE_vTaskDelete */
3684:FreeRTOS/tasks.c **** 
3685:FreeRTOS/tasks.c ****     #if ( INCLUDE_vTaskSuspend == 1 )
3686:FreeRTOS/tasks.c ****         {
3687:FreeRTOS/tasks.c ****             vListInitialise( &xSuspendedTaskList );
3688:FreeRTOS/tasks.c ****         }
3689:FreeRTOS/tasks.c ****     #endif /* INCLUDE_vTaskSuspend */
3690:FreeRTOS/tasks.c **** 
3691:FreeRTOS/tasks.c ****     /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3692:FreeRTOS/tasks.c ****      * using list2. */
3693:FreeRTOS/tasks.c ****     pxDelayedTaskList = &xDelayedTaskList1;
3694:FreeRTOS/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
3695:FreeRTOS/tasks.c **** }
3696:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3697:FreeRTOS/tasks.c **** 
3698:FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3699:FreeRTOS/tasks.c **** {
3700:FreeRTOS/tasks.c ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3701:FreeRTOS/tasks.c **** 
3702:FreeRTOS/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
3703:FreeRTOS/tasks.c ****         {
3704:FreeRTOS/tasks.c ****             TCB_t * pxTCB;
3705:FreeRTOS/tasks.c **** 
3706:FreeRTOS/tasks.c ****             /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3707:FreeRTOS/tasks.c ****              * being called too often in the idle task. */
3708:FreeRTOS/tasks.c ****             while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3709:FreeRTOS/tasks.c ****             {
3710:FreeRTOS/tasks.c ****                 taskENTER_CRITICAL();
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 77


3711:FreeRTOS/tasks.c ****                 {
3712:FreeRTOS/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e
3713:FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3714:FreeRTOS/tasks.c ****                     --uxCurrentNumberOfTasks;
3715:FreeRTOS/tasks.c ****                     --uxDeletedTasksWaitingCleanUp;
3716:FreeRTOS/tasks.c ****                 }
3717:FreeRTOS/tasks.c ****                 taskEXIT_CRITICAL();
3718:FreeRTOS/tasks.c **** 
3719:FreeRTOS/tasks.c ****                 prvDeleteTCB( pxTCB );
3720:FreeRTOS/tasks.c ****             }
3721:FreeRTOS/tasks.c ****         }
3722:FreeRTOS/tasks.c ****     #endif /* INCLUDE_vTaskDelete */
3723:FreeRTOS/tasks.c **** }
3724:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3725:FreeRTOS/tasks.c **** 
3726:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3727:FreeRTOS/tasks.c **** 
3728:FreeRTOS/tasks.c ****     void vTaskGetInfo( TaskHandle_t xTask,
3729:FreeRTOS/tasks.c ****                        TaskStatus_t * pxTaskStatus,
3730:FreeRTOS/tasks.c ****                        BaseType_t xGetFreeStackSpace,
3731:FreeRTOS/tasks.c ****                        eTaskState eState )
3732:FreeRTOS/tasks.c ****     {
3733:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3734:FreeRTOS/tasks.c **** 
3735:FreeRTOS/tasks.c ****         /* xTask is NULL then get the state of the calling task. */
3736:FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3737:FreeRTOS/tasks.c **** 
3738:FreeRTOS/tasks.c ****         pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3739:FreeRTOS/tasks.c ****         pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
3740:FreeRTOS/tasks.c ****         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3741:FreeRTOS/tasks.c ****         pxTaskStatus->pxStackBase = pxTCB->pxStack;
3742:FreeRTOS/tasks.c ****         pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3743:FreeRTOS/tasks.c **** 
3744:FreeRTOS/tasks.c ****         #if ( configUSE_MUTEXES == 1 )
3745:FreeRTOS/tasks.c ****             {
3746:FreeRTOS/tasks.c ****                 pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3747:FreeRTOS/tasks.c ****             }
3748:FreeRTOS/tasks.c ****         #else
3749:FreeRTOS/tasks.c ****             {
3750:FreeRTOS/tasks.c ****                 pxTaskStatus->uxBasePriority = 0;
3751:FreeRTOS/tasks.c ****             }
3752:FreeRTOS/tasks.c ****         #endif
3753:FreeRTOS/tasks.c **** 
3754:FreeRTOS/tasks.c ****         #if ( configGENERATE_RUN_TIME_STATS == 1 )
3755:FreeRTOS/tasks.c ****             {
3756:FreeRTOS/tasks.c ****                 pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3757:FreeRTOS/tasks.c ****             }
3758:FreeRTOS/tasks.c ****         #else
3759:FreeRTOS/tasks.c ****             {
3760:FreeRTOS/tasks.c ****                 pxTaskStatus->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
3761:FreeRTOS/tasks.c ****             }
3762:FreeRTOS/tasks.c ****         #endif
3763:FreeRTOS/tasks.c **** 
3764:FreeRTOS/tasks.c ****         /* Obtaining the task state is a little fiddly, so is only done if the
3765:FreeRTOS/tasks.c ****          * value of eState passed into this function is eInvalid - otherwise the
3766:FreeRTOS/tasks.c ****          * state is just set to whatever is passed in. */
3767:FreeRTOS/tasks.c ****         if( eState != eInvalid )
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 78


3768:FreeRTOS/tasks.c ****         {
3769:FreeRTOS/tasks.c ****             if( pxTCB == pxCurrentTCB )
3770:FreeRTOS/tasks.c ****             {
3771:FreeRTOS/tasks.c ****                 pxTaskStatus->eCurrentState = eRunning;
3772:FreeRTOS/tasks.c ****             }
3773:FreeRTOS/tasks.c ****             else
3774:FreeRTOS/tasks.c ****             {
3775:FreeRTOS/tasks.c ****                 pxTaskStatus->eCurrentState = eState;
3776:FreeRTOS/tasks.c **** 
3777:FreeRTOS/tasks.c ****                 #if ( INCLUDE_vTaskSuspend == 1 )
3778:FreeRTOS/tasks.c ****                     {
3779:FreeRTOS/tasks.c ****                         /* If the task is in the suspended list then there is a
3780:FreeRTOS/tasks.c ****                          *  chance it is actually just blocked indefinitely - so really
3781:FreeRTOS/tasks.c ****                          *  it should be reported as being in the Blocked state. */
3782:FreeRTOS/tasks.c ****                         if( eState == eSuspended )
3783:FreeRTOS/tasks.c ****                         {
3784:FreeRTOS/tasks.c ****                             vTaskSuspendAll();
3785:FreeRTOS/tasks.c ****                             {
3786:FreeRTOS/tasks.c ****                                 if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3787:FreeRTOS/tasks.c ****                                 {
3788:FreeRTOS/tasks.c ****                                     pxTaskStatus->eCurrentState = eBlocked;
3789:FreeRTOS/tasks.c ****                                 }
3790:FreeRTOS/tasks.c ****                             }
3791:FreeRTOS/tasks.c ****                             ( void ) xTaskResumeAll();
3792:FreeRTOS/tasks.c ****                         }
3793:FreeRTOS/tasks.c ****                     }
3794:FreeRTOS/tasks.c ****                 #endif /* INCLUDE_vTaskSuspend */
3795:FreeRTOS/tasks.c ****             }
3796:FreeRTOS/tasks.c ****         }
3797:FreeRTOS/tasks.c ****         else
3798:FreeRTOS/tasks.c ****         {
3799:FreeRTOS/tasks.c ****             pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3800:FreeRTOS/tasks.c ****         }
3801:FreeRTOS/tasks.c **** 
3802:FreeRTOS/tasks.c ****         /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3803:FreeRTOS/tasks.c ****          * parameter is provided to allow it to be skipped. */
3804:FreeRTOS/tasks.c ****         if( xGetFreeStackSpace != pdFALSE )
3805:FreeRTOS/tasks.c ****         {
3806:FreeRTOS/tasks.c ****             #if ( portSTACK_GROWTH > 0 )
3807:FreeRTOS/tasks.c ****                 {
3808:FreeRTOS/tasks.c ****                     pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) 
3809:FreeRTOS/tasks.c ****                 }
3810:FreeRTOS/tasks.c ****             #else
3811:FreeRTOS/tasks.c ****                 {
3812:FreeRTOS/tasks.c ****                     pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) 
3813:FreeRTOS/tasks.c ****                 }
3814:FreeRTOS/tasks.c ****             #endif
3815:FreeRTOS/tasks.c ****         }
3816:FreeRTOS/tasks.c ****         else
3817:FreeRTOS/tasks.c ****         {
3818:FreeRTOS/tasks.c ****             pxTaskStatus->usStackHighWaterMark = 0;
3819:FreeRTOS/tasks.c ****         }
3820:FreeRTOS/tasks.c ****     }
3821:FreeRTOS/tasks.c **** 
3822:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3823:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3824:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 79


3825:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3826:FreeRTOS/tasks.c **** 
3827:FreeRTOS/tasks.c ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
3828:FreeRTOS/tasks.c ****                                                      List_t * pxList,
3829:FreeRTOS/tasks.c ****                                                      eTaskState eState )
3830:FreeRTOS/tasks.c ****     {
3831:FreeRTOS/tasks.c ****         configLIST_VOLATILE TCB_t * pxNextTCB, * pxFirstTCB;
3832:FreeRTOS/tasks.c ****         UBaseType_t uxTask = 0;
3833:FreeRTOS/tasks.c **** 
3834:FreeRTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3835:FreeRTOS/tasks.c ****         {
3836:FreeRTOS/tasks.c ****             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this
3837:FreeRTOS/tasks.c **** 
3838:FreeRTOS/tasks.c ****             /* Populate an TaskStatus_t structure within the
3839:FreeRTOS/tasks.c ****              * pxTaskStatusArray array for each task that is referenced from
3840:FreeRTOS/tasks.c ****              * pxList.  See the definition of TaskStatus_t in task.h for the
3841:FreeRTOS/tasks.c ****              * meaning of each TaskStatus_t structure member. */
3842:FreeRTOS/tasks.c ****             do
3843:FreeRTOS/tasks.c ****             {
3844:FreeRTOS/tasks.c ****                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as t
3845:FreeRTOS/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
3846:FreeRTOS/tasks.c ****                 uxTask++;
3847:FreeRTOS/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
3848:FreeRTOS/tasks.c ****         }
3849:FreeRTOS/tasks.c ****         else
3850:FreeRTOS/tasks.c ****         {
3851:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
3852:FreeRTOS/tasks.c ****         }
3853:FreeRTOS/tasks.c **** 
3854:FreeRTOS/tasks.c ****         return uxTask;
3855:FreeRTOS/tasks.c ****     }
3856:FreeRTOS/tasks.c **** 
3857:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3858:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3859:FreeRTOS/tasks.c **** 
3860:FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3861:FreeRTOS/tasks.c **** 
3862:FreeRTOS/tasks.c ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3863:FreeRTOS/tasks.c ****     {
 392              		.loc 1 3863 5 is_stmt 1 view -0
 393              		.cfi_startproc
 394              		@ args = 0, pretend = 0, frame = 0
 395              		@ frame_needed = 0, uses_anonymous_args = 0
 396              		@ link register save eliminated.
3864:FreeRTOS/tasks.c ****         uint32_t ulCount = 0U;
 397              		.loc 1 3864 9 view .LVU113
3865:FreeRTOS/tasks.c **** 
3866:FreeRTOS/tasks.c ****         while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 398              		.loc 1 3866 9 view .LVU114
3864:FreeRTOS/tasks.c ****         uint32_t ulCount = 0U;
 399              		.loc 1 3864 18 is_stmt 0 view .LVU115
 400 0000 0023     		movs	r3, #0
 401              	.LVL32:
 402              	.L38:
 403              		.loc 1 3866 14 is_stmt 1 view .LVU116
 404              		.loc 1 3866 16 is_stmt 0 view .LVU117
 405 0002 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 80


 406              		.loc 1 3866 14 view .LVU118
 407 0004 A52A     		cmp	r2, #165
 408 0006 02D1     		bne	.L40
3867:FreeRTOS/tasks.c ****         {
3868:FreeRTOS/tasks.c ****             pucStackByte -= portSTACK_GROWTH;
 409              		.loc 1 3868 13 is_stmt 1 view .LVU119
 410              		.loc 1 3868 26 is_stmt 0 view .LVU120
 411 0008 0130     		adds	r0, r0, #1
 412              	.LVL33:
3869:FreeRTOS/tasks.c ****             ulCount++;
 413              		.loc 1 3869 13 is_stmt 1 view .LVU121
 414              		.loc 1 3869 20 is_stmt 0 view .LVU122
 415 000a 0133     		adds	r3, r3, #1
 416              	.LVL34:
 417              		.loc 1 3869 20 view .LVU123
 418 000c F9E7     		b	.L38
 419              	.L40:
3870:FreeRTOS/tasks.c ****         }
3871:FreeRTOS/tasks.c **** 
3872:FreeRTOS/tasks.c ****         ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on sma
 420              		.loc 1 3872 9 is_stmt 1 view .LVU124
 421              	.LVL35:
3873:FreeRTOS/tasks.c **** 
3874:FreeRTOS/tasks.c ****         return ( configSTACK_DEPTH_TYPE ) ulCount;
 422              		.loc 1 3874 9 view .LVU125
3875:FreeRTOS/tasks.c ****     }
 423              		.loc 1 3875 5 is_stmt 0 view .LVU126
 424 000e C3F38F00 		ubfx	r0, r3, #2, #16
 425              	.LVL36:
 426              		.loc 1 3875 5 view .LVU127
 427 0012 7047     		bx	lr
 428              		.cfi_endproc
 429              	.LFE54:
 431              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 432              		.align	1
 433              		.syntax unified
 434              		.thumb
 435              		.thumb_func
 436              		.fpu fpv4-sp-d16
 438              	prvResetNextTaskUnblockTime:
 439              	.LFB58:
3876:FreeRTOS/tasks.c **** 
3877:FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3878:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3879:FreeRTOS/tasks.c **** 
3880:FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3881:FreeRTOS/tasks.c **** 
3882:FreeRTOS/tasks.c **** /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3883:FreeRTOS/tasks.c ****  * same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3884:FreeRTOS/tasks.c ****  * user to determine the return type.  It gets around the problem of the value
3885:FreeRTOS/tasks.c ****  * overflowing on 8-bit types without breaking backward compatibility for
3886:FreeRTOS/tasks.c ****  * applications that expect an 8-bit return type. */
3887:FreeRTOS/tasks.c ****     configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3888:FreeRTOS/tasks.c ****     {
3889:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3890:FreeRTOS/tasks.c ****         uint8_t * pucEndOfStack;
3891:FreeRTOS/tasks.c ****         configSTACK_DEPTH_TYPE uxReturn;
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 81


3892:FreeRTOS/tasks.c **** 
3893:FreeRTOS/tasks.c ****         /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3894:FreeRTOS/tasks.c ****          * the same except for their return type.  Using configSTACK_DEPTH_TYPE
3895:FreeRTOS/tasks.c ****          * allows the user to determine the return type.  It gets around the
3896:FreeRTOS/tasks.c ****          * problem of the value overflowing on 8-bit types without breaking
3897:FreeRTOS/tasks.c ****          * backward compatibility for applications that expect an 8-bit return
3898:FreeRTOS/tasks.c ****          * type. */
3899:FreeRTOS/tasks.c **** 
3900:FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3901:FreeRTOS/tasks.c **** 
3902:FreeRTOS/tasks.c ****         #if portSTACK_GROWTH < 0
3903:FreeRTOS/tasks.c ****             {
3904:FreeRTOS/tasks.c ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3905:FreeRTOS/tasks.c ****             }
3906:FreeRTOS/tasks.c ****         #else
3907:FreeRTOS/tasks.c ****             {
3908:FreeRTOS/tasks.c ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3909:FreeRTOS/tasks.c ****             }
3910:FreeRTOS/tasks.c ****         #endif
3911:FreeRTOS/tasks.c **** 
3912:FreeRTOS/tasks.c ****         uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3913:FreeRTOS/tasks.c **** 
3914:FreeRTOS/tasks.c ****         return uxReturn;
3915:FreeRTOS/tasks.c ****     }
3916:FreeRTOS/tasks.c **** 
3917:FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3918:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3919:FreeRTOS/tasks.c **** 
3920:FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3921:FreeRTOS/tasks.c **** 
3922:FreeRTOS/tasks.c ****     UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3923:FreeRTOS/tasks.c ****     {
3924:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3925:FreeRTOS/tasks.c ****         uint8_t * pucEndOfStack;
3926:FreeRTOS/tasks.c ****         UBaseType_t uxReturn;
3927:FreeRTOS/tasks.c **** 
3928:FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3929:FreeRTOS/tasks.c **** 
3930:FreeRTOS/tasks.c ****         #if portSTACK_GROWTH < 0
3931:FreeRTOS/tasks.c ****             {
3932:FreeRTOS/tasks.c ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3933:FreeRTOS/tasks.c ****             }
3934:FreeRTOS/tasks.c ****         #else
3935:FreeRTOS/tasks.c ****             {
3936:FreeRTOS/tasks.c ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3937:FreeRTOS/tasks.c ****             }
3938:FreeRTOS/tasks.c ****         #endif
3939:FreeRTOS/tasks.c **** 
3940:FreeRTOS/tasks.c ****         uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3941:FreeRTOS/tasks.c **** 
3942:FreeRTOS/tasks.c ****         return uxReturn;
3943:FreeRTOS/tasks.c ****     }
3944:FreeRTOS/tasks.c **** 
3945:FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3946:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3947:FreeRTOS/tasks.c **** 
3948:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 82


3949:FreeRTOS/tasks.c **** 
3950:FreeRTOS/tasks.c ****     static void prvDeleteTCB( TCB_t * pxTCB )
3951:FreeRTOS/tasks.c ****     {
3952:FreeRTOS/tasks.c ****         /* This call is required specifically for the TriCore port.  It must be
3953:FreeRTOS/tasks.c ****          * above the vPortFree() calls.  The call is also used by ports/demos that
3954:FreeRTOS/tasks.c ****          * want to allocate and clean RAM statically. */
3955:FreeRTOS/tasks.c ****         portCLEAN_UP_TCB( pxTCB );
3956:FreeRTOS/tasks.c **** 
3957:FreeRTOS/tasks.c ****         /* Free up the memory allocated by the scheduler for the task.  It is up
3958:FreeRTOS/tasks.c ****          * to the task to free any memory allocated at the application level.
3959:FreeRTOS/tasks.c ****          * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3960:FreeRTOS/tasks.c ****          * for additional information. */
3961:FreeRTOS/tasks.c ****         #if ( configUSE_NEWLIB_REENTRANT == 1 )
3962:FreeRTOS/tasks.c ****             {
3963:FreeRTOS/tasks.c ****                 _reclaim_reent( &( pxTCB->xNewLib_reent ) );
3964:FreeRTOS/tasks.c ****             }
3965:FreeRTOS/tasks.c ****         #endif /* configUSE_NEWLIB_REENTRANT */
3966:FreeRTOS/tasks.c **** 
3967:FreeRTOS/tasks.c ****         #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 )
3968:FreeRTOS/tasks.c ****             {
3969:FreeRTOS/tasks.c ****                 /* The task can only have been allocated dynamically - free both
3970:FreeRTOS/tasks.c ****                  * the stack and TCB. */
3971:FreeRTOS/tasks.c ****                 vPortFreeStack( pxTCB->pxStack );
3972:FreeRTOS/tasks.c ****                 vPortFree( pxTCB );
3973:FreeRTOS/tasks.c ****             }
3974:FreeRTOS/tasks.c ****         #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been
3975:FreeRTOS/tasks.c ****             {
3976:FreeRTOS/tasks.c ****                 /* The task could have been allocated statically or dynamically, so
3977:FreeRTOS/tasks.c ****                  * check what was statically allocated before trying to free the
3978:FreeRTOS/tasks.c ****                  * memory. */
3979:FreeRTOS/tasks.c ****                 if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3980:FreeRTOS/tasks.c ****                 {
3981:FreeRTOS/tasks.c ****                     /* Both the stack and TCB were allocated dynamically, so both
3982:FreeRTOS/tasks.c ****                      * must be freed. */
3983:FreeRTOS/tasks.c ****                     vPortFreeStack( pxTCB->pxStack );
3984:FreeRTOS/tasks.c ****                     vPortFree( pxTCB );
3985:FreeRTOS/tasks.c ****                 }
3986:FreeRTOS/tasks.c ****                 else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3987:FreeRTOS/tasks.c ****                 {
3988:FreeRTOS/tasks.c ****                     /* Only the stack was statically allocated, so the TCB is the
3989:FreeRTOS/tasks.c ****                      * only memory that must be freed. */
3990:FreeRTOS/tasks.c ****                     vPortFree( pxTCB );
3991:FreeRTOS/tasks.c ****                 }
3992:FreeRTOS/tasks.c ****                 else
3993:FreeRTOS/tasks.c ****                 {
3994:FreeRTOS/tasks.c ****                     /* Neither the stack nor the TCB were allocated dynamically, so
3995:FreeRTOS/tasks.c ****                      * nothing needs to be freed. */
3996:FreeRTOS/tasks.c ****                     configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND
3997:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3998:FreeRTOS/tasks.c ****                 }
3999:FreeRTOS/tasks.c ****             }
4000:FreeRTOS/tasks.c ****         #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
4001:FreeRTOS/tasks.c ****     }
4002:FreeRTOS/tasks.c **** 
4003:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
4004:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4005:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 83


4006:FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void )
4007:FreeRTOS/tasks.c **** {
 440              		.loc 1 4007 1 is_stmt 1 view -0
 441              		.cfi_startproc
 442              		@ args = 0, pretend = 0, frame = 0
 443              		@ frame_needed = 0, uses_anonymous_args = 0
 444              		@ link register save eliminated.
4008:FreeRTOS/tasks.c ****     if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 445              		.loc 1 4008 5 view .LVU129
 446              		.loc 1 4008 9 is_stmt 0 view .LVU130
 447 0000 074B     		ldr	r3, .L44
 448 0002 1B68     		ldr	r3, [r3]
 449 0004 1B68     		ldr	r3, [r3]
 450              		.loc 1 4008 7 view .LVU131
 451 0006 23B9     		cbnz	r3, .L42
4009:FreeRTOS/tasks.c ****     {
4010:FreeRTOS/tasks.c ****         /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
4011:FreeRTOS/tasks.c ****          * the maximum possible value so it is  extremely unlikely that the
4012:FreeRTOS/tasks.c ****          * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
4013:FreeRTOS/tasks.c ****          * there is an item in the delayed list. */
4014:FreeRTOS/tasks.c ****         xNextTaskUnblockTime = portMAX_DELAY;
 452              		.loc 1 4014 9 is_stmt 1 view .LVU132
 453              		.loc 1 4014 30 is_stmt 0 view .LVU133
 454 0008 064B     		ldr	r3, .L44+4
 455 000a 4FF0FF32 		mov	r2, #-1
 456 000e 1A60     		str	r2, [r3]
 457 0010 7047     		bx	lr
 458              	.L42:
4015:FreeRTOS/tasks.c ****     }
4016:FreeRTOS/tasks.c ****     else
4017:FreeRTOS/tasks.c ****     {
4018:FreeRTOS/tasks.c ****         /* The new current delayed list is not empty, get the value of
4019:FreeRTOS/tasks.c ****          * the item at the head of the delayed list.  This is the time at
4020:FreeRTOS/tasks.c ****          * which the task at the head of the delayed list should be removed
4021:FreeRTOS/tasks.c ****          * from the Blocked state. */
4022:FreeRTOS/tasks.c ****         xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 459              		.loc 1 4022 9 is_stmt 1 view .LVU134
 460              		.loc 1 4022 32 is_stmt 0 view .LVU135
 461 0012 034B     		ldr	r3, .L44
 462 0014 1B68     		ldr	r3, [r3]
 463 0016 DB68     		ldr	r3, [r3, #12]
 464 0018 1A68     		ldr	r2, [r3]
 465              		.loc 1 4022 30 view .LVU136
 466 001a 024B     		ldr	r3, .L44+4
 467 001c 1A60     		str	r2, [r3]
4023:FreeRTOS/tasks.c ****     }
4024:FreeRTOS/tasks.c **** }
 468              		.loc 1 4024 1 view .LVU137
 469 001e 7047     		bx	lr
 470              	.L45:
 471              		.align	2
 472              	.L44:
 473 0020 00000000 		.word	.LANCHOR7
 474 0024 00000000 		.word	.LANCHOR5
 475              		.cfi_endproc
 476              	.LFE58:
 478              		.section	.text.prvInitialiseNewTask,"ax",%progbits
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 84


 479              		.align	1
 480              		.syntax unified
 481              		.thumb
 482              		.thumb_func
 483              		.fpu fpv4-sp-d16
 485              	prvInitialiseNewTask:
 486              	.LVL37:
 487              	.LFB7:
 827:FreeRTOS/tasks.c ****     StackType_t * pxTopOfStack;
 488              		.loc 1 827 1 is_stmt 1 view -0
 489              		.cfi_startproc
 490              		@ args = 16, pretend = 0, frame = 0
 491              		@ frame_needed = 0, uses_anonymous_args = 0
 827:FreeRTOS/tasks.c ****     StackType_t * pxTopOfStack;
 492              		.loc 1 827 1 is_stmt 0 view .LVU139
 493 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 494              	.LCFI4:
 495              		.cfi_def_cfa_offset 32
 496              		.cfi_offset 4, -32
 497              		.cfi_offset 5, -28
 498              		.cfi_offset 6, -24
 499              		.cfi_offset 7, -20
 500              		.cfi_offset 8, -16
 501              		.cfi_offset 9, -12
 502              		.cfi_offset 10, -8
 503              		.cfi_offset 14, -4
 504 0004 0746     		mov	r7, r0
 505 0006 8A46     		mov	r10, r1
 506 0008 1646     		mov	r6, r2
 507 000a 9846     		mov	r8, r3
 508 000c 089D     		ldr	r5, [sp, #32]
 509 000e DDF82490 		ldr	r9, [sp, #36]
 510 0012 0A9C     		ldr	r4, [sp, #40]
 828:FreeRTOS/tasks.c ****     UBaseType_t x;
 511              		.loc 1 828 5 is_stmt 1 view .LVU140
 829:FreeRTOS/tasks.c **** 
 512              		.loc 1 829 5 view .LVU141
 850:FreeRTOS/tasks.c ****         }
 513              		.loc 1 850 13 view .LVU142
 850:FreeRTOS/tasks.c ****         }
 514              		.loc 1 850 22 is_stmt 0 view .LVU143
 515 0014 9200     		lsls	r2, r2, #2
 516              	.LVL38:
 850:FreeRTOS/tasks.c ****         }
 517              		.loc 1 850 22 view .LVU144
 518 0016 A521     		movs	r1, #165
 519              	.LVL39:
 850:FreeRTOS/tasks.c ****         }
 520              		.loc 1 850 22 view .LVU145
 521 0018 206B     		ldr	r0, [r4, #48]
 522              	.LVL40:
 850:FreeRTOS/tasks.c ****         }
 523              		.loc 1 850 22 view .LVU146
 524 001a FFF7FEFF 		bl	memset
 525              	.LVL41:
 860:FreeRTOS/tasks.c ****             pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( 
 526              		.loc 1 860 13 is_stmt 1 view .LVU147
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 85


 860:FreeRTOS/tasks.c ****             pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( 
 527              		.loc 1 860 39 is_stmt 0 view .LVU148
 528 001e 226B     		ldr	r2, [r4, #48]
 860:FreeRTOS/tasks.c ****             pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( 
 529              		.loc 1 860 48 view .LVU149
 530 0020 06F18043 		add	r3, r6, #1073741824
 531 0024 013B     		subs	r3, r3, #1
 860:FreeRTOS/tasks.c ****             pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( 
 532              		.loc 1 860 26 view .LVU150
 533 0026 02EB8303 		add	r3, r2, r3, lsl #2
 534              	.LVL42:
 861:FreeRTOS/tasks.c **** 
 535              		.loc 1 861 13 is_stmt 1 view .LVU151
 861:FreeRTOS/tasks.c **** 
 536              		.loc 1 861 91 is_stmt 0 view .LVU152
 537 002a 23F00706 		bic	r6, r3, #7
 538              	.LVL43:
 864:FreeRTOS/tasks.c **** 
 539              		.loc 1 864 13 is_stmt 1 view .LVU153
 864:FreeRTOS/tasks.c **** 
 540              		.loc 1 864 134 view .LVU154
 888:FreeRTOS/tasks.c ****     {
 541              		.loc 1 888 5 view .LVU155
 888:FreeRTOS/tasks.c ****     {
 542              		.loc 1 888 7 is_stmt 0 view .LVU156
 543 002e BAF1000F 		cmp	r10, #0
 544 0032 1AD0     		beq	.L58
 890:FreeRTOS/tasks.c ****         {
 545              		.loc 1 890 16 view .LVU157
 546 0034 0023     		movs	r3, #0
 547              	.L47:
 548              	.LVL44:
 890:FreeRTOS/tasks.c ****         {
 549              		.loc 1 890 37 is_stmt 1 discriminator 1 view .LVU158
 890:FreeRTOS/tasks.c ****         {
 550              		.loc 1 890 9 is_stmt 0 discriminator 1 view .LVU159
 551 0036 092B     		cmp	r3, #9
 552 0038 09D8     		bhi	.L49
 892:FreeRTOS/tasks.c **** 
 553              		.loc 1 892 13 is_stmt 1 view .LVU160
 892:FreeRTOS/tasks.c **** 
 554              		.loc 1 892 47 is_stmt 0 view .LVU161
 555 003a 1AF80310 		ldrb	r1, [r10, r3]	@ zero_extendqisi2
 892:FreeRTOS/tasks.c **** 
 556              		.loc 1 892 39 view .LVU162
 557 003e E218     		adds	r2, r4, r3
 558 0040 82F83410 		strb	r1, [r2, #52]
 897:FreeRTOS/tasks.c ****             {
 559              		.loc 1 897 13 is_stmt 1 view .LVU163
 897:FreeRTOS/tasks.c ****             {
 560              		.loc 1 897 23 is_stmt 0 view .LVU164
 561 0044 1AF80320 		ldrb	r2, [r10, r3]	@ zero_extendqisi2
 897:FreeRTOS/tasks.c ****             {
 562              		.loc 1 897 15 view .LVU165
 563 0048 0AB1     		cbz	r2, .L49
 903:FreeRTOS/tasks.c ****             }
 564              		.loc 1 903 41 is_stmt 1 discriminator 2 view .LVU166
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 86


 890:FreeRTOS/tasks.c ****         {
 565              		.loc 1 890 82 discriminator 2 view .LVU167
 890:FreeRTOS/tasks.c ****         {
 566              		.loc 1 890 83 is_stmt 0 discriminator 2 view .LVU168
 567 004a 0133     		adds	r3, r3, #1
 568              	.LVL45:
 890:FreeRTOS/tasks.c ****         {
 569              		.loc 1 890 83 discriminator 2 view .LVU169
 570 004c F3E7     		b	.L47
 571              	.L49:
 909:FreeRTOS/tasks.c ****     }
 572              		.loc 1 909 9 is_stmt 1 view .LVU170
 909:FreeRTOS/tasks.c ****     }
 573              		.loc 1 909 61 is_stmt 0 view .LVU171
 574 004e 0023     		movs	r3, #0
 575              	.LVL46:
 909:FreeRTOS/tasks.c ****     }
 576              		.loc 1 909 61 view .LVU172
 577 0050 84F83D30 		strb	r3, [r4, #61]
 578              	.L51:
 919:FreeRTOS/tasks.c **** 
 579              		.loc 1 919 5 is_stmt 1 view .LVU173
 580 0054 042D     		cmp	r5, #4
 581 0056 0CD9     		bls	.L52
 919:FreeRTOS/tasks.c **** 
 582              		.loc 1 919 5 view .LVU174
 583              	.LBB181:
 584              	.LBI181:
 194:FreeRTOS/portable/portmacro.h ****     {
 585              		.loc 2 194 34 view .LVU175
 586              	.LBB182:
 196:FreeRTOS/portable/portmacro.h **** 
 587              		.loc 2 196 9 view .LVU176
 588              		.loc 2 198 9 view .LVU177
 589              		.syntax unified
 590              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 591 0058 4FF05003 			mov r3, #80												
 592 005c 83F31188 		msr basepri, r3											
 593 0060 BFF36F8F 		isb														
 594 0064 BFF34F8F 		dsb														
 595              	
 596              	@ 0 "" 2
 597              	.LVL47:
 598              		.thumb
 599              		.syntax unified
 600              	.L53:
 601              		.loc 2 198 9 is_stmt 0 view .LVU178
 602              	.LBE182:
 603              	.LBE181:
 919:FreeRTOS/tasks.c **** 
 604              		.loc 1 919 5 is_stmt 1 discriminator 2 view .LVU179
 919:FreeRTOS/tasks.c **** 
 605              		.loc 1 919 5 discriminator 2 view .LVU180
 919:FreeRTOS/tasks.c **** 
 606              		.loc 1 919 5 discriminator 2 view .LVU181
 607 0068 FEE7     		b	.L53
 608              	.L58:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 87


 915:FreeRTOS/tasks.c ****     }
 609              		.loc 1 915 9 view .LVU182
 915:FreeRTOS/tasks.c ****     }
 610              		.loc 1 915 35 is_stmt 0 view .LVU183
 611 006a 0023     		movs	r3, #0
 612 006c 84F83430 		strb	r3, [r4, #52]
 613 0070 F0E7     		b	.L51
 614              	.L52:
 919:FreeRTOS/tasks.c **** 
 615              		.loc 1 919 54 is_stmt 1 view .LVU184
 921:FreeRTOS/tasks.c ****     {
 616              		.loc 1 921 5 view .LVU185
 617              	.LVL48:
 927:FreeRTOS/tasks.c ****     }
 618              		.loc 1 927 33 view .LVU186
 930:FreeRTOS/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 619              		.loc 1 930 5 view .LVU187
 930:FreeRTOS/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 620              		.loc 1 930 26 is_stmt 0 view .LVU188
 621 0072 E562     		str	r5, [r4, #44]
 933:FreeRTOS/tasks.c ****             pxNewTCB->uxMutexesHeld = 0;
 622              		.loc 1 933 13 is_stmt 1 view .LVU189
 933:FreeRTOS/tasks.c ****             pxNewTCB->uxMutexesHeld = 0;
 623              		.loc 1 933 38 is_stmt 0 view .LVU190
 624 0074 A564     		str	r5, [r4, #72]
 934:FreeRTOS/tasks.c ****         }
 625              		.loc 1 934 13 is_stmt 1 view .LVU191
 934:FreeRTOS/tasks.c ****         }
 626              		.loc 1 934 37 is_stmt 0 view .LVU192
 627 0076 4FF0000A 		mov	r10, #0
 628              	.LVL49:
 934:FreeRTOS/tasks.c ****         }
 629              		.loc 1 934 37 view .LVU193
 630 007a C4F84CA0 		str	r10, [r4, #76]
 938:FreeRTOS/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 631              		.loc 1 938 5 is_stmt 1 view .LVU194
 632 007e 201D     		adds	r0, r4, #4
 633 0080 FFF7FEFF 		bl	vListInitialiseItem
 634              	.LVL50:
 939:FreeRTOS/tasks.c **** 
 635              		.loc 1 939 5 view .LVU195
 636 0084 04F11800 		add	r0, r4, #24
 637 0088 FFF7FEFF 		bl	vListInitialiseItem
 638              	.LVL51:
 943:FreeRTOS/tasks.c **** 
 639              		.loc 1 943 5 view .LVU196
 640 008c 2461     		str	r4, [r4, #16]
 946:FreeRTOS/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 641              		.loc 1 946 5 view .LVU197
 642 008e C5F10505 		rsb	r5, r5, #5
 643              	.LVL52:
 946:FreeRTOS/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 644              		.loc 1 946 5 is_stmt 0 view .LVU198
 645 0092 A561     		str	r5, [r4, #24]
 947:FreeRTOS/tasks.c **** 
 646              		.loc 1 947 5 is_stmt 1 view .LVU199
 647 0094 6462     		str	r4, [r4, #36]
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 88


 974:FreeRTOS/tasks.c ****         }
 648              		.loc 1 974 13 view .LVU200
 986:FreeRTOS/tasks.c ****             memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyS
 649              		.loc 1 986 13 view .LVU201
 650 0096 C4F850A0 		str	r10, [r4, #80]	@ unaligned
 987:FreeRTOS/tasks.c ****         }
 651              		.loc 1 987 13 view .LVU202
 652 009a 84F854A0 		strb	r10, [r4, #84]
1002:FreeRTOS/tasks.c ****         }
 653              		.loc 1 1002 13 view .LVU203
1002:FreeRTOS/tasks.c ****         }
 654              		.loc 1 1002 38 is_stmt 0 view .LVU204
 655 009e 84F856A0 		strb	r10, [r4, #86]
1052:FreeRTOS/tasks.c ****                 }
 656              		.loc 1 1052 21 is_stmt 1 view .LVU205
1052:FreeRTOS/tasks.c ****                 }
 657              		.loc 1 1052 46 is_stmt 0 view .LVU206
 658 00a2 4246     		mov	r2, r8
 659 00a4 3946     		mov	r1, r7
 660 00a6 3046     		mov	r0, r6
 661 00a8 FFF7FEFF 		bl	pxPortInitialiseStack
 662              	.LVL53:
1052:FreeRTOS/tasks.c ****                 }
 663              		.loc 1 1052 44 view .LVU207
 664 00ac 2060     		str	r0, [r4]
1058:FreeRTOS/tasks.c ****     {
 665              		.loc 1 1058 5 is_stmt 1 view .LVU208
1058:FreeRTOS/tasks.c ****     {
 666              		.loc 1 1058 7 is_stmt 0 view .LVU209
 667 00ae B9F1000F 		cmp	r9, #0
 668 00b2 01D0     		beq	.L46
1062:FreeRTOS/tasks.c ****     }
 669              		.loc 1 1062 9 is_stmt 1 view .LVU210
1062:FreeRTOS/tasks.c ****     }
 670              		.loc 1 1062 24 is_stmt 0 view .LVU211
 671 00b4 C9F80040 		str	r4, [r9]
1066:FreeRTOS/tasks.c ****     }
 672              		.loc 1 1066 33 is_stmt 1 view .LVU212
 673              	.L46:
1068:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 674              		.loc 1 1068 1 is_stmt 0 view .LVU213
 675 00b8 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
1068:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 676              		.loc 1 1068 1 view .LVU214
 677              		.cfi_endproc
 678              	.LFE7:
 680              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 681              		.align	1
 682              		.syntax unified
 683              		.thumb
 684              		.thumb_func
 685              		.fpu fpv4-sp-d16
 687              	prvInitialiseTaskLists:
 688              	.LFB50:
3667:FreeRTOS/tasks.c ****     UBaseType_t uxPriority;
 689              		.loc 1 3667 1 is_stmt 1 view -0
 690              		.cfi_startproc
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 89


 691              		@ args = 0, pretend = 0, frame = 0
 692              		@ frame_needed = 0, uses_anonymous_args = 0
 693 0000 38B5     		push	{r3, r4, r5, lr}
 694              	.LCFI5:
 695              		.cfi_def_cfa_offset 16
 696              		.cfi_offset 3, -16
 697              		.cfi_offset 4, -12
 698              		.cfi_offset 5, -8
 699              		.cfi_offset 14, -4
3668:FreeRTOS/tasks.c **** 
 700              		.loc 1 3668 5 view .LVU216
3670:FreeRTOS/tasks.c ****     {
 701              		.loc 1 3670 5 view .LVU217
 702              	.LVL54:
3670:FreeRTOS/tasks.c ****     {
 703              		.loc 1 3670 21 is_stmt 0 view .LVU218
 704 0002 0024     		movs	r4, #0
 705              	.LVL55:
 706              	.L60:
3670:FreeRTOS/tasks.c ****     {
 707              		.loc 1 3670 43 is_stmt 1 discriminator 1 view .LVU219
3670:FreeRTOS/tasks.c ****     {
 708              		.loc 1 3670 5 is_stmt 0 discriminator 1 view .LVU220
 709 0004 042C     		cmp	r4, #4
 710 0006 08D8     		bhi	.L63
3672:FreeRTOS/tasks.c ****     }
 711              		.loc 1 3672 9 is_stmt 1 discriminator 3 view .LVU221
 712 0008 04EB8402 		add	r2, r4, r4, lsl #2
 713 000c 9300     		lsls	r3, r2, #2
 714 000e 0E48     		ldr	r0, .L64
 715 0010 1844     		add	r0, r0, r3
 716 0012 FFF7FEFF 		bl	vListInitialise
 717              	.LVL56:
3670:FreeRTOS/tasks.c ****     {
 718              		.loc 1 3670 94 discriminator 3 view .LVU222
3670:FreeRTOS/tasks.c ****     {
 719              		.loc 1 3670 104 is_stmt 0 discriminator 3 view .LVU223
 720 0016 0134     		adds	r4, r4, #1
 721              	.LVL57:
3670:FreeRTOS/tasks.c ****     {
 722              		.loc 1 3670 104 discriminator 3 view .LVU224
 723 0018 F4E7     		b	.L60
 724              	.L63:
3675:FreeRTOS/tasks.c ****     vListInitialise( &xDelayedTaskList2 );
 725              		.loc 1 3675 5 is_stmt 1 view .LVU225
 726 001a 0C4D     		ldr	r5, .L64+4
 727 001c 2846     		mov	r0, r5
 728 001e FFF7FEFF 		bl	vListInitialise
 729              	.LVL58:
3676:FreeRTOS/tasks.c ****     vListInitialise( &xPendingReadyList );
 730              		.loc 1 3676 5 view .LVU226
 731 0022 0B4C     		ldr	r4, .L64+8
 732              	.LVL59:
3676:FreeRTOS/tasks.c ****     vListInitialise( &xPendingReadyList );
 733              		.loc 1 3676 5 is_stmt 0 view .LVU227
 734 0024 2046     		mov	r0, r4
 735 0026 FFF7FEFF 		bl	vListInitialise
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 90


 736              	.LVL60:
3677:FreeRTOS/tasks.c **** 
 737              		.loc 1 3677 5 is_stmt 1 view .LVU228
 738 002a 0A48     		ldr	r0, .L64+12
 739 002c FFF7FEFF 		bl	vListInitialise
 740              	.LVL61:
3681:FreeRTOS/tasks.c ****         }
 741              		.loc 1 3681 13 view .LVU229
 742 0030 0948     		ldr	r0, .L64+16
 743 0032 FFF7FEFF 		bl	vListInitialise
 744              	.LVL62:
3687:FreeRTOS/tasks.c ****         }
 745              		.loc 1 3687 13 view .LVU230
 746 0036 0948     		ldr	r0, .L64+20
 747 0038 FFF7FEFF 		bl	vListInitialise
 748              	.LVL63:
3693:FreeRTOS/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
 749              		.loc 1 3693 5 view .LVU231
3693:FreeRTOS/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
 750              		.loc 1 3693 23 is_stmt 0 view .LVU232
 751 003c 084B     		ldr	r3, .L64+24
 752 003e 1D60     		str	r5, [r3]
3694:FreeRTOS/tasks.c **** }
 753              		.loc 1 3694 5 is_stmt 1 view .LVU233
3694:FreeRTOS/tasks.c **** }
 754              		.loc 1 3694 31 is_stmt 0 view .LVU234
 755 0040 084B     		ldr	r3, .L64+28
 756 0042 1C60     		str	r4, [r3]
3695:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 757              		.loc 1 3695 1 view .LVU235
 758 0044 38BD     		pop	{r3, r4, r5, pc}
 759              	.L65:
 760 0046 00BF     		.align	2
 761              	.L64:
 762 0048 00000000 		.word	.LANCHOR4
 763 004c 00000000 		.word	.LANCHOR8
 764 0050 00000000 		.word	.LANCHOR9
 765 0054 00000000 		.word	.LANCHOR1
 766 0058 00000000 		.word	.LANCHOR10
 767 005c 00000000 		.word	.LANCHOR0
 768 0060 00000000 		.word	.LANCHOR7
 769 0064 00000000 		.word	.LANCHOR11
 770              		.cfi_endproc
 771              	.LFE50:
 773              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 774              		.align	1
 775              		.syntax unified
 776              		.thumb
 777              		.thumb_func
 778              		.fpu fpv4-sp-d16
 780              	prvAddNewTaskToReadyList:
 781              	.LVL64:
 782              	.LFB8:
1072:FreeRTOS/tasks.c ****     /* Ensure interrupts don't access the task lists while the lists are being
 783              		.loc 1 1072 1 is_stmt 1 view -0
 784              		.cfi_startproc
 785              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 91


 786              		@ frame_needed = 0, uses_anonymous_args = 0
1072:FreeRTOS/tasks.c ****     /* Ensure interrupts don't access the task lists while the lists are being
 787              		.loc 1 1072 1 is_stmt 0 view .LVU237
 788 0000 10B5     		push	{r4, lr}
 789              	.LCFI6:
 790              		.cfi_def_cfa_offset 8
 791              		.cfi_offset 4, -8
 792              		.cfi_offset 14, -4
 793 0002 0446     		mov	r4, r0
1075:FreeRTOS/tasks.c ****     {
 794              		.loc 1 1075 5 is_stmt 1 view .LVU238
 795 0004 FFF7FEFF 		bl	vPortEnterCritical
 796              	.LVL65:
1077:FreeRTOS/tasks.c **** 
 797              		.loc 1 1077 9 view .LVU239
1077:FreeRTOS/tasks.c **** 
 798              		.loc 1 1077 31 is_stmt 0 view .LVU240
 799 0008 284A     		ldr	r2, .L73
 800 000a 1368     		ldr	r3, [r2]
 801 000c 0133     		adds	r3, r3, #1
 802 000e 1360     		str	r3, [r2]
1079:FreeRTOS/tasks.c ****         {
 803              		.loc 1 1079 9 is_stmt 1 view .LVU241
1079:FreeRTOS/tasks.c ****         {
 804              		.loc 1 1079 26 is_stmt 0 view .LVU242
 805 0010 274B     		ldr	r3, .L73+4
 806 0012 1B68     		ldr	r3, [r3]
1079:FreeRTOS/tasks.c ****         {
 807              		.loc 1 1079 11 view .LVU243
 808 0014 5BB1     		cbz	r3, .L71
1102:FreeRTOS/tasks.c ****             {
 809              		.loc 1 1102 13 is_stmt 1 view .LVU244
1102:FreeRTOS/tasks.c ****             {
 810              		.loc 1 1102 35 is_stmt 0 view .LVU245
 811 0016 274B     		ldr	r3, .L73+8
 812 0018 1B68     		ldr	r3, [r3]
1102:FreeRTOS/tasks.c ****             {
 813              		.loc 1 1102 15 view .LVU246
 814 001a 6BB9     		cbnz	r3, .L68
1104:FreeRTOS/tasks.c ****                 {
 815              		.loc 1 1104 17 is_stmt 1 view .LVU247
1104:FreeRTOS/tasks.c ****                 {
 816              		.loc 1 1104 33 is_stmt 0 view .LVU248
 817 001c 244B     		ldr	r3, .L73+4
 818 001e 1B68     		ldr	r3, [r3]
 819 0020 DA6A     		ldr	r2, [r3, #44]
1104:FreeRTOS/tasks.c ****                 {
 820              		.loc 1 1104 57 view .LVU249
 821 0022 E36A     		ldr	r3, [r4, #44]
1104:FreeRTOS/tasks.c ****                 {
 822              		.loc 1 1104 19 view .LVU250
 823 0024 9A42     		cmp	r2, r3
 824 0026 07D8     		bhi	.L68
1106:FreeRTOS/tasks.c ****                 }
 825              		.loc 1 1106 21 is_stmt 1 view .LVU251
1106:FreeRTOS/tasks.c ****                 }
 826              		.loc 1 1106 34 is_stmt 0 view .LVU252
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 92


 827 0028 214B     		ldr	r3, .L73+4
 828 002a 1C60     		str	r4, [r3]
 829 002c 04E0     		b	.L68
 830              	.L71:
1083:FreeRTOS/tasks.c **** 
 831              		.loc 1 1083 13 is_stmt 1 view .LVU253
1083:FreeRTOS/tasks.c **** 
 832              		.loc 1 1083 26 is_stmt 0 view .LVU254
 833 002e 204B     		ldr	r3, .L73+4
 834 0030 1C60     		str	r4, [r3]
1085:FreeRTOS/tasks.c ****             {
 835              		.loc 1 1085 13 is_stmt 1 view .LVU255
1085:FreeRTOS/tasks.c ****             {
 836              		.loc 1 1085 40 is_stmt 0 view .LVU256
 837 0032 1368     		ldr	r3, [r2]
1085:FreeRTOS/tasks.c ****             {
 838              		.loc 1 1085 15 view .LVU257
 839 0034 012B     		cmp	r3, #1
 840 0036 35D0     		beq	.L72
 841              	.L68:
1115:FreeRTOS/tasks.c ****             }
 842              		.loc 1 1115 41 is_stmt 1 view .LVU258
1119:FreeRTOS/tasks.c **** 
 843              		.loc 1 1119 9 view .LVU259
1119:FreeRTOS/tasks.c **** 
 844              		.loc 1 1119 21 is_stmt 0 view .LVU260
 845 0038 1F4A     		ldr	r2, .L73+12
 846 003a 1368     		ldr	r3, [r2]
 847 003c 0133     		adds	r3, r3, #1
 848 003e 1360     		str	r3, [r2]
1124:FreeRTOS/tasks.c ****             }
 849              		.loc 1 1124 17 is_stmt 1 view .LVU261
1124:FreeRTOS/tasks.c ****             }
 850              		.loc 1 1124 39 is_stmt 0 view .LVU262
 851 0040 2364     		str	r3, [r4, #64]
1127:FreeRTOS/tasks.c **** 
 852              		.loc 1 1127 37 is_stmt 1 view .LVU263
1129:FreeRTOS/tasks.c **** 
 853              		.loc 1 1129 9 view .LVU264
1129:FreeRTOS/tasks.c **** 
 854              		.loc 1 1129 9 view .LVU265
 855 0042 E36A     		ldr	r3, [r4, #44]
 856 0044 0122     		movs	r2, #1
 857 0046 9A40     		lsls	r2, r2, r3
 858 0048 1C49     		ldr	r1, .L73+16
 859 004a 0868     		ldr	r0, [r1]
 860 004c 0243     		orrs	r2, r2, r0
 861 004e 0A60     		str	r2, [r1]
 862              	.LBB183:
1129:FreeRTOS/tasks.c **** 
 863              		.loc 1 1129 9 view .LVU266
 864 0050 1B4A     		ldr	r2, .L73+20
 865 0052 03EB8303 		add	r3, r3, r3, lsl #2
 866 0056 02EB8303 		add	r3, r2, r3, lsl #2
 867 005a 5B68     		ldr	r3, [r3, #4]
 868              	.LVL66:
1129:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 93


 869              		.loc 1 1129 9 view .LVU267
1129:FreeRTOS/tasks.c **** 
 870              		.loc 1 1129 9 view .LVU268
1129:FreeRTOS/tasks.c **** 
 871              		.loc 1 1129 9 view .LVU269
 872 005c A360     		str	r3, [r4, #8]
1129:FreeRTOS/tasks.c **** 
 873              		.loc 1 1129 9 view .LVU270
 874 005e 9868     		ldr	r0, [r3, #8]
 875 0060 E060     		str	r0, [r4, #12]
1129:FreeRTOS/tasks.c **** 
 876              		.loc 1 1129 9 view .LVU271
 877 0062 211D     		adds	r1, r4, #4
 878 0064 4160     		str	r1, [r0, #4]
1129:FreeRTOS/tasks.c **** 
 879              		.loc 1 1129 9 view .LVU272
 880 0066 9960     		str	r1, [r3, #8]
1129:FreeRTOS/tasks.c **** 
 881              		.loc 1 1129 9 view .LVU273
 882 0068 E36A     		ldr	r3, [r4, #44]
 883              	.LVL67:
1129:FreeRTOS/tasks.c **** 
 884              		.loc 1 1129 9 is_stmt 0 view .LVU274
 885 006a 03EB8301 		add	r1, r3, r3, lsl #2
 886 006e 8800     		lsls	r0, r1, #2
 887 0070 02EB8101 		add	r1, r2, r1, lsl #2
 888 0074 6161     		str	r1, [r4, #20]
1129:FreeRTOS/tasks.c **** 
 889              		.loc 1 1129 9 is_stmt 1 view .LVU275
 890 0076 1158     		ldr	r1, [r2, r0]
 891 0078 0131     		adds	r1, r1, #1
 892 007a 1150     		str	r1, [r2, r0]
 893              	.LBE183:
1129:FreeRTOS/tasks.c **** 
 894              		.loc 1 1129 9 view .LVU276
1129:FreeRTOS/tasks.c **** 
 895              		.loc 1 1129 42 view .LVU277
1131:FreeRTOS/tasks.c ****     }
 896              		.loc 1 1131 9 view .LVU278
1133:FreeRTOS/tasks.c **** 
 897              		.loc 1 1133 5 view .LVU279
 898 007c FFF7FEFF 		bl	vPortExitCritical
 899              	.LVL68:
1135:FreeRTOS/tasks.c ****     {
 900              		.loc 1 1135 5 view .LVU280
1135:FreeRTOS/tasks.c ****     {
 901              		.loc 1 1135 27 is_stmt 0 view .LVU281
 902 0080 0C4B     		ldr	r3, .L73+8
 903 0082 1B68     		ldr	r3, [r3]
1135:FreeRTOS/tasks.c ****     {
 904              		.loc 1 1135 7 view .LVU282
 905 0084 6BB1     		cbz	r3, .L66
1139:FreeRTOS/tasks.c ****         {
 906              		.loc 1 1139 9 is_stmt 1 view .LVU283
1139:FreeRTOS/tasks.c ****         {
 907              		.loc 1 1139 25 is_stmt 0 view .LVU284
 908 0086 0A4B     		ldr	r3, .L73+4
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 94


 909 0088 1B68     		ldr	r3, [r3]
 910 008a DA6A     		ldr	r2, [r3, #44]
1139:FreeRTOS/tasks.c ****         {
 911              		.loc 1 1139 48 view .LVU285
 912 008c E36A     		ldr	r3, [r4, #44]
1139:FreeRTOS/tasks.c ****         {
 913              		.loc 1 1139 11 view .LVU286
 914 008e 9A42     		cmp	r2, r3
 915 0090 07D2     		bcs	.L66
1141:FreeRTOS/tasks.c ****         }
 916              		.loc 1 1141 13 is_stmt 1 view .LVU287
 917 0092 0C4B     		ldr	r3, .L73+24
 918 0094 4FF08052 		mov	r2, #268435456
 919 0098 1A60     		str	r2, [r3]
1141:FreeRTOS/tasks.c ****         }
 920              		.loc 1 1141 13 view .LVU288
 921              		.syntax unified
 922              	@ 1141 "FreeRTOS/tasks.c" 1
 923 009a BFF34F8F 		dsb
 924              	@ 0 "" 2
1141:FreeRTOS/tasks.c ****         }
 925              		.loc 1 1141 13 view .LVU289
 926              	@ 1141 "FreeRTOS/tasks.c" 1
 927 009e BFF36F8F 		isb
 928              	@ 0 "" 2
1141:FreeRTOS/tasks.c ****         }
 929              		.loc 1 1141 44 view .LVU290
1150:FreeRTOS/tasks.c ****     }
 930              		.loc 1 1150 33 view .LVU291
 931              		.thumb
 932              		.syntax unified
 933              	.L66:
1152:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 934              		.loc 1 1152 1 is_stmt 0 view .LVU292
 935 00a2 10BD     		pop	{r4, pc}
 936              	.LVL69:
 937              	.L72:
1090:FreeRTOS/tasks.c ****             }
 938              		.loc 1 1090 17 is_stmt 1 view .LVU293
 939 00a4 FFF7FEFF 		bl	prvInitialiseTaskLists
 940              	.LVL70:
 941 00a8 C6E7     		b	.L68
 942              	.L74:
 943 00aa 00BF     		.align	2
 944              	.L73:
 945 00ac 00000000 		.word	.LANCHOR12
 946 00b0 00000000 		.word	.LANCHOR3
 947 00b4 00000000 		.word	.LANCHOR13
 948 00b8 00000000 		.word	.LANCHOR14
 949 00bc 00000000 		.word	.LANCHOR2
 950 00c0 00000000 		.word	.LANCHOR4
 951 00c4 04ED00E0 		.word	-536810236
 952              		.cfi_endproc
 953              	.LFE8:
 955              		.section	.text.prvDeleteTCB,"ax",%progbits
 956              		.align	1
 957              		.syntax unified
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 95


 958              		.thumb
 959              		.thumb_func
 960              		.fpu fpv4-sp-d16
 962              	prvDeleteTCB:
 963              	.LVL71:
 964              	.LFB57:
3951:FreeRTOS/tasks.c ****         /* This call is required specifically for the TriCore port.  It must be
 965              		.loc 1 3951 5 view -0
 966              		.cfi_startproc
 967              		@ args = 0, pretend = 0, frame = 0
 968              		@ frame_needed = 0, uses_anonymous_args = 0
3951:FreeRTOS/tasks.c ****         /* This call is required specifically for the TriCore port.  It must be
 969              		.loc 1 3951 5 is_stmt 0 view .LVU295
 970 0000 10B5     		push	{r4, lr}
 971              	.LCFI7:
 972              		.cfi_def_cfa_offset 8
 973              		.cfi_offset 4, -8
 974              		.cfi_offset 14, -4
 975 0002 0446     		mov	r4, r0
3955:FreeRTOS/tasks.c **** 
 976              		.loc 1 3955 9 is_stmt 1 view .LVU296
3979:FreeRTOS/tasks.c ****                 {
 977              		.loc 1 3979 17 view .LVU297
3979:FreeRTOS/tasks.c ****                 {
 978              		.loc 1 3979 26 is_stmt 0 view .LVU298
 979 0004 90F85530 		ldrb	r3, [r0, #85]	@ zero_extendqisi2
3979:FreeRTOS/tasks.c ****                 {
 980              		.loc 1 3979 19 view .LVU299
 981 0008 63B1     		cbz	r3, .L81
3986:FreeRTOS/tasks.c ****                 {
 982              		.loc 1 3986 22 is_stmt 1 view .LVU300
3986:FreeRTOS/tasks.c ****                 {
 983              		.loc 1 3986 24 is_stmt 0 view .LVU301
 984 000a 012B     		cmp	r3, #1
 985 000c 11D0     		beq	.L82
3996:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
 986              		.loc 1 3996 21 is_stmt 1 view .LVU302
 987 000e 022B     		cmp	r3, #2
 988 0010 0ED0     		beq	.L75
3996:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
 989              		.loc 1 3996 21 view .LVU303
 990              	.LBB184:
 991              	.LBI184:
 194:FreeRTOS/portable/portmacro.h ****     {
 992              		.loc 2 194 34 view .LVU304
 993              	.LBB185:
 196:FreeRTOS/portable/portmacro.h **** 
 994              		.loc 2 196 9 view .LVU305
 995              		.loc 2 198 9 view .LVU306
 996              		.syntax unified
 997              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 998 0012 4FF05003 			mov r3, #80												
 999 0016 83F31188 		msr basepri, r3											
 1000 001a BFF36F8F 		isb														
 1001 001e BFF34F8F 		dsb														
 1002              	
 1003              	@ 0 "" 2
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 96


 1004              	.LVL72:
 1005              		.thumb
 1006              		.syntax unified
 1007              	.L79:
 1008              		.loc 2 198 9 is_stmt 0 view .LVU307
 1009              	.LBE185:
 1010              	.LBE184:
3996:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
 1011              		.loc 1 3996 21 is_stmt 1 discriminator 1 view .LVU308
3996:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
 1012              		.loc 1 3996 21 discriminator 1 view .LVU309
3996:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
 1013              		.loc 1 3996 21 discriminator 1 view .LVU310
 1014 0022 FEE7     		b	.L79
 1015              	.L81:
3983:FreeRTOS/tasks.c ****                     vPortFree( pxTCB );
 1016              		.loc 1 3983 21 view .LVU311
 1017 0024 006B     		ldr	r0, [r0, #48]
 1018              	.LVL73:
3983:FreeRTOS/tasks.c ****                     vPortFree( pxTCB );
 1019              		.loc 1 3983 21 is_stmt 0 view .LVU312
 1020 0026 FFF7FEFF 		bl	vPortFree
 1021              	.LVL74:
3984:FreeRTOS/tasks.c ****                 }
 1022              		.loc 1 3984 21 is_stmt 1 view .LVU313
 1023 002a 2046     		mov	r0, r4
 1024 002c FFF7FEFF 		bl	vPortFree
 1025              	.LVL75:
 1026              	.L75:
4001:FreeRTOS/tasks.c **** 
 1027              		.loc 1 4001 5 is_stmt 0 view .LVU314
 1028 0030 10BD     		pop	{r4, pc}
 1029              	.LVL76:
 1030              	.L82:
3990:FreeRTOS/tasks.c ****                 }
 1031              		.loc 1 3990 21 is_stmt 1 view .LVU315
 1032 0032 FFF7FEFF 		bl	vPortFree
 1033              	.LVL77:
3990:FreeRTOS/tasks.c ****                 }
 1034              		.loc 1 3990 21 is_stmt 0 view .LVU316
 1035 0036 FBE7     		b	.L75
 1036              		.cfi_endproc
 1037              	.LFE57:
 1039              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 1040              		.align	1
 1041              		.syntax unified
 1042              		.thumb
 1043              		.thumb_func
 1044              		.fpu fpv4-sp-d16
 1046              	prvCheckTasksWaitingTermination:
 1047              	.LFB51:
3699:FreeRTOS/tasks.c ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
 1048              		.loc 1 3699 1 is_stmt 1 view -0
 1049              		.cfi_startproc
 1050              		@ args = 0, pretend = 0, frame = 0
 1051              		@ frame_needed = 0, uses_anonymous_args = 0
 1052              	.LBB186:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 97


3704:FreeRTOS/tasks.c **** 
 1053              		.loc 1 3704 13 view .LVU318
3708:FreeRTOS/tasks.c ****             {
 1054              		.loc 1 3708 13 view .LVU319
3708:FreeRTOS/tasks.c ****             {
 1055              		.loc 1 3708 18 view .LVU320
3708:FreeRTOS/tasks.c ****             {
 1056              		.loc 1 3708 49 is_stmt 0 view .LVU321
 1057 0000 0F4B     		ldr	r3, .L90
 1058 0002 1B68     		ldr	r3, [r3]
3708:FreeRTOS/tasks.c ****             {
 1059              		.loc 1 3708 18 view .LVU322
 1060 0004 D3B1     		cbz	r3, .L89
 1061              	.LBE186:
3699:FreeRTOS/tasks.c ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
 1062              		.loc 1 3699 1 view .LVU323
 1063 0006 10B5     		push	{r4, lr}
 1064              	.LCFI8:
 1065              		.cfi_def_cfa_offset 8
 1066              		.cfi_offset 4, -8
 1067              		.cfi_offset 14, -4
 1068              	.L85:
 1069              	.LBB187:
3710:FreeRTOS/tasks.c ****                 {
 1070              		.loc 1 3710 17 is_stmt 1 view .LVU324
 1071 0008 FFF7FEFF 		bl	vPortEnterCritical
 1072              	.LVL78:
3712:FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1073              		.loc 1 3712 21 view .LVU325
3712:FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1074              		.loc 1 3712 29 is_stmt 0 view .LVU326
 1075 000c 0D4B     		ldr	r3, .L90+4
 1076 000e DB68     		ldr	r3, [r3, #12]
3712:FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1077              		.loc 1 3712 27 view .LVU327
 1078 0010 DC68     		ldr	r4, [r3, #12]
 1079              	.LVL79:
3713:FreeRTOS/tasks.c ****                     --uxCurrentNumberOfTasks;
 1080              		.loc 1 3713 21 is_stmt 1 view .LVU328
3713:FreeRTOS/tasks.c ****                     --uxCurrentNumberOfTasks;
 1081              		.loc 1 3713 30 is_stmt 0 view .LVU329
 1082 0012 201D     		adds	r0, r4, #4
 1083 0014 FFF7FEFF 		bl	uxListRemove
 1084              	.LVL80:
3714:FreeRTOS/tasks.c ****                     --uxDeletedTasksWaitingCleanUp;
 1085              		.loc 1 3714 21 is_stmt 1 view .LVU330
 1086 0018 0B4A     		ldr	r2, .L90+8
 1087 001a 1368     		ldr	r3, [r2]
 1088 001c 013B     		subs	r3, r3, #1
 1089 001e 1360     		str	r3, [r2]
3715:FreeRTOS/tasks.c ****                 }
 1090              		.loc 1 3715 21 view .LVU331
 1091 0020 074A     		ldr	r2, .L90
 1092 0022 1368     		ldr	r3, [r2]
 1093 0024 013B     		subs	r3, r3, #1
 1094 0026 1360     		str	r3, [r2]
3717:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 98


 1095              		.loc 1 3717 17 view .LVU332
 1096 0028 FFF7FEFF 		bl	vPortExitCritical
 1097              	.LVL81:
3719:FreeRTOS/tasks.c ****             }
 1098              		.loc 1 3719 17 view .LVU333
 1099 002c 2046     		mov	r0, r4
 1100 002e FFF7FEFF 		bl	prvDeleteTCB
 1101              	.LVL82:
3708:FreeRTOS/tasks.c ****             {
 1102              		.loc 1 3708 18 view .LVU334
3708:FreeRTOS/tasks.c ****             {
 1103              		.loc 1 3708 49 is_stmt 0 view .LVU335
 1104 0032 034B     		ldr	r3, .L90
 1105 0034 1B68     		ldr	r3, [r3]
3708:FreeRTOS/tasks.c ****             {
 1106              		.loc 1 3708 18 view .LVU336
 1107 0036 002B     		cmp	r3, #0
 1108 0038 E6D1     		bne	.L85
 1109              	.LBE187:
3723:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1110              		.loc 1 3723 1 view .LVU337
 1111 003a 10BD     		pop	{r4, pc}
 1112              	.LVL83:
 1113              	.L89:
 1114              	.LCFI9:
 1115              		.cfi_def_cfa_offset 0
 1116              		.cfi_restore 4
 1117              		.cfi_restore 14
3723:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1118              		.loc 1 3723 1 view .LVU338
 1119 003c 7047     		bx	lr
 1120              	.L91:
 1121 003e 00BF     		.align	2
 1122              	.L90:
 1123 0040 00000000 		.word	.LANCHOR15
 1124 0044 00000000 		.word	.LANCHOR10
 1125 0048 00000000 		.word	.LANCHOR12
 1126              		.cfi_endproc
 1127              	.LFE51:
 1129              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 1130              		.align	1
 1131              		.syntax unified
 1132              		.thumb
 1133              		.thumb_func
 1134              		.fpu fpv4-sp-d16
 1136              	prvAddCurrentTaskToDelayedList:
 1137              	.LVL84:
 1138              	.LFB73:
4025:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4026:FreeRTOS/tasks.c **** 
4027:FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
4028:FreeRTOS/tasks.c **** 
4029:FreeRTOS/tasks.c ****     TaskHandle_t xTaskGetCurrentTaskHandle( void )
4030:FreeRTOS/tasks.c ****     {
4031:FreeRTOS/tasks.c ****         TaskHandle_t xReturn;
4032:FreeRTOS/tasks.c **** 
4033:FreeRTOS/tasks.c ****         /* A critical section is not required as this is not called from
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 99


4034:FreeRTOS/tasks.c ****          * an interrupt and the current TCB will always be the same for any
4035:FreeRTOS/tasks.c ****          * individual execution thread. */
4036:FreeRTOS/tasks.c ****         xReturn = pxCurrentTCB;
4037:FreeRTOS/tasks.c **** 
4038:FreeRTOS/tasks.c ****         return xReturn;
4039:FreeRTOS/tasks.c ****     }
4040:FreeRTOS/tasks.c **** 
4041:FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
4042:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4043:FreeRTOS/tasks.c **** 
4044:FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
4045:FreeRTOS/tasks.c **** 
4046:FreeRTOS/tasks.c ****     BaseType_t xTaskGetSchedulerState( void )
4047:FreeRTOS/tasks.c ****     {
4048:FreeRTOS/tasks.c ****         BaseType_t xReturn;
4049:FreeRTOS/tasks.c **** 
4050:FreeRTOS/tasks.c ****         if( xSchedulerRunning == pdFALSE )
4051:FreeRTOS/tasks.c ****         {
4052:FreeRTOS/tasks.c ****             xReturn = taskSCHEDULER_NOT_STARTED;
4053:FreeRTOS/tasks.c ****         }
4054:FreeRTOS/tasks.c ****         else
4055:FreeRTOS/tasks.c ****         {
4056:FreeRTOS/tasks.c ****             if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4057:FreeRTOS/tasks.c ****             {
4058:FreeRTOS/tasks.c ****                 xReturn = taskSCHEDULER_RUNNING;
4059:FreeRTOS/tasks.c ****             }
4060:FreeRTOS/tasks.c ****             else
4061:FreeRTOS/tasks.c ****             {
4062:FreeRTOS/tasks.c ****                 xReturn = taskSCHEDULER_SUSPENDED;
4063:FreeRTOS/tasks.c ****             }
4064:FreeRTOS/tasks.c ****         }
4065:FreeRTOS/tasks.c **** 
4066:FreeRTOS/tasks.c ****         return xReturn;
4067:FreeRTOS/tasks.c ****     }
4068:FreeRTOS/tasks.c **** 
4069:FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4070:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4071:FreeRTOS/tasks.c **** 
4072:FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4073:FreeRTOS/tasks.c **** 
4074:FreeRTOS/tasks.c ****     BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4075:FreeRTOS/tasks.c ****     {
4076:FreeRTOS/tasks.c ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
4077:FreeRTOS/tasks.c ****         BaseType_t xReturn = pdFALSE;
4078:FreeRTOS/tasks.c **** 
4079:FreeRTOS/tasks.c ****         /* If the mutex was given back by an interrupt while the queue was
4080:FreeRTOS/tasks.c ****          * locked then the mutex holder might now be NULL.  _RB_ Is this still
4081:FreeRTOS/tasks.c ****          * needed as interrupts can no longer use mutexes? */
4082:FreeRTOS/tasks.c ****         if( pxMutexHolder != NULL )
4083:FreeRTOS/tasks.c ****         {
4084:FreeRTOS/tasks.c ****             /* If the holder of the mutex has a priority below the priority of
4085:FreeRTOS/tasks.c ****              * the task attempting to obtain the mutex then it will temporarily
4086:FreeRTOS/tasks.c ****              * inherit the priority of the task attempting to obtain the mutex. */
4087:FreeRTOS/tasks.c ****             if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
4088:FreeRTOS/tasks.c ****             {
4089:FreeRTOS/tasks.c ****                 /* Adjust the mutex holder state to account for its new
4090:FreeRTOS/tasks.c ****                  * priority.  Only reset the event list item value if the value is
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 100


4091:FreeRTOS/tasks.c ****                  * not being used for anything else. */
4092:FreeRTOS/tasks.c ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_
4093:FreeRTOS/tasks.c ****                 {
4094:FreeRTOS/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) 
4095:FreeRTOS/tasks.c ****                 }
4096:FreeRTOS/tasks.c ****                 else
4097:FreeRTOS/tasks.c ****                 {
4098:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4099:FreeRTOS/tasks.c ****                 }
4100:FreeRTOS/tasks.c **** 
4101:FreeRTOS/tasks.c ****                 /* If the task being modified is in the ready state it will need
4102:FreeRTOS/tasks.c ****                  * to be moved into a new list. */
4103:FreeRTOS/tasks.c ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] )
4104:FreeRTOS/tasks.c ****                 {
4105:FreeRTOS/tasks.c ****                     if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 
4106:FreeRTOS/tasks.c ****                     {
4107:FreeRTOS/tasks.c ****                         /* It is known that the task is in its ready list so
4108:FreeRTOS/tasks.c ****                          * there is no need to check again and the port level
4109:FreeRTOS/tasks.c ****                          * reset macro can be called directly. */
4110:FreeRTOS/tasks.c ****                         portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority 
4111:FreeRTOS/tasks.c ****                     }
4112:FreeRTOS/tasks.c ****                     else
4113:FreeRTOS/tasks.c ****                     {
4114:FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4115:FreeRTOS/tasks.c ****                     }
4116:FreeRTOS/tasks.c **** 
4117:FreeRTOS/tasks.c ****                     /* Inherit the priority before being moved into the new list. */
4118:FreeRTOS/tasks.c ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4119:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
4120:FreeRTOS/tasks.c ****                 }
4121:FreeRTOS/tasks.c ****                 else
4122:FreeRTOS/tasks.c ****                 {
4123:FreeRTOS/tasks.c ****                     /* Just inherit the priority. */
4124:FreeRTOS/tasks.c ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4125:FreeRTOS/tasks.c ****                 }
4126:FreeRTOS/tasks.c **** 
4127:FreeRTOS/tasks.c ****                 traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4128:FreeRTOS/tasks.c **** 
4129:FreeRTOS/tasks.c ****                 /* Inheritance occurred. */
4130:FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
4131:FreeRTOS/tasks.c ****             }
4132:FreeRTOS/tasks.c ****             else
4133:FreeRTOS/tasks.c ****             {
4134:FreeRTOS/tasks.c ****                 if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
4135:FreeRTOS/tasks.c ****                 {
4136:FreeRTOS/tasks.c ****                     /* The base priority of the mutex holder is lower than the
4137:FreeRTOS/tasks.c ****                      * priority of the task attempting to take the mutex, but the
4138:FreeRTOS/tasks.c ****                      * current priority of the mutex holder is not lower than the
4139:FreeRTOS/tasks.c ****                      * priority of the task attempting to take the mutex.
4140:FreeRTOS/tasks.c ****                      * Therefore the mutex holder must have already inherited a
4141:FreeRTOS/tasks.c ****                      * priority, but inheritance would have occurred if that had
4142:FreeRTOS/tasks.c ****                      * not been the case. */
4143:FreeRTOS/tasks.c ****                     xReturn = pdTRUE;
4144:FreeRTOS/tasks.c ****                 }
4145:FreeRTOS/tasks.c ****                 else
4146:FreeRTOS/tasks.c ****                 {
4147:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 101


4148:FreeRTOS/tasks.c ****                 }
4149:FreeRTOS/tasks.c ****             }
4150:FreeRTOS/tasks.c ****         }
4151:FreeRTOS/tasks.c ****         else
4152:FreeRTOS/tasks.c ****         {
4153:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4154:FreeRTOS/tasks.c ****         }
4155:FreeRTOS/tasks.c **** 
4156:FreeRTOS/tasks.c ****         return xReturn;
4157:FreeRTOS/tasks.c ****     }
4158:FreeRTOS/tasks.c **** 
4159:FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4160:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4161:FreeRTOS/tasks.c **** 
4162:FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4163:FreeRTOS/tasks.c **** 
4164:FreeRTOS/tasks.c ****     BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4165:FreeRTOS/tasks.c ****     {
4166:FreeRTOS/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
4167:FreeRTOS/tasks.c ****         BaseType_t xReturn = pdFALSE;
4168:FreeRTOS/tasks.c **** 
4169:FreeRTOS/tasks.c ****         if( pxMutexHolder != NULL )
4170:FreeRTOS/tasks.c ****         {
4171:FreeRTOS/tasks.c ****             /* A task can only have an inherited priority if it holds the mutex.
4172:FreeRTOS/tasks.c ****              * If the mutex is held by a task then it cannot be given from an
4173:FreeRTOS/tasks.c ****              * interrupt, and if a mutex is given by the holding task then it must
4174:FreeRTOS/tasks.c ****              * be the running state task. */
4175:FreeRTOS/tasks.c ****             configASSERT( pxTCB == pxCurrentTCB );
4176:FreeRTOS/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
4177:FreeRTOS/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
4178:FreeRTOS/tasks.c **** 
4179:FreeRTOS/tasks.c ****             /* Has the holder of the mutex inherited the priority of another
4180:FreeRTOS/tasks.c ****              * task? */
4181:FreeRTOS/tasks.c ****             if( pxTCB->uxPriority != pxTCB->uxBasePriority )
4182:FreeRTOS/tasks.c ****             {
4183:FreeRTOS/tasks.c ****                 /* Only disinherit if no other mutexes are held. */
4184:FreeRTOS/tasks.c ****                 if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
4185:FreeRTOS/tasks.c ****                 {
4186:FreeRTOS/tasks.c ****                     /* A task can only have an inherited priority if it holds
4187:FreeRTOS/tasks.c ****                      * the mutex.  If the mutex is held by a task then it cannot be
4188:FreeRTOS/tasks.c ****                      * given from an interrupt, and if a mutex is given by the
4189:FreeRTOS/tasks.c ****                      * holding task then it must be the running state task.  Remove
4190:FreeRTOS/tasks.c ****                      * the holding task from the ready list. */
4191:FreeRTOS/tasks.c ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4192:FreeRTOS/tasks.c ****                     {
4193:FreeRTOS/tasks.c ****                         portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4194:FreeRTOS/tasks.c ****                     }
4195:FreeRTOS/tasks.c ****                     else
4196:FreeRTOS/tasks.c ****                     {
4197:FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4198:FreeRTOS/tasks.c ****                     }
4199:FreeRTOS/tasks.c **** 
4200:FreeRTOS/tasks.c ****                     /* Disinherit the priority before adding the task into the
4201:FreeRTOS/tasks.c ****                      * new  ready list. */
4202:FreeRTOS/tasks.c ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4203:FreeRTOS/tasks.c ****                     pxTCB->uxPriority = pxTCB->uxBasePriority;
4204:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 102


4205:FreeRTOS/tasks.c ****                     /* Reset the event list item value.  It cannot be in use for
4206:FreeRTOS/tasks.c ****                      * any other purpose if this task is running, and it must be
4207:FreeRTOS/tasks.c ****                      * running to give back the mutex. */
4208:FreeRTOS/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_P
4209:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
4210:FreeRTOS/tasks.c **** 
4211:FreeRTOS/tasks.c ****                     /* Return true to indicate that a context switch is required.
4212:FreeRTOS/tasks.c ****                      * This is only actually required in the corner case whereby
4213:FreeRTOS/tasks.c ****                      * multiple mutexes were held and the mutexes were given back
4214:FreeRTOS/tasks.c ****                      * in an order different to that in which they were taken.
4215:FreeRTOS/tasks.c ****                      * If a context switch did not occur when the first mutex was
4216:FreeRTOS/tasks.c ****                      * returned, even if a task was waiting on it, then a context
4217:FreeRTOS/tasks.c ****                      * switch should occur when the last mutex is returned whether
4218:FreeRTOS/tasks.c ****                      * a task is waiting on it or not. */
4219:FreeRTOS/tasks.c ****                     xReturn = pdTRUE;
4220:FreeRTOS/tasks.c ****                 }
4221:FreeRTOS/tasks.c ****                 else
4222:FreeRTOS/tasks.c ****                 {
4223:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4224:FreeRTOS/tasks.c ****                 }
4225:FreeRTOS/tasks.c ****             }
4226:FreeRTOS/tasks.c ****             else
4227:FreeRTOS/tasks.c ****             {
4228:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4229:FreeRTOS/tasks.c ****             }
4230:FreeRTOS/tasks.c ****         }
4231:FreeRTOS/tasks.c ****         else
4232:FreeRTOS/tasks.c ****         {
4233:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4234:FreeRTOS/tasks.c ****         }
4235:FreeRTOS/tasks.c **** 
4236:FreeRTOS/tasks.c ****         return xReturn;
4237:FreeRTOS/tasks.c ****     }
4238:FreeRTOS/tasks.c **** 
4239:FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4240:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4241:FreeRTOS/tasks.c **** 
4242:FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4243:FreeRTOS/tasks.c **** 
4244:FreeRTOS/tasks.c ****     void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
4245:FreeRTOS/tasks.c ****                                               UBaseType_t uxHighestPriorityWaitingTask )
4246:FreeRTOS/tasks.c ****     {
4247:FreeRTOS/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
4248:FreeRTOS/tasks.c ****         UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4249:FreeRTOS/tasks.c ****         const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
4250:FreeRTOS/tasks.c **** 
4251:FreeRTOS/tasks.c ****         if( pxMutexHolder != NULL )
4252:FreeRTOS/tasks.c ****         {
4253:FreeRTOS/tasks.c ****             /* If pxMutexHolder is not NULL then the holder must hold at least
4254:FreeRTOS/tasks.c ****              * one mutex. */
4255:FreeRTOS/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
4256:FreeRTOS/tasks.c **** 
4257:FreeRTOS/tasks.c ****             /* Determine the priority to which the priority of the task that
4258:FreeRTOS/tasks.c ****              * holds the mutex should be set.  This will be the greater of the
4259:FreeRTOS/tasks.c ****              * holding task's base priority and the priority of the highest
4260:FreeRTOS/tasks.c ****              * priority task that is waiting to obtain the mutex. */
4261:FreeRTOS/tasks.c ****             if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 103


4262:FreeRTOS/tasks.c ****             {
4263:FreeRTOS/tasks.c ****                 uxPriorityToUse = uxHighestPriorityWaitingTask;
4264:FreeRTOS/tasks.c ****             }
4265:FreeRTOS/tasks.c ****             else
4266:FreeRTOS/tasks.c ****             {
4267:FreeRTOS/tasks.c ****                 uxPriorityToUse = pxTCB->uxBasePriority;
4268:FreeRTOS/tasks.c ****             }
4269:FreeRTOS/tasks.c **** 
4270:FreeRTOS/tasks.c ****             /* Does the priority need to change? */
4271:FreeRTOS/tasks.c ****             if( pxTCB->uxPriority != uxPriorityToUse )
4272:FreeRTOS/tasks.c ****             {
4273:FreeRTOS/tasks.c ****                 /* Only disinherit if no other mutexes are held.  This is a
4274:FreeRTOS/tasks.c ****                  * simplification in the priority inheritance implementation.  If
4275:FreeRTOS/tasks.c ****                  * the task that holds the mutex is also holding other mutexes then
4276:FreeRTOS/tasks.c ****                  * the other mutexes may have caused the priority inheritance. */
4277:FreeRTOS/tasks.c ****                 if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4278:FreeRTOS/tasks.c ****                 {
4279:FreeRTOS/tasks.c ****                     /* If a task has timed out because it already holds the
4280:FreeRTOS/tasks.c ****                      * mutex it was trying to obtain then it cannot of inherited
4281:FreeRTOS/tasks.c ****                      * its own priority. */
4282:FreeRTOS/tasks.c ****                     configASSERT( pxTCB != pxCurrentTCB );
4283:FreeRTOS/tasks.c **** 
4284:FreeRTOS/tasks.c ****                     /* Disinherit the priority, remembering the previous
4285:FreeRTOS/tasks.c ****                      * priority to facilitate determining the subject task's
4286:FreeRTOS/tasks.c ****                      * state. */
4287:FreeRTOS/tasks.c ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
4288:FreeRTOS/tasks.c ****                     uxPriorityUsedOnEntry = pxTCB->uxPriority;
4289:FreeRTOS/tasks.c ****                     pxTCB->uxPriority = uxPriorityToUse;
4290:FreeRTOS/tasks.c **** 
4291:FreeRTOS/tasks.c ****                     /* Only reset the event list item value if the value is not
4292:FreeRTOS/tasks.c ****                      * being used for anything else. */
4293:FreeRTOS/tasks.c ****                     if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_IT
4294:FreeRTOS/tasks.c ****                     {
4295:FreeRTOS/tasks.c ****                         listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configM
4296:FreeRTOS/tasks.c ****                     }
4297:FreeRTOS/tasks.c ****                     else
4298:FreeRTOS/tasks.c ****                     {
4299:FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4300:FreeRTOS/tasks.c ****                     }
4301:FreeRTOS/tasks.c **** 
4302:FreeRTOS/tasks.c ****                     /* If the running task is not the task that holds the mutex
4303:FreeRTOS/tasks.c ****                      * then the task that holds the mutex could be in either the
4304:FreeRTOS/tasks.c ****                      * Ready, Blocked or Suspended states.  Only remove the task
4305:FreeRTOS/tasks.c ****                      * from its current state list if it is in the Ready state as
4306:FreeRTOS/tasks.c ****                      * the task's priority is going to change and there is one
4307:FreeRTOS/tasks.c ****                      * Ready list per priority. */
4308:FreeRTOS/tasks.c ****                     if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &
4309:FreeRTOS/tasks.c ****                     {
4310:FreeRTOS/tasks.c ****                         if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4311:FreeRTOS/tasks.c ****                         {
4312:FreeRTOS/tasks.c ****                             /* It is known that the task is in its ready list so
4313:FreeRTOS/tasks.c ****                              * there is no need to check again and the port level
4314:FreeRTOS/tasks.c ****                              * reset macro can be called directly. */
4315:FreeRTOS/tasks.c ****                             portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4316:FreeRTOS/tasks.c ****                         }
4317:FreeRTOS/tasks.c ****                         else
4318:FreeRTOS/tasks.c ****                         {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 104


4319:FreeRTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
4320:FreeRTOS/tasks.c ****                         }
4321:FreeRTOS/tasks.c **** 
4322:FreeRTOS/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
4323:FreeRTOS/tasks.c ****                     }
4324:FreeRTOS/tasks.c ****                     else
4325:FreeRTOS/tasks.c ****                     {
4326:FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4327:FreeRTOS/tasks.c ****                     }
4328:FreeRTOS/tasks.c ****                 }
4329:FreeRTOS/tasks.c ****                 else
4330:FreeRTOS/tasks.c ****                 {
4331:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4332:FreeRTOS/tasks.c ****                 }
4333:FreeRTOS/tasks.c ****             }
4334:FreeRTOS/tasks.c ****             else
4335:FreeRTOS/tasks.c ****             {
4336:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4337:FreeRTOS/tasks.c ****             }
4338:FreeRTOS/tasks.c ****         }
4339:FreeRTOS/tasks.c ****         else
4340:FreeRTOS/tasks.c ****         {
4341:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4342:FreeRTOS/tasks.c ****         }
4343:FreeRTOS/tasks.c ****     }
4344:FreeRTOS/tasks.c **** 
4345:FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4346:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4347:FreeRTOS/tasks.c **** 
4348:FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4349:FreeRTOS/tasks.c **** 
4350:FreeRTOS/tasks.c ****     void vTaskEnterCritical( void )
4351:FreeRTOS/tasks.c ****     {
4352:FreeRTOS/tasks.c ****         portDISABLE_INTERRUPTS();
4353:FreeRTOS/tasks.c **** 
4354:FreeRTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
4355:FreeRTOS/tasks.c ****         {
4356:FreeRTOS/tasks.c ****             ( pxCurrentTCB->uxCriticalNesting )++;
4357:FreeRTOS/tasks.c **** 
4358:FreeRTOS/tasks.c ****             /* This is not the interrupt safe version of the enter critical
4359:FreeRTOS/tasks.c ****              * function so  assert() if it is being called from an interrupt
4360:FreeRTOS/tasks.c ****              * context.  Only API functions that end in "FromISR" can be used in an
4361:FreeRTOS/tasks.c ****              * interrupt.  Only assert if the critical nesting count is 1 to
4362:FreeRTOS/tasks.c ****              * protect against recursive calls if the assert function also uses a
4363:FreeRTOS/tasks.c ****              * critical section. */
4364:FreeRTOS/tasks.c ****             if( pxCurrentTCB->uxCriticalNesting == 1 )
4365:FreeRTOS/tasks.c ****             {
4366:FreeRTOS/tasks.c ****                 portASSERT_IF_IN_ISR();
4367:FreeRTOS/tasks.c ****             }
4368:FreeRTOS/tasks.c ****         }
4369:FreeRTOS/tasks.c ****         else
4370:FreeRTOS/tasks.c ****         {
4371:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4372:FreeRTOS/tasks.c ****         }
4373:FreeRTOS/tasks.c ****     }
4374:FreeRTOS/tasks.c **** 
4375:FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 105


4376:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4377:FreeRTOS/tasks.c **** 
4378:FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4379:FreeRTOS/tasks.c **** 
4380:FreeRTOS/tasks.c ****     void vTaskExitCritical( void )
4381:FreeRTOS/tasks.c ****     {
4382:FreeRTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
4383:FreeRTOS/tasks.c ****         {
4384:FreeRTOS/tasks.c ****             if( pxCurrentTCB->uxCriticalNesting > 0U )
4385:FreeRTOS/tasks.c ****             {
4386:FreeRTOS/tasks.c ****                 ( pxCurrentTCB->uxCriticalNesting )--;
4387:FreeRTOS/tasks.c **** 
4388:FreeRTOS/tasks.c ****                 if( pxCurrentTCB->uxCriticalNesting == 0U )
4389:FreeRTOS/tasks.c ****                 {
4390:FreeRTOS/tasks.c ****                     portENABLE_INTERRUPTS();
4391:FreeRTOS/tasks.c ****                 }
4392:FreeRTOS/tasks.c ****                 else
4393:FreeRTOS/tasks.c ****                 {
4394:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4395:FreeRTOS/tasks.c ****                 }
4396:FreeRTOS/tasks.c ****             }
4397:FreeRTOS/tasks.c ****             else
4398:FreeRTOS/tasks.c ****             {
4399:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4400:FreeRTOS/tasks.c ****             }
4401:FreeRTOS/tasks.c ****         }
4402:FreeRTOS/tasks.c ****         else
4403:FreeRTOS/tasks.c ****         {
4404:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4405:FreeRTOS/tasks.c ****         }
4406:FreeRTOS/tasks.c ****     }
4407:FreeRTOS/tasks.c **** 
4408:FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4409:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4410:FreeRTOS/tasks.c **** 
4411:FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4412:FreeRTOS/tasks.c **** 
4413:FreeRTOS/tasks.c ****     static char * prvWriteNameToBuffer( char * pcBuffer,
4414:FreeRTOS/tasks.c ****                                         const char * pcTaskName )
4415:FreeRTOS/tasks.c ****     {
4416:FreeRTOS/tasks.c ****         size_t x;
4417:FreeRTOS/tasks.c **** 
4418:FreeRTOS/tasks.c ****         /* Start by copying the entire string. */
4419:FreeRTOS/tasks.c ****         strcpy( pcBuffer, pcTaskName );
4420:FreeRTOS/tasks.c **** 
4421:FreeRTOS/tasks.c ****         /* Pad the end of the string with spaces to ensure columns line up when
4422:FreeRTOS/tasks.c ****          * printed out. */
4423:FreeRTOS/tasks.c ****         for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4424:FreeRTOS/tasks.c ****         {
4425:FreeRTOS/tasks.c ****             pcBuffer[ x ] = ' ';
4426:FreeRTOS/tasks.c ****         }
4427:FreeRTOS/tasks.c **** 
4428:FreeRTOS/tasks.c ****         /* Terminate. */
4429:FreeRTOS/tasks.c ****         pcBuffer[ x ] = ( char ) 0x00;
4430:FreeRTOS/tasks.c **** 
4431:FreeRTOS/tasks.c ****         /* Return the new end of string. */
4432:FreeRTOS/tasks.c ****         return &( pcBuffer[ x ] );
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 106


4433:FreeRTOS/tasks.c ****     }
4434:FreeRTOS/tasks.c **** 
4435:FreeRTOS/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4436:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4437:FreeRTOS/tasks.c **** 
4438:FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4439:FreeRTOS/tasks.c **** 
4440:FreeRTOS/tasks.c ****     void vTaskList( char * pcWriteBuffer )
4441:FreeRTOS/tasks.c ****     {
4442:FreeRTOS/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
4443:FreeRTOS/tasks.c ****         UBaseType_t uxArraySize, x;
4444:FreeRTOS/tasks.c ****         char cStatus;
4445:FreeRTOS/tasks.c **** 
4446:FreeRTOS/tasks.c ****         /*
4447:FreeRTOS/tasks.c ****          * PLEASE NOTE:
4448:FreeRTOS/tasks.c ****          *
4449:FreeRTOS/tasks.c ****          * This function is provided for convenience only, and is used by many
4450:FreeRTOS/tasks.c ****          * of the demo applications.  Do not consider it to be part of the
4451:FreeRTOS/tasks.c ****          * scheduler.
4452:FreeRTOS/tasks.c ****          *
4453:FreeRTOS/tasks.c ****          * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4454:FreeRTOS/tasks.c ****          * uxTaskGetSystemState() output into a human readable table that
4455:FreeRTOS/tasks.c ****          * displays task: names, states, priority, stack usage and task number.
4456:FreeRTOS/tasks.c ****          * Stack usage specified as the number of unused StackType_t words stack can hold
4457:FreeRTOS/tasks.c ****          * on top of stack - not the number of bytes.
4458:FreeRTOS/tasks.c ****          *
4459:FreeRTOS/tasks.c ****          * vTaskList() has a dependency on the sprintf() C library function that
4460:FreeRTOS/tasks.c ****          * might bloat the code size, use a lot of stack, and provide different
4461:FreeRTOS/tasks.c ****          * results on different platforms.  An alternative, tiny, third party,
4462:FreeRTOS/tasks.c ****          * and limited functionality implementation of sprintf() is provided in
4463:FreeRTOS/tasks.c ****          * many of the FreeRTOS/Demo sub-directories in a file called
4464:FreeRTOS/tasks.c ****          * printf-stdarg.c (note printf-stdarg.c does not provide a full
4465:FreeRTOS/tasks.c ****          * snprintf() implementation!).
4466:FreeRTOS/tasks.c ****          *
4467:FreeRTOS/tasks.c ****          * It is recommended that production systems call uxTaskGetSystemState()
4468:FreeRTOS/tasks.c ****          * directly to get access to raw stats data, rather than indirectly
4469:FreeRTOS/tasks.c ****          * through a call to vTaskList().
4470:FreeRTOS/tasks.c ****          */
4471:FreeRTOS/tasks.c **** 
4472:FreeRTOS/tasks.c **** 
4473:FreeRTOS/tasks.c ****         /* Make sure the write buffer does not contain a string. */
4474:FreeRTOS/tasks.c ****         *pcWriteBuffer = ( char ) 0x00;
4475:FreeRTOS/tasks.c **** 
4476:FreeRTOS/tasks.c ****         /* Take a snapshot of the number of tasks in case it changes while this
4477:FreeRTOS/tasks.c ****          * function is executing. */
4478:FreeRTOS/tasks.c ****         uxArraySize = uxCurrentNumberOfTasks;
4479:FreeRTOS/tasks.c **** 
4480:FreeRTOS/tasks.c ****         /* Allocate an array index for each task.  NOTE!  if
4481:FreeRTOS/tasks.c ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4482:FreeRTOS/tasks.c ****          * equate to NULL. */
4483:FreeRTOS/tasks.c ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint
4484:FreeRTOS/tasks.c **** 
4485:FreeRTOS/tasks.c ****         if( pxTaskStatusArray != NULL )
4486:FreeRTOS/tasks.c ****         {
4487:FreeRTOS/tasks.c ****             /* Generate the (binary) data. */
4488:FreeRTOS/tasks.c ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4489:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 107


4490:FreeRTOS/tasks.c ****             /* Create a human readable table from the binary data. */
4491:FreeRTOS/tasks.c ****             for( x = 0; x < uxArraySize; x++ )
4492:FreeRTOS/tasks.c ****             {
4493:FreeRTOS/tasks.c ****                 switch( pxTaskStatusArray[ x ].eCurrentState )
4494:FreeRTOS/tasks.c ****                 {
4495:FreeRTOS/tasks.c ****                     case eRunning:
4496:FreeRTOS/tasks.c ****                         cStatus = tskRUNNING_CHAR;
4497:FreeRTOS/tasks.c ****                         break;
4498:FreeRTOS/tasks.c **** 
4499:FreeRTOS/tasks.c ****                     case eReady:
4500:FreeRTOS/tasks.c ****                         cStatus = tskREADY_CHAR;
4501:FreeRTOS/tasks.c ****                         break;
4502:FreeRTOS/tasks.c **** 
4503:FreeRTOS/tasks.c ****                     case eBlocked:
4504:FreeRTOS/tasks.c ****                         cStatus = tskBLOCKED_CHAR;
4505:FreeRTOS/tasks.c ****                         break;
4506:FreeRTOS/tasks.c **** 
4507:FreeRTOS/tasks.c ****                     case eSuspended:
4508:FreeRTOS/tasks.c ****                         cStatus = tskSUSPENDED_CHAR;
4509:FreeRTOS/tasks.c ****                         break;
4510:FreeRTOS/tasks.c **** 
4511:FreeRTOS/tasks.c ****                     case eDeleted:
4512:FreeRTOS/tasks.c ****                         cStatus = tskDELETED_CHAR;
4513:FreeRTOS/tasks.c ****                         break;
4514:FreeRTOS/tasks.c **** 
4515:FreeRTOS/tasks.c ****                     case eInvalid: /* Fall through. */
4516:FreeRTOS/tasks.c ****                     default:       /* Should not get here, but it is included
4517:FreeRTOS/tasks.c ****                                     * to prevent static checking errors. */
4518:FreeRTOS/tasks.c ****                         cStatus = ( char ) 0x00;
4519:FreeRTOS/tasks.c ****                         break;
4520:FreeRTOS/tasks.c ****                 }
4521:FreeRTOS/tasks.c **** 
4522:FreeRTOS/tasks.c ****                 /* Write the task name to the string, padding with spaces so it
4523:FreeRTOS/tasks.c ****                  * can be printed in tabular form more easily. */
4524:FreeRTOS/tasks.c ****                 pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskN
4525:FreeRTOS/tasks.c **** 
4526:FreeRTOS/tasks.c ****                 /* Write the rest of the string. */
4527:FreeRTOS/tasks.c ****                 sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskSta
4528:FreeRTOS/tasks.c ****                 pcWriteBuffer += strlen( pcWriteBuffer );                                          
4529:FreeRTOS/tasks.c ****             }
4530:FreeRTOS/tasks.c **** 
4531:FreeRTOS/tasks.c ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4532:FreeRTOS/tasks.c ****              * is 0 then vPortFree() will be #defined to nothing. */
4533:FreeRTOS/tasks.c ****             vPortFree( pxTaskStatusArray );
4534:FreeRTOS/tasks.c ****         }
4535:FreeRTOS/tasks.c ****         else
4536:FreeRTOS/tasks.c ****         {
4537:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4538:FreeRTOS/tasks.c ****         }
4539:FreeRTOS/tasks.c ****     }
4540:FreeRTOS/tasks.c **** 
4541:FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4542:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
4543:FreeRTOS/tasks.c **** 
4544:FreeRTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4545:FreeRTOS/tasks.c **** 
4546:FreeRTOS/tasks.c ****     void vTaskGetRunTimeStats( char * pcWriteBuffer )
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 108


4547:FreeRTOS/tasks.c ****     {
4548:FreeRTOS/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
4549:FreeRTOS/tasks.c ****         UBaseType_t uxArraySize, x;
4550:FreeRTOS/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulTotalTime, ulStatsAsPercentage;
4551:FreeRTOS/tasks.c **** 
4552:FreeRTOS/tasks.c ****         #if ( configUSE_TRACE_FACILITY != 1 )
4553:FreeRTOS/tasks.c ****             {
4554:FreeRTOS/tasks.c ****                 #error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vT
4555:FreeRTOS/tasks.c ****             }
4556:FreeRTOS/tasks.c ****         #endif
4557:FreeRTOS/tasks.c **** 
4558:FreeRTOS/tasks.c ****         /*
4559:FreeRTOS/tasks.c ****          * PLEASE NOTE:
4560:FreeRTOS/tasks.c ****          *
4561:FreeRTOS/tasks.c ****          * This function is provided for convenience only, and is used by many
4562:FreeRTOS/tasks.c ****          * of the demo applications.  Do not consider it to be part of the
4563:FreeRTOS/tasks.c ****          * scheduler.
4564:FreeRTOS/tasks.c ****          *
4565:FreeRTOS/tasks.c ****          * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4566:FreeRTOS/tasks.c ****          * of the uxTaskGetSystemState() output into a human readable table that
4567:FreeRTOS/tasks.c ****          * displays the amount of time each task has spent in the Running state
4568:FreeRTOS/tasks.c ****          * in both absolute and percentage terms.
4569:FreeRTOS/tasks.c ****          *
4570:FreeRTOS/tasks.c ****          * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4571:FreeRTOS/tasks.c ****          * function that might bloat the code size, use a lot of stack, and
4572:FreeRTOS/tasks.c ****          * provide different results on different platforms.  An alternative,
4573:FreeRTOS/tasks.c ****          * tiny, third party, and limited functionality implementation of
4574:FreeRTOS/tasks.c ****          * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4575:FreeRTOS/tasks.c ****          * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4576:FreeRTOS/tasks.c ****          * a full snprintf() implementation!).
4577:FreeRTOS/tasks.c ****          *
4578:FreeRTOS/tasks.c ****          * It is recommended that production systems call uxTaskGetSystemState()
4579:FreeRTOS/tasks.c ****          * directly to get access to raw stats data, rather than indirectly
4580:FreeRTOS/tasks.c ****          * through a call to vTaskGetRunTimeStats().
4581:FreeRTOS/tasks.c ****          */
4582:FreeRTOS/tasks.c **** 
4583:FreeRTOS/tasks.c ****         /* Make sure the write buffer does not contain a string. */
4584:FreeRTOS/tasks.c ****         *pcWriteBuffer = ( char ) 0x00;
4585:FreeRTOS/tasks.c **** 
4586:FreeRTOS/tasks.c ****         /* Take a snapshot of the number of tasks in case it changes while this
4587:FreeRTOS/tasks.c ****          * function is executing. */
4588:FreeRTOS/tasks.c ****         uxArraySize = uxCurrentNumberOfTasks;
4589:FreeRTOS/tasks.c **** 
4590:FreeRTOS/tasks.c ****         /* Allocate an array index for each task.  NOTE!  If
4591:FreeRTOS/tasks.c ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4592:FreeRTOS/tasks.c ****          * equate to NULL. */
4593:FreeRTOS/tasks.c ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint
4594:FreeRTOS/tasks.c **** 
4595:FreeRTOS/tasks.c ****         if( pxTaskStatusArray != NULL )
4596:FreeRTOS/tasks.c ****         {
4597:FreeRTOS/tasks.c ****             /* Generate the (binary) data. */
4598:FreeRTOS/tasks.c ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4599:FreeRTOS/tasks.c **** 
4600:FreeRTOS/tasks.c ****             /* For percentage calculations. */
4601:FreeRTOS/tasks.c ****             ulTotalTime /= 100UL;
4602:FreeRTOS/tasks.c **** 
4603:FreeRTOS/tasks.c ****             /* Avoid divide by zero errors. */
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 109


4604:FreeRTOS/tasks.c ****             if( ulTotalTime > 0UL )
4605:FreeRTOS/tasks.c ****             {
4606:FreeRTOS/tasks.c ****                 /* Create a human readable table from the binary data. */
4607:FreeRTOS/tasks.c ****                 for( x = 0; x < uxArraySize; x++ )
4608:FreeRTOS/tasks.c ****                 {
4609:FreeRTOS/tasks.c ****                     /* What percentage of the total run time has the task used?
4610:FreeRTOS/tasks.c ****                      * This will always be rounded down to the nearest integer.
4611:FreeRTOS/tasks.c ****                      * ulTotalRunTime has already been divided by 100. */
4612:FreeRTOS/tasks.c ****                     ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4613:FreeRTOS/tasks.c **** 
4614:FreeRTOS/tasks.c ****                     /* Write the task name to the string, padding with
4615:FreeRTOS/tasks.c ****                      * spaces so it can be printed in tabular form more
4616:FreeRTOS/tasks.c ****                      * easily. */
4617:FreeRTOS/tasks.c ****                     pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcT
4618:FreeRTOS/tasks.c **** 
4619:FreeRTOS/tasks.c ****                     if( ulStatsAsPercentage > 0UL )
4620:FreeRTOS/tasks.c ****                     {
4621:FreeRTOS/tasks.c ****                         #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4622:FreeRTOS/tasks.c ****                             {
4623:FreeRTOS/tasks.c ****                                 sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x 
4624:FreeRTOS/tasks.c ****                             }
4625:FreeRTOS/tasks.c ****                         #else
4626:FreeRTOS/tasks.c ****                             {
4627:FreeRTOS/tasks.c ****                                 /* sizeof( int ) == sizeof( long ) so a smaller
4628:FreeRTOS/tasks.c ****                                  * printf() library can be used. */
4629:FreeRTOS/tasks.c ****                                 sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTask
4630:FreeRTOS/tasks.c ****                             }
4631:FreeRTOS/tasks.c ****                         #endif
4632:FreeRTOS/tasks.c ****                     }
4633:FreeRTOS/tasks.c ****                     else
4634:FreeRTOS/tasks.c ****                     {
4635:FreeRTOS/tasks.c ****                         /* If the percentage is zero here then the task has
4636:FreeRTOS/tasks.c ****                          * consumed less than 1% of the total run time. */
4637:FreeRTOS/tasks.c ****                         #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4638:FreeRTOS/tasks.c ****                             {
4639:FreeRTOS/tasks.c ****                                 sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ]
4640:FreeRTOS/tasks.c ****                             }
4641:FreeRTOS/tasks.c ****                         #else
4642:FreeRTOS/tasks.c ****                             {
4643:FreeRTOS/tasks.c ****                                 /* sizeof( int ) == sizeof( long ) so a smaller
4644:FreeRTOS/tasks.c ****                                  * printf() library can be used. */
4645:FreeRTOS/tasks.c ****                                 sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTask
4646:FreeRTOS/tasks.c ****                             }
4647:FreeRTOS/tasks.c ****                         #endif
4648:FreeRTOS/tasks.c ****                     }
4649:FreeRTOS/tasks.c **** 
4650:FreeRTOS/tasks.c ****                     pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok o
4651:FreeRTOS/tasks.c ****                 }
4652:FreeRTOS/tasks.c ****             }
4653:FreeRTOS/tasks.c ****             else
4654:FreeRTOS/tasks.c ****             {
4655:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4656:FreeRTOS/tasks.c ****             }
4657:FreeRTOS/tasks.c **** 
4658:FreeRTOS/tasks.c ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4659:FreeRTOS/tasks.c ****              * is 0 then vPortFree() will be #defined to nothing. */
4660:FreeRTOS/tasks.c ****             vPortFree( pxTaskStatusArray );
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 110


4661:FreeRTOS/tasks.c ****         }
4662:FreeRTOS/tasks.c ****         else
4663:FreeRTOS/tasks.c ****         {
4664:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4665:FreeRTOS/tasks.c ****         }
4666:FreeRTOS/tasks.c ****     }
4667:FreeRTOS/tasks.c **** 
4668:FreeRTOS/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4669:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4670:FreeRTOS/tasks.c **** 
4671:FreeRTOS/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4672:FreeRTOS/tasks.c **** {
4673:FreeRTOS/tasks.c ****     TickType_t uxReturn;
4674:FreeRTOS/tasks.c **** 
4675:FreeRTOS/tasks.c ****     uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4676:FreeRTOS/tasks.c **** 
4677:FreeRTOS/tasks.c ****     /* Reset the event list item to its normal value - so it can be used with
4678:FreeRTOS/tasks.c ****      * queues and semaphores. */
4679:FreeRTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITI
4680:FreeRTOS/tasks.c **** 
4681:FreeRTOS/tasks.c ****     return uxReturn;
4682:FreeRTOS/tasks.c **** }
4683:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4684:FreeRTOS/tasks.c **** 
4685:FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4686:FreeRTOS/tasks.c **** 
4687:FreeRTOS/tasks.c ****     TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4688:FreeRTOS/tasks.c ****     {
4689:FreeRTOS/tasks.c ****         /* If xSemaphoreCreateMutex() is called before any tasks have been created
4690:FreeRTOS/tasks.c ****          * then pxCurrentTCB will be NULL. */
4691:FreeRTOS/tasks.c ****         if( pxCurrentTCB != NULL )
4692:FreeRTOS/tasks.c ****         {
4693:FreeRTOS/tasks.c ****             ( pxCurrentTCB->uxMutexesHeld )++;
4694:FreeRTOS/tasks.c ****         }
4695:FreeRTOS/tasks.c **** 
4696:FreeRTOS/tasks.c ****         return pxCurrentTCB;
4697:FreeRTOS/tasks.c ****     }
4698:FreeRTOS/tasks.c **** 
4699:FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4700:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4701:FreeRTOS/tasks.c **** 
4702:FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4703:FreeRTOS/tasks.c **** 
4704:FreeRTOS/tasks.c ****     uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
4705:FreeRTOS/tasks.c ****                                       BaseType_t xClearCountOnExit,
4706:FreeRTOS/tasks.c ****                                       TickType_t xTicksToWait )
4707:FreeRTOS/tasks.c ****     {
4708:FreeRTOS/tasks.c ****         uint32_t ulReturn;
4709:FreeRTOS/tasks.c **** 
4710:FreeRTOS/tasks.c ****         configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4711:FreeRTOS/tasks.c **** 
4712:FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
4713:FreeRTOS/tasks.c ****         {
4714:FreeRTOS/tasks.c ****             /* Only block if the notification count is not already non-zero. */
4715:FreeRTOS/tasks.c ****             if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
4716:FreeRTOS/tasks.c ****             {
4717:FreeRTOS/tasks.c ****                 /* Mark this task as waiting for a notification. */
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 111


4718:FreeRTOS/tasks.c ****                 pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
4719:FreeRTOS/tasks.c **** 
4720:FreeRTOS/tasks.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
4721:FreeRTOS/tasks.c ****                 {
4722:FreeRTOS/tasks.c ****                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4723:FreeRTOS/tasks.c ****                     traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWait );
4724:FreeRTOS/tasks.c **** 
4725:FreeRTOS/tasks.c ****                     /* All ports are written to allow a yield in a critical
4726:FreeRTOS/tasks.c ****                      * section (some will yield immediately, others wait until the
4727:FreeRTOS/tasks.c ****                      * critical section exits) - but it is not something that
4728:FreeRTOS/tasks.c ****                      * application code should ever do. */
4729:FreeRTOS/tasks.c ****                     portYIELD_WITHIN_API();
4730:FreeRTOS/tasks.c ****                 }
4731:FreeRTOS/tasks.c ****                 else
4732:FreeRTOS/tasks.c ****                 {
4733:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4734:FreeRTOS/tasks.c ****                 }
4735:FreeRTOS/tasks.c ****             }
4736:FreeRTOS/tasks.c ****             else
4737:FreeRTOS/tasks.c ****             {
4738:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4739:FreeRTOS/tasks.c ****             }
4740:FreeRTOS/tasks.c ****         }
4741:FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
4742:FreeRTOS/tasks.c **** 
4743:FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
4744:FreeRTOS/tasks.c ****         {
4745:FreeRTOS/tasks.c ****             traceTASK_NOTIFY_TAKE( uxIndexToWait );
4746:FreeRTOS/tasks.c ****             ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
4747:FreeRTOS/tasks.c **** 
4748:FreeRTOS/tasks.c ****             if( ulReturn != 0UL )
4749:FreeRTOS/tasks.c ****             {
4750:FreeRTOS/tasks.c ****                 if( xClearCountOnExit != pdFALSE )
4751:FreeRTOS/tasks.c ****                 {
4752:FreeRTOS/tasks.c ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
4753:FreeRTOS/tasks.c ****                 }
4754:FreeRTOS/tasks.c ****                 else
4755:FreeRTOS/tasks.c ****                 {
4756:FreeRTOS/tasks.c ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
4757:FreeRTOS/tasks.c ****                 }
4758:FreeRTOS/tasks.c ****             }
4759:FreeRTOS/tasks.c ****             else
4760:FreeRTOS/tasks.c ****             {
4761:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4762:FreeRTOS/tasks.c ****             }
4763:FreeRTOS/tasks.c **** 
4764:FreeRTOS/tasks.c ****             pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
4765:FreeRTOS/tasks.c ****         }
4766:FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
4767:FreeRTOS/tasks.c **** 
4768:FreeRTOS/tasks.c ****         return ulReturn;
4769:FreeRTOS/tasks.c ****     }
4770:FreeRTOS/tasks.c **** 
4771:FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4772:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4773:FreeRTOS/tasks.c **** 
4774:FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 112


4775:FreeRTOS/tasks.c **** 
4776:FreeRTOS/tasks.c ****     BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
4777:FreeRTOS/tasks.c ****                                        uint32_t ulBitsToClearOnEntry,
4778:FreeRTOS/tasks.c ****                                        uint32_t ulBitsToClearOnExit,
4779:FreeRTOS/tasks.c ****                                        uint32_t * pulNotificationValue,
4780:FreeRTOS/tasks.c ****                                        TickType_t xTicksToWait )
4781:FreeRTOS/tasks.c ****     {
4782:FreeRTOS/tasks.c ****         BaseType_t xReturn;
4783:FreeRTOS/tasks.c **** 
4784:FreeRTOS/tasks.c ****         configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4785:FreeRTOS/tasks.c **** 
4786:FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
4787:FreeRTOS/tasks.c ****         {
4788:FreeRTOS/tasks.c ****             /* Only block if a notification is not already pending. */
4789:FreeRTOS/tasks.c ****             if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
4790:FreeRTOS/tasks.c ****             {
4791:FreeRTOS/tasks.c ****                 /* Clear bits in the task's notification value as bits may get
4792:FreeRTOS/tasks.c ****                  * set  by the notifying task or interrupt.  This can be used to
4793:FreeRTOS/tasks.c ****                  * clear the value to zero. */
4794:FreeRTOS/tasks.c ****                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
4795:FreeRTOS/tasks.c **** 
4796:FreeRTOS/tasks.c ****                 /* Mark this task as waiting for a notification. */
4797:FreeRTOS/tasks.c ****                 pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
4798:FreeRTOS/tasks.c **** 
4799:FreeRTOS/tasks.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
4800:FreeRTOS/tasks.c ****                 {
4801:FreeRTOS/tasks.c ****                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4802:FreeRTOS/tasks.c ****                     traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWait );
4803:FreeRTOS/tasks.c **** 
4804:FreeRTOS/tasks.c ****                     /* All ports are written to allow a yield in a critical
4805:FreeRTOS/tasks.c ****                      * section (some will yield immediately, others wait until the
4806:FreeRTOS/tasks.c ****                      * critical section exits) - but it is not something that
4807:FreeRTOS/tasks.c ****                      * application code should ever do. */
4808:FreeRTOS/tasks.c ****                     portYIELD_WITHIN_API();
4809:FreeRTOS/tasks.c ****                 }
4810:FreeRTOS/tasks.c ****                 else
4811:FreeRTOS/tasks.c ****                 {
4812:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4813:FreeRTOS/tasks.c ****                 }
4814:FreeRTOS/tasks.c ****             }
4815:FreeRTOS/tasks.c ****             else
4816:FreeRTOS/tasks.c ****             {
4817:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4818:FreeRTOS/tasks.c ****             }
4819:FreeRTOS/tasks.c ****         }
4820:FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
4821:FreeRTOS/tasks.c **** 
4822:FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
4823:FreeRTOS/tasks.c ****         {
4824:FreeRTOS/tasks.c ****             traceTASK_NOTIFY_WAIT( uxIndexToWait );
4825:FreeRTOS/tasks.c **** 
4826:FreeRTOS/tasks.c ****             if( pulNotificationValue != NULL )
4827:FreeRTOS/tasks.c ****             {
4828:FreeRTOS/tasks.c ****                 /* Output the current notification value, which may or may not
4829:FreeRTOS/tasks.c ****                  * have changed. */
4830:FreeRTOS/tasks.c ****                 *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
4831:FreeRTOS/tasks.c ****             }
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 113


4832:FreeRTOS/tasks.c **** 
4833:FreeRTOS/tasks.c ****             /* If ucNotifyValue is set then either the task never entered the
4834:FreeRTOS/tasks.c ****              * blocked state (because a notification was already pending) or the
4835:FreeRTOS/tasks.c ****              * task unblocked because of a notification.  Otherwise the task
4836:FreeRTOS/tasks.c ****              * unblocked because of a timeout. */
4837:FreeRTOS/tasks.c ****             if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
4838:FreeRTOS/tasks.c ****             {
4839:FreeRTOS/tasks.c ****                 /* A notification was not received. */
4840:FreeRTOS/tasks.c ****                 xReturn = pdFALSE;
4841:FreeRTOS/tasks.c ****             }
4842:FreeRTOS/tasks.c ****             else
4843:FreeRTOS/tasks.c ****             {
4844:FreeRTOS/tasks.c ****                 /* A notification was already pending or a notification was
4845:FreeRTOS/tasks.c ****                  * received while the task was waiting. */
4846:FreeRTOS/tasks.c ****                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
4847:FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
4848:FreeRTOS/tasks.c ****             }
4849:FreeRTOS/tasks.c **** 
4850:FreeRTOS/tasks.c ****             pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
4851:FreeRTOS/tasks.c ****         }
4852:FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
4853:FreeRTOS/tasks.c **** 
4854:FreeRTOS/tasks.c ****         return xReturn;
4855:FreeRTOS/tasks.c ****     }
4856:FreeRTOS/tasks.c **** 
4857:FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4858:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4859:FreeRTOS/tasks.c **** 
4860:FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4861:FreeRTOS/tasks.c **** 
4862:FreeRTOS/tasks.c ****     BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
4863:FreeRTOS/tasks.c ****                                    UBaseType_t uxIndexToNotify,
4864:FreeRTOS/tasks.c ****                                    uint32_t ulValue,
4865:FreeRTOS/tasks.c ****                                    eNotifyAction eAction,
4866:FreeRTOS/tasks.c ****                                    uint32_t * pulPreviousNotificationValue )
4867:FreeRTOS/tasks.c ****     {
4868:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
4869:FreeRTOS/tasks.c ****         BaseType_t xReturn = pdPASS;
4870:FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
4871:FreeRTOS/tasks.c **** 
4872:FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4873:FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
4874:FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
4875:FreeRTOS/tasks.c **** 
4876:FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
4877:FreeRTOS/tasks.c ****         {
4878:FreeRTOS/tasks.c ****             if( pulPreviousNotificationValue != NULL )
4879:FreeRTOS/tasks.c ****             {
4880:FreeRTOS/tasks.c ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
4881:FreeRTOS/tasks.c ****             }
4882:FreeRTOS/tasks.c **** 
4883:FreeRTOS/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
4884:FreeRTOS/tasks.c **** 
4885:FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
4886:FreeRTOS/tasks.c **** 
4887:FreeRTOS/tasks.c ****             switch( eAction )
4888:FreeRTOS/tasks.c ****             {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 114


4889:FreeRTOS/tasks.c ****                 case eSetBits:
4890:FreeRTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
4891:FreeRTOS/tasks.c ****                     break;
4892:FreeRTOS/tasks.c **** 
4893:FreeRTOS/tasks.c ****                 case eIncrement:
4894:FreeRTOS/tasks.c ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
4895:FreeRTOS/tasks.c ****                     break;
4896:FreeRTOS/tasks.c **** 
4897:FreeRTOS/tasks.c ****                 case eSetValueWithOverwrite:
4898:FreeRTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
4899:FreeRTOS/tasks.c ****                     break;
4900:FreeRTOS/tasks.c **** 
4901:FreeRTOS/tasks.c ****                 case eSetValueWithoutOverwrite:
4902:FreeRTOS/tasks.c **** 
4903:FreeRTOS/tasks.c ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4904:FreeRTOS/tasks.c ****                     {
4905:FreeRTOS/tasks.c ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
4906:FreeRTOS/tasks.c ****                     }
4907:FreeRTOS/tasks.c ****                     else
4908:FreeRTOS/tasks.c ****                     {
4909:FreeRTOS/tasks.c ****                         /* The value could not be written to the task. */
4910:FreeRTOS/tasks.c ****                         xReturn = pdFAIL;
4911:FreeRTOS/tasks.c ****                     }
4912:FreeRTOS/tasks.c **** 
4913:FreeRTOS/tasks.c ****                     break;
4914:FreeRTOS/tasks.c **** 
4915:FreeRTOS/tasks.c ****                 case eNoAction:
4916:FreeRTOS/tasks.c **** 
4917:FreeRTOS/tasks.c ****                     /* The task is being notified without its notify value being
4918:FreeRTOS/tasks.c ****                      * updated. */
4919:FreeRTOS/tasks.c ****                     break;
4920:FreeRTOS/tasks.c **** 
4921:FreeRTOS/tasks.c ****                 default:
4922:FreeRTOS/tasks.c **** 
4923:FreeRTOS/tasks.c ****                     /* Should not get here if all enums are handled.
4924:FreeRTOS/tasks.c ****                      * Artificially force an assert by testing a value the
4925:FreeRTOS/tasks.c ****                      * compiler can't assume is const. */
4926:FreeRTOS/tasks.c ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
4927:FreeRTOS/tasks.c **** 
4928:FreeRTOS/tasks.c ****                     break;
4929:FreeRTOS/tasks.c ****             }
4930:FreeRTOS/tasks.c **** 
4931:FreeRTOS/tasks.c ****             traceTASK_NOTIFY( uxIndexToNotify );
4932:FreeRTOS/tasks.c **** 
4933:FreeRTOS/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
4934:FreeRTOS/tasks.c ****              * notification then unblock it now. */
4935:FreeRTOS/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4936:FreeRTOS/tasks.c ****             {
4937:FreeRTOS/tasks.c ****                 listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
4938:FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
4939:FreeRTOS/tasks.c **** 
4940:FreeRTOS/tasks.c ****                 /* The task should not have been on an event list. */
4941:FreeRTOS/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4942:FreeRTOS/tasks.c **** 
4943:FreeRTOS/tasks.c ****                 #if ( configUSE_TICKLESS_IDLE != 0 )
4944:FreeRTOS/tasks.c ****                     {
4945:FreeRTOS/tasks.c ****                         /* If a task is blocked waiting for a notification then
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 115


4946:FreeRTOS/tasks.c ****                          * xNextTaskUnblockTime might be set to the blocked task's time
4947:FreeRTOS/tasks.c ****                          * out time.  If the task is unblocked for a reason other than
4948:FreeRTOS/tasks.c ****                          * a timeout xNextTaskUnblockTime is normally left unchanged,
4949:FreeRTOS/tasks.c ****                          * because it will automatically get reset to a new value when
4950:FreeRTOS/tasks.c ****                          * the tick count equals xNextTaskUnblockTime.  However if
4951:FreeRTOS/tasks.c ****                          * tickless idling is used it might be more important to enter
4952:FreeRTOS/tasks.c ****                          * sleep mode at the earliest possible time - so reset
4953:FreeRTOS/tasks.c ****                          * xNextTaskUnblockTime here to ensure it is updated at the
4954:FreeRTOS/tasks.c ****                          * earliest possible time. */
4955:FreeRTOS/tasks.c ****                         prvResetNextTaskUnblockTime();
4956:FreeRTOS/tasks.c ****                     }
4957:FreeRTOS/tasks.c ****                 #endif
4958:FreeRTOS/tasks.c **** 
4959:FreeRTOS/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4960:FreeRTOS/tasks.c ****                 {
4961:FreeRTOS/tasks.c ****                     /* The notified task has a priority above the currently
4962:FreeRTOS/tasks.c ****                      * executing task so a yield is required. */
4963:FreeRTOS/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
4964:FreeRTOS/tasks.c ****                 }
4965:FreeRTOS/tasks.c ****                 else
4966:FreeRTOS/tasks.c ****                 {
4967:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4968:FreeRTOS/tasks.c ****                 }
4969:FreeRTOS/tasks.c ****             }
4970:FreeRTOS/tasks.c ****             else
4971:FreeRTOS/tasks.c ****             {
4972:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4973:FreeRTOS/tasks.c ****             }
4974:FreeRTOS/tasks.c ****         }
4975:FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
4976:FreeRTOS/tasks.c **** 
4977:FreeRTOS/tasks.c ****         return xReturn;
4978:FreeRTOS/tasks.c ****     }
4979:FreeRTOS/tasks.c **** 
4980:FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4981:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4982:FreeRTOS/tasks.c **** 
4983:FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4984:FreeRTOS/tasks.c **** 
4985:FreeRTOS/tasks.c ****     BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify,
4986:FreeRTOS/tasks.c ****                                           UBaseType_t uxIndexToNotify,
4987:FreeRTOS/tasks.c ****                                           uint32_t ulValue,
4988:FreeRTOS/tasks.c ****                                           eNotifyAction eAction,
4989:FreeRTOS/tasks.c ****                                           uint32_t * pulPreviousNotificationValue,
4990:FreeRTOS/tasks.c ****                                           BaseType_t * pxHigherPriorityTaskWoken )
4991:FreeRTOS/tasks.c ****     {
4992:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
4993:FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
4994:FreeRTOS/tasks.c ****         BaseType_t xReturn = pdPASS;
4995:FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
4996:FreeRTOS/tasks.c **** 
4997:FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
4998:FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4999:FreeRTOS/tasks.c **** 
5000:FreeRTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
5001:FreeRTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
5002:FreeRTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 116


5003:FreeRTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
5004:FreeRTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5005:FreeRTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
5006:FreeRTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5007:FreeRTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
5008:FreeRTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
5009:FreeRTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
5010:FreeRTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
5011:FreeRTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
5012:FreeRTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
5013:FreeRTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
5014:FreeRTOS/tasks.c ****          * provided on the following link:
5015:FreeRTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
5016:FreeRTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
5017:FreeRTOS/tasks.c **** 
5018:FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
5019:FreeRTOS/tasks.c **** 
5020:FreeRTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
5021:FreeRTOS/tasks.c ****         {
5022:FreeRTOS/tasks.c ****             if( pulPreviousNotificationValue != NULL )
5023:FreeRTOS/tasks.c ****             {
5024:FreeRTOS/tasks.c ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
5025:FreeRTOS/tasks.c ****             }
5026:FreeRTOS/tasks.c **** 
5027:FreeRTOS/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
5028:FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
5029:FreeRTOS/tasks.c **** 
5030:FreeRTOS/tasks.c ****             switch( eAction )
5031:FreeRTOS/tasks.c ****             {
5032:FreeRTOS/tasks.c ****                 case eSetBits:
5033:FreeRTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
5034:FreeRTOS/tasks.c ****                     break;
5035:FreeRTOS/tasks.c **** 
5036:FreeRTOS/tasks.c ****                 case eIncrement:
5037:FreeRTOS/tasks.c ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
5038:FreeRTOS/tasks.c ****                     break;
5039:FreeRTOS/tasks.c **** 
5040:FreeRTOS/tasks.c ****                 case eSetValueWithOverwrite:
5041:FreeRTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
5042:FreeRTOS/tasks.c ****                     break;
5043:FreeRTOS/tasks.c **** 
5044:FreeRTOS/tasks.c ****                 case eSetValueWithoutOverwrite:
5045:FreeRTOS/tasks.c **** 
5046:FreeRTOS/tasks.c ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
5047:FreeRTOS/tasks.c ****                     {
5048:FreeRTOS/tasks.c ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
5049:FreeRTOS/tasks.c ****                     }
5050:FreeRTOS/tasks.c ****                     else
5051:FreeRTOS/tasks.c ****                     {
5052:FreeRTOS/tasks.c ****                         /* The value could not be written to the task. */
5053:FreeRTOS/tasks.c ****                         xReturn = pdFAIL;
5054:FreeRTOS/tasks.c ****                     }
5055:FreeRTOS/tasks.c **** 
5056:FreeRTOS/tasks.c ****                     break;
5057:FreeRTOS/tasks.c **** 
5058:FreeRTOS/tasks.c ****                 case eNoAction:
5059:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 117


5060:FreeRTOS/tasks.c ****                     /* The task is being notified without its notify value being
5061:FreeRTOS/tasks.c ****                      * updated. */
5062:FreeRTOS/tasks.c ****                     break;
5063:FreeRTOS/tasks.c **** 
5064:FreeRTOS/tasks.c ****                 default:
5065:FreeRTOS/tasks.c **** 
5066:FreeRTOS/tasks.c ****                     /* Should not get here if all enums are handled.
5067:FreeRTOS/tasks.c ****                      * Artificially force an assert by testing a value the
5068:FreeRTOS/tasks.c ****                      * compiler can't assume is const. */
5069:FreeRTOS/tasks.c ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
5070:FreeRTOS/tasks.c ****                     break;
5071:FreeRTOS/tasks.c ****             }
5072:FreeRTOS/tasks.c **** 
5073:FreeRTOS/tasks.c ****             traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );
5074:FreeRTOS/tasks.c **** 
5075:FreeRTOS/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
5076:FreeRTOS/tasks.c ****              * notification then unblock it now. */
5077:FreeRTOS/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
5078:FreeRTOS/tasks.c ****             {
5079:FreeRTOS/tasks.c ****                 /* The task should not have been on an event list. */
5080:FreeRTOS/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5081:FreeRTOS/tasks.c **** 
5082:FreeRTOS/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5083:FreeRTOS/tasks.c ****                 {
5084:FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
5085:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
5086:FreeRTOS/tasks.c ****                 }
5087:FreeRTOS/tasks.c ****                 else
5088:FreeRTOS/tasks.c ****                 {
5089:FreeRTOS/tasks.c ****                     /* The delayed and ready lists cannot be accessed, so hold
5090:FreeRTOS/tasks.c ****                      * this task pending until the scheduler is resumed. */
5091:FreeRTOS/tasks.c ****                     listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5092:FreeRTOS/tasks.c ****                 }
5093:FreeRTOS/tasks.c **** 
5094:FreeRTOS/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5095:FreeRTOS/tasks.c ****                 {
5096:FreeRTOS/tasks.c ****                     /* The notified task has a priority above the currently
5097:FreeRTOS/tasks.c ****                      * executing task so a yield is required. */
5098:FreeRTOS/tasks.c ****                     if( pxHigherPriorityTaskWoken != NULL )
5099:FreeRTOS/tasks.c ****                     {
5100:FreeRTOS/tasks.c ****                         *pxHigherPriorityTaskWoken = pdTRUE;
5101:FreeRTOS/tasks.c ****                     }
5102:FreeRTOS/tasks.c **** 
5103:FreeRTOS/tasks.c ****                     /* Mark that a yield is pending in case the user is not
5104:FreeRTOS/tasks.c ****                      * using the "xHigherPriorityTaskWoken" parameter to an ISR
5105:FreeRTOS/tasks.c ****                      * safe FreeRTOS function. */
5106:FreeRTOS/tasks.c ****                     xYieldPending = pdTRUE;
5107:FreeRTOS/tasks.c ****                 }
5108:FreeRTOS/tasks.c ****                 else
5109:FreeRTOS/tasks.c ****                 {
5110:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5111:FreeRTOS/tasks.c ****                 }
5112:FreeRTOS/tasks.c ****             }
5113:FreeRTOS/tasks.c ****         }
5114:FreeRTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5115:FreeRTOS/tasks.c **** 
5116:FreeRTOS/tasks.c ****         return xReturn;
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 118


5117:FreeRTOS/tasks.c ****     }
5118:FreeRTOS/tasks.c **** 
5119:FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5120:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5121:FreeRTOS/tasks.c **** 
5122:FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5123:FreeRTOS/tasks.c **** 
5124:FreeRTOS/tasks.c ****     void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
5125:FreeRTOS/tasks.c ****                                         UBaseType_t uxIndexToNotify,
5126:FreeRTOS/tasks.c ****                                         BaseType_t * pxHigherPriorityTaskWoken )
5127:FreeRTOS/tasks.c ****     {
5128:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
5129:FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
5130:FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
5131:FreeRTOS/tasks.c **** 
5132:FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
5133:FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
5134:FreeRTOS/tasks.c **** 
5135:FreeRTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
5136:FreeRTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
5137:FreeRTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
5138:FreeRTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
5139:FreeRTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5140:FreeRTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
5141:FreeRTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5142:FreeRTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
5143:FreeRTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
5144:FreeRTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
5145:FreeRTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
5146:FreeRTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
5147:FreeRTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
5148:FreeRTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
5149:FreeRTOS/tasks.c ****          * provided on the following link:
5150:FreeRTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
5151:FreeRTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
5152:FreeRTOS/tasks.c **** 
5153:FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
5154:FreeRTOS/tasks.c **** 
5155:FreeRTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
5156:FreeRTOS/tasks.c ****         {
5157:FreeRTOS/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
5158:FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
5159:FreeRTOS/tasks.c **** 
5160:FreeRTOS/tasks.c ****             /* 'Giving' is equivalent to incrementing a count in a counting
5161:FreeRTOS/tasks.c ****              * semaphore. */
5162:FreeRTOS/tasks.c ****             ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
5163:FreeRTOS/tasks.c **** 
5164:FreeRTOS/tasks.c ****             traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );
5165:FreeRTOS/tasks.c **** 
5166:FreeRTOS/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
5167:FreeRTOS/tasks.c ****              * notification then unblock it now. */
5168:FreeRTOS/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
5169:FreeRTOS/tasks.c ****             {
5170:FreeRTOS/tasks.c ****                 /* The task should not have been on an event list. */
5171:FreeRTOS/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5172:FreeRTOS/tasks.c **** 
5173:FreeRTOS/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 119


5174:FreeRTOS/tasks.c ****                 {
5175:FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
5176:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
5177:FreeRTOS/tasks.c ****                 }
5178:FreeRTOS/tasks.c ****                 else
5179:FreeRTOS/tasks.c ****                 {
5180:FreeRTOS/tasks.c ****                     /* The delayed and ready lists cannot be accessed, so hold
5181:FreeRTOS/tasks.c ****                      * this task pending until the scheduler is resumed. */
5182:FreeRTOS/tasks.c ****                     listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5183:FreeRTOS/tasks.c ****                 }
5184:FreeRTOS/tasks.c **** 
5185:FreeRTOS/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5186:FreeRTOS/tasks.c ****                 {
5187:FreeRTOS/tasks.c ****                     /* The notified task has a priority above the currently
5188:FreeRTOS/tasks.c ****                      * executing task so a yield is required. */
5189:FreeRTOS/tasks.c ****                     if( pxHigherPriorityTaskWoken != NULL )
5190:FreeRTOS/tasks.c ****                     {
5191:FreeRTOS/tasks.c ****                         *pxHigherPriorityTaskWoken = pdTRUE;
5192:FreeRTOS/tasks.c ****                     }
5193:FreeRTOS/tasks.c **** 
5194:FreeRTOS/tasks.c ****                     /* Mark that a yield is pending in case the user is not
5195:FreeRTOS/tasks.c ****                      * using the "xHigherPriorityTaskWoken" parameter in an ISR
5196:FreeRTOS/tasks.c ****                      * safe FreeRTOS function. */
5197:FreeRTOS/tasks.c ****                     xYieldPending = pdTRUE;
5198:FreeRTOS/tasks.c ****                 }
5199:FreeRTOS/tasks.c ****                 else
5200:FreeRTOS/tasks.c ****                 {
5201:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5202:FreeRTOS/tasks.c ****                 }
5203:FreeRTOS/tasks.c ****             }
5204:FreeRTOS/tasks.c ****         }
5205:FreeRTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5206:FreeRTOS/tasks.c ****     }
5207:FreeRTOS/tasks.c **** 
5208:FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5209:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5210:FreeRTOS/tasks.c **** 
5211:FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5212:FreeRTOS/tasks.c **** 
5213:FreeRTOS/tasks.c ****     BaseType_t xTaskGenericNotifyStateClear( TaskHandle_t xTask,
5214:FreeRTOS/tasks.c ****                                              UBaseType_t uxIndexToClear )
5215:FreeRTOS/tasks.c ****     {
5216:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
5217:FreeRTOS/tasks.c ****         BaseType_t xReturn;
5218:FreeRTOS/tasks.c **** 
5219:FreeRTOS/tasks.c ****         configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
5220:FreeRTOS/tasks.c **** 
5221:FreeRTOS/tasks.c ****         /* If null is passed in here then it is the calling task that is having
5222:FreeRTOS/tasks.c ****          * its notification state cleared. */
5223:FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
5224:FreeRTOS/tasks.c **** 
5225:FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
5226:FreeRTOS/tasks.c ****         {
5227:FreeRTOS/tasks.c ****             if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
5228:FreeRTOS/tasks.c ****             {
5229:FreeRTOS/tasks.c ****                 pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
5230:FreeRTOS/tasks.c ****                 xReturn = pdPASS;
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 120


5231:FreeRTOS/tasks.c ****             }
5232:FreeRTOS/tasks.c ****             else
5233:FreeRTOS/tasks.c ****             {
5234:FreeRTOS/tasks.c ****                 xReturn = pdFAIL;
5235:FreeRTOS/tasks.c ****             }
5236:FreeRTOS/tasks.c ****         }
5237:FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
5238:FreeRTOS/tasks.c **** 
5239:FreeRTOS/tasks.c ****         return xReturn;
5240:FreeRTOS/tasks.c ****     }
5241:FreeRTOS/tasks.c **** 
5242:FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5243:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5244:FreeRTOS/tasks.c **** 
5245:FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5246:FreeRTOS/tasks.c **** 
5247:FreeRTOS/tasks.c ****     uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
5248:FreeRTOS/tasks.c ****                                             UBaseType_t uxIndexToClear,
5249:FreeRTOS/tasks.c ****                                             uint32_t ulBitsToClear )
5250:FreeRTOS/tasks.c ****     {
5251:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
5252:FreeRTOS/tasks.c ****         uint32_t ulReturn;
5253:FreeRTOS/tasks.c **** 
5254:FreeRTOS/tasks.c ****         /* If null is passed in here then it is the calling task that is having
5255:FreeRTOS/tasks.c ****          * its notification state cleared. */
5256:FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
5257:FreeRTOS/tasks.c **** 
5258:FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
5259:FreeRTOS/tasks.c ****         {
5260:FreeRTOS/tasks.c ****             /* Return the notification as it was before the bits were cleared,
5261:FreeRTOS/tasks.c ****              * then clear the bit mask. */
5262:FreeRTOS/tasks.c ****             ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
5263:FreeRTOS/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
5264:FreeRTOS/tasks.c ****         }
5265:FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
5266:FreeRTOS/tasks.c **** 
5267:FreeRTOS/tasks.c ****         return ulReturn;
5268:FreeRTOS/tasks.c ****     }
5269:FreeRTOS/tasks.c **** 
5270:FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5271:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5272:FreeRTOS/tasks.c **** 
5273:FreeRTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5274:FreeRTOS/tasks.c **** 
5275:FreeRTOS/tasks.c ****     configRUN_TIME_COUNTER_TYPE ulTaskGetIdleRunTimeCounter( void )
5276:FreeRTOS/tasks.c ****     {
5277:FreeRTOS/tasks.c ****         return xIdleTaskHandle->ulRunTimeCounter;
5278:FreeRTOS/tasks.c ****     }
5279:FreeRTOS/tasks.c **** 
5280:FreeRTOS/tasks.c **** #endif
5281:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5282:FreeRTOS/tasks.c **** 
5283:FreeRTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5284:FreeRTOS/tasks.c **** 
5285:FreeRTOS/tasks.c ****     configRUN_TIME_COUNTER_TYPE ulTaskGetIdleRunTimePercent( void )
5286:FreeRTOS/tasks.c ****     {
5287:FreeRTOS/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulTotalTime, ulReturn;
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 121


5288:FreeRTOS/tasks.c **** 
5289:FreeRTOS/tasks.c ****         ulTotalTime = portGET_RUN_TIME_COUNTER_VALUE();
5290:FreeRTOS/tasks.c **** 
5291:FreeRTOS/tasks.c ****         /* For percentage calculations. */
5292:FreeRTOS/tasks.c ****         ulTotalTime /= ( configRUN_TIME_COUNTER_TYPE ) 100;
5293:FreeRTOS/tasks.c **** 
5294:FreeRTOS/tasks.c ****         /* Avoid divide by zero errors. */
5295:FreeRTOS/tasks.c ****         if( ulTotalTime > ( configRUN_TIME_COUNTER_TYPE ) 0 )
5296:FreeRTOS/tasks.c ****         {
5297:FreeRTOS/tasks.c ****             ulReturn = xIdleTaskHandle->ulRunTimeCounter / ulTotalTime;
5298:FreeRTOS/tasks.c ****         }
5299:FreeRTOS/tasks.c ****         else
5300:FreeRTOS/tasks.c ****         {
5301:FreeRTOS/tasks.c ****             ulReturn = 0;
5302:FreeRTOS/tasks.c ****         }
5303:FreeRTOS/tasks.c **** 
5304:FreeRTOS/tasks.c ****         return ulReturn;
5305:FreeRTOS/tasks.c ****     }
5306:FreeRTOS/tasks.c **** 
5307:FreeRTOS/tasks.c **** #endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) 
5308:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5309:FreeRTOS/tasks.c **** 
5310:FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
5311:FreeRTOS/tasks.c ****                                             const BaseType_t xCanBlockIndefinitely )
5312:FreeRTOS/tasks.c **** {
 1139              		.loc 1 5312 1 is_stmt 1 view -0
 1140              		.cfi_startproc
 1141              		@ args = 0, pretend = 0, frame = 0
 1142              		@ frame_needed = 0, uses_anonymous_args = 0
 1143              		.loc 1 5312 1 is_stmt 0 view .LVU340
 1144 0000 70B5     		push	{r4, r5, r6, lr}
 1145              	.LCFI10:
 1146              		.cfi_def_cfa_offset 16
 1147              		.cfi_offset 4, -16
 1148              		.cfi_offset 5, -12
 1149              		.cfi_offset 6, -8
 1150              		.cfi_offset 14, -4
 1151 0002 0446     		mov	r4, r0
 1152 0004 0D46     		mov	r5, r1
5313:FreeRTOS/tasks.c ****     TickType_t xTimeToWake;
 1153              		.loc 1 5313 5 is_stmt 1 view .LVU341
5314:FreeRTOS/tasks.c ****     const TickType_t xConstTickCount = xTickCount;
 1154              		.loc 1 5314 5 view .LVU342
 1155              		.loc 1 5314 22 is_stmt 0 view .LVU343
 1156 0006 264B     		ldr	r3, .L99
 1157 0008 1E68     		ldr	r6, [r3]
 1158              	.LVL85:
5315:FreeRTOS/tasks.c **** 
5316:FreeRTOS/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
5317:FreeRTOS/tasks.c ****         {
5318:FreeRTOS/tasks.c ****             /* About to enter a delayed list, so ensure the ucDelayAborted flag is
5319:FreeRTOS/tasks.c ****              * reset to pdFALSE so it can be detected as having been set to pdTRUE
5320:FreeRTOS/tasks.c ****              * when the task leaves the Blocked state. */
5321:FreeRTOS/tasks.c ****             pxCurrentTCB->ucDelayAborted = pdFALSE;
 1159              		.loc 1 5321 13 is_stmt 1 view .LVU344
 1160              		.loc 1 5321 25 is_stmt 0 view .LVU345
 1161 000a 264B     		ldr	r3, .L99+4
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 122


 1162 000c 1A68     		ldr	r2, [r3]
 1163              		.loc 1 5321 42 view .LVU346
 1164 000e 0021     		movs	r1, #0
 1165              	.LVL86:
 1166              		.loc 1 5321 42 view .LVU347
 1167 0010 82F85610 		strb	r1, [r2, #86]
5322:FreeRTOS/tasks.c ****         }
5323:FreeRTOS/tasks.c ****     #endif
5324:FreeRTOS/tasks.c **** 
5325:FreeRTOS/tasks.c ****     /* Remove the task from the ready list before adding it to the blocked list
5326:FreeRTOS/tasks.c ****      * as the same list item is used for both lists. */
5327:FreeRTOS/tasks.c ****     if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1168              		.loc 1 5327 5 is_stmt 1 view .LVU348
 1169              		.loc 1 5327 38 is_stmt 0 view .LVU349
 1170 0014 1868     		ldr	r0, [r3]
 1171              	.LVL87:
 1172              		.loc 1 5327 9 view .LVU350
 1173 0016 0430     		adds	r0, r0, #4
 1174 0018 FFF7FEFF 		bl	uxListRemove
 1175              	.LVL88:
 1176              		.loc 1 5327 7 view .LVU351
 1177 001c 50B9     		cbnz	r0, .L93
5328:FreeRTOS/tasks.c ****     {
5329:FreeRTOS/tasks.c ****         /* The current task must be in a ready list, so there is no need to
5330:FreeRTOS/tasks.c ****          * check, and the port reset macro can be called directly. */
5331:FreeRTOS/tasks.c ****         portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCu
 1178              		.loc 1 5331 9 is_stmt 1 view .LVU352
 1179 001e 214B     		ldr	r3, .L99+4
 1180 0020 1B68     		ldr	r3, [r3]
 1181 0022 DA6A     		ldr	r2, [r3, #44]
 1182 0024 0123     		movs	r3, #1
 1183 0026 03FA02F2 		lsl	r2, r3, r2
 1184 002a 1F49     		ldr	r1, .L99+8
 1185 002c 0B68     		ldr	r3, [r1]
 1186 002e 23EA0203 		bic	r3, r3, r2
 1187 0032 0B60     		str	r3, [r1]
 1188              	.L93:
5332:FreeRTOS/tasks.c ****     }
5333:FreeRTOS/tasks.c ****     else
5334:FreeRTOS/tasks.c ****     {
5335:FreeRTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
 1189              		.loc 1 5335 33 view .LVU353
5336:FreeRTOS/tasks.c ****     }
5337:FreeRTOS/tasks.c **** 
5338:FreeRTOS/tasks.c ****     #if ( INCLUDE_vTaskSuspend == 1 )
5339:FreeRTOS/tasks.c ****         {
5340:FreeRTOS/tasks.c ****             if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 1190              		.loc 1 5340 13 view .LVU354
 1191              		.loc 1 5340 15 is_stmt 0 view .LVU355
 1192 0034 B4F1FF3F 		cmp	r4, #-1
 1193 0038 0DD0     		beq	.L98
 1194              	.L94:
5341:FreeRTOS/tasks.c ****             {
5342:FreeRTOS/tasks.c ****                 /* Add the task to the suspended task list instead of a delayed task
5343:FreeRTOS/tasks.c ****                  * list to ensure it is not woken by a timing event.  It will block
5344:FreeRTOS/tasks.c ****                  * indefinitely. */
5345:FreeRTOS/tasks.c ****                 listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 123


5346:FreeRTOS/tasks.c ****             }
5347:FreeRTOS/tasks.c ****             else
5348:FreeRTOS/tasks.c ****             {
5349:FreeRTOS/tasks.c ****                 /* Calculate the time at which the task should be woken if the event
5350:FreeRTOS/tasks.c ****                  * does not occur.  This may overflow but this doesn't matter, the
5351:FreeRTOS/tasks.c ****                  * kernel will manage it correctly. */
5352:FreeRTOS/tasks.c ****                 xTimeToWake = xConstTickCount + xTicksToWait;
 1195              		.loc 1 5352 17 is_stmt 1 view .LVU356
 1196              		.loc 1 5352 29 is_stmt 0 view .LVU357
 1197 003a 3444     		add	r4, r4, r6
 1198              	.LVL89:
5353:FreeRTOS/tasks.c **** 
5354:FreeRTOS/tasks.c ****                 /* The list item will be inserted in wake time order. */
5355:FreeRTOS/tasks.c ****                 listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 1199              		.loc 1 5355 17 is_stmt 1 view .LVU358
 1200 003c 194B     		ldr	r3, .L99+4
 1201 003e 1B68     		ldr	r3, [r3]
 1202 0040 5C60     		str	r4, [r3, #4]
5356:FreeRTOS/tasks.c **** 
5357:FreeRTOS/tasks.c ****                 if( xTimeToWake < xConstTickCount )
 1203              		.loc 1 5357 17 view .LVU359
 1204              		.loc 1 5357 19 is_stmt 0 view .LVU360
 1205 0042 A642     		cmp	r6, r4
 1206 0044 1DD9     		bls	.L96
5358:FreeRTOS/tasks.c ****                 {
5359:FreeRTOS/tasks.c ****                     /* Wake time has overflowed.  Place this item in the overflow
5360:FreeRTOS/tasks.c ****                      * list. */
5361:FreeRTOS/tasks.c ****                     vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 1207              		.loc 1 5361 21 is_stmt 1 view .LVU361
 1208 0046 194B     		ldr	r3, .L99+12
 1209 0048 1868     		ldr	r0, [r3]
 1210              		.loc 1 5361 76 is_stmt 0 view .LVU362
 1211 004a 164B     		ldr	r3, .L99+4
 1212 004c 1968     		ldr	r1, [r3]
 1213              		.loc 1 5361 21 view .LVU363
 1214 004e 0431     		adds	r1, r1, #4
 1215 0050 FFF7FEFF 		bl	vListInsert
 1216              	.LVL90:
 1217              	.L92:
5362:FreeRTOS/tasks.c ****                 }
5363:FreeRTOS/tasks.c ****                 else
5364:FreeRTOS/tasks.c ****                 {
5365:FreeRTOS/tasks.c ****                     /* The wake time has not overflowed, so the current block list
5366:FreeRTOS/tasks.c ****                      * is used. */
5367:FreeRTOS/tasks.c ****                     vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5368:FreeRTOS/tasks.c **** 
5369:FreeRTOS/tasks.c ****                     /* If the task entering the blocked state was placed at the
5370:FreeRTOS/tasks.c ****                      * head of the list of blocked tasks then xNextTaskUnblockTime
5371:FreeRTOS/tasks.c ****                      * needs to be updated too. */
5372:FreeRTOS/tasks.c ****                     if( xTimeToWake < xNextTaskUnblockTime )
5373:FreeRTOS/tasks.c ****                     {
5374:FreeRTOS/tasks.c ****                         xNextTaskUnblockTime = xTimeToWake;
5375:FreeRTOS/tasks.c ****                     }
5376:FreeRTOS/tasks.c ****                     else
5377:FreeRTOS/tasks.c ****                     {
5378:FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
5379:FreeRTOS/tasks.c ****                     }
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 124


5380:FreeRTOS/tasks.c ****                 }
5381:FreeRTOS/tasks.c ****             }
5382:FreeRTOS/tasks.c ****         }
5383:FreeRTOS/tasks.c ****     #else /* INCLUDE_vTaskSuspend */
5384:FreeRTOS/tasks.c ****         {
5385:FreeRTOS/tasks.c ****             /* Calculate the time at which the task should be woken if the event
5386:FreeRTOS/tasks.c ****              * does not occur.  This may overflow but this doesn't matter, the kernel
5387:FreeRTOS/tasks.c ****              * will manage it correctly. */
5388:FreeRTOS/tasks.c ****             xTimeToWake = xConstTickCount + xTicksToWait;
5389:FreeRTOS/tasks.c **** 
5390:FreeRTOS/tasks.c ****             /* The list item will be inserted in wake time order. */
5391:FreeRTOS/tasks.c ****             listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5392:FreeRTOS/tasks.c **** 
5393:FreeRTOS/tasks.c ****             if( xTimeToWake < xConstTickCount )
5394:FreeRTOS/tasks.c ****             {
5395:FreeRTOS/tasks.c ****                 /* Wake time has overflowed.  Place this item in the overflow list. */
5396:FreeRTOS/tasks.c ****                 vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5397:FreeRTOS/tasks.c ****             }
5398:FreeRTOS/tasks.c ****             else
5399:FreeRTOS/tasks.c ****             {
5400:FreeRTOS/tasks.c ****                 /* The wake time has not overflowed, so the current block list is used. */
5401:FreeRTOS/tasks.c ****                 vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5402:FreeRTOS/tasks.c **** 
5403:FreeRTOS/tasks.c ****                 /* If the task entering the blocked state was placed at the head of the
5404:FreeRTOS/tasks.c ****                  * list of blocked tasks then xNextTaskUnblockTime needs to be updated
5405:FreeRTOS/tasks.c ****                  * too. */
5406:FreeRTOS/tasks.c ****                 if( xTimeToWake < xNextTaskUnblockTime )
5407:FreeRTOS/tasks.c ****                 {
5408:FreeRTOS/tasks.c ****                     xNextTaskUnblockTime = xTimeToWake;
5409:FreeRTOS/tasks.c ****                 }
5410:FreeRTOS/tasks.c ****                 else
5411:FreeRTOS/tasks.c ****                 {
5412:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5413:FreeRTOS/tasks.c ****                 }
5414:FreeRTOS/tasks.c ****             }
5415:FreeRTOS/tasks.c **** 
5416:FreeRTOS/tasks.c ****             /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5417:FreeRTOS/tasks.c ****             ( void ) xCanBlockIndefinitely;
5418:FreeRTOS/tasks.c ****         }
5419:FreeRTOS/tasks.c ****     #endif /* INCLUDE_vTaskSuspend */
5420:FreeRTOS/tasks.c **** }
 1218              		.loc 1 5420 1 view .LVU364
 1219 0054 70BD     		pop	{r4, r5, r6, pc}
 1220              	.LVL91:
 1221              	.L98:
5340:FreeRTOS/tasks.c ****             {
 1222              		.loc 1 5340 51 discriminator 1 view .LVU365
 1223 0056 002D     		cmp	r5, #0
 1224 0058 EFD0     		beq	.L94
 1225              	.LBB188:
5345:FreeRTOS/tasks.c ****             }
 1226              		.loc 1 5345 17 is_stmt 1 view .LVU366
 1227 005a 154A     		ldr	r2, .L99+16
 1228 005c 5168     		ldr	r1, [r2, #4]
 1229              	.LVL92:
5345:FreeRTOS/tasks.c ****             }
 1230              		.loc 1 5345 17 view .LVU367
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 125


5345:FreeRTOS/tasks.c ****             }
 1231              		.loc 1 5345 17 view .LVU368
5345:FreeRTOS/tasks.c ****             }
 1232              		.loc 1 5345 17 view .LVU369
 1233 005e 114B     		ldr	r3, .L99+4
 1234 0060 1868     		ldr	r0, [r3]
 1235 0062 8160     		str	r1, [r0, #8]
5345:FreeRTOS/tasks.c ****             }
 1236              		.loc 1 5345 17 view .LVU370
 1237 0064 1868     		ldr	r0, [r3]
 1238 0066 8C68     		ldr	r4, [r1, #8]
 1239              	.LVL93:
5345:FreeRTOS/tasks.c ****             }
 1240              		.loc 1 5345 17 is_stmt 0 view .LVU371
 1241 0068 C460     		str	r4, [r0, #12]
5345:FreeRTOS/tasks.c ****             }
 1242              		.loc 1 5345 17 is_stmt 1 view .LVU372
 1243 006a 1868     		ldr	r0, [r3]
 1244 006c 0430     		adds	r0, r0, #4
 1245 006e 6060     		str	r0, [r4, #4]
5345:FreeRTOS/tasks.c ****             }
 1246              		.loc 1 5345 17 view .LVU373
 1247 0070 1868     		ldr	r0, [r3]
 1248 0072 0430     		adds	r0, r0, #4
 1249 0074 8860     		str	r0, [r1, #8]
5345:FreeRTOS/tasks.c ****             }
 1250              		.loc 1 5345 17 view .LVU374
 1251 0076 1B68     		ldr	r3, [r3]
 1252 0078 5A61     		str	r2, [r3, #20]
5345:FreeRTOS/tasks.c ****             }
 1253              		.loc 1 5345 17 view .LVU375
 1254 007a 1368     		ldr	r3, [r2]
 1255 007c 0133     		adds	r3, r3, #1
 1256 007e 1360     		str	r3, [r2]
 1257              	.LBE188:
5345:FreeRTOS/tasks.c ****             }
 1258              		.loc 1 5345 89 view .LVU376
5345:FreeRTOS/tasks.c ****             }
 1259              		.loc 1 5345 17 is_stmt 0 view .LVU377
 1260 0080 E8E7     		b	.L92
 1261              	.LVL94:
 1262              	.L96:
5367:FreeRTOS/tasks.c **** 
 1263              		.loc 1 5367 21 is_stmt 1 view .LVU378
 1264 0082 0C4B     		ldr	r3, .L99+20
 1265 0084 1868     		ldr	r0, [r3]
5367:FreeRTOS/tasks.c **** 
 1266              		.loc 1 5367 68 is_stmt 0 view .LVU379
 1267 0086 074B     		ldr	r3, .L99+4
 1268 0088 1968     		ldr	r1, [r3]
5367:FreeRTOS/tasks.c **** 
 1269              		.loc 1 5367 21 view .LVU380
 1270 008a 0431     		adds	r1, r1, #4
 1271 008c FFF7FEFF 		bl	vListInsert
 1272              	.LVL95:
5372:FreeRTOS/tasks.c ****                     {
 1273              		.loc 1 5372 21 is_stmt 1 view .LVU381
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 126


5372:FreeRTOS/tasks.c ****                     {
 1274              		.loc 1 5372 37 is_stmt 0 view .LVU382
 1275 0090 094B     		ldr	r3, .L99+24
 1276 0092 1B68     		ldr	r3, [r3]
5372:FreeRTOS/tasks.c ****                     {
 1277              		.loc 1 5372 23 view .LVU383
 1278 0094 A342     		cmp	r3, r4
 1279 0096 DDD9     		bls	.L92
5374:FreeRTOS/tasks.c ****                     }
 1280              		.loc 1 5374 25 is_stmt 1 view .LVU384
5374:FreeRTOS/tasks.c ****                     }
 1281              		.loc 1 5374 46 is_stmt 0 view .LVU385
 1282 0098 074B     		ldr	r3, .L99+24
 1283 009a 1C60     		str	r4, [r3]
5378:FreeRTOS/tasks.c ****                     }
 1284              		.loc 1 5378 49 is_stmt 1 view .LVU386
 1285              		.loc 1 5420 1 is_stmt 0 view .LVU387
 1286 009c DAE7     		b	.L92
 1287              	.L100:
 1288 009e 00BF     		.align	2
 1289              	.L99:
 1290 00a0 00000000 		.word	.LANCHOR6
 1291 00a4 00000000 		.word	.LANCHOR3
 1292 00a8 00000000 		.word	.LANCHOR2
 1293 00ac 00000000 		.word	.LANCHOR11
 1294 00b0 00000000 		.word	.LANCHOR0
 1295 00b4 00000000 		.word	.LANCHOR7
 1296 00b8 00000000 		.word	.LANCHOR5
 1297              		.cfi_endproc
 1298              	.LFE73:
 1300              		.section	.text.xTaskCreateStatic,"ax",%progbits
 1301              		.align	1
 1302              		.global	xTaskCreateStatic
 1303              		.syntax unified
 1304              		.thumb
 1305              		.thumb_func
 1306              		.fpu fpv4-sp-d16
 1308              	xTaskCreateStatic:
 1309              	.LVL96:
 1310              	.LFB5:
 582:FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 1311              		.loc 1 582 5 is_stmt 1 view -0
 1312              		.cfi_startproc
 1313              		@ args = 12, pretend = 0, frame = 8
 1314              		@ frame_needed = 0, uses_anonymous_args = 0
 582:FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 1315              		.loc 1 582 5 is_stmt 0 view .LVU389
 1316 0000 70B5     		push	{r4, r5, r6, lr}
 1317              	.LCFI11:
 1318              		.cfi_def_cfa_offset 16
 1319              		.cfi_offset 4, -16
 1320              		.cfi_offset 5, -12
 1321              		.cfi_offset 6, -8
 1322              		.cfi_offset 14, -4
 1323 0002 86B0     		sub	sp, sp, #24
 1324              	.LCFI12:
 1325              		.cfi_def_cfa_offset 40
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 127


 1326 0004 0B9D     		ldr	r5, [sp, #44]
 1327 0006 0C9C     		ldr	r4, [sp, #48]
 583:FreeRTOS/tasks.c ****         TaskHandle_t xReturn;
 1328              		.loc 1 583 9 is_stmt 1 view .LVU390
 584:FreeRTOS/tasks.c **** 
 1329              		.loc 1 584 9 view .LVU391
 586:FreeRTOS/tasks.c ****         configASSERT( pxTaskBuffer != NULL );
 1330              		.loc 1 586 9 view .LVU392
 1331 0008 75B1     		cbz	r5, .L109
 586:FreeRTOS/tasks.c ****         configASSERT( pxTaskBuffer != NULL );
 1332              		.loc 1 586 47 discriminator 2 view .LVU393
 587:FreeRTOS/tasks.c **** 
 1333              		.loc 1 587 9 discriminator 2 view .LVU394
 1334 000a B4B1     		cbz	r4, .L110
 587:FreeRTOS/tasks.c **** 
 1335              		.loc 1 587 45 discriminator 2 view .LVU395
 1336              	.LBB189:
 594:FreeRTOS/tasks.c ****                 configASSERT( xSize == sizeof( TCB_t ) );
 1337              		.loc 1 594 17 discriminator 2 view .LVU396
 594:FreeRTOS/tasks.c ****                 configASSERT( xSize == sizeof( TCB_t ) );
 1338              		.loc 1 594 33 is_stmt 0 discriminator 2 view .LVU397
 1339 000c 5826     		movs	r6, #88
 1340 000e 0496     		str	r6, [sp, #16]
 595:FreeRTOS/tasks.c ****                 ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 1341              		.loc 1 595 17 is_stmt 1 discriminator 2 view .LVU398
 1342 0010 049E     		ldr	r6, [sp, #16]
 1343 0012 582E     		cmp	r6, #88
 1344 0014 1AD0     		beq	.L106
 595:FreeRTOS/tasks.c ****                 ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 1345              		.loc 1 595 17 view .LVU399
 1346              	.LBB190:
 1347              	.LBI190:
 194:FreeRTOS/portable/portmacro.h ****     {
 1348              		.loc 2 194 34 view .LVU400
 1349              	.LBB191:
 196:FreeRTOS/portable/portmacro.h **** 
 1350              		.loc 2 196 9 view .LVU401
 1351              		.loc 2 198 9 view .LVU402
 1352              		.syntax unified
 1353              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 1354 0016 4FF05003 			mov r3, #80												
 1355 001a 83F31188 		msr basepri, r3											
 1356 001e BFF36F8F 		isb														
 1357 0022 BFF34F8F 		dsb														
 1358              	
 1359              	@ 0 "" 2
 1360              	.LVL97:
 1361              		.thumb
 1362              		.syntax unified
 1363              	.L107:
 1364              		.loc 2 198 9 is_stmt 0 view .LVU403
 1365              	.LBE191:
 1366              	.LBE190:
 595:FreeRTOS/tasks.c ****                 ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 1367              		.loc 1 595 17 is_stmt 1 discriminator 3 view .LVU404
 595:FreeRTOS/tasks.c ****                 ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 1368              		.loc 1 595 17 discriminator 3 view .LVU405
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 128


 595:FreeRTOS/tasks.c ****                 ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 1369              		.loc 1 595 17 discriminator 3 view .LVU406
 1370 0026 FEE7     		b	.L107
 1371              	.LVL98:
 1372              	.L109:
 595:FreeRTOS/tasks.c ****                 ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 1373              		.loc 1 595 17 is_stmt 0 discriminator 3 view .LVU407
 1374              	.LBE189:
 586:FreeRTOS/tasks.c ****         configASSERT( pxTaskBuffer != NULL );
 1375              		.loc 1 586 9 is_stmt 1 view .LVU408
 1376              	.LBB192:
 1377              	.LBI192:
 194:FreeRTOS/portable/portmacro.h ****     {
 1378              		.loc 2 194 34 view .LVU409
 1379              	.LBB193:
 196:FreeRTOS/portable/portmacro.h **** 
 1380              		.loc 2 196 9 view .LVU410
 1381              		.loc 2 198 9 view .LVU411
 1382              		.syntax unified
 1383              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 1384 0028 4FF05003 			mov r3, #80												
 1385 002c 83F31188 		msr basepri, r3											
 1386 0030 BFF36F8F 		isb														
 1387 0034 BFF34F8F 		dsb														
 1388              	
 1389              	@ 0 "" 2
 1390              	.LVL99:
 1391              		.thumb
 1392              		.syntax unified
 1393              	.L103:
 1394              		.loc 2 198 9 is_stmt 0 view .LVU412
 1395              	.LBE193:
 1396              	.LBE192:
 586:FreeRTOS/tasks.c ****         configASSERT( pxTaskBuffer != NULL );
 1397              		.loc 1 586 9 is_stmt 1 discriminator 1 view .LVU413
 586:FreeRTOS/tasks.c ****         configASSERT( pxTaskBuffer != NULL );
 1398              		.loc 1 586 9 discriminator 1 view .LVU414
 586:FreeRTOS/tasks.c ****         configASSERT( pxTaskBuffer != NULL );
 1399              		.loc 1 586 9 discriminator 1 view .LVU415
 1400 0038 FEE7     		b	.L103
 1401              	.LVL100:
 1402              	.L110:
 587:FreeRTOS/tasks.c **** 
 1403              		.loc 1 587 9 view .LVU416
 1404              	.LBB194:
 1405              	.LBI194:
 194:FreeRTOS/portable/portmacro.h ****     {
 1406              		.loc 2 194 34 view .LVU417
 1407              	.LBB195:
 196:FreeRTOS/portable/portmacro.h **** 
 1408              		.loc 2 196 9 view .LVU418
 1409              		.loc 2 198 9 view .LVU419
 1410              		.syntax unified
 1411              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 1412 003a 4FF05003 			mov r3, #80												
 1413 003e 83F31188 		msr basepri, r3											
 1414 0042 BFF36F8F 		isb														
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 129


 1415 0046 BFF34F8F 		dsb														
 1416              	
 1417              	@ 0 "" 2
 1418              	.LVL101:
 1419              		.thumb
 1420              		.syntax unified
 1421              	.L105:
 1422              		.loc 2 198 9 is_stmt 0 view .LVU420
 1423              	.LBE195:
 1424              	.LBE194:
 587:FreeRTOS/tasks.c **** 
 1425              		.loc 1 587 9 is_stmt 1 discriminator 2 view .LVU421
 587:FreeRTOS/tasks.c **** 
 1426              		.loc 1 587 9 discriminator 2 view .LVU422
 587:FreeRTOS/tasks.c **** 
 1427              		.loc 1 587 9 discriminator 2 view .LVU423
 1428 004a FEE7     		b	.L105
 1429              	.LVL102:
 1430              	.L106:
 1431              	.LBB196:
 595:FreeRTOS/tasks.c ****                 ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 1432              		.loc 1 595 57 discriminator 2 view .LVU424
 596:FreeRTOS/tasks.c ****             }
 1433              		.loc 1 596 17 discriminator 2 view .LVU425
 1434 004c 049E     		ldr	r6, [sp, #16]
 1435              	.LBE196:
 600:FreeRTOS/tasks.c ****         {
 1436              		.loc 1 600 9 discriminator 2 view .LVU426
 604:FreeRTOS/tasks.c ****             pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 1437              		.loc 1 604 13 discriminator 2 view .LVU427
 1438              	.LVL103:
 605:FreeRTOS/tasks.c **** 
 1439              		.loc 1 605 13 discriminator 2 view .LVU428
 605:FreeRTOS/tasks.c **** 
 1440              		.loc 1 605 31 is_stmt 0 discriminator 2 view .LVU429
 1441 004e 2563     		str	r5, [r4, #48]
 611:FreeRTOS/tasks.c ****                 }
 1442              		.loc 1 611 21 is_stmt 1 discriminator 2 view .LVU430
 611:FreeRTOS/tasks.c ****                 }
 1443              		.loc 1 611 53 is_stmt 0 discriminator 2 view .LVU431
 1444 0050 0225     		movs	r5, #2
 1445 0052 84F85550 		strb	r5, [r4, #85]
 615:FreeRTOS/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 1446              		.loc 1 615 13 is_stmt 1 discriminator 2 view .LVU432
 1447 0056 0025     		movs	r5, #0
 1448 0058 0395     		str	r5, [sp, #12]
 1449 005a 0294     		str	r4, [sp, #8]
 1450 005c 05AD     		add	r5, sp, #20
 1451 005e 0195     		str	r5, [sp, #4]
 1452 0060 0A9D     		ldr	r5, [sp, #40]
 1453 0062 0095     		str	r5, [sp]
 1454 0064 FFF7FEFF 		bl	prvInitialiseNewTask
 1455              	.LVL104:
 616:FreeRTOS/tasks.c ****         }
 1456              		.loc 1 616 13 discriminator 2 view .LVU433
 1457 0068 2046     		mov	r0, r4
 1458 006a FFF7FEFF 		bl	prvAddNewTaskToReadyList
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 130


 1459              	.LVL105:
 623:FreeRTOS/tasks.c ****     }
 1460              		.loc 1 623 9 discriminator 2 view .LVU434
 624:FreeRTOS/tasks.c **** 
 1461              		.loc 1 624 5 is_stmt 0 discriminator 2 view .LVU435
 1462 006e 0598     		ldr	r0, [sp, #20]
 1463 0070 06B0     		add	sp, sp, #24
 1464              	.LCFI13:
 1465              		.cfi_def_cfa_offset 16
 1466              		@ sp needed
 1467 0072 70BD     		pop	{r4, r5, r6, pc}
 624:FreeRTOS/tasks.c **** 
 1468              		.loc 1 624 5 discriminator 2 view .LVU436
 1469              		.cfi_endproc
 1470              	.LFE5:
 1472              		.section	.text.xTaskCreate,"ax",%progbits
 1473              		.align	1
 1474              		.global	xTaskCreate
 1475              		.syntax unified
 1476              		.thumb
 1477              		.thumb_func
 1478              		.fpu fpv4-sp-d16
 1480              	xTaskCreate:
 1481              	.LVL106:
 1482              	.LFB6:
 734:FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 1483              		.loc 1 734 5 is_stmt 1 view -0
 1484              		.cfi_startproc
 1485              		@ args = 8, pretend = 0, frame = 0
 1486              		@ frame_needed = 0, uses_anonymous_args = 0
 734:FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 1487              		.loc 1 734 5 is_stmt 0 view .LVU438
 1488 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 1489              	.LCFI14:
 1490              		.cfi_def_cfa_offset 28
 1491              		.cfi_offset 4, -28
 1492              		.cfi_offset 5, -24
 1493              		.cfi_offset 6, -20
 1494              		.cfi_offset 7, -16
 1495              		.cfi_offset 8, -12
 1496              		.cfi_offset 9, -8
 1497              		.cfi_offset 14, -4
 1498 0004 85B0     		sub	sp, sp, #20
 1499              	.LCFI15:
 1500              		.cfi_def_cfa_offset 48
 1501 0006 0746     		mov	r7, r0
 1502 0008 8846     		mov	r8, r1
 1503 000a 1446     		mov	r4, r2
 1504 000c 1E46     		mov	r6, r3
 735:FreeRTOS/tasks.c ****         BaseType_t xReturn;
 1505              		.loc 1 735 9 is_stmt 1 view .LVU439
 736:FreeRTOS/tasks.c **** 
 1506              		.loc 1 736 9 view .LVU440
 1507              	.LBB197:
 765:FreeRTOS/tasks.c **** 
 1508              		.loc 1 765 17 view .LVU441
 768:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 131


 1509              		.loc 1 768 17 view .LVU442
 768:FreeRTOS/tasks.c **** 
 1510              		.loc 1 768 27 is_stmt 0 view .LVU443
 1511 000e 9000     		lsls	r0, r2, #2
 1512              	.LVL107:
 768:FreeRTOS/tasks.c **** 
 1513              		.loc 1 768 27 view .LVU444
 1514 0010 FFF7FEFF 		bl	pvPortMalloc
 1515              	.LVL108:
 770:FreeRTOS/tasks.c ****                 {
 1516              		.loc 1 770 17 is_stmt 1 view .LVU445
 770:FreeRTOS/tasks.c ****                 {
 1517              		.loc 1 770 19 is_stmt 0 view .LVU446
 1518 0014 00B3     		cbz	r0, .L115
 1519 0016 8146     		mov	r9, r0
 773:FreeRTOS/tasks.c **** 
 1520              		.loc 1 773 21 is_stmt 1 view .LVU447
 773:FreeRTOS/tasks.c **** 
 1521              		.loc 1 773 44 is_stmt 0 view .LVU448
 1522 0018 5820     		movs	r0, #88
 1523              	.LVL109:
 773:FreeRTOS/tasks.c **** 
 1524              		.loc 1 773 44 view .LVU449
 1525 001a FFF7FEFF 		bl	pvPortMalloc
 1526              	.LVL110:
 775:FreeRTOS/tasks.c ****                     {
 1527              		.loc 1 775 21 is_stmt 1 view .LVU450
 775:FreeRTOS/tasks.c ****                     {
 1528              		.loc 1 775 23 is_stmt 0 view .LVU451
 1529 001e 0546     		mov	r5, r0
 1530 0020 B0B1     		cbz	r0, .L113
 778:FreeRTOS/tasks.c ****                     }
 1531              		.loc 1 778 25 is_stmt 1 view .LVU452
 778:FreeRTOS/tasks.c ****                     }
 1532              		.loc 1 778 43 is_stmt 0 view .LVU453
 1533 0022 C0F83090 		str	r9, [r0, #48]
 1534              	.LVL111:
 1535              	.L114:
 778:FreeRTOS/tasks.c ****                     }
 1536              		.loc 1 778 43 view .LVU454
 1537              	.LBE197:
 794:FreeRTOS/tasks.c ****         {
 1538              		.loc 1 794 9 is_stmt 1 view .LVU455
 794:FreeRTOS/tasks.c ****         {
 1539              		.loc 1 794 11 is_stmt 0 view .LVU456
 1540 0026 E5B1     		cbz	r5, .L116
 800:FreeRTOS/tasks.c ****                 }
 1541              		.loc 1 800 21 is_stmt 1 view .LVU457
 800:FreeRTOS/tasks.c ****                 }
 1542              		.loc 1 800 53 is_stmt 0 view .LVU458
 1543 0028 0023     		movs	r3, #0
 1544 002a 85F85530 		strb	r3, [r5, #85]
 804:FreeRTOS/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 1545              		.loc 1 804 13 is_stmt 1 view .LVU459
 1546 002e 0393     		str	r3, [sp, #12]
 1547 0030 0295     		str	r5, [sp, #8]
 1548 0032 0D9B     		ldr	r3, [sp, #52]
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 132


 1549 0034 0193     		str	r3, [sp, #4]
 1550 0036 0C9B     		ldr	r3, [sp, #48]
 1551 0038 0093     		str	r3, [sp]
 1552 003a 3346     		mov	r3, r6
 1553 003c 2246     		mov	r2, r4
 1554 003e 4146     		mov	r1, r8
 1555 0040 3846     		mov	r0, r7
 1556 0042 FFF7FEFF 		bl	prvInitialiseNewTask
 1557              	.LVL112:
 805:FreeRTOS/tasks.c ****             xReturn = pdPASS;
 1558              		.loc 1 805 13 view .LVU460
 1559 0046 2846     		mov	r0, r5
 1560 0048 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 1561              	.LVL113:
 806:FreeRTOS/tasks.c ****         }
 1562              		.loc 1 806 13 view .LVU461
 806:FreeRTOS/tasks.c ****         }
 1563              		.loc 1 806 21 is_stmt 0 view .LVU462
 1564 004c 0120     		movs	r0, #1
 1565 004e 05E0     		b	.L111
 1566              	.LVL114:
 1567              	.L113:
 1568              	.LBB198:
 784:FreeRTOS/tasks.c ****                     }
 1569              		.loc 1 784 25 is_stmt 1 view .LVU463
 1570 0050 4846     		mov	r0, r9
 1571              	.LVL115:
 784:FreeRTOS/tasks.c ****                     }
 1572              		.loc 1 784 25 is_stmt 0 view .LVU464
 1573 0052 FFF7FEFF 		bl	vPortFree
 1574              	.LVL116:
 1575 0056 E6E7     		b	.L114
 1576              	.LVL117:
 1577              	.L115:
 784:FreeRTOS/tasks.c ****                     }
 1578              		.loc 1 784 25 view .LVU465
 1579              	.LBE198:
 810:FreeRTOS/tasks.c ****         }
 1580              		.loc 1 810 21 view .LVU466
 1581 0058 4FF0FF30 		mov	r0, #-1
 1582              	.LVL118:
 1583              	.L111:
 814:FreeRTOS/tasks.c **** 
 1584              		.loc 1 814 5 view .LVU467
 1585 005c 05B0     		add	sp, sp, #20
 1586              	.LCFI16:
 1587              		.cfi_remember_state
 1588              		.cfi_def_cfa_offset 28
 1589              		@ sp needed
 1590 005e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1591              	.LVL119:
 1592              	.L116:
 1593              	.LCFI17:
 1594              		.cfi_restore_state
 810:FreeRTOS/tasks.c ****         }
 1595              		.loc 1 810 21 view .LVU468
 1596 0062 4FF0FF30 		mov	r0, #-1
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 133


 1597              	.LVL120:
 813:FreeRTOS/tasks.c ****     }
 1598              		.loc 1 813 9 is_stmt 1 view .LVU469
 813:FreeRTOS/tasks.c ****     }
 1599              		.loc 1 813 16 is_stmt 0 view .LVU470
 1600 0066 F9E7     		b	.L111
 1601              		.cfi_endproc
 1602              	.LFE6:
 1604              		.section	.text.vTaskDelete,"ax",%progbits
 1605              		.align	1
 1606              		.global	vTaskDelete
 1607              		.syntax unified
 1608              		.thumb
 1609              		.thumb_func
 1610              		.fpu fpv4-sp-d16
 1612              	vTaskDelete:
 1613              	.LVL121:
 1614              	.LFB9:
1158:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 1615              		.loc 1 1158 5 is_stmt 1 view -0
 1616              		.cfi_startproc
 1617              		@ args = 0, pretend = 0, frame = 0
 1618              		@ frame_needed = 0, uses_anonymous_args = 0
1158:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 1619              		.loc 1 1158 5 is_stmt 0 view .LVU472
 1620 0000 38B5     		push	{r3, r4, r5, lr}
 1621              	.LCFI18:
 1622              		.cfi_def_cfa_offset 16
 1623              		.cfi_offset 3, -16
 1624              		.cfi_offset 4, -12
 1625              		.cfi_offset 5, -8
 1626              		.cfi_offset 14, -4
 1627 0002 0446     		mov	r4, r0
1159:FreeRTOS/tasks.c **** 
 1628              		.loc 1 1159 9 is_stmt 1 view .LVU473
1161:FreeRTOS/tasks.c ****         {
 1629              		.loc 1 1161 9 view .LVU474
 1630 0004 FFF7FEFF 		bl	vPortEnterCritical
 1631              	.LVL122:
1165:FreeRTOS/tasks.c **** 
 1632              		.loc 1 1165 13 view .LVU475
1165:FreeRTOS/tasks.c **** 
 1633              		.loc 1 1165 21 is_stmt 0 view .LVU476
 1634 0008 002C     		cmp	r4, #0
 1635 000a 38D0     		beq	.L129
 1636              	.LVL123:
 1637              	.L119:
1168:FreeRTOS/tasks.c ****             {
 1638              		.loc 1 1168 13 is_stmt 1 discriminator 4 view .LVU477
1168:FreeRTOS/tasks.c ****             {
 1639              		.loc 1 1168 17 is_stmt 0 discriminator 4 view .LVU478
 1640 000c 251D     		adds	r5, r4, #4
 1641 000e 2846     		mov	r0, r5
 1642 0010 FFF7FEFF 		bl	uxListRemove
 1643              	.LVL124:
1168:FreeRTOS/tasks.c ****             {
 1644              		.loc 1 1168 15 discriminator 4 view .LVU479
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 134


 1645 0014 70B9     		cbnz	r0, .L120
1170:FreeRTOS/tasks.c ****             }
 1646              		.loc 1 1170 17 is_stmt 1 view .LVU480
 1647 0016 E26A     		ldr	r2, [r4, #44]
 1648 0018 02EB8203 		add	r3, r2, r2, lsl #2
 1649 001c 9B00     		lsls	r3, r3, #2
 1650 001e 2849     		ldr	r1, .L132
 1651 0020 CB58     		ldr	r3, [r1, r3]
 1652 0022 3BB9     		cbnz	r3, .L120
1170:FreeRTOS/tasks.c ****             }
 1653              		.loc 1 1170 17 discriminator 1 view .LVU481
 1654 0024 0123     		movs	r3, #1
 1655 0026 03FA02F2 		lsl	r2, r3, r2
 1656 002a 2649     		ldr	r1, .L132+4
 1657 002c 0B68     		ldr	r3, [r1]
 1658 002e 23EA0203 		bic	r3, r3, r2
 1659 0032 0B60     		str	r3, [r1]
 1660              	.L120:
1174:FreeRTOS/tasks.c ****             }
 1661              		.loc 1 1174 41 view .LVU482
1178:FreeRTOS/tasks.c ****             {
 1662              		.loc 1 1178 13 view .LVU483
1178:FreeRTOS/tasks.c ****             {
 1663              		.loc 1 1178 17 is_stmt 0 view .LVU484
 1664 0034 A36A     		ldr	r3, [r4, #40]
1178:FreeRTOS/tasks.c ****             {
 1665              		.loc 1 1178 15 view .LVU485
 1666 0036 1BB1     		cbz	r3, .L121
1180:FreeRTOS/tasks.c ****             }
 1667              		.loc 1 1180 17 is_stmt 1 view .LVU486
1180:FreeRTOS/tasks.c ****             }
 1668              		.loc 1 1180 26 is_stmt 0 view .LVU487
 1669 0038 04F11800 		add	r0, r4, #24
 1670 003c FFF7FEFF 		bl	uxListRemove
 1671              	.LVL125:
 1672              	.L121:
1184:FreeRTOS/tasks.c ****             }
 1673              		.loc 1 1184 41 is_stmt 1 view .LVU488
1191:FreeRTOS/tasks.c **** 
 1674              		.loc 1 1191 13 view .LVU489
1191:FreeRTOS/tasks.c **** 
 1675              		.loc 1 1191 25 is_stmt 0 view .LVU490
 1676 0040 214A     		ldr	r2, .L132+8
 1677 0042 1368     		ldr	r3, [r2]
 1678 0044 0133     		adds	r3, r3, #1
 1679 0046 1360     		str	r3, [r2]
1193:FreeRTOS/tasks.c ****             {
 1680              		.loc 1 1193 13 is_stmt 1 view .LVU491
1193:FreeRTOS/tasks.c ****             {
 1681              		.loc 1 1193 23 is_stmt 0 view .LVU492
 1682 0048 204B     		ldr	r3, .L132+12
 1683 004a 1B68     		ldr	r3, [r3]
1193:FreeRTOS/tasks.c ****             {
 1684              		.loc 1 1193 15 view .LVU493
 1685 004c A342     		cmp	r3, r4
 1686 004e 19D0     		beq	.L130
1220:FreeRTOS/tasks.c ****                 traceTASK_DELETE( pxTCB );
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 135


 1687              		.loc 1 1220 17 is_stmt 1 view .LVU494
 1688 0050 1F4A     		ldr	r2, .L132+16
 1689 0052 1368     		ldr	r3, [r2]
 1690 0054 013B     		subs	r3, r3, #1
 1691 0056 1360     		str	r3, [r2]
1221:FreeRTOS/tasks.c **** 
 1692              		.loc 1 1221 42 view .LVU495
1225:FreeRTOS/tasks.c ****             }
 1693              		.loc 1 1225 17 view .LVU496
 1694 0058 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1695              	.LVL126:
 1696              	.L123:
1228:FreeRTOS/tasks.c **** 
 1697              		.loc 1 1228 9 view .LVU497
 1698 005c FFF7FEFF 		bl	vPortExitCritical
 1699              	.LVL127:
1233:FreeRTOS/tasks.c ****         {
 1700              		.loc 1 1233 9 view .LVU498
1233:FreeRTOS/tasks.c ****         {
 1701              		.loc 1 1233 19 is_stmt 0 view .LVU499
 1702 0060 1A4B     		ldr	r3, .L132+12
 1703 0062 1B68     		ldr	r3, [r3]
1233:FreeRTOS/tasks.c ****         {
 1704              		.loc 1 1233 11 view .LVU500
 1705 0064 A342     		cmp	r3, r4
 1706 0066 02D0     		beq	.L124
1235:FreeRTOS/tasks.c ****         }
 1707              		.loc 1 1235 13 is_stmt 1 view .LVU501
 1708 0068 2046     		mov	r0, r4
 1709 006a FFF7FEFF 		bl	prvDeleteTCB
 1710              	.LVL128:
 1711              	.L124:
1240:FreeRTOS/tasks.c ****         {
 1712              		.loc 1 1240 9 view .LVU502
1240:FreeRTOS/tasks.c ****         {
 1713              		.loc 1 1240 31 is_stmt 0 view .LVU503
 1714 006e 194B     		ldr	r3, .L132+20
 1715 0070 1B68     		ldr	r3, [r3]
1240:FreeRTOS/tasks.c ****         {
 1716              		.loc 1 1240 11 view .LVU504
 1717 0072 1BB1     		cbz	r3, .L118
1242:FreeRTOS/tasks.c ****             {
 1718              		.loc 1 1242 13 is_stmt 1 view .LVU505
1242:FreeRTOS/tasks.c ****             {
 1719              		.loc 1 1242 23 is_stmt 0 view .LVU506
 1720 0074 154B     		ldr	r3, .L132+12
 1721 0076 1B68     		ldr	r3, [r3]
1242:FreeRTOS/tasks.c ****             {
 1722              		.loc 1 1242 15 view .LVU507
 1723 0078 A342     		cmp	r3, r4
 1724 007a 0CD0     		beq	.L131
 1725              	.L118:
1252:FreeRTOS/tasks.c **** 
 1726              		.loc 1 1252 5 view .LVU508
 1727 007c 38BD     		pop	{r3, r4, r5, pc}
 1728              	.LVL129:
 1729              	.L129:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 136


1165:FreeRTOS/tasks.c **** 
 1730              		.loc 1 1165 21 discriminator 1 view .LVU509
 1731 007e 134B     		ldr	r3, .L132+12
 1732 0080 1C68     		ldr	r4, [r3]
 1733              	.LVL130:
1165:FreeRTOS/tasks.c **** 
 1734              		.loc 1 1165 21 discriminator 1 view .LVU510
 1735 0082 C3E7     		b	.L119
 1736              	.LVL131:
 1737              	.L130:
1200:FreeRTOS/tasks.c **** 
 1738              		.loc 1 1200 17 is_stmt 1 view .LVU511
 1739 0084 2946     		mov	r1, r5
 1740 0086 1448     		ldr	r0, .L132+24
 1741 0088 FFF7FEFF 		bl	vListInsertEnd
 1742              	.LVL132:
1205:FreeRTOS/tasks.c **** 
 1743              		.loc 1 1205 17 view .LVU512
 1744 008c 134A     		ldr	r2, .L132+28
 1745 008e 1368     		ldr	r3, [r2]
 1746 0090 0133     		adds	r3, r3, #1
 1747 0092 1360     		str	r3, [r2]
1209:FreeRTOS/tasks.c **** 
 1748              		.loc 1 1209 42 view .LVU513
1216:FreeRTOS/tasks.c ****             }
 1749              		.loc 1 1216 66 view .LVU514
 1750 0094 E2E7     		b	.L123
 1751              	.L131:
1244:FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 1752              		.loc 1 1244 17 view .LVU515
 1753 0096 124B     		ldr	r3, .L132+32
 1754 0098 1B68     		ldr	r3, [r3]
 1755 009a 43B1     		cbz	r3, .L126
1244:FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 1756              		.loc 1 1244 17 view .LVU516
 1757              	.LBB199:
 1758              	.LBI199:
 194:FreeRTOS/portable/portmacro.h ****     {
 1759              		.loc 2 194 34 view .LVU517
 1760              	.LBB200:
 196:FreeRTOS/portable/portmacro.h **** 
 1761              		.loc 2 196 9 view .LVU518
 1762              		.loc 2 198 9 view .LVU519
 1763              		.syntax unified
 1764              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 1765 009c 4FF05003 			mov r3, #80												
 1766 00a0 83F31188 		msr basepri, r3											
 1767 00a4 BFF36F8F 		isb														
 1768 00a8 BFF34F8F 		dsb														
 1769              	
 1770              	@ 0 "" 2
 1771              	.LVL133:
 1772              		.thumb
 1773              		.syntax unified
 1774              	.L127:
 1775              		.loc 2 198 9 is_stmt 0 view .LVU520
 1776              	.LBE200:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 137


 1777              	.LBE199:
1244:FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 1778              		.loc 1 1244 17 is_stmt 1 discriminator 1 view .LVU521
1244:FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 1779              		.loc 1 1244 17 discriminator 1 view .LVU522
1244:FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 1780              		.loc 1 1244 17 discriminator 1 view .LVU523
 1781 00ac FEE7     		b	.L127
 1782              	.L126:
1244:FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 1783              		.loc 1 1244 58 discriminator 2 view .LVU524
1245:FreeRTOS/tasks.c ****             }
 1784              		.loc 1 1245 17 discriminator 2 view .LVU525
 1785 00ae 0D4B     		ldr	r3, .L132+36
 1786 00b0 4FF08052 		mov	r2, #268435456
 1787 00b4 1A60     		str	r2, [r3]
1245:FreeRTOS/tasks.c ****             }
 1788              		.loc 1 1245 17 discriminator 2 view .LVU526
 1789              		.syntax unified
 1790              	@ 1245 "FreeRTOS/tasks.c" 1
 1791 00b6 BFF34F8F 		dsb
 1792              	@ 0 "" 2
1245:FreeRTOS/tasks.c ****             }
 1793              		.loc 1 1245 17 discriminator 2 view .LVU527
 1794              	@ 1245 "FreeRTOS/tasks.c" 1
 1795 00ba BFF36F8F 		isb
 1796              	@ 0 "" 2
1245:FreeRTOS/tasks.c ****             }
 1797              		.loc 1 1245 39 discriminator 2 view .LVU528
1249:FreeRTOS/tasks.c ****             }
 1798              		.loc 1 1249 41 discriminator 2 view .LVU529
1252:FreeRTOS/tasks.c **** 
 1799              		.loc 1 1252 5 is_stmt 0 discriminator 2 view .LVU530
 1800              		.thumb
 1801              		.syntax unified
 1802 00be DDE7     		b	.L118
 1803              	.L133:
 1804              		.align	2
 1805              	.L132:
 1806 00c0 00000000 		.word	.LANCHOR4
 1807 00c4 00000000 		.word	.LANCHOR2
 1808 00c8 00000000 		.word	.LANCHOR14
 1809 00cc 00000000 		.word	.LANCHOR3
 1810 00d0 00000000 		.word	.LANCHOR12
 1811 00d4 00000000 		.word	.LANCHOR13
 1812 00d8 00000000 		.word	.LANCHOR10
 1813 00dc 00000000 		.word	.LANCHOR15
 1814 00e0 00000000 		.word	.LANCHOR16
 1815 00e4 04ED00E0 		.word	-536810236
 1816              		.cfi_endproc
 1817              	.LFE9:
 1819              		.section	.text.eTaskGetState,"ax",%progbits
 1820              		.align	1
 1821              		.global	eTaskGetState
 1822              		.syntax unified
 1823              		.thumb
 1824              		.thumb_func
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 138


 1825              		.fpu fpv4-sp-d16
 1827              	eTaskGetState:
 1828              	.LVL134:
 1829              	.LFB12:
1392:FreeRTOS/tasks.c ****         eTaskState eReturn;
 1830              		.loc 1 1392 5 is_stmt 1 view -0
 1831              		.cfi_startproc
 1832              		@ args = 0, pretend = 0, frame = 0
 1833              		@ frame_needed = 0, uses_anonymous_args = 0
1392:FreeRTOS/tasks.c ****         eTaskState eReturn;
 1834              		.loc 1 1392 5 is_stmt 0 view .LVU532
 1835 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1836              	.LCFI19:
 1837              		.cfi_def_cfa_offset 24
 1838              		.cfi_offset 3, -24
 1839              		.cfi_offset 4, -20
 1840              		.cfi_offset 5, -16
 1841              		.cfi_offset 6, -12
 1842              		.cfi_offset 7, -8
 1843              		.cfi_offset 14, -4
1393:FreeRTOS/tasks.c ****         List_t const * pxStateList, * pxDelayedList, * pxOverflowedDelayedList;
 1844              		.loc 1 1393 9 is_stmt 1 view .LVU533
1394:FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
 1845              		.loc 1 1394 9 view .LVU534
1395:FreeRTOS/tasks.c **** 
 1846              		.loc 1 1395 9 view .LVU535
 1847              	.LVL135:
1397:FreeRTOS/tasks.c **** 
 1848              		.loc 1 1397 9 view .LVU536
 1849 0002 D0B1     		cbz	r0, .L149
 1850 0004 0546     		mov	r5, r0
1397:FreeRTOS/tasks.c **** 
 1851              		.loc 1 1397 30 discriminator 2 view .LVU537
1399:FreeRTOS/tasks.c ****         {
 1852              		.loc 1 1399 9 discriminator 2 view .LVU538
1399:FreeRTOS/tasks.c ****         {
 1853              		.loc 1 1399 19 is_stmt 0 discriminator 2 view .LVU539
 1854 0006 204B     		ldr	r3, .L152
 1855 0008 1B68     		ldr	r3, [r3]
1399:FreeRTOS/tasks.c ****         {
 1856              		.loc 1 1399 11 discriminator 2 view .LVU540
 1857 000a 8342     		cmp	r3, r0
 1858 000c 31D0     		beq	.L141
1406:FreeRTOS/tasks.c ****             {
 1859              		.loc 1 1406 13 is_stmt 1 view .LVU541
 1860 000e FFF7FEFF 		bl	vPortEnterCritical
 1861              	.LVL136:
1408:FreeRTOS/tasks.c ****                 pxDelayedList = pxDelayedTaskList;
 1862              		.loc 1 1408 17 view .LVU542
1408:FreeRTOS/tasks.c ****                 pxDelayedList = pxDelayedTaskList;
 1863              		.loc 1 1408 29 is_stmt 0 view .LVU543
 1864 0012 6C69     		ldr	r4, [r5, #20]
 1865              	.LVL137:
1409:FreeRTOS/tasks.c ****                 pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1866              		.loc 1 1409 17 is_stmt 1 view .LVU544
1409:FreeRTOS/tasks.c ****                 pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1867              		.loc 1 1409 31 is_stmt 0 view .LVU545
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 139


 1868 0014 1D4B     		ldr	r3, .L152+4
 1869 0016 1F68     		ldr	r7, [r3]
 1870              	.LVL138:
1410:FreeRTOS/tasks.c ****             }
 1871              		.loc 1 1410 17 is_stmt 1 view .LVU546
1410:FreeRTOS/tasks.c ****             }
 1872              		.loc 1 1410 41 is_stmt 0 view .LVU547
 1873 0018 1D4B     		ldr	r3, .L152+8
 1874 001a 1E68     		ldr	r6, [r3]
 1875              	.LVL139:
1412:FreeRTOS/tasks.c **** 
 1876              		.loc 1 1412 13 is_stmt 1 view .LVU548
 1877 001c FFF7FEFF 		bl	vPortExitCritical
 1878              	.LVL140:
1414:FreeRTOS/tasks.c ****             {
 1879              		.loc 1 1414 13 view .LVU549
1414:FreeRTOS/tasks.c ****             {
 1880              		.loc 1 1414 15 is_stmt 0 view .LVU550
 1881 0020 BC42     		cmp	r4, r7
 1882 0022 28D0     		beq	.L142
1414:FreeRTOS/tasks.c ****             {
 1883              		.loc 1 1414 50 discriminator 1 view .LVU551
 1884 0024 B442     		cmp	r4, r6
 1885 0026 28D0     		beq	.L143
1422:FreeRTOS/tasks.c ****                 {
 1886              		.loc 1 1422 22 is_stmt 1 view .LVU552
1422:FreeRTOS/tasks.c ****                 {
 1887              		.loc 1 1422 24 is_stmt 0 view .LVU553
 1888 0028 1A4B     		ldr	r3, .L152+12
 1889 002a 9C42     		cmp	r4, r3
 1890 002c 0ED0     		beq	.L150
1463:FreeRTOS/tasks.c ****                 {
 1891              		.loc 1 1463 22 is_stmt 1 view .LVU554
1463:FreeRTOS/tasks.c ****                 {
 1892              		.loc 1 1463 24 is_stmt 0 view .LVU555
 1893 002e 1A4B     		ldr	r3, .L152+16
 1894 0030 9C42     		cmp	r4, r3
 1895 0032 26D0     		beq	.L146
1463:FreeRTOS/tasks.c ****                 {
 1896              		.loc 1 1463 71 discriminator 1 view .LVU556
 1897 0034 DCB1     		cbz	r4, .L151
1476:FreeRTOS/tasks.c ****             }
 1898              		.loc 1 1476 25 view .LVU557
 1899 0036 0120     		movs	r0, #1
 1900 0038 1CE0     		b	.L137
 1901              	.LVL141:
 1902              	.L149:
1397:FreeRTOS/tasks.c **** 
 1903              		.loc 1 1397 9 is_stmt 1 view .LVU558
 1904              	.LBB201:
 1905              	.LBI201:
 194:FreeRTOS/portable/portmacro.h ****     {
 1906              		.loc 2 194 34 view .LVU559
 1907              	.LBB202:
 196:FreeRTOS/portable/portmacro.h **** 
 1908              		.loc 2 196 9 view .LVU560
 1909              		.loc 2 198 9 view .LVU561
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 140


 1910              		.syntax unified
 1911              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 1912 003a 4FF05003 			mov r3, #80												
 1913 003e 83F31188 		msr basepri, r3											
 1914 0042 BFF36F8F 		isb														
 1915 0046 BFF34F8F 		dsb														
 1916              	
 1917              	@ 0 "" 2
 1918              	.LVL142:
 1919              		.thumb
 1920              		.syntax unified
 1921              	.L136:
 1922              		.loc 2 198 9 is_stmt 0 view .LVU562
 1923              	.LBE202:
 1924              	.LBE201:
1397:FreeRTOS/tasks.c **** 
 1925              		.loc 1 1397 9 is_stmt 1 discriminator 1 view .LVU563
1397:FreeRTOS/tasks.c **** 
 1926              		.loc 1 1397 9 discriminator 1 view .LVU564
1397:FreeRTOS/tasks.c **** 
 1927              		.loc 1 1397 9 discriminator 1 view .LVU565
 1928 004a FEE7     		b	.L136
 1929              	.LVL143:
 1930              	.L150:
1427:FreeRTOS/tasks.c ****                     {
 1931              		.loc 1 1427 21 view .LVU566
1427:FreeRTOS/tasks.c ****                     {
 1932              		.loc 1 1427 25 is_stmt 0 view .LVU567
 1933 004c AB6A     		ldr	r3, [r5, #40]
1427:FreeRTOS/tasks.c ****                     {
 1934              		.loc 1 1427 23 view .LVU568
 1935 004e 4BB1     		cbz	r3, .L144
1457:FreeRTOS/tasks.c ****                     }
 1936              		.loc 1 1457 33 view .LVU569
 1937 0050 0220     		movs	r0, #2
 1938 0052 0FE0     		b	.L137
 1939              	.LVL144:
 1940              	.L140:
 1941              	.LBB203:
1442:FreeRTOS/tasks.c ****                                     {
 1942              		.loc 1 1442 37 is_stmt 1 view .LVU570
1442:FreeRTOS/tasks.c ****                                     {
 1943              		.loc 1 1442 61 is_stmt 0 view .LVU571
 1944 0054 EA18     		adds	r2, r5, r3
 1945 0056 92F85420 		ldrb	r2, [r2, #84]	@ zero_extendqisi2
 1946 005a D2B2     		uxtb	r2, r2
1442:FreeRTOS/tasks.c ****                                     {
 1947              		.loc 1 1442 39 view .LVU572
 1948 005c 012A     		cmp	r2, #1
 1949 005e 0ED0     		beq	.L145
1440:FreeRTOS/tasks.c ****                                 {
 1950              		.loc 1 1440 88 is_stmt 1 discriminator 2 view .LVU573
1440:FreeRTOS/tasks.c ****                                 {
 1951              		.loc 1 1440 89 is_stmt 0 discriminator 2 view .LVU574
 1952 0060 0133     		adds	r3, r3, #1
 1953              	.LVL145:
1440:FreeRTOS/tasks.c ****                                 {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 141


 1954              		.loc 1 1440 89 discriminator 2 view .LVU575
 1955 0062 00E0     		b	.L139
 1956              	.LVL146:
 1957              	.L144:
1440:FreeRTOS/tasks.c ****                                 {
 1958              		.loc 1 1440 40 view .LVU576
 1959 0064 0023     		movs	r3, #0
 1960              	.L139:
 1961              	.LVL147:
1440:FreeRTOS/tasks.c ****                                 {
 1962              		.loc 1 1440 45 is_stmt 1 discriminator 1 view .LVU577
1440:FreeRTOS/tasks.c ****                                 {
 1963              		.loc 1 1440 33 is_stmt 0 discriminator 1 view .LVU578
 1964 0066 002B     		cmp	r3, #0
 1965 0068 F4DD     		ble	.L140
1438:FreeRTOS/tasks.c **** 
 1966              		.loc 1 1438 41 view .LVU579
 1967 006a 0320     		movs	r0, #3
 1968 006c 02E0     		b	.L137
 1969              	.LVL148:
 1970              	.L151:
1438:FreeRTOS/tasks.c **** 
 1971              		.loc 1 1438 41 view .LVU580
 1972              	.LBE203:
1468:FreeRTOS/tasks.c ****                 }
 1973              		.loc 1 1468 29 view .LVU581
 1974 006e 0420     		movs	r0, #4
 1975 0070 00E0     		b	.L137
 1976              	.LVL149:
 1977              	.L141:
1402:FreeRTOS/tasks.c ****         }
 1978              		.loc 1 1402 21 view .LVU582
 1979 0072 0020     		movs	r0, #0
 1980              	.LVL150:
 1981              	.L137:
1480:FreeRTOS/tasks.c ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1982              		.loc 1 1480 9 is_stmt 1 view .LVU583
1481:FreeRTOS/tasks.c **** 
 1983              		.loc 1 1481 5 is_stmt 0 view .LVU584
 1984 0074 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1985              	.LVL151:
 1986              	.L142:
1418:FreeRTOS/tasks.c ****             }
 1987              		.loc 1 1418 25 view .LVU585
 1988 0076 0220     		movs	r0, #2
 1989 0078 FCE7     		b	.L137
 1990              	.L143:
 1991 007a 0220     		movs	r0, #2
 1992 007c FAE7     		b	.L137
 1993              	.LVL152:
 1994              	.L145:
 1995              	.LBB204:
1444:FreeRTOS/tasks.c ****                                         break;
 1996              		.loc 1 1444 49 view .LVU586
 1997 007e 0220     		movs	r0, #2
 1998 0080 F8E7     		b	.L137
 1999              	.LVL153:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 142


 2000              	.L146:
1444:FreeRTOS/tasks.c ****                                         break;
 2001              		.loc 1 1444 49 view .LVU587
 2002              	.LBE204:
1468:FreeRTOS/tasks.c ****                 }
 2003              		.loc 1 1468 29 view .LVU588
 2004 0082 0420     		movs	r0, #4
 2005 0084 F6E7     		b	.L137
 2006              	.L153:
 2007 0086 00BF     		.align	2
 2008              	.L152:
 2009 0088 00000000 		.word	.LANCHOR3
 2010 008c 00000000 		.word	.LANCHOR7
 2011 0090 00000000 		.word	.LANCHOR11
 2012 0094 00000000 		.word	.LANCHOR0
 2013 0098 00000000 		.word	.LANCHOR10
 2014              		.cfi_endproc
 2015              	.LFE12:
 2017              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 2018              		.align	1
 2019              		.global	uxTaskPriorityGet
 2020              		.syntax unified
 2021              		.thumb
 2022              		.thumb_func
 2023              		.fpu fpv4-sp-d16
 2025              	uxTaskPriorityGet:
 2026              	.LVL154:
 2027              	.LFB13:
1489:FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
 2028              		.loc 1 1489 5 is_stmt 1 view -0
 2029              		.cfi_startproc
 2030              		@ args = 0, pretend = 0, frame = 0
 2031              		@ frame_needed = 0, uses_anonymous_args = 0
1489:FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
 2032              		.loc 1 1489 5 is_stmt 0 view .LVU590
 2033 0000 10B5     		push	{r4, lr}
 2034              	.LCFI20:
 2035              		.cfi_def_cfa_offset 8
 2036              		.cfi_offset 4, -8
 2037              		.cfi_offset 14, -4
 2038 0002 0446     		mov	r4, r0
1490:FreeRTOS/tasks.c ****         UBaseType_t uxReturn;
 2039              		.loc 1 1490 9 is_stmt 1 view .LVU591
1491:FreeRTOS/tasks.c **** 
 2040              		.loc 1 1491 9 view .LVU592
1493:FreeRTOS/tasks.c ****         {
 2041              		.loc 1 1493 9 view .LVU593
 2042 0004 FFF7FEFF 		bl	vPortEnterCritical
 2043              	.LVL155:
1497:FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 2044              		.loc 1 1497 13 view .LVU594
1497:FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 2045              		.loc 1 1497 21 is_stmt 0 view .LVU595
 2046 0008 24B1     		cbz	r4, .L157
 2047              	.LVL156:
 2048              	.L155:
1498:FreeRTOS/tasks.c ****         }
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 143


 2049              		.loc 1 1498 13 is_stmt 1 discriminator 4 view .LVU596
1498:FreeRTOS/tasks.c ****         }
 2050              		.loc 1 1498 22 is_stmt 0 discriminator 4 view .LVU597
 2051 000a E46A     		ldr	r4, [r4, #44]
 2052              	.LVL157:
1500:FreeRTOS/tasks.c **** 
 2053              		.loc 1 1500 9 is_stmt 1 discriminator 4 view .LVU598
 2054 000c FFF7FEFF 		bl	vPortExitCritical
 2055              	.LVL158:
1502:FreeRTOS/tasks.c ****     }
 2056              		.loc 1 1502 9 discriminator 4 view .LVU599
1503:FreeRTOS/tasks.c **** 
 2057              		.loc 1 1503 5 is_stmt 0 discriminator 4 view .LVU600
 2058 0010 2046     		mov	r0, r4
 2059 0012 10BD     		pop	{r4, pc}
 2060              	.LVL159:
 2061              	.L157:
1497:FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 2062              		.loc 1 1497 21 discriminator 1 view .LVU601
 2063 0014 014B     		ldr	r3, .L158
 2064 0016 1C68     		ldr	r4, [r3]
 2065              	.LVL160:
1497:FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 2066              		.loc 1 1497 21 discriminator 1 view .LVU602
 2067 0018 F7E7     		b	.L155
 2068              	.L159:
 2069 001a 00BF     		.align	2
 2070              	.L158:
 2071 001c 00000000 		.word	.LANCHOR3
 2072              		.cfi_endproc
 2073              	.LFE13:
 2075              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 2076              		.align	1
 2077              		.global	uxTaskPriorityGetFromISR
 2078              		.syntax unified
 2079              		.thumb
 2080              		.thumb_func
 2081              		.fpu fpv4-sp-d16
 2083              	uxTaskPriorityGetFromISR:
 2084              	.LVL161:
 2085              	.LFB14:
1511:FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
 2086              		.loc 1 1511 5 is_stmt 1 view -0
 2087              		.cfi_startproc
 2088              		@ args = 0, pretend = 0, frame = 0
 2089              		@ frame_needed = 0, uses_anonymous_args = 0
1511:FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
 2090              		.loc 1 1511 5 is_stmt 0 view .LVU604
 2091 0000 10B5     		push	{r4, lr}
 2092              	.LCFI21:
 2093              		.cfi_def_cfa_offset 8
 2094              		.cfi_offset 4, -8
 2095              		.cfi_offset 14, -4
 2096 0002 0446     		mov	r4, r0
1512:FreeRTOS/tasks.c ****         UBaseType_t uxReturn, uxSavedInterruptState;
 2097              		.loc 1 1512 9 is_stmt 1 view .LVU605
1513:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 144


 2098              		.loc 1 1513 9 view .LVU606
1531:FreeRTOS/tasks.c **** 
 2099              		.loc 1 1531 9 view .LVU607
 2100 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2101              	.LVL162:
1533:FreeRTOS/tasks.c ****         {
 2102              		.loc 1 1533 9 view .LVU608
 2103              	.LBB205:
 2104              	.LBI205:
 199:FreeRTOS/portable/portmacro.h ****         (
 200:FreeRTOS/portable/portmacro.h ****             "	mov %0, %1												\n"\
 201:FreeRTOS/portable/portmacro.h ****             "	msr basepri, %0											\n"\
 202:FreeRTOS/portable/portmacro.h ****             "	isb														\n"\
 203:FreeRTOS/portable/portmacro.h ****             "	dsb														\n"\
 204:FreeRTOS/portable/portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 205:FreeRTOS/portable/portmacro.h ****         );
 206:FreeRTOS/portable/portmacro.h ****     }
 207:FreeRTOS/portable/portmacro.h **** 
 208:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
 209:FreeRTOS/portable/portmacro.h **** 
 210:FreeRTOS/portable/portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 2105              		.loc 2 210 38 view .LVU609
 2106              	.LBB206:
 211:FreeRTOS/portable/portmacro.h ****     {
 212:FreeRTOS/portable/portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 2107              		.loc 2 212 9 view .LVU610
 213:FreeRTOS/portable/portmacro.h **** 
 214:FreeRTOS/portable/portmacro.h ****         __asm volatile
 2108              		.loc 2 214 9 view .LVU611
 2109              		.syntax unified
 2110              	@ 214 "FreeRTOS/portable/portmacro.h" 1
 2111 0008 EFF31183 			mrs r3, basepri											
 2112 000c 4FF05002 		mov r2, #80												
 2113 0010 82F31188 		msr basepri, r2											
 2114 0014 BFF36F8F 		isb														
 2115 0018 BFF34F8F 		dsb														
 2116              	
 2117              	@ 0 "" 2
 2118              	.LVL163:
 215:FreeRTOS/portable/portmacro.h ****         (
 216:FreeRTOS/portable/portmacro.h ****             "	mrs %0, basepri											\n"\
 217:FreeRTOS/portable/portmacro.h ****             "	mov %1, %2												\n"\
 218:FreeRTOS/portable/portmacro.h ****             "	msr basepri, %1											\n"\
 219:FreeRTOS/portable/portmacro.h ****             "	isb														\n"\
 220:FreeRTOS/portable/portmacro.h ****             "	dsb														\n"\
 221:FreeRTOS/portable/portmacro.h ****             : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT
 222:FreeRTOS/portable/portmacro.h ****         );
 223:FreeRTOS/portable/portmacro.h **** 
 224:FreeRTOS/portable/portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
 225:FreeRTOS/portable/portmacro.h ****          * warnings. */
 226:FreeRTOS/portable/portmacro.h ****         return ulOriginalBASEPRI;
 2119              		.loc 2 226 9 view .LVU612
 2120              		.loc 2 226 9 is_stmt 0 view .LVU613
 2121              		.thumb
 2122              		.syntax unified
 2123              	.LBE206:
 2124              	.LBE205:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 145


1537:FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 2125              		.loc 1 1537 13 is_stmt 1 view .LVU614
1537:FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 2126              		.loc 1 1537 21 is_stmt 0 view .LVU615
 2127 001c 1CB1     		cbz	r4, .L163
 2128              	.LVL164:
 2129              	.L161:
1538:FreeRTOS/tasks.c ****         }
 2130              		.loc 1 1538 13 is_stmt 1 discriminator 4 view .LVU616
1538:FreeRTOS/tasks.c ****         }
 2131              		.loc 1 1538 22 is_stmt 0 discriminator 4 view .LVU617
 2132 001e E06A     		ldr	r0, [r4, #44]
 2133              	.LVL165:
1540:FreeRTOS/tasks.c **** 
 2134              		.loc 1 1540 9 is_stmt 1 discriminator 4 view .LVU618
 2135              	.LBB207:
 2136              	.LBI207:
 227:FreeRTOS/portable/portmacro.h ****     }
 228:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
 229:FreeRTOS/portable/portmacro.h **** 
 230:FreeRTOS/portable/portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 2137              		.loc 2 230 34 discriminator 4 view .LVU619
 2138              	.LBB208:
 231:FreeRTOS/portable/portmacro.h ****     {
 232:FreeRTOS/portable/portmacro.h ****         __asm volatile
 2139              		.loc 2 232 9 discriminator 4 view .LVU620
 2140              		.syntax unified
 2141              	@ 232 "FreeRTOS/portable/portmacro.h" 1
 2142 0020 83F31188 			msr basepri, r3	
 2143              	@ 0 "" 2
 2144              	.LVL166:
 2145              		.loc 2 232 9 is_stmt 0 discriminator 4 view .LVU621
 2146              		.thumb
 2147              		.syntax unified
 2148              	.LBE208:
 2149              	.LBE207:
1542:FreeRTOS/tasks.c ****     }
 2150              		.loc 1 1542 9 is_stmt 1 discriminator 4 view .LVU622
1543:FreeRTOS/tasks.c **** 
 2151              		.loc 1 1543 5 is_stmt 0 discriminator 4 view .LVU623
 2152 0024 10BD     		pop	{r4, pc}
 2153              	.LVL167:
 2154              	.L163:
1537:FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 2155              		.loc 1 1537 21 discriminator 1 view .LVU624
 2156 0026 014A     		ldr	r2, .L164
 2157 0028 1468     		ldr	r4, [r2]
 2158              	.LVL168:
1537:FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 2159              		.loc 1 1537 21 discriminator 1 view .LVU625
 2160 002a F8E7     		b	.L161
 2161              	.L165:
 2162              		.align	2
 2163              	.L164:
 2164 002c 00000000 		.word	.LANCHOR3
 2165              		.cfi_endproc
 2166              	.LFE14:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 146


 2168              		.section	.text.vTaskPrioritySet,"ax",%progbits
 2169              		.align	1
 2170              		.global	vTaskPrioritySet
 2171              		.syntax unified
 2172              		.thumb
 2173              		.thumb_func
 2174              		.fpu fpv4-sp-d16
 2176              	vTaskPrioritySet:
 2177              	.LVL169:
 2178              	.LFB15:
1552:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 2179              		.loc 1 1552 5 is_stmt 1 view -0
 2180              		.cfi_startproc
 2181              		@ args = 0, pretend = 0, frame = 0
 2182              		@ frame_needed = 0, uses_anonymous_args = 0
1552:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 2183              		.loc 1 1552 5 is_stmt 0 view .LVU627
 2184 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2185              	.LCFI22:
 2186              		.cfi_def_cfa_offset 24
 2187              		.cfi_offset 3, -24
 2188              		.cfi_offset 4, -20
 2189              		.cfi_offset 5, -16
 2190              		.cfi_offset 6, -12
 2191              		.cfi_offset 7, -8
 2192              		.cfi_offset 14, -4
1553:FreeRTOS/tasks.c ****         UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
 2193              		.loc 1 1553 9 is_stmt 1 view .LVU628
1554:FreeRTOS/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 2194              		.loc 1 1554 9 view .LVU629
1555:FreeRTOS/tasks.c **** 
 2195              		.loc 1 1555 9 view .LVU630
 2196              	.LVL170:
1557:FreeRTOS/tasks.c **** 
 2197              		.loc 1 1557 9 view .LVU631
 2198 0002 0429     		cmp	r1, #4
 2199 0004 08D9     		bls	.L167
1557:FreeRTOS/tasks.c **** 
 2200              		.loc 1 1557 9 view .LVU632
 2201              	.LBB209:
 2202              	.LBI209:
 194:FreeRTOS/portable/portmacro.h ****     {
 2203              		.loc 2 194 34 view .LVU633
 2204              	.LBB210:
 196:FreeRTOS/portable/portmacro.h **** 
 2205              		.loc 2 196 9 view .LVU634
 198:FreeRTOS/portable/portmacro.h ****         (
 2206              		.loc 2 198 9 view .LVU635
 2207              		.syntax unified
 2208              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 2209 0006 4FF05003 			mov r3, #80												
 2210 000a 83F31188 		msr basepri, r3											
 2211 000e BFF36F8F 		isb														
 2212 0012 BFF34F8F 		dsb														
 2213              	
 2214              	@ 0 "" 2
 2215              	.LVL171:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 147


 2216              		.thumb
 2217              		.syntax unified
 2218              	.L168:
 198:FreeRTOS/portable/portmacro.h ****         (
 2219              		.loc 2 198 9 is_stmt 0 view .LVU636
 2220              	.LBE210:
 2221              	.LBE209:
1557:FreeRTOS/tasks.c **** 
 2222              		.loc 1 1557 9 is_stmt 1 discriminator 1 view .LVU637
1557:FreeRTOS/tasks.c **** 
 2223              		.loc 1 1557 9 discriminator 1 view .LVU638
1557:FreeRTOS/tasks.c **** 
 2224              		.loc 1 1557 9 discriminator 1 view .LVU639
 2225 0016 FEE7     		b	.L168
 2226              	.L167:
 2227 0018 0446     		mov	r4, r0
 2228 001a 0D46     		mov	r5, r1
1557:FreeRTOS/tasks.c **** 
 2229              		.loc 1 1557 61 view .LVU640
1560:FreeRTOS/tasks.c ****         {
 2230              		.loc 1 1560 9 view .LVU641
 2231              	.LVL172:
1566:FreeRTOS/tasks.c ****         }
 2232              		.loc 1 1566 37 view .LVU642
1569:FreeRTOS/tasks.c ****         {
 2233              		.loc 1 1569 9 view .LVU643
 2234 001c FFF7FEFF 		bl	vPortEnterCritical
 2235              	.LVL173:
1573:FreeRTOS/tasks.c **** 
 2236              		.loc 1 1573 13 view .LVU644
1573:FreeRTOS/tasks.c **** 
 2237              		.loc 1 1573 21 is_stmt 0 view .LVU645
 2238 0020 74B1     		cbz	r4, .L181
 2239              	.LVL174:
 2240              	.L169:
1575:FreeRTOS/tasks.c **** 
 2241              		.loc 1 1575 59 is_stmt 1 discriminator 4 view .LVU646
1579:FreeRTOS/tasks.c ****                 }
 2242              		.loc 1 1579 21 discriminator 4 view .LVU647
1579:FreeRTOS/tasks.c ****                 }
 2243              		.loc 1 1579 43 is_stmt 0 discriminator 4 view .LVU648
 2244 0022 A36C     		ldr	r3, [r4, #72]
 2245              	.LVL175:
1587:FreeRTOS/tasks.c ****             {
 2246              		.loc 1 1587 13 is_stmt 1 discriminator 4 view .LVU649
1587:FreeRTOS/tasks.c ****             {
 2247              		.loc 1 1587 15 is_stmt 0 discriminator 4 view .LVU650
 2248 0024 9D42     		cmp	r5, r3
 2249 0026 2ED0     		beq	.L170
1591:FreeRTOS/tasks.c ****                 {
 2250              		.loc 1 1591 17 is_stmt 1 view .LVU651
1591:FreeRTOS/tasks.c ****                 {
 2251              		.loc 1 1591 19 is_stmt 0 view .LVU652
 2252 0028 0DD9     		bls	.L171
1593:FreeRTOS/tasks.c ****                     {
 2253              		.loc 1 1593 21 is_stmt 1 view .LVU653
1593:FreeRTOS/tasks.c ****                     {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 148


 2254              		.loc 1 1593 31 is_stmt 0 view .LVU654
 2255 002a 314A     		ldr	r2, .L184
 2256 002c 1268     		ldr	r2, [r2]
1593:FreeRTOS/tasks.c ****                     {
 2257              		.loc 1 1593 23 view .LVU655
 2258 002e A242     		cmp	r2, r4
 2259 0030 2CD0     		beq	.L177
1598:FreeRTOS/tasks.c ****                         {
 2260              		.loc 1 1598 25 is_stmt 1 view .LVU656
1598:FreeRTOS/tasks.c ****                         {
 2261              		.loc 1 1598 58 is_stmt 0 view .LVU657
 2262 0032 2F4A     		ldr	r2, .L184
 2263 0034 1268     		ldr	r2, [r2]
 2264 0036 D26A     		ldr	r2, [r2, #44]
1598:FreeRTOS/tasks.c ****                         {
 2265              		.loc 1 1598 27 view .LVU658
 2266 0038 AA42     		cmp	r2, r5
 2267 003a 29D9     		bls	.L178
1555:FreeRTOS/tasks.c **** 
 2268              		.loc 1 1555 20 view .LVU659
 2269 003c 0026     		movs	r6, #0
 2270 003e 07E0     		b	.L172
 2271              	.LVL176:
 2272              	.L181:
1573:FreeRTOS/tasks.c **** 
 2273              		.loc 1 1573 21 discriminator 1 view .LVU660
 2274 0040 2B4B     		ldr	r3, .L184
 2275 0042 1C68     		ldr	r4, [r3]
 2276              	.LVL177:
1573:FreeRTOS/tasks.c **** 
 2277              		.loc 1 1573 21 discriminator 1 view .LVU661
 2278 0044 EDE7     		b	.L169
 2279              	.LVL178:
 2280              	.L171:
1614:FreeRTOS/tasks.c ****                 {
 2281              		.loc 1 1614 22 is_stmt 1 view .LVU662
1614:FreeRTOS/tasks.c ****                 {
 2282              		.loc 1 1614 32 is_stmt 0 view .LVU663
 2283 0046 2A4A     		ldr	r2, .L184
 2284 0048 1268     		ldr	r2, [r2]
1614:FreeRTOS/tasks.c ****                 {
 2285              		.loc 1 1614 24 view .LVU664
 2286 004a A242     		cmp	r2, r4
 2287 004c 22D0     		beq	.L179
1555:FreeRTOS/tasks.c **** 
 2288              		.loc 1 1555 20 view .LVU665
 2289 004e 0026     		movs	r6, #0
 2290              	.L172:
 2291              	.LVL179:
1626:FreeRTOS/tasks.c **** 
 2292              		.loc 1 1626 17 is_stmt 1 view .LVU666
1631:FreeRTOS/tasks.c **** 
 2293              		.loc 1 1631 17 view .LVU667
1631:FreeRTOS/tasks.c **** 
 2294              		.loc 1 1631 39 is_stmt 0 view .LVU668
 2295 0050 E76A     		ldr	r7, [r4, #44]
 2296              	.LVL180:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 149


1637:FreeRTOS/tasks.c ****                         {
 2297              		.loc 1 1637 25 is_stmt 1 view .LVU669
1637:FreeRTOS/tasks.c ****                         {
 2298              		.loc 1 1637 27 is_stmt 0 view .LVU670
 2299 0052 BB42     		cmp	r3, r7
 2300 0054 20D0     		beq	.L182
 2301              	.L173:
1643:FreeRTOS/tasks.c ****                         }
 2302              		.loc 1 1643 53 is_stmt 1 view .LVU671
1647:FreeRTOS/tasks.c ****                     }
 2303              		.loc 1 1647 25 view .LVU672
1647:FreeRTOS/tasks.c ****                     }
 2304              		.loc 1 1647 47 is_stmt 0 view .LVU673
 2305 0056 A564     		str	r5, [r4, #72]
1657:FreeRTOS/tasks.c ****                 {
 2306              		.loc 1 1657 17 is_stmt 1 view .LVU674
1657:FreeRTOS/tasks.c ****                 {
 2307              		.loc 1 1657 23 is_stmt 0 view .LVU675
 2308 0058 A369     		ldr	r3, [r4, #24]
 2309              	.LVL181:
1657:FreeRTOS/tasks.c ****                 {
 2310              		.loc 1 1657 19 view .LVU676
 2311 005a 002B     		cmp	r3, #0
 2312 005c 02DB     		blt	.L174
1659:FreeRTOS/tasks.c ****                 }
 2313              		.loc 1 1659 21 is_stmt 1 view .LVU677
 2314 005e C5F10505 		rsb	r5, r5, #5
 2315              	.LVL182:
1659:FreeRTOS/tasks.c ****                 }
 2316              		.loc 1 1659 21 is_stmt 0 view .LVU678
 2317 0062 A561     		str	r5, [r4, #24]
 2318              	.L174:
1663:FreeRTOS/tasks.c ****                 }
 2319              		.loc 1 1663 45 is_stmt 1 view .LVU679
1670:FreeRTOS/tasks.c ****                 {
 2320              		.loc 1 1670 17 view .LVU680
1670:FreeRTOS/tasks.c ****                 {
 2321              		.loc 1 1670 21 is_stmt 0 view .LVU681
 2322 0064 6169     		ldr	r1, [r4, #20]
 2323 0066 07EB8702 		add	r2, r7, r7, lsl #2
 2324 006a 224B     		ldr	r3, .L184+4
 2325 006c 03EB8203 		add	r3, r3, r2, lsl #2
1670:FreeRTOS/tasks.c ****                 {
 2326              		.loc 1 1670 19 view .LVU682
 2327 0070 9942     		cmp	r1, r3
 2328 0072 13D0     		beq	.L183
 2329              	.LVL183:
 2330              	.L175:
1691:FreeRTOS/tasks.c ****                 }
 2331              		.loc 1 1691 45 is_stmt 1 view .LVU683
1694:FreeRTOS/tasks.c ****                 {
 2332              		.loc 1 1694 17 view .LVU684
1694:FreeRTOS/tasks.c ****                 {
 2333              		.loc 1 1694 19 is_stmt 0 view .LVU685
 2334 0074 3EB1     		cbz	r6, .L170
1696:FreeRTOS/tasks.c ****                 }
 2335              		.loc 1 1696 21 is_stmt 1 view .LVU686
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 150


 2336 0076 204B     		ldr	r3, .L184+8
 2337 0078 4FF08052 		mov	r2, #268435456
 2338 007c 1A60     		str	r2, [r3]
1696:FreeRTOS/tasks.c ****                 }
 2339              		.loc 1 1696 21 view .LVU687
 2340              		.syntax unified
 2341              	@ 1696 "FreeRTOS/tasks.c" 1
 2342 007e BFF34F8F 		dsb
 2343              	@ 0 "" 2
1696:FreeRTOS/tasks.c ****                 }
 2344              		.loc 1 1696 21 view .LVU688
 2345              	@ 1696 "FreeRTOS/tasks.c" 1
 2346 0082 BFF36F8F 		isb
 2347              	@ 0 "" 2
1696:FreeRTOS/tasks.c ****                 }
 2348              		.loc 1 1696 52 view .LVU689
 2349              	.LVL184:
 2350              		.thumb
 2351              		.syntax unified
 2352              	.L170:
1700:FreeRTOS/tasks.c ****                 }
 2353              		.loc 1 1700 45 view .LVU690
1705:FreeRTOS/tasks.c ****             }
 2354              		.loc 1 1705 17 view .LVU691
1708:FreeRTOS/tasks.c ****     }
 2355              		.loc 1 1708 9 view .LVU692
 2356 0086 FFF7FEFF 		bl	vPortExitCritical
 2357              	.LVL185:
1709:FreeRTOS/tasks.c **** 
 2358              		.loc 1 1709 5 is_stmt 0 view .LVU693
 2359 008a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2360              	.LVL186:
 2361              	.L177:
1555:FreeRTOS/tasks.c **** 
 2362              		.loc 1 1555 20 view .LVU694
 2363 008c 0026     		movs	r6, #0
 2364 008e DFE7     		b	.L172
 2365              	.L178:
1600:FreeRTOS/tasks.c ****                         }
 2366              		.loc 1 1600 44 view .LVU695
 2367 0090 0126     		movs	r6, #1
 2368 0092 DDE7     		b	.L172
 2369              	.L179:
1619:FreeRTOS/tasks.c ****                 }
 2370              		.loc 1 1619 36 view .LVU696
 2371 0094 0126     		movs	r6, #1
 2372 0096 DBE7     		b	.L172
 2373              	.LVL187:
 2374              	.L182:
1639:FreeRTOS/tasks.c ****                         }
 2375              		.loc 1 1639 29 is_stmt 1 view .LVU697
1639:FreeRTOS/tasks.c ****                         }
 2376              		.loc 1 1639 47 is_stmt 0 view .LVU698
 2377 0098 E562     		str	r5, [r4, #44]
 2378 009a DCE7     		b	.L173
 2379              	.LVL188:
 2380              	.L183:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 151


1675:FreeRTOS/tasks.c ****                     {
 2381              		.loc 1 1675 21 is_stmt 1 view .LVU699
1675:FreeRTOS/tasks.c ****                     {
 2382              		.loc 1 1675 25 is_stmt 0 view .LVU700
 2383 009c 251D     		adds	r5, r4, #4
 2384 009e 2846     		mov	r0, r5
 2385 00a0 FFF7FEFF 		bl	uxListRemove
 2386              	.LVL189:
1675:FreeRTOS/tasks.c ****                     {
 2387              		.loc 1 1675 23 view .LVU701
 2388 00a4 38B9     		cbnz	r0, .L176
1680:FreeRTOS/tasks.c ****                     }
 2389              		.loc 1 1680 25 is_stmt 1 view .LVU702
 2390 00a6 0123     		movs	r3, #1
 2391 00a8 03FA07F7 		lsl	r7, r3, r7
 2392              	.LVL190:
1680:FreeRTOS/tasks.c ****                     }
 2393              		.loc 1 1680 25 is_stmt 0 view .LVU703
 2394 00ac 134A     		ldr	r2, .L184+12
 2395 00ae 1368     		ldr	r3, [r2]
 2396 00b0 23EA0703 		bic	r3, r3, r7
 2397 00b4 1360     		str	r3, [r2]
 2398              	.L176:
1684:FreeRTOS/tasks.c ****                     }
 2399              		.loc 1 1684 49 is_stmt 1 view .LVU704
1687:FreeRTOS/tasks.c ****                 }
 2400              		.loc 1 1687 21 view .LVU705
1687:FreeRTOS/tasks.c ****                 }
 2401              		.loc 1 1687 21 view .LVU706
 2402 00b6 E36A     		ldr	r3, [r4, #44]
 2403 00b8 0122     		movs	r2, #1
 2404 00ba 9A40     		lsls	r2, r2, r3
 2405 00bc 0F49     		ldr	r1, .L184+12
 2406 00be 0868     		ldr	r0, [r1]
 2407 00c0 0243     		orrs	r2, r2, r0
 2408 00c2 0A60     		str	r2, [r1]
 2409              	.LBB211:
1687:FreeRTOS/tasks.c ****                 }
 2410              		.loc 1 1687 21 view .LVU707
 2411 00c4 0B4A     		ldr	r2, .L184+4
 2412 00c6 03EB8303 		add	r3, r3, r3, lsl #2
 2413 00ca 02EB8303 		add	r3, r2, r3, lsl #2
 2414 00ce 5B68     		ldr	r3, [r3, #4]
 2415              	.LVL191:
1687:FreeRTOS/tasks.c ****                 }
 2416              		.loc 1 1687 21 view .LVU708
1687:FreeRTOS/tasks.c ****                 }
 2417              		.loc 1 1687 21 view .LVU709
1687:FreeRTOS/tasks.c ****                 }
 2418              		.loc 1 1687 21 view .LVU710
 2419 00d0 A360     		str	r3, [r4, #8]
1687:FreeRTOS/tasks.c ****                 }
 2420              		.loc 1 1687 21 view .LVU711
 2421 00d2 9968     		ldr	r1, [r3, #8]
 2422 00d4 E160     		str	r1, [r4, #12]
1687:FreeRTOS/tasks.c ****                 }
 2423              		.loc 1 1687 21 view .LVU712
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 152


 2424 00d6 4D60     		str	r5, [r1, #4]
1687:FreeRTOS/tasks.c ****                 }
 2425              		.loc 1 1687 21 view .LVU713
 2426 00d8 9D60     		str	r5, [r3, #8]
1687:FreeRTOS/tasks.c ****                 }
 2427              		.loc 1 1687 21 view .LVU714
 2428 00da E36A     		ldr	r3, [r4, #44]
 2429              	.LVL192:
1687:FreeRTOS/tasks.c ****                 }
 2430              		.loc 1 1687 21 is_stmt 0 view .LVU715
 2431 00dc 03EB8301 		add	r1, r3, r3, lsl #2
 2432 00e0 8800     		lsls	r0, r1, #2
 2433 00e2 02EB8101 		add	r1, r2, r1, lsl #2
 2434 00e6 6161     		str	r1, [r4, #20]
1687:FreeRTOS/tasks.c ****                 }
 2435              		.loc 1 1687 21 is_stmt 1 view .LVU716
 2436 00e8 1158     		ldr	r1, [r2, r0]
 2437 00ea 0131     		adds	r1, r1, #1
 2438 00ec 1150     		str	r1, [r2, r0]
 2439              	.LBE211:
1687:FreeRTOS/tasks.c ****                 }
 2440              		.loc 1 1687 21 view .LVU717
1687:FreeRTOS/tasks.c ****                 }
 2441              		.loc 1 1687 51 view .LVU718
 2442 00ee C1E7     		b	.L175
 2443              	.L185:
 2444              		.align	2
 2445              	.L184:
 2446 00f0 00000000 		.word	.LANCHOR3
 2447 00f4 00000000 		.word	.LANCHOR4
 2448 00f8 04ED00E0 		.word	-536810236
 2449 00fc 00000000 		.word	.LANCHOR2
 2450              		.cfi_endproc
 2451              	.LFE15:
 2453              		.section	.text.vTaskResume,"ax",%progbits
 2454              		.align	1
 2455              		.global	vTaskResume
 2456              		.syntax unified
 2457              		.thumb
 2458              		.thumb_func
 2459              		.fpu fpv4-sp-d16
 2461              	vTaskResume:
 2462              	.LVL193:
 2463              	.LFB18:
1869:FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 2464              		.loc 1 1869 5 view -0
 2465              		.cfi_startproc
 2466              		@ args = 0, pretend = 0, frame = 0
 2467              		@ frame_needed = 0, uses_anonymous_args = 0
1869:FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 2468              		.loc 1 1869 5 is_stmt 0 view .LVU720
 2469 0000 38B5     		push	{r3, r4, r5, lr}
 2470              	.LCFI23:
 2471              		.cfi_def_cfa_offset 16
 2472              		.cfi_offset 3, -16
 2473              		.cfi_offset 4, -12
 2474              		.cfi_offset 5, -8
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 153


 2475              		.cfi_offset 14, -4
1870:FreeRTOS/tasks.c **** 
 2476              		.loc 1 1870 9 is_stmt 1 view .LVU721
 2477              	.LVL194:
1873:FreeRTOS/tasks.c **** 
 2478              		.loc 1 1873 9 view .LVU722
 2479 0002 68B1     		cbz	r0, .L192
 2480 0004 0446     		mov	r4, r0
1873:FreeRTOS/tasks.c **** 
 2481              		.loc 1 1873 38 discriminator 2 view .LVU723
1877:FreeRTOS/tasks.c ****         {
 2482              		.loc 1 1877 9 discriminator 2 view .LVU724
1877:FreeRTOS/tasks.c ****         {
 2483              		.loc 1 1877 21 is_stmt 0 discriminator 2 view .LVU725
 2484 0006 224B     		ldr	r3, .L194
 2485 0008 1B68     		ldr	r3, [r3]
1877:FreeRTOS/tasks.c ****         {
 2486              		.loc 1 1877 11 discriminator 2 view .LVU726
 2487 000a 8342     		cmp	r3, r0
 2488 000c 07D0     		beq	.L186
1879:FreeRTOS/tasks.c ****             {
 2489              		.loc 1 1879 13 is_stmt 1 view .LVU727
 2490 000e FFF7FEFF 		bl	vPortEnterCritical
 2491              	.LVL195:
1881:FreeRTOS/tasks.c ****                 {
 2492              		.loc 1 1881 17 view .LVU728
1881:FreeRTOS/tasks.c ****                 {
 2493              		.loc 1 1881 21 is_stmt 0 view .LVU729
 2494 0012 2046     		mov	r0, r4
 2495 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2496              	.LVL196:
1881:FreeRTOS/tasks.c ****                 {
 2497              		.loc 1 1881 19 view .LVU730
 2498 0018 58B9     		cbnz	r0, .L193
 2499              	.L190:
1905:FreeRTOS/tasks.c ****                 }
 2500              		.loc 1 1905 45 is_stmt 1 view .LVU731
1908:FreeRTOS/tasks.c ****         }
 2501              		.loc 1 1908 13 view .LVU732
 2502 001a FFF7FEFF 		bl	vPortExitCritical
 2503              	.LVL197:
1912:FreeRTOS/tasks.c ****         }
 2504              		.loc 1 1912 37 view .LVU733
 2505              	.L186:
1914:FreeRTOS/tasks.c **** 
 2506              		.loc 1 1914 5 is_stmt 0 view .LVU734
 2507 001e 38BD     		pop	{r3, r4, r5, pc}
 2508              	.LVL198:
 2509              	.L192:
1873:FreeRTOS/tasks.c **** 
 2510              		.loc 1 1873 9 is_stmt 1 view .LVU735
 2511              	.LBB212:
 2512              	.LBI212:
 194:FreeRTOS/portable/portmacro.h ****     {
 2513              		.loc 2 194 34 view .LVU736
 2514              	.LBB213:
 196:FreeRTOS/portable/portmacro.h **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 154


 2515              		.loc 2 196 9 view .LVU737
 198:FreeRTOS/portable/portmacro.h ****         (
 2516              		.loc 2 198 9 view .LVU738
 2517              		.syntax unified
 2518              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 2519 0020 4FF05003 			mov r3, #80												
 2520 0024 83F31188 		msr basepri, r3											
 2521 0028 BFF36F8F 		isb														
 2522 002c BFF34F8F 		dsb														
 2523              	
 2524              	@ 0 "" 2
 2525              	.LVL199:
 2526              		.thumb
 2527              		.syntax unified
 2528              	.L188:
 198:FreeRTOS/portable/portmacro.h ****         (
 2529              		.loc 2 198 9 is_stmt 0 view .LVU739
 2530              	.LBE213:
 2531              	.LBE212:
1873:FreeRTOS/tasks.c **** 
 2532              		.loc 1 1873 9 is_stmt 1 discriminator 1 view .LVU740
1873:FreeRTOS/tasks.c **** 
 2533              		.loc 1 1873 9 discriminator 1 view .LVU741
1873:FreeRTOS/tasks.c **** 
 2534              		.loc 1 1873 9 discriminator 1 view .LVU742
 2535 0030 FEE7     		b	.L188
 2536              	.LVL200:
 2537              	.L193:
1883:FreeRTOS/tasks.c **** 
 2538              		.loc 1 1883 46 view .LVU743
1887:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2539              		.loc 1 1887 21 view .LVU744
1887:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2540              		.loc 1 1887 30 is_stmt 0 view .LVU745
 2541 0032 251D     		adds	r5, r4, #4
 2542 0034 2846     		mov	r0, r5
 2543 0036 FFF7FEFF 		bl	uxListRemove
 2544              	.LVL201:
1888:FreeRTOS/tasks.c **** 
 2545              		.loc 1 1888 21 is_stmt 1 view .LVU746
1888:FreeRTOS/tasks.c **** 
 2546              		.loc 1 1888 21 view .LVU747
 2547 003a E36A     		ldr	r3, [r4, #44]
 2548 003c 0122     		movs	r2, #1
 2549 003e 9A40     		lsls	r2, r2, r3
 2550 0040 1449     		ldr	r1, .L194+4
 2551 0042 0868     		ldr	r0, [r1]
 2552 0044 0243     		orrs	r2, r2, r0
 2553 0046 0A60     		str	r2, [r1]
 2554              	.LBB214:
1888:FreeRTOS/tasks.c **** 
 2555              		.loc 1 1888 21 view .LVU748
 2556 0048 134A     		ldr	r2, .L194+8
 2557 004a 03EB8303 		add	r3, r3, r3, lsl #2
 2558 004e 02EB8303 		add	r3, r2, r3, lsl #2
 2559 0052 5B68     		ldr	r3, [r3, #4]
 2560              	.LVL202:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 155


1888:FreeRTOS/tasks.c **** 
 2561              		.loc 1 1888 21 view .LVU749
1888:FreeRTOS/tasks.c **** 
 2562              		.loc 1 1888 21 view .LVU750
1888:FreeRTOS/tasks.c **** 
 2563              		.loc 1 1888 21 view .LVU751
 2564 0054 A360     		str	r3, [r4, #8]
1888:FreeRTOS/tasks.c **** 
 2565              		.loc 1 1888 21 view .LVU752
 2566 0056 9968     		ldr	r1, [r3, #8]
 2567 0058 E160     		str	r1, [r4, #12]
1888:FreeRTOS/tasks.c **** 
 2568              		.loc 1 1888 21 view .LVU753
 2569 005a 4D60     		str	r5, [r1, #4]
1888:FreeRTOS/tasks.c **** 
 2570              		.loc 1 1888 21 view .LVU754
 2571 005c 9D60     		str	r5, [r3, #8]
1888:FreeRTOS/tasks.c **** 
 2572              		.loc 1 1888 21 view .LVU755
 2573 005e E36A     		ldr	r3, [r4, #44]
 2574              	.LVL203:
1888:FreeRTOS/tasks.c **** 
 2575              		.loc 1 1888 21 is_stmt 0 view .LVU756
 2576 0060 03EB8301 		add	r1, r3, r3, lsl #2
 2577 0064 8800     		lsls	r0, r1, #2
 2578 0066 02EB8101 		add	r1, r2, r1, lsl #2
 2579 006a 6161     		str	r1, [r4, #20]
1888:FreeRTOS/tasks.c **** 
 2580              		.loc 1 1888 21 is_stmt 1 view .LVU757
 2581 006c 1158     		ldr	r1, [r2, r0]
 2582 006e 0131     		adds	r1, r1, #1
 2583 0070 1150     		str	r1, [r2, r0]
 2584              	.LBE214:
1888:FreeRTOS/tasks.c **** 
 2585              		.loc 1 1888 21 view .LVU758
1888:FreeRTOS/tasks.c **** 
 2586              		.loc 1 1888 51 view .LVU759
1891:FreeRTOS/tasks.c ****                     {
 2587              		.loc 1 1891 21 view .LVU760
1891:FreeRTOS/tasks.c ****                     {
 2588              		.loc 1 1891 30 is_stmt 0 view .LVU761
 2589 0072 E26A     		ldr	r2, [r4, #44]
1891:FreeRTOS/tasks.c ****                     {
 2590              		.loc 1 1891 58 view .LVU762
 2591 0074 064B     		ldr	r3, .L194
 2592 0076 1B68     		ldr	r3, [r3]
 2593 0078 DB6A     		ldr	r3, [r3, #44]
1891:FreeRTOS/tasks.c ****                     {
 2594              		.loc 1 1891 23 view .LVU763
 2595 007a 9A42     		cmp	r2, r3
 2596 007c CDD3     		bcc	.L190
1896:FreeRTOS/tasks.c ****                     }
 2597              		.loc 1 1896 25 is_stmt 1 view .LVU764
 2598 007e 074B     		ldr	r3, .L194+12
 2599 0080 4FF08052 		mov	r2, #268435456
 2600 0084 1A60     		str	r2, [r3]
1896:FreeRTOS/tasks.c ****                     }
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 156


 2601              		.loc 1 1896 25 view .LVU765
 2602              		.syntax unified
 2603              	@ 1896 "FreeRTOS/tasks.c" 1
 2604 0086 BFF34F8F 		dsb
 2605              	@ 0 "" 2
1896:FreeRTOS/tasks.c ****                     }
 2606              		.loc 1 1896 25 view .LVU766
 2607              	@ 1896 "FreeRTOS/tasks.c" 1
 2608 008a BFF36F8F 		isb
 2609              	@ 0 "" 2
1896:FreeRTOS/tasks.c ****                     }
 2610              		.loc 1 1896 56 view .LVU767
 2611              		.thumb
 2612              		.syntax unified
 2613 008e C4E7     		b	.L190
 2614              	.L195:
 2615              		.align	2
 2616              	.L194:
 2617 0090 00000000 		.word	.LANCHOR3
 2618 0094 00000000 		.word	.LANCHOR2
 2619 0098 00000000 		.word	.LANCHOR4
 2620 009c 04ED00E0 		.word	-536810236
 2621              		.cfi_endproc
 2622              	.LFE18:
 2624              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 2625              		.align	1
 2626              		.global	xTaskResumeFromISR
 2627              		.syntax unified
 2628              		.thumb
 2629              		.thumb_func
 2630              		.fpu fpv4-sp-d16
 2632              	xTaskResumeFromISR:
 2633              	.LVL204:
 2634              	.LFB19:
1923:FreeRTOS/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 2635              		.loc 1 1923 5 view -0
 2636              		.cfi_startproc
 2637              		@ args = 0, pretend = 0, frame = 0
 2638              		@ frame_needed = 0, uses_anonymous_args = 0
1923:FreeRTOS/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 2639              		.loc 1 1923 5 is_stmt 0 view .LVU769
 2640 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2641              	.LCFI24:
 2642              		.cfi_def_cfa_offset 24
 2643              		.cfi_offset 3, -24
 2644              		.cfi_offset 4, -20
 2645              		.cfi_offset 5, -16
 2646              		.cfi_offset 6, -12
 2647              		.cfi_offset 7, -8
 2648              		.cfi_offset 14, -4
1924:FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 2649              		.loc 1 1924 9 is_stmt 1 view .LVU770
 2650              	.LVL205:
1925:FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 2651              		.loc 1 1925 9 view .LVU771
1926:FreeRTOS/tasks.c **** 
 2652              		.loc 1 1926 9 view .LVU772
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 157


1928:FreeRTOS/tasks.c **** 
 2653              		.loc 1 1928 9 view .LVU773
 2654 0002 0028     		cmp	r0, #0
 2655 0004 43D0     		beq	.L204
 2656 0006 0446     		mov	r4, r0
1928:FreeRTOS/tasks.c **** 
 2657              		.loc 1 1928 38 discriminator 2 view .LVU774
1946:FreeRTOS/tasks.c **** 
 2658              		.loc 1 1946 9 discriminator 2 view .LVU775
 2659 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2660              	.LVL206:
1948:FreeRTOS/tasks.c ****         {
 2661              		.loc 1 1948 9 discriminator 2 view .LVU776
 2662              	.LBB215:
 2663              	.LBI215:
 210:FreeRTOS/portable/portmacro.h ****     {
 2664              		.loc 2 210 38 discriminator 2 view .LVU777
 2665              	.LBB216:
 212:FreeRTOS/portable/portmacro.h **** 
 2666              		.loc 2 212 9 discriminator 2 view .LVU778
 214:FreeRTOS/portable/portmacro.h ****         (
 2667              		.loc 2 214 9 discriminator 2 view .LVU779
 2668              		.syntax unified
 2669              	@ 214 "FreeRTOS/portable/portmacro.h" 1
 2670 000c EFF31186 			mrs r6, basepri											
 2671 0010 4FF05003 		mov r3, #80												
 2672 0014 83F31188 		msr basepri, r3											
 2673 0018 BFF36F8F 		isb														
 2674 001c BFF34F8F 		dsb														
 2675              	
 2676              	@ 0 "" 2
 2677              	.LVL207:
 226:FreeRTOS/portable/portmacro.h ****     }
 2678              		.loc 2 226 9 discriminator 2 view .LVU780
 226:FreeRTOS/portable/portmacro.h ****     }
 2679              		.loc 2 226 9 is_stmt 0 discriminator 2 view .LVU781
 2680              		.thumb
 2681              		.syntax unified
 2682              	.LBE216:
 2683              	.LBE215:
1950:FreeRTOS/tasks.c ****             {
 2684              		.loc 1 1950 13 is_stmt 1 discriminator 2 view .LVU782
1950:FreeRTOS/tasks.c ****             {
 2685              		.loc 1 1950 17 is_stmt 0 discriminator 2 view .LVU783
 2686 0020 2046     		mov	r0, r4
 2687 0022 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2688              	.LVL208:
1950:FreeRTOS/tasks.c ****             {
 2689              		.loc 1 1950 15 discriminator 2 view .LVU784
 2690 0026 0546     		mov	r5, r0
 2691 0028 0028     		cmp	r0, #0
 2692 002a 2CD0     		beq	.L199
1952:FreeRTOS/tasks.c **** 
 2693              		.loc 1 1952 51 is_stmt 1 view .LVU785
1955:FreeRTOS/tasks.c ****                 {
 2694              		.loc 1 1955 17 view .LVU786
1955:FreeRTOS/tasks.c ****                 {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 158


 2695              		.loc 1 1955 42 is_stmt 0 view .LVU787
 2696 002c 214B     		ldr	r3, .L205
 2697 002e 1B68     		ldr	r3, [r3]
1955:FreeRTOS/tasks.c ****                 {
 2698              		.loc 1 1955 19 view .LVU788
 2699 0030 002B     		cmp	r3, #0
 2700 0032 37D1     		bne	.L200
1959:FreeRTOS/tasks.c ****                     {
 2701              		.loc 1 1959 21 is_stmt 1 view .LVU789
1959:FreeRTOS/tasks.c ****                     {
 2702              		.loc 1 1959 30 is_stmt 0 view .LVU790
 2703 0034 E26A     		ldr	r2, [r4, #44]
1959:FreeRTOS/tasks.c ****                     {
 2704              		.loc 1 1959 58 view .LVU791
 2705 0036 204B     		ldr	r3, .L205+4
 2706 0038 1B68     		ldr	r3, [r3]
 2707 003a DB6A     		ldr	r3, [r3, #44]
1959:FreeRTOS/tasks.c ****                     {
 2708              		.loc 1 1959 23 view .LVU792
 2709 003c 9A42     		cmp	r2, r3
 2710 003e 2FD3     		bcc	.L202
1961:FreeRTOS/tasks.c **** 
 2711              		.loc 1 1961 25 is_stmt 1 view .LVU793
 2712              	.LVL209:
1966:FreeRTOS/tasks.c ****                     }
 2713              		.loc 1 1966 25 view .LVU794
1966:FreeRTOS/tasks.c ****                     }
 2714              		.loc 1 1966 39 is_stmt 0 view .LVU795
 2715 0040 0125     		movs	r5, #1
 2716 0042 1E4B     		ldr	r3, .L205+8
 2717 0044 1D60     		str	r5, [r3]
 2718              	.LVL210:
 2719              	.L201:
1970:FreeRTOS/tasks.c ****                     }
 2720              		.loc 1 1970 49 is_stmt 1 view .LVU796
1973:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2721              		.loc 1 1973 21 view .LVU797
1973:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2722              		.loc 1 1973 30 is_stmt 0 view .LVU798
 2723 0046 271D     		adds	r7, r4, #4
 2724 0048 3846     		mov	r0, r7
 2725 004a FFF7FEFF 		bl	uxListRemove
 2726              	.LVL211:
1974:FreeRTOS/tasks.c ****                 }
 2727              		.loc 1 1974 21 is_stmt 1 view .LVU799
1974:FreeRTOS/tasks.c ****                 }
 2728              		.loc 1 1974 21 view .LVU800
 2729 004e E36A     		ldr	r3, [r4, #44]
 2730 0050 0122     		movs	r2, #1
 2731 0052 9A40     		lsls	r2, r2, r3
 2732 0054 1A49     		ldr	r1, .L205+12
 2733 0056 0868     		ldr	r0, [r1]
 2734 0058 0243     		orrs	r2, r2, r0
 2735 005a 0A60     		str	r2, [r1]
 2736              	.LBB217:
1974:FreeRTOS/tasks.c ****                 }
 2737              		.loc 1 1974 21 view .LVU801
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 159


 2738 005c 194A     		ldr	r2, .L205+16
 2739 005e 03EB8303 		add	r3, r3, r3, lsl #2
 2740 0062 02EB8303 		add	r3, r2, r3, lsl #2
 2741 0066 5B68     		ldr	r3, [r3, #4]
 2742              	.LVL212:
1974:FreeRTOS/tasks.c ****                 }
 2743              		.loc 1 1974 21 view .LVU802
1974:FreeRTOS/tasks.c ****                 }
 2744              		.loc 1 1974 21 view .LVU803
1974:FreeRTOS/tasks.c ****                 }
 2745              		.loc 1 1974 21 view .LVU804
 2746 0068 A360     		str	r3, [r4, #8]
1974:FreeRTOS/tasks.c ****                 }
 2747              		.loc 1 1974 21 view .LVU805
 2748 006a 9968     		ldr	r1, [r3, #8]
 2749 006c E160     		str	r1, [r4, #12]
1974:FreeRTOS/tasks.c ****                 }
 2750              		.loc 1 1974 21 view .LVU806
 2751 006e 4F60     		str	r7, [r1, #4]
1974:FreeRTOS/tasks.c ****                 }
 2752              		.loc 1 1974 21 view .LVU807
 2753 0070 9F60     		str	r7, [r3, #8]
1974:FreeRTOS/tasks.c ****                 }
 2754              		.loc 1 1974 21 view .LVU808
 2755 0072 E36A     		ldr	r3, [r4, #44]
 2756              	.LVL213:
1974:FreeRTOS/tasks.c ****                 }
 2757              		.loc 1 1974 21 is_stmt 0 view .LVU809
 2758 0074 03EB8301 		add	r1, r3, r3, lsl #2
 2759 0078 8800     		lsls	r0, r1, #2
 2760 007a 02EB8101 		add	r1, r2, r1, lsl #2
 2761 007e 6161     		str	r1, [r4, #20]
1974:FreeRTOS/tasks.c ****                 }
 2762              		.loc 1 1974 21 is_stmt 1 view .LVU810
 2763 0080 1158     		ldr	r1, [r2, r0]
 2764 0082 0131     		adds	r1, r1, #1
 2765 0084 1150     		str	r1, [r2, r0]
 2766              	.LBE217:
1974:FreeRTOS/tasks.c ****                 }
 2767              		.loc 1 1974 21 view .LVU811
1974:FreeRTOS/tasks.c ****                 }
 2768              		.loc 1 1974 51 view .LVU812
 2769              	.LVL214:
 2770              	.L199:
1986:FreeRTOS/tasks.c ****             }
 2771              		.loc 1 1986 41 view .LVU813
1989:FreeRTOS/tasks.c **** 
 2772              		.loc 1 1989 9 view .LVU814
 2773              	.LBB218:
 2774              	.LBI218:
 230:FreeRTOS/portable/portmacro.h ****     {
 2775              		.loc 2 230 34 view .LVU815
 2776              	.LBB219:
 2777              		.loc 2 232 9 view .LVU816
 2778              		.syntax unified
 2779              	@ 232 "FreeRTOS/portable/portmacro.h" 1
 2780 0086 86F31188 			msr basepri, r6	
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 160


 2781              	@ 0 "" 2
 2782              	.LVL215:
 2783              		.loc 2 232 9 is_stmt 0 view .LVU817
 2784              		.thumb
 2785              		.syntax unified
 2786              	.LBE219:
 2787              	.LBE218:
1991:FreeRTOS/tasks.c ****     }
 2788              		.loc 1 1991 9 is_stmt 1 view .LVU818
1992:FreeRTOS/tasks.c **** 
 2789              		.loc 1 1992 5 is_stmt 0 view .LVU819
 2790 008a 2846     		mov	r0, r5
 2791 008c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2792              	.LVL216:
 2793              	.L204:
1928:FreeRTOS/tasks.c **** 
 2794              		.loc 1 1928 9 is_stmt 1 view .LVU820
 2795              	.LBB220:
 2796              	.LBI220:
 194:FreeRTOS/portable/portmacro.h ****     {
 2797              		.loc 2 194 34 view .LVU821
 2798              	.LBB221:
 196:FreeRTOS/portable/portmacro.h **** 
 2799              		.loc 2 196 9 view .LVU822
 198:FreeRTOS/portable/portmacro.h ****         (
 2800              		.loc 2 198 9 view .LVU823
 2801              		.syntax unified
 2802              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 2803 008e 4FF05003 			mov r3, #80												
 2804 0092 83F31188 		msr basepri, r3											
 2805 0096 BFF36F8F 		isb														
 2806 009a BFF34F8F 		dsb														
 2807              	
 2808              	@ 0 "" 2
 2809              	.LVL217:
 2810              		.thumb
 2811              		.syntax unified
 2812              	.L198:
 198:FreeRTOS/portable/portmacro.h ****         (
 2813              		.loc 2 198 9 is_stmt 0 view .LVU824
 2814              	.LBE221:
 2815              	.LBE220:
1928:FreeRTOS/tasks.c **** 
 2816              		.loc 1 1928 9 is_stmt 1 discriminator 1 view .LVU825
1928:FreeRTOS/tasks.c **** 
 2817              		.loc 1 1928 9 discriminator 1 view .LVU826
1928:FreeRTOS/tasks.c **** 
 2818              		.loc 1 1928 9 discriminator 1 view .LVU827
 2819 009e FEE7     		b	.L198
 2820              	.LVL218:
 2821              	.L202:
1924:FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 2822              		.loc 1 1924 20 is_stmt 0 view .LVU828
 2823 00a0 0025     		movs	r5, #0
 2824 00a2 D0E7     		b	.L201
 2825              	.L200:
1981:FreeRTOS/tasks.c ****                 }
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 161


 2826              		.loc 1 1981 21 is_stmt 1 view .LVU829
 2827 00a4 04F11801 		add	r1, r4, #24
 2828 00a8 0748     		ldr	r0, .L205+20
 2829 00aa FFF7FEFF 		bl	vListInsertEnd
 2830              	.LVL219:
1924:FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 2831              		.loc 1 1924 20 is_stmt 0 view .LVU830
 2832 00ae 0025     		movs	r5, #0
 2833 00b0 E9E7     		b	.L199
 2834              	.L206:
 2835 00b2 00BF     		.align	2
 2836              	.L205:
 2837 00b4 00000000 		.word	.LANCHOR16
 2838 00b8 00000000 		.word	.LANCHOR3
 2839 00bc 00000000 		.word	.LANCHOR17
 2840 00c0 00000000 		.word	.LANCHOR2
 2841 00c4 00000000 		.word	.LANCHOR4
 2842 00c8 00000000 		.word	.LANCHOR1
 2843              		.cfi_endproc
 2844              	.LFE19:
 2846              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 2847              		.align	2
 2848              	.LC0:
 2849 0000 49444C45 		.ascii	"IDLE\000"
 2849      00
 2850              		.section	.text.vTaskStartScheduler,"ax",%progbits
 2851              		.align	1
 2852              		.global	vTaskStartScheduler
 2853              		.syntax unified
 2854              		.thumb
 2855              		.thumb_func
 2856              		.fpu fpv4-sp-d16
 2858              	vTaskStartScheduler:
 2859              	.LFB20:
1998:FreeRTOS/tasks.c ****     BaseType_t xReturn;
 2860              		.loc 1 1998 1 is_stmt 1 view -0
 2861              		.cfi_startproc
 2862              		@ args = 0, pretend = 0, frame = 16
 2863              		@ frame_needed = 0, uses_anonymous_args = 0
 2864 0000 10B5     		push	{r4, lr}
 2865              	.LCFI25:
 2866              		.cfi_def_cfa_offset 8
 2867              		.cfi_offset 4, -8
 2868              		.cfi_offset 14, -4
 2869 0002 88B0     		sub	sp, sp, #32
 2870              	.LCFI26:
 2871              		.cfi_def_cfa_offset 40
1999:FreeRTOS/tasks.c **** 
 2872              		.loc 1 1999 5 view .LVU832
 2873              	.LBB222:
2004:FreeRTOS/tasks.c ****             StackType_t * pxIdleTaskStackBuffer = NULL;
 2874              		.loc 1 2004 13 view .LVU833
2004:FreeRTOS/tasks.c ****             StackType_t * pxIdleTaskStackBuffer = NULL;
 2875              		.loc 1 2004 28 is_stmt 0 view .LVU834
 2876 0004 0024     		movs	r4, #0
 2877 0006 0594     		str	r4, [sp, #20]
2005:FreeRTOS/tasks.c ****             uint32_t ulIdleTaskStackSize;
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 162


 2878              		.loc 1 2005 13 is_stmt 1 view .LVU835
2005:FreeRTOS/tasks.c ****             uint32_t ulIdleTaskStackSize;
 2879              		.loc 1 2005 27 is_stmt 0 view .LVU836
 2880 0008 0694     		str	r4, [sp, #24]
2006:FreeRTOS/tasks.c **** 
 2881              		.loc 1 2006 13 is_stmt 1 view .LVU837
2010:FreeRTOS/tasks.c ****             xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 2882              		.loc 1 2010 13 view .LVU838
 2883 000a 07AA     		add	r2, sp, #28
 2884 000c 06A9     		add	r1, sp, #24
 2885 000e 05A8     		add	r0, sp, #20
 2886 0010 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
 2887              	.LVL220:
2011:FreeRTOS/tasks.c ****                                                  configIDLE_TASK_NAME,
 2888              		.loc 1 2011 13 view .LVU839
2011:FreeRTOS/tasks.c ****                                                  configIDLE_TASK_NAME,
 2889              		.loc 1 2011 31 is_stmt 0 view .LVU840
 2890 0014 059B     		ldr	r3, [sp, #20]
 2891 0016 0293     		str	r3, [sp, #8]
 2892 0018 069B     		ldr	r3, [sp, #24]
 2893 001a 0193     		str	r3, [sp, #4]
 2894 001c 0094     		str	r4, [sp]
 2895 001e 2346     		mov	r3, r4
 2896 0020 079A     		ldr	r2, [sp, #28]
 2897 0022 0F49     		ldr	r1, .L211
 2898 0024 0F48     		ldr	r0, .L211+4
 2899 0026 FFF7FEFF 		bl	xTaskCreateStatic
 2900              	.LVL221:
2011:FreeRTOS/tasks.c ****                                                  configIDLE_TASK_NAME,
 2901              		.loc 1 2011 29 view .LVU841
 2902 002a 0F4B     		ldr	r3, .L211+8
 2903 002c 1860     		str	r0, [r3]
2019:FreeRTOS/tasks.c ****             {
 2904              		.loc 1 2019 13 is_stmt 1 view .LVU842
2019:FreeRTOS/tasks.c ****             {
 2905              		.loc 1 2019 15 is_stmt 0 view .LVU843
 2906 002e 90B1     		cbz	r0, .L209
 2907              	.LVL222:
2019:FreeRTOS/tasks.c ****             {
 2908              		.loc 1 2019 15 view .LVU844
 2909              	.LBE222:
2053:FreeRTOS/tasks.c ****     {
 2910              		.loc 1 2053 5 is_stmt 1 view .LVU845
2069:FreeRTOS/tasks.c **** 
 2911              		.loc 1 2069 9 view .LVU846
 2912              	.LBB223:
 2913              	.LBI223:
 194:FreeRTOS/portable/portmacro.h ****     {
 2914              		.loc 2 194 34 view .LVU847
 2915              	.LBB224:
 196:FreeRTOS/portable/portmacro.h **** 
 2916              		.loc 2 196 9 view .LVU848
 198:FreeRTOS/portable/portmacro.h ****         (
 2917              		.loc 2 198 9 view .LVU849
 2918              		.syntax unified
 2919              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 2920 0030 4FF05003 			mov r3, #80												
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 163


 2921 0034 83F31188 		msr basepri, r3											
 2922 0038 BFF36F8F 		isb														
 2923 003c BFF34F8F 		dsb														
 2924              	
 2925              	@ 0 "" 2
 2926              		.thumb
 2927              		.syntax unified
 2928              	.LBE224:
 2929              	.LBE223:
2081:FreeRTOS/tasks.c ****         xSchedulerRunning = pdTRUE;
 2930              		.loc 1 2081 9 view .LVU850
2081:FreeRTOS/tasks.c ****         xSchedulerRunning = pdTRUE;
 2931              		.loc 1 2081 30 is_stmt 0 view .LVU851
 2932 0040 0A4B     		ldr	r3, .L211+12
 2933 0042 4FF0FF32 		mov	r2, #-1
 2934 0046 1A60     		str	r2, [r3]
2082:FreeRTOS/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2935              		.loc 1 2082 9 is_stmt 1 view .LVU852
2082:FreeRTOS/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2936              		.loc 1 2082 27 is_stmt 0 view .LVU853
 2937 0048 094B     		ldr	r3, .L211+16
 2938 004a 0122     		movs	r2, #1
 2939 004c 1A60     		str	r2, [r3]
2083:FreeRTOS/tasks.c **** 
 2940              		.loc 1 2083 9 is_stmt 1 view .LVU854
2083:FreeRTOS/tasks.c **** 
 2941              		.loc 1 2083 20 is_stmt 0 view .LVU855
 2942 004e 094B     		ldr	r3, .L211+20
 2943 0050 1C60     		str	r4, [r3]
2091:FreeRTOS/tasks.c **** 
 2944              		.loc 1 2091 49 is_stmt 1 view .LVU856
2093:FreeRTOS/tasks.c **** 
 2945              		.loc 1 2093 32 view .LVU857
2097:FreeRTOS/tasks.c ****         {
 2946              		.loc 1 2097 9 view .LVU858
2097:FreeRTOS/tasks.c ****         {
 2947              		.loc 1 2097 13 is_stmt 0 view .LVU859
 2948 0052 FFF7FEFF 		bl	xPortStartScheduler
 2949              	.LVL223:
 2950              	.L209:
2112:FreeRTOS/tasks.c ****     }
 2951              		.loc 1 2112 73 is_stmt 1 discriminator 2 view .LVU860
2117:FreeRTOS/tasks.c **** 
 2952              		.loc 1 2117 5 discriminator 2 view .LVU861
2121:FreeRTOS/tasks.c **** }
 2953              		.loc 1 2121 5 discriminator 2 view .LVU862
 2954 0056 084B     		ldr	r3, .L211+24
 2955 0058 1B68     		ldr	r3, [r3]
2122:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2956              		.loc 1 2122 1 is_stmt 0 discriminator 2 view .LVU863
 2957 005a 08B0     		add	sp, sp, #32
 2958              	.LCFI27:
 2959              		.cfi_def_cfa_offset 8
 2960              		@ sp needed
 2961 005c 10BD     		pop	{r4, pc}
 2962              	.L212:
 2963 005e 00BF     		.align	2
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 164


 2964              	.L211:
 2965 0060 00000000 		.word	.LC0
 2966 0064 00000000 		.word	prvIdleTask
 2967 0068 00000000 		.word	.LANCHOR18
 2968 006c 00000000 		.word	.LANCHOR5
 2969 0070 00000000 		.word	.LANCHOR13
 2970 0074 00000000 		.word	.LANCHOR6
 2971 0078 00000000 		.word	.LANCHOR19
 2972              		.cfi_endproc
 2973              	.LFE20:
 2975              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2976              		.align	1
 2977              		.global	vTaskEndScheduler
 2978              		.syntax unified
 2979              		.thumb
 2980              		.thumb_func
 2981              		.fpu fpv4-sp-d16
 2983              	vTaskEndScheduler:
 2984              	.LFB21:
2126:FreeRTOS/tasks.c ****     /* Stop the scheduler interrupts and call the portable scheduler end
 2985              		.loc 1 2126 1 is_stmt 1 view -0
 2986              		.cfi_startproc
 2987              		@ args = 0, pretend = 0, frame = 0
 2988              		@ frame_needed = 0, uses_anonymous_args = 0
 2989 0000 08B5     		push	{r3, lr}
 2990              	.LCFI28:
 2991              		.cfi_def_cfa_offset 8
 2992              		.cfi_offset 3, -8
 2993              		.cfi_offset 14, -4
2130:FreeRTOS/tasks.c ****     xSchedulerRunning = pdFALSE;
 2994              		.loc 1 2130 5 view .LVU865
 2995              	.LBB225:
 2996              	.LBI225:
 194:FreeRTOS/portable/portmacro.h ****     {
 2997              		.loc 2 194 34 view .LVU866
 2998              	.LBB226:
 196:FreeRTOS/portable/portmacro.h **** 
 2999              		.loc 2 196 9 view .LVU867
 198:FreeRTOS/portable/portmacro.h ****         (
 3000              		.loc 2 198 9 view .LVU868
 3001              		.syntax unified
 3002              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 3003 0002 4FF05003 			mov r3, #80												
 3004 0006 83F31188 		msr basepri, r3											
 3005 000a BFF36F8F 		isb														
 3006 000e BFF34F8F 		dsb														
 3007              	
 3008              	@ 0 "" 2
 3009              		.thumb
 3010              		.syntax unified
 3011              	.LBE226:
 3012              	.LBE225:
2131:FreeRTOS/tasks.c ****     vPortEndScheduler();
 3013              		.loc 1 2131 5 view .LVU869
2131:FreeRTOS/tasks.c ****     vPortEndScheduler();
 3014              		.loc 1 2131 23 is_stmt 0 view .LVU870
 3015 0012 034B     		ldr	r3, .L215
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 165


 3016 0014 0022     		movs	r2, #0
 3017 0016 1A60     		str	r2, [r3]
2132:FreeRTOS/tasks.c **** }
 3018              		.loc 1 2132 5 is_stmt 1 view .LVU871
 3019 0018 FFF7FEFF 		bl	vPortEndScheduler
 3020              	.LVL224:
2133:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
 3021              		.loc 1 2133 1 is_stmt 0 view .LVU872
 3022 001c 08BD     		pop	{r3, pc}
 3023              	.L216:
 3024 001e 00BF     		.align	2
 3025              	.L215:
 3026 0020 00000000 		.word	.LANCHOR13
 3027              		.cfi_endproc
 3028              	.LFE21:
 3030              		.section	.text.vTaskSuspendAll,"ax",%progbits
 3031              		.align	1
 3032              		.global	vTaskSuspendAll
 3033              		.syntax unified
 3034              		.thumb
 3035              		.thumb_func
 3036              		.fpu fpv4-sp-d16
 3038              	vTaskSuspendAll:
 3039              	.LFB22:
2137:FreeRTOS/tasks.c ****     /* A critical section is not required as the variable is of type
 3040              		.loc 1 2137 1 is_stmt 1 view -0
 3041              		.cfi_startproc
 3042              		@ args = 0, pretend = 0, frame = 0
 3043              		@ frame_needed = 0, uses_anonymous_args = 0
 3044              		@ link register save eliminated.
2145:FreeRTOS/tasks.c **** 
 3045              		.loc 1 2145 27 view .LVU874
2149:FreeRTOS/tasks.c **** 
 3046              		.loc 1 2149 5 view .LVU875
 3047 0000 024A     		ldr	r2, .L218
 3048 0002 1368     		ldr	r3, [r2]
 3049 0004 0133     		adds	r3, r3, #1
 3050 0006 1360     		str	r3, [r2]
2153:FreeRTOS/tasks.c **** }
 3051              		.loc 1 2153 5 view .LVU876
2154:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
 3052              		.loc 1 2154 1 is_stmt 0 view .LVU877
 3053 0008 7047     		bx	lr
 3054              	.L219:
 3055 000a 00BF     		.align	2
 3056              	.L218:
 3057 000c 00000000 		.word	.LANCHOR16
 3058              		.cfi_endproc
 3059              	.LFE22:
 3061              		.section	.text.xTaskGetTickCount,"ax",%progbits
 3062              		.align	1
 3063              		.global	xTaskGetTickCount
 3064              		.syntax unified
 3065              		.thumb
 3066              		.thumb_func
 3067              		.fpu fpv4-sp-d16
 3069              	xTaskGetTickCount:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 166


 3070              	.LFB25:
2333:FreeRTOS/tasks.c ****     TickType_t xTicks;
 3071              		.loc 1 2333 1 is_stmt 1 view -0
 3072              		.cfi_startproc
 3073              		@ args = 0, pretend = 0, frame = 0
 3074              		@ frame_needed = 0, uses_anonymous_args = 0
 3075              		@ link register save eliminated.
2334:FreeRTOS/tasks.c **** 
 3076              		.loc 1 2334 5 view .LVU879
2337:FreeRTOS/tasks.c ****     {
 3077              		.loc 1 2337 35 view .LVU880
2339:FreeRTOS/tasks.c ****     }
 3078              		.loc 1 2339 9 view .LVU881
2339:FreeRTOS/tasks.c ****     }
 3079              		.loc 1 2339 16 is_stmt 0 view .LVU882
 3080 0000 014B     		ldr	r3, .L221
 3081 0002 1868     		ldr	r0, [r3]
 3082              	.LVL225:
2341:FreeRTOS/tasks.c **** 
 3083              		.loc 1 2341 34 is_stmt 1 view .LVU883
2343:FreeRTOS/tasks.c **** }
 3084              		.loc 1 2343 5 view .LVU884
2344:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3085              		.loc 1 2344 1 is_stmt 0 view .LVU885
 3086 0004 7047     		bx	lr
 3087              	.L222:
 3088 0006 00BF     		.align	2
 3089              	.L221:
 3090 0008 00000000 		.word	.LANCHOR6
 3091              		.cfi_endproc
 3092              	.LFE25:
 3094              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 3095              		.align	1
 3096              		.global	xTaskGetTickCountFromISR
 3097              		.syntax unified
 3098              		.thumb
 3099              		.thumb_func
 3100              		.fpu fpv4-sp-d16
 3102              	xTaskGetTickCountFromISR:
 3103              	.LFB26:
2348:FreeRTOS/tasks.c ****     TickType_t xReturn;
 3104              		.loc 1 2348 1 is_stmt 1 view -0
 3105              		.cfi_startproc
 3106              		@ args = 0, pretend = 0, frame = 0
 3107              		@ frame_needed = 0, uses_anonymous_args = 0
 3108 0000 08B5     		push	{r3, lr}
 3109              	.LCFI29:
 3110              		.cfi_def_cfa_offset 8
 3111              		.cfi_offset 3, -8
 3112              		.cfi_offset 14, -4
2349:FreeRTOS/tasks.c ****     UBaseType_t uxSavedInterruptStatus;
 3113              		.loc 1 2349 5 view .LVU887
2350:FreeRTOS/tasks.c **** 
 3114              		.loc 1 2350 5 view .LVU888
2366:FreeRTOS/tasks.c **** 
 3115              		.loc 1 2366 5 view .LVU889
 3116 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 167


 3117              	.LVL226:
2368:FreeRTOS/tasks.c ****     {
 3118              		.loc 1 2368 5 view .LVU890
2370:FreeRTOS/tasks.c ****     }
 3119              		.loc 1 2370 9 view .LVU891
2370:FreeRTOS/tasks.c ****     }
 3120              		.loc 1 2370 17 is_stmt 0 view .LVU892
 3121 0006 014B     		ldr	r3, .L225
 3122 0008 1868     		ldr	r0, [r3]
 3123              	.LVL227:
2372:FreeRTOS/tasks.c **** 
 3124              		.loc 1 2372 5 is_stmt 1 view .LVU893
2374:FreeRTOS/tasks.c **** }
 3125              		.loc 1 2374 5 view .LVU894
2375:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3126              		.loc 1 2375 1 is_stmt 0 view .LVU895
 3127 000a 08BD     		pop	{r3, pc}
 3128              	.L226:
 3129              		.align	2
 3130              	.L225:
 3131 000c 00000000 		.word	.LANCHOR6
 3132              		.cfi_endproc
 3133              	.LFE26:
 3135              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 3136              		.align	1
 3137              		.global	uxTaskGetNumberOfTasks
 3138              		.syntax unified
 3139              		.thumb
 3140              		.thumb_func
 3141              		.fpu fpv4-sp-d16
 3143              	uxTaskGetNumberOfTasks:
 3144              	.LFB27:
2379:FreeRTOS/tasks.c ****     /* A critical section is not required because the variables are of type
 3145              		.loc 1 2379 1 is_stmt 1 view -0
 3146              		.cfi_startproc
 3147              		@ args = 0, pretend = 0, frame = 0
 3148              		@ frame_needed = 0, uses_anonymous_args = 0
 3149              		@ link register save eliminated.
2382:FreeRTOS/tasks.c **** }
 3150              		.loc 1 2382 5 view .LVU897
2382:FreeRTOS/tasks.c **** }
 3151              		.loc 1 2382 12 is_stmt 0 view .LVU898
 3152 0000 014B     		ldr	r3, .L228
 3153 0002 1868     		ldr	r0, [r3]
2383:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3154              		.loc 1 2383 1 view .LVU899
 3155 0004 7047     		bx	lr
 3156              	.L229:
 3157 0006 00BF     		.align	2
 3158              	.L228:
 3159 0008 00000000 		.word	.LANCHOR12
 3160              		.cfi_endproc
 3161              	.LFE27:
 3163              		.section	.text.pcTaskGetName,"ax",%progbits
 3164              		.align	1
 3165              		.global	pcTaskGetName
 3166              		.syntax unified
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 168


 3167              		.thumb
 3168              		.thumb_func
 3169              		.fpu fpv4-sp-d16
 3171              	pcTaskGetName:
 3172              	.LVL228:
 3173              	.LFB28:
2387:FreeRTOS/tasks.c ****     TCB_t * pxTCB;
 3174              		.loc 1 2387 1 is_stmt 1 view -0
 3175              		.cfi_startproc
 3176              		@ args = 0, pretend = 0, frame = 0
 3177              		@ frame_needed = 0, uses_anonymous_args = 0
 3178              		@ link register save eliminated.
2388:FreeRTOS/tasks.c **** 
 3179              		.loc 1 2388 5 view .LVU901
2392:FreeRTOS/tasks.c ****     configASSERT( pxTCB );
 3180              		.loc 1 2392 5 view .LVU902
2392:FreeRTOS/tasks.c ****     configASSERT( pxTCB );
 3181              		.loc 1 2392 13 is_stmt 0 view .LVU903
 3182 0000 0346     		mov	r3, r0
 3183 0002 18B1     		cbz	r0, .L234
 3184              	.LVL229:
 3185              	.L231:
2393:FreeRTOS/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
 3186              		.loc 1 2393 5 is_stmt 1 discriminator 4 view .LVU904
 3187 0004 2BB1     		cbz	r3, .L235
2393:FreeRTOS/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
 3188              		.loc 1 2393 26 discriminator 2 view .LVU905
2394:FreeRTOS/tasks.c **** }
 3189              		.loc 1 2394 5 discriminator 2 view .LVU906
2395:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3190              		.loc 1 2395 1 is_stmt 0 discriminator 2 view .LVU907
 3191 0006 03F13400 		add	r0, r3, #52
 3192 000a 7047     		bx	lr
 3193              	.LVL230:
 3194              	.L234:
2392:FreeRTOS/tasks.c ****     configASSERT( pxTCB );
 3195              		.loc 1 2392 13 discriminator 1 view .LVU908
 3196 000c 054B     		ldr	r3, .L236
 3197 000e 1B68     		ldr	r3, [r3]
 3198              	.LVL231:
2392:FreeRTOS/tasks.c ****     configASSERT( pxTCB );
 3199              		.loc 1 2392 13 discriminator 1 view .LVU909
 3200 0010 F8E7     		b	.L231
 3201              	.LVL232:
 3202              	.L235:
2393:FreeRTOS/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
 3203              		.loc 1 2393 5 is_stmt 1 view .LVU910
 3204              	.LBB227:
 3205              	.LBI227:
 194:FreeRTOS/portable/portmacro.h ****     {
 3206              		.loc 2 194 34 view .LVU911
 3207              	.LBB228:
 196:FreeRTOS/portable/portmacro.h **** 
 3208              		.loc 2 196 9 view .LVU912
 198:FreeRTOS/portable/portmacro.h ****         (
 3209              		.loc 2 198 9 view .LVU913
 3210              		.syntax unified
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 169


 3211              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 3212 0012 4FF05003 			mov r3, #80												
 3213 0016 83F31188 		msr basepri, r3											
 3214 001a BFF36F8F 		isb														
 3215 001e BFF34F8F 		dsb														
 3216              	
 3217              	@ 0 "" 2
 3218              	.LVL233:
 3219              		.thumb
 3220              		.syntax unified
 3221              	.L233:
 198:FreeRTOS/portable/portmacro.h ****         (
 3222              		.loc 2 198 9 is_stmt 0 view .LVU914
 3223              	.LBE228:
 3224              	.LBE227:
2393:FreeRTOS/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
 3225              		.loc 1 2393 5 is_stmt 1 discriminator 1 view .LVU915
2393:FreeRTOS/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
 3226              		.loc 1 2393 5 discriminator 1 view .LVU916
2393:FreeRTOS/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
 3227              		.loc 1 2393 5 discriminator 1 view .LVU917
 3228 0022 FEE7     		b	.L233
 3229              	.L237:
 3230              		.align	2
 3231              	.L236:
 3232 0024 00000000 		.word	.LANCHOR3
 3233              		.cfi_endproc
 3234              	.LFE28:
 3236              		.section	.text.xTaskGetIdleTaskHandle,"ax",%progbits
 3237              		.align	1
 3238              		.global	xTaskGetIdleTaskHandle
 3239              		.syntax unified
 3240              		.thumb
 3241              		.thumb_func
 3242              		.fpu fpv4-sp-d16
 3244              	xTaskGetIdleTaskHandle:
 3245              	.LFB32:
2609:FreeRTOS/tasks.c ****         /* If xTaskGetIdleTaskHandle() is called before the scheduler has been
 3246              		.loc 1 2609 5 view -0
 3247              		.cfi_startproc
 3248              		@ args = 0, pretend = 0, frame = 0
 3249              		@ frame_needed = 0, uses_anonymous_args = 0
 3250              		@ link register save eliminated.
2612:FreeRTOS/tasks.c ****         return xIdleTaskHandle;
 3251              		.loc 1 2612 9 view .LVU919
 3252 0000 064B     		ldr	r3, .L242
 3253 0002 1868     		ldr	r0, [r3]
 3254 0004 00B1     		cbz	r0, .L241
2614:FreeRTOS/tasks.c **** 
 3255              		.loc 1 2614 5 is_stmt 0 view .LVU920
 3256 0006 7047     		bx	lr
 3257              	.L241:
2612:FreeRTOS/tasks.c ****         return xIdleTaskHandle;
 3258              		.loc 1 2612 9 is_stmt 1 view .LVU921
 3259              	.LBB229:
 3260              	.LBI229:
 194:FreeRTOS/portable/portmacro.h ****     {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 170


 3261              		.loc 2 194 34 view .LVU922
 3262              	.LBB230:
 196:FreeRTOS/portable/portmacro.h **** 
 3263              		.loc 2 196 9 view .LVU923
 198:FreeRTOS/portable/portmacro.h ****         (
 3264              		.loc 2 198 9 view .LVU924
 3265              		.syntax unified
 3266              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 3267 0008 4FF05003 			mov r3, #80												
 3268 000c 83F31188 		msr basepri, r3											
 3269 0010 BFF36F8F 		isb														
 3270 0014 BFF34F8F 		dsb														
 3271              	
 3272              	@ 0 "" 2
 3273              	.LVL234:
 3274              		.thumb
 3275              		.syntax unified
 3276              	.L240:
 198:FreeRTOS/portable/portmacro.h ****         (
 3277              		.loc 2 198 9 is_stmt 0 view .LVU925
 3278              	.LBE230:
 3279              	.LBE229:
2612:FreeRTOS/tasks.c ****         return xIdleTaskHandle;
 3280              		.loc 1 2612 9 is_stmt 1 discriminator 1 view .LVU926
2612:FreeRTOS/tasks.c ****         return xIdleTaskHandle;
 3281              		.loc 1 2612 9 discriminator 1 view .LVU927
2612:FreeRTOS/tasks.c ****         return xIdleTaskHandle;
 3282              		.loc 1 2612 9 discriminator 1 view .LVU928
 3283 0018 FEE7     		b	.L240
 3284              	.L243:
 3285 001a 00BF     		.align	2
 3286              	.L242:
 3287 001c 00000000 		.word	.LANCHOR18
 3288              		.cfi_endproc
 3289              	.LFE32:
 3291              		.section	.text.vTaskStepTick,"ax",%progbits
 3292              		.align	1
 3293              		.global	vTaskStepTick
 3294              		.syntax unified
 3295              		.thumb
 3296              		.thumb_func
 3297              		.fpu fpv4-sp-d16
 3299              	vTaskStepTick:
 3300              	.LVL235:
 3301              	.LFB33:
2626:FreeRTOS/tasks.c ****         /* Correct the tick count value after a period during which the tick
 3302              		.loc 1 2626 5 view -0
 3303              		.cfi_startproc
 3304              		@ args = 0, pretend = 0, frame = 0
 3305              		@ frame_needed = 0, uses_anonymous_args = 0
 3306              		@ link register save eliminated.
2626:FreeRTOS/tasks.c ****         /* Correct the tick count value after a period during which the tick
 3307              		.loc 1 2626 5 is_stmt 0 view .LVU930
 3308 0000 0346     		mov	r3, r0
2630:FreeRTOS/tasks.c ****         xTickCount += xTicksToJump;
 3309              		.loc 1 2630 9 is_stmt 1 view .LVU931
 3310 0002 0A4A     		ldr	r2, .L247
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 171


 3311 0004 1268     		ldr	r2, [r2]
 3312 0006 0244     		add	r2, r2, r0
 3313 0008 0949     		ldr	r1, .L247+4
 3314 000a 0968     		ldr	r1, [r1]
 3315 000c 8A42     		cmp	r2, r1
 3316 000e 08D9     		bls	.L245
2630:FreeRTOS/tasks.c ****         xTickCount += xTicksToJump;
 3317              		.loc 1 2630 9 view .LVU932
 3318              	.LBB231:
 3319              	.LBI231:
 194:FreeRTOS/portable/portmacro.h ****     {
 3320              		.loc 2 194 34 view .LVU933
 3321              	.LBB232:
 196:FreeRTOS/portable/portmacro.h **** 
 3322              		.loc 2 196 9 view .LVU934
 198:FreeRTOS/portable/portmacro.h ****         (
 3323              		.loc 2 198 9 view .LVU935
 3324              		.syntax unified
 3325              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 3326 0010 4FF05003 			mov r3, #80												
 3327 0014 83F31188 		msr basepri, r3											
 3328 0018 BFF36F8F 		isb														
 3329 001c BFF34F8F 		dsb														
 3330              	
 3331              	@ 0 "" 2
 3332              	.LVL236:
 3333              		.thumb
 3334              		.syntax unified
 3335              	.L246:
 198:FreeRTOS/portable/portmacro.h ****         (
 3336              		.loc 2 198 9 is_stmt 0 view .LVU936
 3337              	.LBE232:
 3338              	.LBE231:
2630:FreeRTOS/tasks.c ****         xTickCount += xTicksToJump;
 3339              		.loc 1 2630 9 is_stmt 1 discriminator 1 view .LVU937
2630:FreeRTOS/tasks.c ****         xTickCount += xTicksToJump;
 3340              		.loc 1 2630 9 discriminator 1 view .LVU938
2630:FreeRTOS/tasks.c ****         xTickCount += xTicksToJump;
 3341              		.loc 1 2630 9 discriminator 1 view .LVU939
 3342 0020 FEE7     		b	.L246
 3343              	.L245:
2630:FreeRTOS/tasks.c ****         xTickCount += xTicksToJump;
 3344              		.loc 1 2630 78 discriminator 2 view .LVU940
2631:FreeRTOS/tasks.c ****         traceINCREASE_TICK_COUNT( xTicksToJump );
 3345              		.loc 1 2631 9 discriminator 2 view .LVU941
2631:FreeRTOS/tasks.c ****         traceINCREASE_TICK_COUNT( xTicksToJump );
 3346              		.loc 1 2631 20 is_stmt 0 discriminator 2 view .LVU942
 3347 0022 0249     		ldr	r1, .L247
 3348 0024 0A68     		ldr	r2, [r1]
 3349 0026 1344     		add	r3, r3, r2
 3350 0028 0B60     		str	r3, [r1]
2632:FreeRTOS/tasks.c ****     }
 3351              		.loc 1 2632 49 is_stmt 1 discriminator 2 view .LVU943
2633:FreeRTOS/tasks.c **** 
 3352              		.loc 1 2633 5 is_stmt 0 discriminator 2 view .LVU944
 3353 002a 7047     		bx	lr
 3354              	.L248:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 172


 3355              		.align	2
 3356              	.L247:
 3357 002c 00000000 		.word	.LANCHOR6
 3358 0030 00000000 		.word	.LANCHOR5
 3359              		.cfi_endproc
 3360              	.LFE33:
 3362              		.section	.text.xTaskIncrementTick,"ax",%progbits
 3363              		.align	1
 3364              		.global	xTaskIncrementTick
 3365              		.syntax unified
 3366              		.thumb
 3367              		.thumb_func
 3368              		.fpu fpv4-sp-d16
 3370              	xTaskIncrementTick:
 3371              	.LFB36:
2737:FreeRTOS/tasks.c ****     TCB_t * pxTCB;
 3372              		.loc 1 2737 1 is_stmt 1 view -0
 3373              		.cfi_startproc
 3374              		@ args = 0, pretend = 0, frame = 0
 3375              		@ frame_needed = 0, uses_anonymous_args = 0
 3376 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3377              	.LCFI30:
 3378              		.cfi_def_cfa_offset 24
 3379              		.cfi_offset 3, -24
 3380              		.cfi_offset 4, -20
 3381              		.cfi_offset 5, -16
 3382              		.cfi_offset 6, -12
 3383              		.cfi_offset 7, -8
 3384              		.cfi_offset 14, -4
2738:FreeRTOS/tasks.c ****     TickType_t xItemValue;
 3385              		.loc 1 2738 5 view .LVU946
2739:FreeRTOS/tasks.c ****     BaseType_t xSwitchRequired = pdFALSE;
 3386              		.loc 1 2739 5 view .LVU947
2740:FreeRTOS/tasks.c **** 
 3387              		.loc 1 2740 5 view .LVU948
 3388              	.LVL237:
2745:FreeRTOS/tasks.c **** 
 3389              		.loc 1 2745 43 view .LVU949
2747:FreeRTOS/tasks.c ****     {
 3390              		.loc 1 2747 5 view .LVU950
2747:FreeRTOS/tasks.c ****     {
 3391              		.loc 1 2747 30 is_stmt 0 view .LVU951
 3392 0002 504B     		ldr	r3, .L273
 3393 0004 1B68     		ldr	r3, [r3]
2747:FreeRTOS/tasks.c ****     {
 3394              		.loc 1 2747 7 view .LVU952
 3395 0006 002B     		cmp	r3, #0
 3396 0008 40F09680 		bne	.L250
 3397              	.LBB233:
2751:FreeRTOS/tasks.c **** 
 3398              		.loc 1 2751 9 is_stmt 1 view .LVU953
2751:FreeRTOS/tasks.c **** 
 3399              		.loc 1 2751 55 is_stmt 0 view .LVU954
 3400 000c 4E4B     		ldr	r3, .L273+4
 3401 000e 1C68     		ldr	r4, [r3]
2751:FreeRTOS/tasks.c **** 
 3402              		.loc 1 2751 26 view .LVU955
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 173


 3403 0010 0134     		adds	r4, r4, #1
 3404              	.LVL238:
2755:FreeRTOS/tasks.c **** 
 3405              		.loc 1 2755 9 is_stmt 1 view .LVU956
2755:FreeRTOS/tasks.c **** 
 3406              		.loc 1 2755 20 is_stmt 0 view .LVU957
 3407 0012 1C60     		str	r4, [r3]
2757:FreeRTOS/tasks.c ****         {
 3408              		.loc 1 2757 9 is_stmt 1 view .LVU958
2757:FreeRTOS/tasks.c ****         {
 3409              		.loc 1 2757 11 is_stmt 0 view .LVU959
 3410 0014 C4B9     		cbnz	r4, .L251
 3411              	.LBB234:
2759:FreeRTOS/tasks.c ****         }
 3412              		.loc 1 2759 13 is_stmt 1 view .LVU960
2759:FreeRTOS/tasks.c ****         }
 3413              		.loc 1 2759 13 view .LVU961
 3414 0016 4D4B     		ldr	r3, .L273+8
 3415 0018 1B68     		ldr	r3, [r3]
 3416 001a 1B68     		ldr	r3, [r3]
 3417 001c 43B1     		cbz	r3, .L252
2759:FreeRTOS/tasks.c ****         }
 3418              		.loc 1 2759 13 view .LVU962
 3419              	.LBB235:
 3420              	.LBI235:
 194:FreeRTOS/portable/portmacro.h ****     {
 3421              		.loc 2 194 34 view .LVU963
 3422              	.LBB236:
 196:FreeRTOS/portable/portmacro.h **** 
 3423              		.loc 2 196 9 view .LVU964
 198:FreeRTOS/portable/portmacro.h ****         (
 3424              		.loc 2 198 9 view .LVU965
 3425              		.syntax unified
 3426              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 3427 001e 4FF05003 			mov r3, #80												
 3428 0022 83F31188 		msr basepri, r3											
 3429 0026 BFF36F8F 		isb														
 3430 002a BFF34F8F 		dsb														
 3431              	
 3432              	@ 0 "" 2
 3433              	.LVL239:
 3434              		.thumb
 3435              		.syntax unified
 3436              	.L253:
 198:FreeRTOS/portable/portmacro.h ****         (
 3437              		.loc 2 198 9 is_stmt 0 view .LVU966
 3438              	.LBE236:
 3439              	.LBE235:
2759:FreeRTOS/tasks.c ****         }
 3440              		.loc 1 2759 13 is_stmt 1 discriminator 1 view .LVU967
2759:FreeRTOS/tasks.c ****         }
 3441              		.loc 1 2759 13 discriminator 1 view .LVU968
2759:FreeRTOS/tasks.c ****         }
 3442              		.loc 1 2759 13 discriminator 1 view .LVU969
 3443 002e FEE7     		b	.L253
 3444              	.L252:
2759:FreeRTOS/tasks.c ****         }
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 174


 3445              		.loc 1 2759 13 discriminator 2 view .LVU970
2759:FreeRTOS/tasks.c ****         }
 3446              		.loc 1 2759 13 discriminator 2 view .LVU971
 3447 0030 464A     		ldr	r2, .L273+8
 3448 0032 1168     		ldr	r1, [r2]
 3449              	.LVL240:
2759:FreeRTOS/tasks.c ****         }
 3450              		.loc 1 2759 13 discriminator 2 view .LVU972
 3451 0034 464B     		ldr	r3, .L273+12
 3452 0036 1868     		ldr	r0, [r3]
 3453 0038 1060     		str	r0, [r2]
2759:FreeRTOS/tasks.c ****         }
 3454              		.loc 1 2759 13 discriminator 2 view .LVU973
 3455 003a 1960     		str	r1, [r3]
2759:FreeRTOS/tasks.c ****         }
 3456              		.loc 1 2759 13 discriminator 2 view .LVU974
 3457 003c 454A     		ldr	r2, .L273+16
 3458 003e 1368     		ldr	r3, [r2]
 3459 0040 0133     		adds	r3, r3, #1
 3460 0042 1360     		str	r3, [r2]
2759:FreeRTOS/tasks.c ****         }
 3461              		.loc 1 2759 13 discriminator 2 view .LVU975
 3462 0044 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3463              	.LVL241:
2759:FreeRTOS/tasks.c ****         }
 3464              		.loc 1 2759 13 is_stmt 0 discriminator 2 view .LVU976
 3465              	.LBE234:
2759:FreeRTOS/tasks.c ****         }
 3466              		.loc 1 2759 39 is_stmt 1 discriminator 2 view .LVU977
 3467              	.L251:
2763:FreeRTOS/tasks.c ****         }
 3468              		.loc 1 2763 37 view .LVU978
2770:FreeRTOS/tasks.c ****         {
 3469              		.loc 1 2770 9 view .LVU979
2770:FreeRTOS/tasks.c ****         {
 3470              		.loc 1 2770 29 is_stmt 0 view .LVU980
 3471 0048 434B     		ldr	r3, .L273+20
 3472 004a 1B68     		ldr	r3, [r3]
2770:FreeRTOS/tasks.c ****         {
 3473              		.loc 1 2770 11 view .LVU981
 3474 004c A342     		cmp	r3, r4
 3475 004e 11D9     		bls	.L265
 3476              	.LBE233:
2740:FreeRTOS/tasks.c **** 
 3477              		.loc 1 2740 16 view .LVU982
 3478 0050 0020     		movs	r0, #0
 3479              	.LVL242:
 3480              	.L255:
 3481              	.LBB242:
2853:FreeRTOS/tasks.c ****                 {
 3482              		.loc 1 2853 17 is_stmt 1 view .LVU983
2853:FreeRTOS/tasks.c ****                 {
 3483              		.loc 1 2853 21 is_stmt 0 view .LVU984
 3484 0052 424B     		ldr	r3, .L273+24
 3485 0054 1B68     		ldr	r3, [r3]
 3486 0056 DB6A     		ldr	r3, [r3, #44]
 3487 0058 03EB8303 		add	r3, r3, r3, lsl #2
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 175


 3488 005c 9A00     		lsls	r2, r3, #2
 3489 005e 404B     		ldr	r3, .L273+28
 3490 0060 9B58     		ldr	r3, [r3, r2]
2853:FreeRTOS/tasks.c ****                 {
 3491              		.loc 1 2853 19 view .LVU985
 3492 0062 012B     		cmp	r3, #1
 3493 0064 00D9     		bls	.L263
2855:FreeRTOS/tasks.c ****                 }
 3494              		.loc 1 2855 37 view .LVU986
 3495 0066 0120     		movs	r0, #1
 3496              	.LVL243:
 3497              	.L263:
2859:FreeRTOS/tasks.c ****                 }
 3498              		.loc 1 2859 45 is_stmt 1 view .LVU987
2881:FreeRTOS/tasks.c ****                 {
 3499              		.loc 1 2881 17 view .LVU988
2881:FreeRTOS/tasks.c ****                 {
 3500              		.loc 1 2881 35 is_stmt 0 view .LVU989
 3501 0068 3E4B     		ldr	r3, .L273+32
 3502 006a 1B68     		ldr	r3, [r3]
2881:FreeRTOS/tasks.c ****                 {
 3503              		.loc 1 2881 19 view .LVU990
 3504 006c 002B     		cmp	r3, #0
 3505 006e 68D0     		beq	.L249
2883:FreeRTOS/tasks.c ****                 }
 3506              		.loc 1 2883 37 view .LVU991
 3507 0070 0120     		movs	r0, #1
 3508              	.LVL244:
2883:FreeRTOS/tasks.c ****                 }
 3509              		.loc 1 2883 37 view .LVU992
 3510              	.LBE242:
2905:FreeRTOS/tasks.c **** }
 3511              		.loc 1 2905 5 is_stmt 1 view .LVU993
2905:FreeRTOS/tasks.c **** }
 3512              		.loc 1 2905 12 is_stmt 0 view .LVU994
 3513 0072 66E0     		b	.L249
 3514              	.LVL245:
 3515              	.L265:
2740:FreeRTOS/tasks.c **** 
 3516              		.loc 1 2740 16 view .LVU995
 3517 0074 0020     		movs	r0, #0
 3518 0076 34E0     		b	.L254
 3519              	.LVL246:
 3520              	.L270:
 3521              	.LBB243:
2781:FreeRTOS/tasks.c ****                     break;
 3522              		.loc 1 2781 21 is_stmt 1 view .LVU996
2781:FreeRTOS/tasks.c ****                     break;
 3523              		.loc 1 2781 42 is_stmt 0 view .LVU997
 3524 0078 374B     		ldr	r3, .L273+20
 3525 007a 4FF0FF32 		mov	r2, #-1
 3526 007e 1A60     		str	r2, [r3]
2782:FreeRTOS/tasks.c ****                 }
 3527              		.loc 1 2782 21 is_stmt 1 view .LVU998
 3528 0080 E7E7     		b	.L255
 3529              	.LVL247:
 3530              	.L271:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 176


2800:FreeRTOS/tasks.c ****                         break; /*lint !e9011 Code structure here is deemed easier to understand wit
 3531              		.loc 1 2800 25 view .LVU999
2800:FreeRTOS/tasks.c ****                         break; /*lint !e9011 Code structure here is deemed easier to understand wit
 3532              		.loc 1 2800 46 is_stmt 0 view .LVU1000
 3533 0082 354B     		ldr	r3, .L273+20
 3534              	.LVL248:
2800:FreeRTOS/tasks.c ****                         break; /*lint !e9011 Code structure here is deemed easier to understand wit
 3535              		.loc 1 2800 46 view .LVU1001
 3536 0084 1A60     		str	r2, [r3]
2801:FreeRTOS/tasks.c ****                     }
 3537              		.loc 1 2801 25 is_stmt 1 view .LVU1002
 3538 0086 E4E7     		b	.L255
 3539              	.LVL249:
 3540              	.L272:
 3541              	.LBB237:
2809:FreeRTOS/tasks.c **** 
 3542              		.loc 1 2809 21 discriminator 1 view .LVU1003
 3543 0088 D968     		ldr	r1, [r3, #12]
 3544 008a 5160     		str	r1, [r2, #4]
 3545 008c 3FE0     		b	.L258
 3546              	.LVL250:
 3547              	.L260:
2809:FreeRTOS/tasks.c **** 
 3548              		.loc 1 2809 21 is_stmt 0 discriminator 1 view .LVU1004
 3549              	.LBE237:
 3550              	.LBB238:
2815:FreeRTOS/tasks.c ****                     }
 3551              		.loc 1 2815 25 is_stmt 1 discriminator 3 view .LVU1005
 3552 008e 0021     		movs	r1, #0
 3553 0090 9962     		str	r1, [r3, #40]
2815:FreeRTOS/tasks.c ****                     }
 3554              		.loc 1 2815 25 discriminator 3 view .LVU1006
 3555 0092 1168     		ldr	r1, [r2]
 3556 0094 0139     		subs	r1, r1, #1
 3557 0096 1160     		str	r1, [r2]
 3558              	.LBE238:
2815:FreeRTOS/tasks.c ****                     }
 3559              		.loc 1 2815 70 discriminator 3 view .LVU1007
 3560              	.LVL251:
 3561              	.L259:
2819:FreeRTOS/tasks.c ****                     }
 3562              		.loc 1 2819 49 view .LVU1008
2824:FreeRTOS/tasks.c **** 
 3563              		.loc 1 2824 21 view .LVU1009
2824:FreeRTOS/tasks.c **** 
 3564              		.loc 1 2824 21 view .LVU1010
 3565 0098 DA6A     		ldr	r2, [r3, #44]
 3566 009a 0121     		movs	r1, #1
 3567 009c 9140     		lsls	r1, r1, r2
 3568 009e 324D     		ldr	r5, .L273+36
 3569 00a0 2F68     		ldr	r7, [r5]
 3570 00a2 3943     		orrs	r1, r1, r7
 3571 00a4 2960     		str	r1, [r5]
 3572              	.LBB239:
2824:FreeRTOS/tasks.c **** 
 3573              		.loc 1 2824 21 view .LVU1011
 3574 00a6 2E49     		ldr	r1, .L273+28
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 177


 3575 00a8 02EB8202 		add	r2, r2, r2, lsl #2
 3576 00ac 9500     		lsls	r5, r2, #2
 3577 00ae 0D44     		add	r5, r5, r1
 3578 00b0 6A68     		ldr	r2, [r5, #4]
 3579              	.LVL252:
2824:FreeRTOS/tasks.c **** 
 3580              		.loc 1 2824 21 view .LVU1012
2824:FreeRTOS/tasks.c **** 
 3581              		.loc 1 2824 21 view .LVU1013
2824:FreeRTOS/tasks.c **** 
 3582              		.loc 1 2824 21 view .LVU1014
 3583 00b2 9A60     		str	r2, [r3, #8]
2824:FreeRTOS/tasks.c **** 
 3584              		.loc 1 2824 21 view .LVU1015
 3585 00b4 9568     		ldr	r5, [r2, #8]
 3586 00b6 DD60     		str	r5, [r3, #12]
2824:FreeRTOS/tasks.c **** 
 3587              		.loc 1 2824 21 view .LVU1016
 3588 00b8 6E60     		str	r6, [r5, #4]
2824:FreeRTOS/tasks.c **** 
 3589              		.loc 1 2824 21 view .LVU1017
 3590 00ba 9660     		str	r6, [r2, #8]
2824:FreeRTOS/tasks.c **** 
 3591              		.loc 1 2824 21 view .LVU1018
 3592 00bc DA6A     		ldr	r2, [r3, #44]
 3593              	.LVL253:
2824:FreeRTOS/tasks.c **** 
 3594              		.loc 1 2824 21 is_stmt 0 view .LVU1019
 3595 00be 02EB8206 		add	r6, r2, r2, lsl #2
 3596 00c2 B500     		lsls	r5, r6, #2
 3597 00c4 4E19     		adds	r6, r1, r5
 3598 00c6 5E61     		str	r6, [r3, #20]
2824:FreeRTOS/tasks.c **** 
 3599              		.loc 1 2824 21 is_stmt 1 view .LVU1020
 3600 00c8 4D59     		ldr	r5, [r1, r5]
 3601 00ca 0135     		adds	r5, r5, #1
 3602 00cc 02EB8202 		add	r2, r2, r2, lsl #2
 3603 00d0 9600     		lsls	r6, r2, #2
 3604 00d2 8D51     		str	r5, [r1, r6]
 3605              	.LBE239:
2824:FreeRTOS/tasks.c **** 
 3606              		.loc 1 2824 21 view .LVU1021
2824:FreeRTOS/tasks.c **** 
 3607              		.loc 1 2824 51 view .LVU1022
2834:FreeRTOS/tasks.c ****                             {
 3608              		.loc 1 2834 29 view .LVU1023
2834:FreeRTOS/tasks.c ****                             {
 3609              		.loc 1 2834 38 is_stmt 0 view .LVU1024
 3610 00d4 DA6A     		ldr	r2, [r3, #44]
2834:FreeRTOS/tasks.c ****                             {
 3611              		.loc 1 2834 66 view .LVU1025
 3612 00d6 214B     		ldr	r3, .L273+24
 3613              	.LVL254:
2834:FreeRTOS/tasks.c ****                             {
 3614              		.loc 1 2834 66 view .LVU1026
 3615 00d8 1B68     		ldr	r3, [r3]
 3616 00da DB6A     		ldr	r3, [r3, #44]
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 178


2834:FreeRTOS/tasks.c ****                             {
 3617              		.loc 1 2834 31 view .LVU1027
 3618 00dc 9A42     		cmp	r2, r3
 3619 00de 00D3     		bcc	.L254
2836:FreeRTOS/tasks.c ****                             }
 3620              		.loc 1 2836 49 view .LVU1028
 3621 00e0 0120     		movs	r0, #1
 3622              	.LVL255:
 3623              	.L254:
2772:FreeRTOS/tasks.c ****             {
 3624              		.loc 1 2772 13 is_stmt 1 view .LVU1029
2774:FreeRTOS/tasks.c ****                 {
 3625              		.loc 1 2774 17 view .LVU1030
2774:FreeRTOS/tasks.c ****                 {
 3626              		.loc 1 2774 21 is_stmt 0 view .LVU1031
 3627 00e2 1A4B     		ldr	r3, .L273+8
 3628 00e4 1B68     		ldr	r3, [r3]
 3629 00e6 1B68     		ldr	r3, [r3]
2774:FreeRTOS/tasks.c ****                 {
 3630              		.loc 1 2774 19 view .LVU1032
 3631 00e8 002B     		cmp	r3, #0
 3632 00ea C5D0     		beq	.L270
2790:FreeRTOS/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3633              		.loc 1 2790 21 is_stmt 1 view .LVU1033
2790:FreeRTOS/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3634              		.loc 1 2790 29 is_stmt 0 view .LVU1034
 3635 00ec 174B     		ldr	r3, .L273+8
 3636 00ee 1B68     		ldr	r3, [r3]
 3637 00f0 DB68     		ldr	r3, [r3, #12]
2790:FreeRTOS/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3638              		.loc 1 2790 27 view .LVU1035
 3639 00f2 DB68     		ldr	r3, [r3, #12]
 3640              	.LVL256:
2791:FreeRTOS/tasks.c **** 
 3641              		.loc 1 2791 21 is_stmt 1 view .LVU1036
2791:FreeRTOS/tasks.c **** 
 3642              		.loc 1 2791 32 is_stmt 0 view .LVU1037
 3643 00f4 5A68     		ldr	r2, [r3, #4]
 3644              	.LVL257:
2793:FreeRTOS/tasks.c ****                     {
 3645              		.loc 1 2793 21 is_stmt 1 view .LVU1038
2793:FreeRTOS/tasks.c ****                     {
 3646              		.loc 1 2793 23 is_stmt 0 view .LVU1039
 3647 00f6 9442     		cmp	r4, r2
 3648 00f8 C3D3     		bcc	.L271
2805:FreeRTOS/tasks.c ****                     }
 3649              		.loc 1 2805 49 is_stmt 1 view .LVU1040
 3650              	.LBB240:
2809:FreeRTOS/tasks.c **** 
 3651              		.loc 1 2809 21 view .LVU1041
 3652 00fa 5A69     		ldr	r2, [r3, #20]
 3653              	.LVL258:
2809:FreeRTOS/tasks.c **** 
 3654              		.loc 1 2809 21 view .LVU1042
 3655 00fc 9D68     		ldr	r5, [r3, #8]
 3656 00fe D968     		ldr	r1, [r3, #12]
 3657 0100 A960     		str	r1, [r5, #8]
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 179


 3658              	.LVL259:
2809:FreeRTOS/tasks.c **** 
 3659              		.loc 1 2809 21 view .LVU1043
 3660 0102 9D68     		ldr	r5, [r3, #8]
 3661 0104 4D60     		str	r5, [r1, #4]
2809:FreeRTOS/tasks.c **** 
 3662              		.loc 1 2809 21 view .LVU1044
 3663 0106 5168     		ldr	r1, [r2, #4]
 3664 0108 1E1D     		adds	r6, r3, #4
 3665 010a B142     		cmp	r1, r6
 3666 010c BCD0     		beq	.L272
 3667              	.L258:
2809:FreeRTOS/tasks.c **** 
 3668              		.loc 1 2809 21 discriminator 3 view .LVU1045
 3669 010e 0021     		movs	r1, #0
 3670 0110 5961     		str	r1, [r3, #20]
2809:FreeRTOS/tasks.c **** 
 3671              		.loc 1 2809 21 discriminator 3 view .LVU1046
 3672 0112 1168     		ldr	r1, [r2]
 3673 0114 0139     		subs	r1, r1, #1
 3674 0116 1160     		str	r1, [r2]
 3675              	.LBE240:
2809:FreeRTOS/tasks.c **** 
 3676              		.loc 1 2809 66 discriminator 3 view .LVU1047
2813:FreeRTOS/tasks.c ****                     {
 3677              		.loc 1 2813 21 discriminator 3 view .LVU1048
2813:FreeRTOS/tasks.c ****                     {
 3678              		.loc 1 2813 25 is_stmt 0 discriminator 3 view .LVU1049
 3679 0118 9A6A     		ldr	r2, [r3, #40]
 3680              	.LVL260:
2813:FreeRTOS/tasks.c ****                     {
 3681              		.loc 1 2813 23 discriminator 3 view .LVU1050
 3682 011a 002A     		cmp	r2, #0
 3683 011c BCD0     		beq	.L259
 3684              	.LBB241:
2815:FreeRTOS/tasks.c ****                     }
 3685              		.loc 1 2815 25 is_stmt 1 view .LVU1051
 3686              	.LVL261:
2815:FreeRTOS/tasks.c ****                     }
 3687              		.loc 1 2815 25 view .LVU1052
 3688 011e DD69     		ldr	r5, [r3, #28]
 3689 0120 196A     		ldr	r1, [r3, #32]
 3690 0122 A960     		str	r1, [r5, #8]
2815:FreeRTOS/tasks.c ****                     }
 3691              		.loc 1 2815 25 view .LVU1053
 3692 0124 DD69     		ldr	r5, [r3, #28]
 3693 0126 4D60     		str	r5, [r1, #4]
2815:FreeRTOS/tasks.c ****                     }
 3694              		.loc 1 2815 25 view .LVU1054
 3695 0128 5568     		ldr	r5, [r2, #4]
 3696 012a 03F11801 		add	r1, r3, #24
 3697 012e 8D42     		cmp	r5, r1
 3698 0130 ADD1     		bne	.L260
2815:FreeRTOS/tasks.c ****                     }
 3699              		.loc 1 2815 25 discriminator 1 view .LVU1055
 3700 0132 196A     		ldr	r1, [r3, #32]
 3701 0134 5160     		str	r1, [r2, #4]
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 180


 3702 0136 AAE7     		b	.L260
 3703              	.LVL262:
 3704              	.L250:
2815:FreeRTOS/tasks.c ****                     }
 3705              		.loc 1 2815 25 is_stmt 0 discriminator 1 view .LVU1056
 3706              	.LBE241:
 3707              	.LBE243:
2894:FreeRTOS/tasks.c **** 
 3708              		.loc 1 2894 9 is_stmt 1 view .LVU1057
 3709 0138 0C4A     		ldr	r2, .L273+40
 3710 013a 1368     		ldr	r3, [r2]
 3711 013c 0133     		adds	r3, r3, #1
 3712 013e 1360     		str	r3, [r2]
2740:FreeRTOS/tasks.c **** 
 3713              		.loc 1 2740 16 is_stmt 0 view .LVU1058
 3714 0140 0020     		movs	r0, #0
 3715              	.LVL263:
 3716              	.L249:
2906:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3717              		.loc 1 2906 1 view .LVU1059
 3718 0142 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3719              	.L274:
 3720              		.align	2
 3721              	.L273:
 3722 0144 00000000 		.word	.LANCHOR16
 3723 0148 00000000 		.word	.LANCHOR6
 3724 014c 00000000 		.word	.LANCHOR7
 3725 0150 00000000 		.word	.LANCHOR11
 3726 0154 00000000 		.word	.LANCHOR20
 3727 0158 00000000 		.word	.LANCHOR5
 3728 015c 00000000 		.word	.LANCHOR3
 3729 0160 00000000 		.word	.LANCHOR4
 3730 0164 00000000 		.word	.LANCHOR17
 3731 0168 00000000 		.word	.LANCHOR2
 3732 016c 00000000 		.word	.LANCHOR21
 3733              		.cfi_endproc
 3734              	.LFE36:
 3736              		.section	.text.xTaskResumeAll,"ax",%progbits
 3737              		.align	1
 3738              		.global	xTaskResumeAll
 3739              		.syntax unified
 3740              		.thumb
 3741              		.thumb_func
 3742              		.fpu fpv4-sp-d16
 3744              	xTaskResumeAll:
 3745              	.LFB24:
2221:FreeRTOS/tasks.c ****     TCB_t * pxTCB = NULL;
 3746              		.loc 1 2221 1 is_stmt 1 view -0
 3747              		.cfi_startproc
 3748              		@ args = 0, pretend = 0, frame = 0
 3749              		@ frame_needed = 0, uses_anonymous_args = 0
 3750 0000 38B5     		push	{r3, r4, r5, lr}
 3751              	.LCFI31:
 3752              		.cfi_def_cfa_offset 16
 3753              		.cfi_offset 3, -16
 3754              		.cfi_offset 4, -12
 3755              		.cfi_offset 5, -8
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 181


 3756              		.cfi_offset 14, -4
2222:FreeRTOS/tasks.c ****     BaseType_t xAlreadyYielded = pdFALSE;
 3757              		.loc 1 2222 5 view .LVU1061
 3758              	.LVL264:
2223:FreeRTOS/tasks.c **** 
 3759              		.loc 1 2223 5 view .LVU1062
2227:FreeRTOS/tasks.c **** 
 3760              		.loc 1 2227 5 view .LVU1063
 3761 0002 494B     		ldr	r3, .L295
 3762 0004 1B68     		ldr	r3, [r3]
 3763 0006 43B9     		cbnz	r3, .L276
2227:FreeRTOS/tasks.c **** 
 3764              		.loc 1 2227 5 view .LVU1064
 3765              	.LBB244:
 3766              	.LBI244:
 194:FreeRTOS/portable/portmacro.h ****     {
 3767              		.loc 2 194 34 view .LVU1065
 3768              	.LBB245:
 196:FreeRTOS/portable/portmacro.h **** 
 3769              		.loc 2 196 9 view .LVU1066
 198:FreeRTOS/portable/portmacro.h ****         (
 3770              		.loc 2 198 9 view .LVU1067
 3771              		.syntax unified
 3772              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 3773 0008 4FF05003 			mov r3, #80												
 3774 000c 83F31188 		msr basepri, r3											
 3775 0010 BFF36F8F 		isb														
 3776 0014 BFF34F8F 		dsb														
 3777              	
 3778              	@ 0 "" 2
 3779              	.LVL265:
 3780              		.thumb
 3781              		.syntax unified
 3782              	.L277:
 198:FreeRTOS/portable/portmacro.h ****         (
 3783              		.loc 2 198 9 is_stmt 0 view .LVU1068
 3784              	.LBE245:
 3785              	.LBE244:
2227:FreeRTOS/tasks.c **** 
 3786              		.loc 1 2227 5 is_stmt 1 discriminator 1 view .LVU1069
2227:FreeRTOS/tasks.c **** 
 3787              		.loc 1 2227 5 discriminator 1 view .LVU1070
2227:FreeRTOS/tasks.c **** 
 3788              		.loc 1 2227 5 discriminator 1 view .LVU1071
 3789 0018 FEE7     		b	.L277
 3790              	.L276:
2227:FreeRTOS/tasks.c **** 
 3791              		.loc 1 2227 41 discriminator 2 view .LVU1072
2234:FreeRTOS/tasks.c ****     {
 3792              		.loc 1 2234 5 discriminator 2 view .LVU1073
 3793 001a FFF7FEFF 		bl	vPortEnterCritical
 3794              	.LVL266:
2236:FreeRTOS/tasks.c **** 
 3795              		.loc 1 2236 9 discriminator 2 view .LVU1074
 3796 001e 424B     		ldr	r3, .L295
 3797 0020 1A68     		ldr	r2, [r3]
 3798 0022 013A     		subs	r2, r2, #1
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 182


 3799 0024 1A60     		str	r2, [r3]
2238:FreeRTOS/tasks.c ****         {
 3800              		.loc 1 2238 9 discriminator 2 view .LVU1075
2238:FreeRTOS/tasks.c ****         {
 3801              		.loc 1 2238 34 is_stmt 0 discriminator 2 view .LVU1076
 3802 0026 1B68     		ldr	r3, [r3]
2238:FreeRTOS/tasks.c ****         {
 3803              		.loc 1 2238 11 discriminator 2 view .LVU1077
 3804 0028 002B     		cmp	r3, #0
 3805 002a 78D1     		bne	.L288
2240:FreeRTOS/tasks.c ****             {
 3806              		.loc 1 2240 13 is_stmt 1 view .LVU1078
2240:FreeRTOS/tasks.c ****             {
 3807              		.loc 1 2240 40 is_stmt 0 view .LVU1079
 3808 002c 3F4B     		ldr	r3, .L295+4
 3809 002e 1B68     		ldr	r3, [r3]
2240:FreeRTOS/tasks.c ****             {
 3810              		.loc 1 2240 15 view .LVU1080
 3811 0030 3BB9     		cbnz	r3, .L289
2223:FreeRTOS/tasks.c **** 
 3812              		.loc 1 2223 16 view .LVU1081
 3813 0032 0024     		movs	r4, #0
 3814 0034 74E0     		b	.L278
 3815              	.LVL267:
 3816              	.L292:
 3817              	.LBB246:
2247:FreeRTOS/tasks.c ****                     portMEMORY_BARRIER();
 3818              		.loc 1 2247 21 is_stmt 1 discriminator 1 view .LVU1082
 3819 0036 196A     		ldr	r1, [r3, #32]
 3820 0038 5160     		str	r1, [r2, #4]
 3821 003a 15E0     		b	.L280
 3822              	.LVL268:
 3823              	.L293:
2247:FreeRTOS/tasks.c ****                     portMEMORY_BARRIER();
 3824              		.loc 1 2247 21 is_stmt 0 discriminator 1 view .LVU1083
 3825              	.LBE246:
 3826              	.LBB247:
2249:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 3827              		.loc 1 2249 21 is_stmt 1 discriminator 1 view .LVU1084
 3828 003c D968     		ldr	r1, [r3, #12]
 3829 003e 5160     		str	r1, [r2, #4]
 3830 0040 21E0     		b	.L281
 3831              	.LVL269:
 3832              	.L289:
2249:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 3833              		.loc 1 2249 21 is_stmt 0 discriminator 1 view .LVU1085
 3834              	.LBE247:
2222:FreeRTOS/tasks.c ****     BaseType_t xAlreadyYielded = pdFALSE;
 3835              		.loc 1 2222 13 view .LVU1086
 3836 0042 0023     		movs	r3, #0
 3837              	.LVL270:
 3838              	.L279:
2260:FreeRTOS/tasks.c ****                     }
 3839              		.loc 1 2260 49 is_stmt 1 view .LVU1087
2244:FreeRTOS/tasks.c ****                 {
 3840              		.loc 1 2244 22 view .LVU1088
2244:FreeRTOS/tasks.c ****                 {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 183


 3841              		.loc 1 2244 24 is_stmt 0 view .LVU1089
 3842 0044 3A4A     		ldr	r2, .L295+8
 3843 0046 1268     		ldr	r2, [r2]
2244:FreeRTOS/tasks.c ****                 {
 3844              		.loc 1 2244 22 view .LVU1090
 3845 0048 002A     		cmp	r2, #0
 3846 004a 47D0     		beq	.L291
2246:FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 3847              		.loc 1 2246 21 is_stmt 1 view .LVU1091
2246:FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 3848              		.loc 1 2246 29 is_stmt 0 view .LVU1092
 3849 004c 384B     		ldr	r3, .L295+8
 3850              	.LVL271:
2246:FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 3851              		.loc 1 2246 29 view .LVU1093
 3852 004e DB68     		ldr	r3, [r3, #12]
2246:FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 3853              		.loc 1 2246 27 view .LVU1094
 3854 0050 DB68     		ldr	r3, [r3, #12]
 3855              	.LVL272:
 3856              	.LBB248:
2247:FreeRTOS/tasks.c ****                     portMEMORY_BARRIER();
 3857              		.loc 1 2247 21 is_stmt 1 view .LVU1095
 3858 0052 9A6A     		ldr	r2, [r3, #40]
 3859              	.LVL273:
2247:FreeRTOS/tasks.c ****                     portMEMORY_BARRIER();
 3860              		.loc 1 2247 21 view .LVU1096
 3861 0054 D869     		ldr	r0, [r3, #28]
 3862 0056 196A     		ldr	r1, [r3, #32]
 3863 0058 8160     		str	r1, [r0, #8]
2247:FreeRTOS/tasks.c ****                     portMEMORY_BARRIER();
 3864              		.loc 1 2247 21 view .LVU1097
 3865 005a D869     		ldr	r0, [r3, #28]
 3866 005c 4860     		str	r0, [r1, #4]
2247:FreeRTOS/tasks.c ****                     portMEMORY_BARRIER();
 3867              		.loc 1 2247 21 view .LVU1098
 3868 005e 5068     		ldr	r0, [r2, #4]
 3869 0060 03F11801 		add	r1, r3, #24
 3870 0064 8842     		cmp	r0, r1
 3871 0066 E6D0     		beq	.L292
 3872              	.L280:
2247:FreeRTOS/tasks.c ****                     portMEMORY_BARRIER();
 3873              		.loc 1 2247 21 discriminator 3 view .LVU1099
 3874 0068 0021     		movs	r1, #0
 3875 006a 9962     		str	r1, [r3, #40]
2247:FreeRTOS/tasks.c ****                     portMEMORY_BARRIER();
 3876              		.loc 1 2247 21 discriminator 3 view .LVU1100
 3877 006c 1168     		ldr	r1, [r2]
 3878 006e 0139     		subs	r1, r1, #1
 3879 0070 1160     		str	r1, [r2]
 3880              	.LBE248:
2247:FreeRTOS/tasks.c ****                     portMEMORY_BARRIER();
 3881              		.loc 1 2247 66 discriminator 3 view .LVU1101
2248:FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 3882              		.loc 1 2248 21 discriminator 3 view .LVU1102
 3883              	.LBB249:
2249:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 184


 3884              		.loc 1 2249 21 discriminator 3 view .LVU1103
 3885 0072 5A69     		ldr	r2, [r3, #20]
 3886              	.LVL274:
2249:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 3887              		.loc 1 2249 21 discriminator 3 view .LVU1104
 3888 0074 9868     		ldr	r0, [r3, #8]
 3889 0076 D968     		ldr	r1, [r3, #12]
 3890 0078 8160     		str	r1, [r0, #8]
2249:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 3891              		.loc 1 2249 21 discriminator 3 view .LVU1105
 3892 007a 9868     		ldr	r0, [r3, #8]
 3893 007c 4860     		str	r0, [r1, #4]
2249:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 3894              		.loc 1 2249 21 discriminator 3 view .LVU1106
 3895 007e 5168     		ldr	r1, [r2, #4]
 3896 0080 181D     		adds	r0, r3, #4
 3897 0082 8142     		cmp	r1, r0
 3898 0084 DAD0     		beq	.L293
 3899              	.L281:
2249:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 3900              		.loc 1 2249 21 discriminator 3 view .LVU1107
 3901 0086 0021     		movs	r1, #0
 3902 0088 5961     		str	r1, [r3, #20]
2249:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 3903              		.loc 1 2249 21 discriminator 3 view .LVU1108
 3904 008a 1168     		ldr	r1, [r2]
 3905 008c 0139     		subs	r1, r1, #1
 3906 008e 1160     		str	r1, [r2]
 3907              	.LBE249:
2249:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 3908              		.loc 1 2249 66 discriminator 3 view .LVU1109
2250:FreeRTOS/tasks.c **** 
 3909              		.loc 1 2250 21 discriminator 3 view .LVU1110
2250:FreeRTOS/tasks.c **** 
 3910              		.loc 1 2250 21 discriminator 3 view .LVU1111
 3911 0090 DA6A     		ldr	r2, [r3, #44]
 3912              	.LVL275:
2250:FreeRTOS/tasks.c **** 
 3913              		.loc 1 2250 21 is_stmt 0 discriminator 3 view .LVU1112
 3914 0092 0121     		movs	r1, #1
 3915 0094 9140     		lsls	r1, r1, r2
 3916 0096 274C     		ldr	r4, .L295+12
 3917 0098 2568     		ldr	r5, [r4]
 3918 009a 2943     		orrs	r1, r1, r5
 3919 009c 2160     		str	r1, [r4]
 3920              	.LBB250:
2250:FreeRTOS/tasks.c **** 
 3921              		.loc 1 2250 21 is_stmt 1 discriminator 3 view .LVU1113
 3922 009e 2649     		ldr	r1, .L295+16
 3923 00a0 02EB8202 		add	r2, r2, r2, lsl #2
 3924 00a4 01EB8202 		add	r2, r1, r2, lsl #2
 3925 00a8 5268     		ldr	r2, [r2, #4]
 3926              	.LVL276:
2250:FreeRTOS/tasks.c **** 
 3927              		.loc 1 2250 21 discriminator 3 view .LVU1114
2250:FreeRTOS/tasks.c **** 
 3928              		.loc 1 2250 21 discriminator 3 view .LVU1115
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 185


2250:FreeRTOS/tasks.c **** 
 3929              		.loc 1 2250 21 discriminator 3 view .LVU1116
 3930 00aa 9A60     		str	r2, [r3, #8]
2250:FreeRTOS/tasks.c **** 
 3931              		.loc 1 2250 21 discriminator 3 view .LVU1117
 3932 00ac 9468     		ldr	r4, [r2, #8]
 3933 00ae DC60     		str	r4, [r3, #12]
2250:FreeRTOS/tasks.c **** 
 3934              		.loc 1 2250 21 discriminator 3 view .LVU1118
 3935 00b0 6060     		str	r0, [r4, #4]
2250:FreeRTOS/tasks.c **** 
 3936              		.loc 1 2250 21 discriminator 3 view .LVU1119
 3937 00b2 9060     		str	r0, [r2, #8]
2250:FreeRTOS/tasks.c **** 
 3938              		.loc 1 2250 21 discriminator 3 view .LVU1120
 3939 00b4 DA6A     		ldr	r2, [r3, #44]
 3940              	.LVL277:
2250:FreeRTOS/tasks.c **** 
 3941              		.loc 1 2250 21 is_stmt 0 discriminator 3 view .LVU1121
 3942 00b6 02EB8200 		add	r0, r2, r2, lsl #2
 3943 00ba 8400     		lsls	r4, r0, #2
 3944 00bc 01EB8000 		add	r0, r1, r0, lsl #2
 3945 00c0 5861     		str	r0, [r3, #20]
2250:FreeRTOS/tasks.c **** 
 3946              		.loc 1 2250 21 is_stmt 1 discriminator 3 view .LVU1122
 3947 00c2 0859     		ldr	r0, [r1, r4]
 3948 00c4 0130     		adds	r0, r0, #1
 3949 00c6 0851     		str	r0, [r1, r4]
 3950              	.LBE250:
2250:FreeRTOS/tasks.c **** 
 3951              		.loc 1 2250 21 discriminator 3 view .LVU1123
2250:FreeRTOS/tasks.c **** 
 3952              		.loc 1 2250 51 discriminator 3 view .LVU1124
2254:FreeRTOS/tasks.c ****                     {
 3953              		.loc 1 2254 21 discriminator 3 view .LVU1125
2254:FreeRTOS/tasks.c ****                     {
 3954              		.loc 1 2254 30 is_stmt 0 discriminator 3 view .LVU1126
 3955 00c8 D96A     		ldr	r1, [r3, #44]
2254:FreeRTOS/tasks.c ****                     {
 3956              		.loc 1 2254 58 discriminator 3 view .LVU1127
 3957 00ca 1C4A     		ldr	r2, .L295+20
 3958 00cc 1268     		ldr	r2, [r2]
 3959 00ce D26A     		ldr	r2, [r2, #44]
2254:FreeRTOS/tasks.c ****                     {
 3960              		.loc 1 2254 23 discriminator 3 view .LVU1128
 3961 00d0 9142     		cmp	r1, r2
 3962 00d2 B7D3     		bcc	.L279
2256:FreeRTOS/tasks.c ****                     }
 3963              		.loc 1 2256 25 is_stmt 1 view .LVU1129
2256:FreeRTOS/tasks.c ****                     }
 3964              		.loc 1 2256 39 is_stmt 0 view .LVU1130
 3965 00d4 1A4A     		ldr	r2, .L295+24
 3966 00d6 0121     		movs	r1, #1
 3967 00d8 1160     		str	r1, [r2]
 3968 00da B3E7     		b	.L279
 3969              	.L291:
2264:FreeRTOS/tasks.c ****                 {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 186


 3970              		.loc 1 2264 17 is_stmt 1 view .LVU1131
2264:FreeRTOS/tasks.c ****                 {
 3971              		.loc 1 2264 19 is_stmt 0 view .LVU1132
 3972 00dc 0BB1     		cbz	r3, .L284
2272:FreeRTOS/tasks.c ****                 }
 3973              		.loc 1 2272 21 is_stmt 1 view .LVU1133
 3974 00de FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3975              	.LVL278:
 3976              	.L284:
 3977              	.LBB251:
2280:FreeRTOS/tasks.c **** 
 3978              		.loc 1 2280 21 view .LVU1134
2280:FreeRTOS/tasks.c **** 
 3979              		.loc 1 2280 32 is_stmt 0 view .LVU1135
 3980 00e2 184B     		ldr	r3, .L295+28
 3981 00e4 1C68     		ldr	r4, [r3]
 3982              	.LVL279:
2282:FreeRTOS/tasks.c ****                     {
 3983              		.loc 1 2282 21 is_stmt 1 view .LVU1136
2282:FreeRTOS/tasks.c ****                     {
 3984              		.loc 1 2282 23 is_stmt 0 view .LVU1137
 3985 00e6 74B9     		cbnz	r4, .L287
 3986              	.L285:
2302:FreeRTOS/tasks.c ****                     }
 3987              		.loc 1 2302 49 is_stmt 1 view .LVU1138
 3988              	.LBE251:
2306:FreeRTOS/tasks.c ****                 {
 3989              		.loc 1 2306 17 view .LVU1139
2306:FreeRTOS/tasks.c ****                 {
 3990              		.loc 1 2306 35 is_stmt 0 view .LVU1140
 3991 00e8 154B     		ldr	r3, .L295+24
 3992 00ea 1C68     		ldr	r4, [r3]
 3993              	.LVL280:
2306:FreeRTOS/tasks.c ****                 {
 3994              		.loc 1 2306 19 view .LVU1141
 3995 00ec C4B1     		cbz	r4, .L278
2310:FreeRTOS/tasks.c ****                         }
 3996              		.loc 1 2310 29 is_stmt 1 view .LVU1142
 3997              	.LVL281:
2313:FreeRTOS/tasks.c ****                 }
 3998              		.loc 1 2313 21 view .LVU1143
 3999 00ee 164B     		ldr	r3, .L295+32
 4000 00f0 4FF08052 		mov	r2, #268435456
 4001 00f4 1A60     		str	r2, [r3]
2313:FreeRTOS/tasks.c ****                 }
 4002              		.loc 1 2313 21 view .LVU1144
 4003              		.syntax unified
 4004              	@ 2313 "FreeRTOS/tasks.c" 1
 4005 00f6 BFF34F8F 		dsb
 4006              	@ 0 "" 2
2313:FreeRTOS/tasks.c ****                 }
 4007              		.loc 1 2313 21 view .LVU1145
 4008              	@ 2313 "FreeRTOS/tasks.c" 1
 4009 00fa BFF36F8F 		isb
 4010              	@ 0 "" 2
2313:FreeRTOS/tasks.c ****                 }
 4011              		.loc 1 2313 52 view .LVU1146
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 187


2310:FreeRTOS/tasks.c ****                         }
 4012              		.loc 1 2310 45 is_stmt 0 view .LVU1147
 4013              		.thumb
 4014              		.syntax unified
 4015 00fe 0124     		movs	r4, #1
 4016 0100 0EE0     		b	.L278
 4017              	.LVL282:
 4018              	.L286:
 4019              	.LBB252:
2292:FreeRTOS/tasks.c ****                             }
 4020              		.loc 1 2292 57 is_stmt 1 view .LVU1148
2295:FreeRTOS/tasks.c ****                         } while( xPendedCounts > ( TickType_t ) 0U );
 4021              		.loc 1 2295 29 view .LVU1149
2296:FreeRTOS/tasks.c **** 
 4022              		.loc 1 2296 32 view .LVU1150
2296:FreeRTOS/tasks.c **** 
 4023              		.loc 1 2296 25 is_stmt 0 view .LVU1151
 4024 0102 013C     		subs	r4, r4, #1
 4025              	.LVL283:
2296:FreeRTOS/tasks.c **** 
 4026              		.loc 1 2296 25 view .LVU1152
 4027 0104 07D0     		beq	.L294
 4028              	.L287:
2284:FreeRTOS/tasks.c ****                         {
 4029              		.loc 1 2284 25 is_stmt 1 view .LVU1153
2286:FreeRTOS/tasks.c ****                             {
 4030              		.loc 1 2286 29 view .LVU1154
2286:FreeRTOS/tasks.c ****                             {
 4031              		.loc 1 2286 33 is_stmt 0 view .LVU1155
 4032 0106 FFF7FEFF 		bl	xTaskIncrementTick
 4033              	.LVL284:
2286:FreeRTOS/tasks.c ****                             {
 4034              		.loc 1 2286 31 view .LVU1156
 4035 010a 0028     		cmp	r0, #0
 4036 010c F9D0     		beq	.L286
2288:FreeRTOS/tasks.c ****                             }
 4037              		.loc 1 2288 33 is_stmt 1 view .LVU1157
2288:FreeRTOS/tasks.c ****                             }
 4038              		.loc 1 2288 47 is_stmt 0 view .LVU1158
 4039 010e 0C4B     		ldr	r3, .L295+24
 4040 0110 0122     		movs	r2, #1
 4041 0112 1A60     		str	r2, [r3]
 4042 0114 F5E7     		b	.L286
 4043              	.L294:
2298:FreeRTOS/tasks.c ****                     }
 4044              		.loc 1 2298 25 is_stmt 1 view .LVU1159
2298:FreeRTOS/tasks.c ****                     }
 4045              		.loc 1 2298 38 is_stmt 0 view .LVU1160
 4046 0116 0B4B     		ldr	r3, .L295+28
 4047 0118 0022     		movs	r2, #0
 4048 011a 1A60     		str	r2, [r3]
 4049 011c E4E7     		b	.L285
 4050              	.LVL285:
 4051              	.L288:
2298:FreeRTOS/tasks.c ****                     }
 4052              		.loc 1 2298 38 view .LVU1161
 4053              	.LBE252:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 188


2223:FreeRTOS/tasks.c **** 
 4054              		.loc 1 2223 16 view .LVU1162
 4055 011e 0024     		movs	r4, #0
 4056              	.LVL286:
 4057              	.L278:
2323:FreeRTOS/tasks.c ****         }
 4058              		.loc 1 2323 37 is_stmt 1 view .LVU1163
2326:FreeRTOS/tasks.c **** 
 4059              		.loc 1 2326 5 view .LVU1164
 4060 0120 FFF7FEFF 		bl	vPortExitCritical
 4061              	.LVL287:
2328:FreeRTOS/tasks.c **** }
 4062              		.loc 1 2328 5 view .LVU1165
2329:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4063              		.loc 1 2329 1 is_stmt 0 view .LVU1166
 4064 0124 2046     		mov	r0, r4
 4065 0126 38BD     		pop	{r3, r4, r5, pc}
 4066              	.LVL288:
 4067              	.L296:
2329:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4068              		.loc 1 2329 1 view .LVU1167
 4069              		.align	2
 4070              	.L295:
 4071 0128 00000000 		.word	.LANCHOR16
 4072 012c 00000000 		.word	.LANCHOR12
 4073 0130 00000000 		.word	.LANCHOR1
 4074 0134 00000000 		.word	.LANCHOR2
 4075 0138 00000000 		.word	.LANCHOR4
 4076 013c 00000000 		.word	.LANCHOR3
 4077 0140 00000000 		.word	.LANCHOR17
 4078 0144 00000000 		.word	.LANCHOR21
 4079 0148 04ED00E0 		.word	-536810236
 4080              		.cfi_endproc
 4081              	.LFE24:
 4083              		.section	.text.xTaskDelayUntil,"ax",%progbits
 4084              		.align	1
 4085              		.global	xTaskDelayUntil
 4086              		.syntax unified
 4087              		.thumb
 4088              		.thumb_func
 4089              		.fpu fpv4-sp-d16
 4091              	xTaskDelayUntil:
 4092              	.LVL289:
 4093              	.LFB10:
1261:FreeRTOS/tasks.c ****         TickType_t xTimeToWake;
 4094              		.loc 1 1261 5 is_stmt 1 view -0
 4095              		.cfi_startproc
 4096              		@ args = 0, pretend = 0, frame = 0
 4097              		@ frame_needed = 0, uses_anonymous_args = 0
1261:FreeRTOS/tasks.c ****         TickType_t xTimeToWake;
 4098              		.loc 1 1261 5 is_stmt 0 view .LVU1169
 4099 0000 38B5     		push	{r3, r4, r5, lr}
 4100              	.LCFI32:
 4101              		.cfi_def_cfa_offset 16
 4102              		.cfi_offset 3, -16
 4103              		.cfi_offset 4, -12
 4104              		.cfi_offset 5, -8
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 189


 4105              		.cfi_offset 14, -4
1262:FreeRTOS/tasks.c ****         BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 4106              		.loc 1 1262 9 is_stmt 1 view .LVU1170
1263:FreeRTOS/tasks.c **** 
 4107              		.loc 1 1263 9 view .LVU1171
 4108              	.LVL290:
1265:FreeRTOS/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 4109              		.loc 1 1265 9 view .LVU1172
 4110 0002 58B1     		cbz	r0, .L313
 4111 0004 0C46     		mov	r4, r1
 4112 0006 0546     		mov	r5, r0
1265:FreeRTOS/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 4113              		.loc 1 1265 43 discriminator 2 view .LVU1173
1266:FreeRTOS/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
 4114              		.loc 1 1266 9 discriminator 2 view .LVU1174
 4115 0008 89B9     		cbnz	r1, .L300
1266:FreeRTOS/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
 4116              		.loc 1 1266 9 view .LVU1175
 4117              	.LBB253:
 4118              	.LBI253:
 194:FreeRTOS/portable/portmacro.h ****     {
 4119              		.loc 2 194 34 view .LVU1176
 4120              	.LBB254:
 196:FreeRTOS/portable/portmacro.h **** 
 4121              		.loc 2 196 9 view .LVU1177
 198:FreeRTOS/portable/portmacro.h ****         (
 4122              		.loc 2 198 9 view .LVU1178
 4123              		.syntax unified
 4124              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 4125 000a 4FF05003 			mov r3, #80												
 4126 000e 83F31188 		msr basepri, r3											
 4127 0012 BFF36F8F 		isb														
 4128 0016 BFF34F8F 		dsb														
 4129              	
 4130              	@ 0 "" 2
 4131              	.LVL291:
 4132              		.thumb
 4133              		.syntax unified
 4134              	.L301:
 198:FreeRTOS/portable/portmacro.h ****         (
 4135              		.loc 2 198 9 is_stmt 0 view .LVU1179
 4136              	.LBE254:
 4137              	.LBE253:
1266:FreeRTOS/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
 4138              		.loc 1 1266 9 is_stmt 1 discriminator 2 view .LVU1180
1266:FreeRTOS/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
 4139              		.loc 1 1266 9 discriminator 2 view .LVU1181
1266:FreeRTOS/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
 4140              		.loc 1 1266 9 discriminator 2 view .LVU1182
 4141 001a FEE7     		b	.L301
 4142              	.L313:
1265:FreeRTOS/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 4143              		.loc 1 1265 9 view .LVU1183
 4144              	.LBB255:
 4145              	.LBI255:
 194:FreeRTOS/portable/portmacro.h ****     {
 4146              		.loc 2 194 34 view .LVU1184
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 190


 4147              	.LBB256:
 196:FreeRTOS/portable/portmacro.h **** 
 4148              		.loc 2 196 9 view .LVU1185
 198:FreeRTOS/portable/portmacro.h ****         (
 4149              		.loc 2 198 9 view .LVU1186
 4150              		.syntax unified
 4151              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 4152 001c 4FF05003 			mov r3, #80												
 4153 0020 83F31188 		msr basepri, r3											
 4154 0024 BFF36F8F 		isb														
 4155 0028 BFF34F8F 		dsb														
 4156              	
 4157              	@ 0 "" 2
 4158              	.LVL292:
 4159              		.thumb
 4160              		.syntax unified
 4161              	.L299:
 198:FreeRTOS/portable/portmacro.h ****         (
 4162              		.loc 2 198 9 is_stmt 0 view .LVU1187
 4163              	.LBE256:
 4164              	.LBE255:
1265:FreeRTOS/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 4165              		.loc 1 1265 9 is_stmt 1 discriminator 1 view .LVU1188
1265:FreeRTOS/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 4166              		.loc 1 1265 9 discriminator 1 view .LVU1189
1265:FreeRTOS/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 4167              		.loc 1 1265 9 discriminator 1 view .LVU1190
 4168 002c FEE7     		b	.L299
 4169              	.L300:
1266:FreeRTOS/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
 4170              		.loc 1 1266 48 discriminator 2 view .LVU1191
1267:FreeRTOS/tasks.c **** 
 4171              		.loc 1 1267 9 discriminator 2 view .LVU1192
 4172 002e 1D4B     		ldr	r3, .L314
 4173 0030 1B68     		ldr	r3, [r3]
 4174 0032 43B1     		cbz	r3, .L302
1267:FreeRTOS/tasks.c **** 
 4175              		.loc 1 1267 9 view .LVU1193
 4176              	.LBB257:
 4177              	.LBI257:
 194:FreeRTOS/portable/portmacro.h ****     {
 4178              		.loc 2 194 34 view .LVU1194
 4179              	.LBB258:
 196:FreeRTOS/portable/portmacro.h **** 
 4180              		.loc 2 196 9 view .LVU1195
 198:FreeRTOS/portable/portmacro.h ****         (
 4181              		.loc 2 198 9 view .LVU1196
 4182              		.syntax unified
 4183              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 4184 0034 4FF05003 			mov r3, #80												
 4185 0038 83F31188 		msr basepri, r3											
 4186 003c BFF36F8F 		isb														
 4187 0040 BFF34F8F 		dsb														
 4188              	
 4189              	@ 0 "" 2
 4190              	.LVL293:
 4191              		.thumb
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 191


 4192              		.syntax unified
 4193              	.L303:
 198:FreeRTOS/portable/portmacro.h ****         (
 4194              		.loc 2 198 9 is_stmt 0 view .LVU1197
 4195              	.LBE258:
 4196              	.LBE257:
1267:FreeRTOS/tasks.c **** 
 4197              		.loc 1 1267 9 is_stmt 1 discriminator 3 view .LVU1198
1267:FreeRTOS/tasks.c **** 
 4198              		.loc 1 1267 9 discriminator 3 view .LVU1199
1267:FreeRTOS/tasks.c **** 
 4199              		.loc 1 1267 9 discriminator 3 view .LVU1200
 4200 0044 FEE7     		b	.L303
 4201              	.L302:
1267:FreeRTOS/tasks.c **** 
 4202              		.loc 1 1267 50 discriminator 2 view .LVU1201
1269:FreeRTOS/tasks.c ****         {
 4203              		.loc 1 1269 9 discriminator 2 view .LVU1202
 4204 0046 FFF7FEFF 		bl	vTaskSuspendAll
 4205              	.LVL294:
 4206              	.LBB259:
1273:FreeRTOS/tasks.c **** 
 4207              		.loc 1 1273 13 discriminator 2 view .LVU1203
1273:FreeRTOS/tasks.c **** 
 4208              		.loc 1 1273 30 is_stmt 0 discriminator 2 view .LVU1204
 4209 004a 174B     		ldr	r3, .L314+4
 4210 004c 1868     		ldr	r0, [r3]
 4211              	.LVL295:
1276:FreeRTOS/tasks.c **** 
 4212              		.loc 1 1276 13 is_stmt 1 discriminator 2 view .LVU1205
1276:FreeRTOS/tasks.c **** 
 4213              		.loc 1 1276 27 is_stmt 0 discriminator 2 view .LVU1206
 4214 004e 2A68     		ldr	r2, [r5]
1276:FreeRTOS/tasks.c **** 
 4215              		.loc 1 1276 25 discriminator 2 view .LVU1207
 4216 0050 1444     		add	r4, r4, r2
 4217              	.LVL296:
1278:FreeRTOS/tasks.c ****             {
 4218              		.loc 1 1278 13 is_stmt 1 discriminator 2 view .LVU1208
1278:FreeRTOS/tasks.c ****             {
 4219              		.loc 1 1278 15 is_stmt 0 discriminator 2 view .LVU1209
 4220 0052 8242     		cmp	r2, r0
 4221 0054 0BD9     		bls	.L304
1285:FreeRTOS/tasks.c ****                 {
 4222              		.loc 1 1285 17 is_stmt 1 view .LVU1210
1285:FreeRTOS/tasks.c ****                 {
 4223              		.loc 1 1285 19 is_stmt 0 view .LVU1211
 4224 0056 A242     		cmp	r2, r4
 4225 0058 02D8     		bhi	.L305
1310:FreeRTOS/tasks.c **** 
 4226              		.loc 1 1310 13 is_stmt 1 view .LVU1212
1310:FreeRTOS/tasks.c **** 
 4227              		.loc 1 1310 33 is_stmt 0 view .LVU1213
 4228 005a 2C60     		str	r4, [r5]
1312:FreeRTOS/tasks.c ****             {
 4229              		.loc 1 1312 13 is_stmt 1 view .LVU1214
 4230              	.LBE259:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 192


1263:FreeRTOS/tasks.c **** 
 4231              		.loc 1 1263 37 is_stmt 0 view .LVU1215
 4232 005c 0024     		movs	r4, #0
 4233              	.LVL297:
1263:FreeRTOS/tasks.c **** 
 4234              		.loc 1 1263 37 view .LVU1216
 4235 005e 10E0     		b	.L306
 4236              	.LVL298:
 4237              	.L305:
 4238              	.LBB260:
1285:FreeRTOS/tasks.c ****                 {
 4239              		.loc 1 1285 59 discriminator 1 view .LVU1217
 4240 0060 A042     		cmp	r0, r4
 4241 0062 02D3     		bcc	.L307
1310:FreeRTOS/tasks.c **** 
 4242              		.loc 1 1310 13 is_stmt 1 view .LVU1218
1310:FreeRTOS/tasks.c **** 
 4243              		.loc 1 1310 33 is_stmt 0 view .LVU1219
 4244 0064 2C60     		str	r4, [r5]
1312:FreeRTOS/tasks.c ****             {
 4245              		.loc 1 1312 13 is_stmt 1 view .LVU1220
 4246              	.LBE260:
1263:FreeRTOS/tasks.c **** 
 4247              		.loc 1 1263 37 is_stmt 0 view .LVU1221
 4248 0066 0024     		movs	r4, #0
 4249              	.LVL299:
1263:FreeRTOS/tasks.c **** 
 4250              		.loc 1 1263 37 view .LVU1222
 4251 0068 0BE0     		b	.L306
 4252              	.LVL300:
 4253              	.L307:
 4254              	.LBB261:
1287:FreeRTOS/tasks.c ****                 }
 4255              		.loc 1 1287 21 is_stmt 1 view .LVU1223
1310:FreeRTOS/tasks.c **** 
 4256              		.loc 1 1310 13 view .LVU1224
1310:FreeRTOS/tasks.c **** 
 4257              		.loc 1 1310 33 is_stmt 0 view .LVU1225
 4258 006a 2C60     		str	r4, [r5]
1312:FreeRTOS/tasks.c ****             {
 4259              		.loc 1 1312 13 is_stmt 1 view .LVU1226
 4260 006c 04E0     		b	.L308
 4261              	.LVL301:
 4262              	.L304:
1299:FreeRTOS/tasks.c ****                 {
 4263              		.loc 1 1299 17 view .LVU1227
1299:FreeRTOS/tasks.c ****                 {
 4264              		.loc 1 1299 19 is_stmt 0 view .LVU1228
 4265 006e A242     		cmp	r2, r4
 4266 0070 01D8     		bhi	.L309
1299:FreeRTOS/tasks.c ****                 {
 4267              		.loc 1 1299 59 discriminator 1 view .LVU1229
 4268 0072 A042     		cmp	r0, r4
 4269 0074 12D2     		bcs	.L310
 4270              	.L309:
1301:FreeRTOS/tasks.c ****                 }
 4271              		.loc 1 1301 21 is_stmt 1 view .LVU1230
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 193


 4272              	.LVL302:
1310:FreeRTOS/tasks.c **** 
 4273              		.loc 1 1310 13 view .LVU1231
1310:FreeRTOS/tasks.c **** 
 4274              		.loc 1 1310 33 is_stmt 0 view .LVU1232
 4275 0076 2C60     		str	r4, [r5]
1312:FreeRTOS/tasks.c ****             {
 4276              		.loc 1 1312 13 is_stmt 1 view .LVU1233
 4277              	.L308:
1314:FreeRTOS/tasks.c **** 
 4278              		.loc 1 1314 53 view .LVU1234
1318:FreeRTOS/tasks.c ****             }
 4279              		.loc 1 1318 17 view .LVU1235
 4280 0078 0021     		movs	r1, #0
 4281 007a 201A     		subs	r0, r4, r0
 4282              	.LVL303:
1318:FreeRTOS/tasks.c ****             }
 4283              		.loc 1 1318 17 is_stmt 0 view .LVU1236
 4284 007c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4285              	.LVL304:
 4286 0080 0124     		movs	r4, #1
 4287              	.LVL305:
 4288              	.L306:
1322:FreeRTOS/tasks.c ****             }
 4289              		.loc 1 1322 41 is_stmt 1 view .LVU1237
 4290              	.LBE261:
1325:FreeRTOS/tasks.c **** 
 4291              		.loc 1 1325 9 view .LVU1238
1325:FreeRTOS/tasks.c **** 
 4292              		.loc 1 1325 27 is_stmt 0 view .LVU1239
 4293 0082 FFF7FEFF 		bl	xTaskResumeAll
 4294              	.LVL306:
1329:FreeRTOS/tasks.c ****         {
 4295              		.loc 1 1329 9 is_stmt 1 view .LVU1240
1329:FreeRTOS/tasks.c ****         {
 4296              		.loc 1 1329 11 is_stmt 0 view .LVU1241
 4297 0086 38B9     		cbnz	r0, .L297
1331:FreeRTOS/tasks.c ****         }
 4298              		.loc 1 1331 13 is_stmt 1 view .LVU1242
 4299 0088 084B     		ldr	r3, .L314+8
 4300 008a 4FF08052 		mov	r2, #268435456
 4301 008e 1A60     		str	r2, [r3]
1331:FreeRTOS/tasks.c ****         }
 4302              		.loc 1 1331 13 view .LVU1243
 4303              		.syntax unified
 4304              	@ 1331 "FreeRTOS/tasks.c" 1
 4305 0090 BFF34F8F 		dsb
 4306              	@ 0 "" 2
1331:FreeRTOS/tasks.c ****         }
 4307              		.loc 1 1331 13 view .LVU1244
 4308              	@ 1331 "FreeRTOS/tasks.c" 1
 4309 0094 BFF36F8F 		isb
 4310              	@ 0 "" 2
1331:FreeRTOS/tasks.c ****         }
 4311              		.loc 1 1331 35 view .LVU1245
1335:FreeRTOS/tasks.c ****         }
 4312              		.loc 1 1335 37 view .LVU1246
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 194


1338:FreeRTOS/tasks.c ****     }
 4313              		.loc 1 1338 9 view .LVU1247
 4314              		.thumb
 4315              		.syntax unified
 4316              	.L297:
1339:FreeRTOS/tasks.c **** 
 4317              		.loc 1 1339 5 is_stmt 0 view .LVU1248
 4318 0098 2046     		mov	r0, r4
 4319              	.LVL307:
1339:FreeRTOS/tasks.c **** 
 4320              		.loc 1 1339 5 view .LVU1249
 4321 009a 38BD     		pop	{r3, r4, r5, pc}
 4322              	.LVL308:
 4323              	.L310:
 4324              	.LBB262:
1310:FreeRTOS/tasks.c **** 
 4325              		.loc 1 1310 13 is_stmt 1 view .LVU1250
1310:FreeRTOS/tasks.c **** 
 4326              		.loc 1 1310 33 is_stmt 0 view .LVU1251
 4327 009c 2C60     		str	r4, [r5]
1312:FreeRTOS/tasks.c ****             {
 4328              		.loc 1 1312 13 is_stmt 1 view .LVU1252
 4329              	.LBE262:
1263:FreeRTOS/tasks.c **** 
 4330              		.loc 1 1263 37 is_stmt 0 view .LVU1253
 4331 009e 0024     		movs	r4, #0
 4332              	.LVL309:
1263:FreeRTOS/tasks.c **** 
 4333              		.loc 1 1263 37 view .LVU1254
 4334 00a0 EFE7     		b	.L306
 4335              	.L315:
 4336 00a2 00BF     		.align	2
 4337              	.L314:
 4338 00a4 00000000 		.word	.LANCHOR16
 4339 00a8 00000000 		.word	.LANCHOR6
 4340 00ac 04ED00E0 		.word	-536810236
 4341              		.cfi_endproc
 4342              	.LFE10:
 4344              		.section	.text.vTaskDelay,"ax",%progbits
 4345              		.align	1
 4346              		.global	vTaskDelay
 4347              		.syntax unified
 4348              		.thumb
 4349              		.thumb_func
 4350              		.fpu fpv4-sp-d16
 4352              	vTaskDelay:
 4353              	.LVL310:
 4354              	.LFB11:
1347:FreeRTOS/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
 4355              		.loc 1 1347 5 is_stmt 1 view -0
 4356              		.cfi_startproc
 4357              		@ args = 0, pretend = 0, frame = 0
 4358              		@ frame_needed = 0, uses_anonymous_args = 0
1347:FreeRTOS/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
 4359              		.loc 1 1347 5 is_stmt 0 view .LVU1256
 4360 0000 10B5     		push	{r4, lr}
 4361              	.LCFI33:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 195


 4362              		.cfi_def_cfa_offset 8
 4363              		.cfi_offset 4, -8
 4364              		.cfi_offset 14, -4
1348:FreeRTOS/tasks.c **** 
 4365              		.loc 1 1348 9 is_stmt 1 view .LVU1257
 4366              	.LVL311:
1351:FreeRTOS/tasks.c ****         {
 4367              		.loc 1 1351 9 view .LVU1258
1351:FreeRTOS/tasks.c ****         {
 4368              		.loc 1 1351 11 is_stmt 0 view .LVU1259
 4369 0002 A8B1     		cbz	r0, .L317
 4370 0004 0446     		mov	r4, r0
1353:FreeRTOS/tasks.c ****             vTaskSuspendAll();
 4371              		.loc 1 1353 13 is_stmt 1 view .LVU1260
 4372 0006 0F4B     		ldr	r3, .L322
 4373 0008 1B68     		ldr	r3, [r3]
 4374 000a 43B1     		cbz	r3, .L318
1353:FreeRTOS/tasks.c ****             vTaskSuspendAll();
 4375              		.loc 1 1353 13 view .LVU1261
 4376              	.LBB263:
 4377              	.LBI263:
 194:FreeRTOS/portable/portmacro.h ****     {
 4378              		.loc 2 194 34 view .LVU1262
 4379              	.LBB264:
 196:FreeRTOS/portable/portmacro.h **** 
 4380              		.loc 2 196 9 view .LVU1263
 198:FreeRTOS/portable/portmacro.h ****         (
 4381              		.loc 2 198 9 view .LVU1264
 4382              		.syntax unified
 4383              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 4384 000c 4FF05003 			mov r3, #80												
 4385 0010 83F31188 		msr basepri, r3											
 4386 0014 BFF36F8F 		isb														
 4387 0018 BFF34F8F 		dsb														
 4388              	
 4389              	@ 0 "" 2
 4390              	.LVL312:
 4391              		.thumb
 4392              		.syntax unified
 4393              	.L319:
 198:FreeRTOS/portable/portmacro.h ****         (
 4394              		.loc 2 198 9 is_stmt 0 view .LVU1265
 4395              	.LBE264:
 4396              	.LBE263:
1353:FreeRTOS/tasks.c ****             vTaskSuspendAll();
 4397              		.loc 1 1353 13 is_stmt 1 discriminator 1 view .LVU1266
1353:FreeRTOS/tasks.c ****             vTaskSuspendAll();
 4398              		.loc 1 1353 13 discriminator 1 view .LVU1267
1353:FreeRTOS/tasks.c ****             vTaskSuspendAll();
 4399              		.loc 1 1353 13 discriminator 1 view .LVU1268
 4400 001c FEE7     		b	.L319
 4401              	.L318:
1353:FreeRTOS/tasks.c ****             vTaskSuspendAll();
 4402              		.loc 1 1353 54 discriminator 2 view .LVU1269
1354:FreeRTOS/tasks.c ****             {
 4403              		.loc 1 1354 13 discriminator 2 view .LVU1270
 4404 001e FFF7FEFF 		bl	vTaskSuspendAll
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 196


 4405              	.LVL313:
1356:FreeRTOS/tasks.c **** 
 4406              		.loc 1 1356 34 discriminator 2 view .LVU1271
1365:FreeRTOS/tasks.c ****             }
 4407              		.loc 1 1365 17 discriminator 2 view .LVU1272
 4408 0022 0021     		movs	r1, #0
 4409 0024 2046     		mov	r0, r4
 4410 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4411              	.LVL314:
1367:FreeRTOS/tasks.c ****         }
 4412              		.loc 1 1367 13 discriminator 2 view .LVU1273
1367:FreeRTOS/tasks.c ****         }
 4413              		.loc 1 1367 31 is_stmt 0 discriminator 2 view .LVU1274
 4414 002a FFF7FEFF 		bl	xTaskResumeAll
 4415              	.LVL315:
1371:FreeRTOS/tasks.c ****         }
 4416              		.loc 1 1371 37 is_stmt 1 discriminator 2 view .LVU1275
1376:FreeRTOS/tasks.c ****         {
 4417              		.loc 1 1376 9 discriminator 2 view .LVU1276
1376:FreeRTOS/tasks.c ****         {
 4418              		.loc 1 1376 11 is_stmt 0 discriminator 2 view .LVU1277
 4419 002e 38B9     		cbnz	r0, .L316
 4420              	.LVL316:
 4421              	.L317:
1378:FreeRTOS/tasks.c ****         }
 4422              		.loc 1 1378 13 is_stmt 1 view .LVU1278
 4423 0030 054B     		ldr	r3, .L322+4
 4424 0032 4FF08052 		mov	r2, #268435456
 4425 0036 1A60     		str	r2, [r3]
1378:FreeRTOS/tasks.c ****         }
 4426              		.loc 1 1378 13 view .LVU1279
 4427              		.syntax unified
 4428              	@ 1378 "FreeRTOS/tasks.c" 1
 4429 0038 BFF34F8F 		dsb
 4430              	@ 0 "" 2
1378:FreeRTOS/tasks.c ****         }
 4431              		.loc 1 1378 13 view .LVU1280
 4432              	@ 1378 "FreeRTOS/tasks.c" 1
 4433 003c BFF36F8F 		isb
 4434              	@ 0 "" 2
1378:FreeRTOS/tasks.c ****         }
 4435              		.loc 1 1378 35 view .LVU1281
1382:FreeRTOS/tasks.c ****         }
 4436              		.loc 1 1382 37 view .LVU1282
 4437              		.thumb
 4438              		.syntax unified
 4439              	.L316:
1384:FreeRTOS/tasks.c **** 
 4440              		.loc 1 1384 5 is_stmt 0 view .LVU1283
 4441 0040 10BD     		pop	{r4, pc}
 4442              	.L323:
 4443 0042 00BF     		.align	2
 4444              	.L322:
 4445 0044 00000000 		.word	.LANCHOR16
 4446 0048 04ED00E0 		.word	-536810236
 4447              		.cfi_endproc
 4448              	.LFE11:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 197


 4450              		.section	.text.prvIdleTask,"ax",%progbits
 4451              		.align	1
 4452              		.syntax unified
 4453              		.thumb
 4454              		.thumb_func
 4455              		.fpu fpv4-sp-d16
 4457              	prvIdleTask:
 4458              	.LFB48:
3442:FreeRTOS/tasks.c ****     /* Stop warnings. */
 4459              		.loc 1 3442 1 is_stmt 1 view -0
 4460              		.cfi_startproc
 4461              		@ args = 0, pretend = 0, frame = 0
 4462              		@ frame_needed = 0, uses_anonymous_args = 0
 4463              	.LVL317:
3442:FreeRTOS/tasks.c ****     /* Stop warnings. */
 4464              		.loc 1 3442 1 is_stmt 0 view .LVU1285
 4465 0000 08B5     		push	{r3, lr}
 4466              	.LCFI34:
 4467              		.cfi_def_cfa_offset 8
 4468              		.cfi_offset 3, -8
 4469              		.cfi_offset 14, -4
 4470 0002 03E0     		b	.L326
 4471              	.LVL318:
 4472              	.L325:
3487:FreeRTOS/tasks.c ****                 }
 4473              		.loc 1 3487 45 is_stmt 1 view .LVU1286
 4474              	.LBB265:
3511:FreeRTOS/tasks.c **** 
 4475              		.loc 1 3511 17 view .LVU1287
3518:FreeRTOS/tasks.c **** 
 4476              		.loc 1 3518 17 view .LVU1288
3518:FreeRTOS/tasks.c **** 
 4477              		.loc 1 3518 37 is_stmt 0 view .LVU1289
 4478 0004 FFF7FEFF 		bl	prvGetExpectedIdleTime
 4479              	.LVL319:
3520:FreeRTOS/tasks.c ****                 {
 4480              		.loc 1 3520 17 is_stmt 1 view .LVU1290
3520:FreeRTOS/tasks.c ****                 {
 4481              		.loc 1 3520 19 is_stmt 0 view .LVU1291
 4482 0008 0128     		cmp	r0, #1
 4483 000a 0ED8     		bhi	.L332
 4484              	.LVL320:
 4485              	.L326:
3520:FreeRTOS/tasks.c ****                 {
 4486              		.loc 1 3520 19 view .LVU1292
 4487              	.LBE265:
3444:FreeRTOS/tasks.c **** 
 4488              		.loc 1 3444 5 is_stmt 1 view .LVU1293
3452:FreeRTOS/tasks.c **** 
 4489              		.loc 1 3452 67 view .LVU1294
3454:FreeRTOS/tasks.c ****     {
 4490              		.loc 1 3454 5 view .LVU1295
3458:FreeRTOS/tasks.c **** 
 4491              		.loc 1 3458 9 view .LVU1296
 4492 000c FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 4493              	.LVL321:
3481:FreeRTOS/tasks.c ****                 {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 198


 4494              		.loc 1 3481 17 view .LVU1297
3481:FreeRTOS/tasks.c ****                 {
 4495              		.loc 1 3481 21 is_stmt 0 view .LVU1298
 4496 0010 134B     		ldr	r3, .L335
 4497 0012 1B68     		ldr	r3, [r3]
3481:FreeRTOS/tasks.c ****                 {
 4498              		.loc 1 3481 19 view .LVU1299
 4499 0014 012B     		cmp	r3, #1
 4500 0016 F5D9     		bls	.L325
3483:FreeRTOS/tasks.c ****                 }
 4501              		.loc 1 3483 21 is_stmt 1 view .LVU1300
 4502 0018 124B     		ldr	r3, .L335+4
 4503 001a 4FF08052 		mov	r2, #268435456
 4504 001e 1A60     		str	r2, [r3]
3483:FreeRTOS/tasks.c ****                 }
 4505              		.loc 1 3483 21 view .LVU1301
 4506              		.syntax unified
 4507              	@ 3483 "FreeRTOS/tasks.c" 1
 4508 0020 BFF34F8F 		dsb
 4509              	@ 0 "" 2
3483:FreeRTOS/tasks.c ****                 }
 4510              		.loc 1 3483 21 view .LVU1302
 4511              	@ 3483 "FreeRTOS/tasks.c" 1
 4512 0024 BFF36F8F 		isb
 4513              	@ 0 "" 2
3483:FreeRTOS/tasks.c ****                 }
 4514              		.loc 1 3483 32 view .LVU1303
 4515              		.thumb
 4516              		.syntax unified
 4517 0028 ECE7     		b	.L325
 4518              	.LVL322:
 4519              	.L332:
 4520              	.LBB268:
3522:FreeRTOS/tasks.c ****                     {
 4521              		.loc 1 3522 21 view .LVU1304
 4522 002a FFF7FEFF 		bl	vTaskSuspendAll
 4523              	.LVL323:
3527:FreeRTOS/tasks.c ****                         xExpectedIdleTime = prvGetExpectedIdleTime();
 4524              		.loc 1 3527 25 view .LVU1305
 4525 002e 0E4B     		ldr	r3, .L335+8
 4526 0030 1A68     		ldr	r2, [r3]
 4527 0032 0E4B     		ldr	r3, .L335+12
 4528 0034 1B68     		ldr	r3, [r3]
 4529 0036 9A42     		cmp	r2, r3
 4530 0038 06D3     		bcc	.L333
3527:FreeRTOS/tasks.c ****                         xExpectedIdleTime = prvGetExpectedIdleTime();
 4531              		.loc 1 3527 75 discriminator 2 view .LVU1306
3528:FreeRTOS/tasks.c **** 
 4532              		.loc 1 3528 25 discriminator 2 view .LVU1307
3528:FreeRTOS/tasks.c **** 
 4533              		.loc 1 3528 45 is_stmt 0 discriminator 2 view .LVU1308
 4534 003a FFF7FEFF 		bl	prvGetExpectedIdleTime
 4535              	.LVL324:
3533:FreeRTOS/tasks.c **** 
 4536              		.loc 1 3533 91 is_stmt 1 discriminator 2 view .LVU1309
3535:FreeRTOS/tasks.c ****                         {
 4537              		.loc 1 3535 25 discriminator 2 view .LVU1310
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 199


3535:FreeRTOS/tasks.c ****                         {
 4538              		.loc 1 3535 27 is_stmt 0 discriminator 2 view .LVU1311
 4539 003e 0128     		cmp	r0, #1
 4540 0040 0BD8     		bhi	.L334
 4541              	.LVL325:
 4542              	.L329:
3543:FreeRTOS/tasks.c ****                         }
 4543              		.loc 1 3543 53 is_stmt 1 view .LVU1312
3546:FreeRTOS/tasks.c ****                 }
 4544              		.loc 1 3546 21 view .LVU1313
3546:FreeRTOS/tasks.c ****                 }
 4545              		.loc 1 3546 30 is_stmt 0 view .LVU1314
 4546 0042 FFF7FEFF 		bl	xTaskResumeAll
 4547              	.LVL326:
 4548 0046 E1E7     		b	.L326
 4549              	.L333:
3527:FreeRTOS/tasks.c ****                         xExpectedIdleTime = prvGetExpectedIdleTime();
 4550              		.loc 1 3527 25 is_stmt 1 view .LVU1315
 4551              	.LBB266:
 4552              	.LBI266:
 194:FreeRTOS/portable/portmacro.h ****     {
 4553              		.loc 2 194 34 view .LVU1316
 4554              	.LBB267:
 196:FreeRTOS/portable/portmacro.h **** 
 4555              		.loc 2 196 9 view .LVU1317
 198:FreeRTOS/portable/portmacro.h ****         (
 4556              		.loc 2 198 9 view .LVU1318
 4557              		.syntax unified
 4558              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 4559 0048 4FF05003 			mov r3, #80												
 4560 004c 83F31188 		msr basepri, r3											
 4561 0050 BFF36F8F 		isb														
 4562 0054 BFF34F8F 		dsb														
 4563              	
 4564              	@ 0 "" 2
 4565              	.LVL327:
 4566              		.thumb
 4567              		.syntax unified
 4568              	.L328:
 198:FreeRTOS/portable/portmacro.h ****         (
 4569              		.loc 2 198 9 is_stmt 0 view .LVU1319
 4570              	.LBE267:
 4571              	.LBE266:
3527:FreeRTOS/tasks.c ****                         xExpectedIdleTime = prvGetExpectedIdleTime();
 4572              		.loc 1 3527 25 is_stmt 1 discriminator 1 view .LVU1320
3527:FreeRTOS/tasks.c ****                         xExpectedIdleTime = prvGetExpectedIdleTime();
 4573              		.loc 1 3527 25 discriminator 1 view .LVU1321
3527:FreeRTOS/tasks.c ****                         xExpectedIdleTime = prvGetExpectedIdleTime();
 4574              		.loc 1 3527 25 discriminator 1 view .LVU1322
 4575 0058 FEE7     		b	.L328
 4576              	.LVL328:
 4577              	.L334:
3537:FreeRTOS/tasks.c ****                             portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 4578              		.loc 1 3537 56 view .LVU1323
3538:FreeRTOS/tasks.c ****                             traceLOW_POWER_IDLE_END();
 4579              		.loc 1 3538 29 view .LVU1324
 4580 005a FFF7FEFF 		bl	vPortSuppressTicksAndSleep
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 200


 4581              	.LVL329:
3539:FreeRTOS/tasks.c ****                         }
 4582              		.loc 1 3539 54 view .LVU1325
 4583 005e F0E7     		b	.L329
 4584              	.L336:
 4585              		.align	2
 4586              	.L335:
 4587 0060 00000000 		.word	.LANCHOR4
 4588 0064 04ED00E0 		.word	-536810236
 4589 0068 00000000 		.word	.LANCHOR5
 4590 006c 00000000 		.word	.LANCHOR6
 4591              	.LBE268:
 4592              		.cfi_endproc
 4593              	.LFE48:
 4595              		.section	.text.xTaskGetHandle,"ax",%progbits
 4596              		.align	1
 4597              		.global	xTaskGetHandle
 4598              		.syntax unified
 4599              		.thumb
 4600              		.thumb_func
 4601              		.fpu fpv4-sp-d16
 4603              	xTaskGetHandle:
 4604              	.LVL330:
 4605              	.LFB30:
2470:FreeRTOS/tasks.c ****         UBaseType_t uxQueue = configMAX_PRIORITIES;
 4606              		.loc 1 2470 5 view -0
 4607              		.cfi_startproc
 4608              		@ args = 0, pretend = 0, frame = 0
 4609              		@ frame_needed = 0, uses_anonymous_args = 0
2470:FreeRTOS/tasks.c ****         UBaseType_t uxQueue = configMAX_PRIORITIES;
 4610              		.loc 1 2470 5 is_stmt 0 view .LVU1327
 4611 0000 70B5     		push	{r4, r5, r6, lr}
 4612              	.LCFI35:
 4613              		.cfi_def_cfa_offset 16
 4614              		.cfi_offset 4, -16
 4615              		.cfi_offset 5, -12
 4616              		.cfi_offset 6, -8
 4617              		.cfi_offset 14, -4
 4618 0002 0546     		mov	r5, r0
2471:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 4619              		.loc 1 2471 9 is_stmt 1 view .LVU1328
 4620              	.LVL331:
2472:FreeRTOS/tasks.c **** 
 4621              		.loc 1 2472 9 view .LVU1329
2475:FreeRTOS/tasks.c **** 
 4622              		.loc 1 2475 9 view .LVU1330
 4623 0004 FFF7FEFF 		bl	strlen
 4624              	.LVL332:
2475:FreeRTOS/tasks.c **** 
 4625              		.loc 1 2475 9 is_stmt 0 view .LVU1331
 4626 0008 0928     		cmp	r0, #9
 4627 000a 08D9     		bls	.L338
2475:FreeRTOS/tasks.c **** 
 4628              		.loc 1 2475 9 is_stmt 1 view .LVU1332
 4629              	.LBB269:
 4630              	.LBI269:
 194:FreeRTOS/portable/portmacro.h ****     {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 201


 4631              		.loc 2 194 34 view .LVU1333
 4632              	.LBB270:
 196:FreeRTOS/portable/portmacro.h **** 
 4633              		.loc 2 196 9 view .LVU1334
 198:FreeRTOS/portable/portmacro.h ****         (
 4634              		.loc 2 198 9 view .LVU1335
 4635              		.syntax unified
 4636              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 4637 000c 4FF05003 			mov r3, #80												
 4638 0010 83F31188 		msr basepri, r3											
 4639 0014 BFF36F8F 		isb														
 4640 0018 BFF34F8F 		dsb														
 4641              	
 4642              	@ 0 "" 2
 4643              	.LVL333:
 4644              		.thumb
 4645              		.syntax unified
 4646              	.L339:
 198:FreeRTOS/portable/portmacro.h ****         (
 4647              		.loc 2 198 9 is_stmt 0 view .LVU1336
 4648              	.LBE270:
 4649              	.LBE269:
2475:FreeRTOS/tasks.c **** 
 4650              		.loc 1 2475 9 is_stmt 1 discriminator 1 view .LVU1337
2475:FreeRTOS/tasks.c **** 
 4651              		.loc 1 2475 9 discriminator 1 view .LVU1338
2475:FreeRTOS/tasks.c **** 
 4652              		.loc 1 2475 9 discriminator 1 view .LVU1339
 4653 001c FEE7     		b	.L339
 4654              	.L338:
2475:FreeRTOS/tasks.c **** 
 4655              		.loc 1 2475 74 discriminator 2 view .LVU1340
2477:FreeRTOS/tasks.c ****         {
 4656              		.loc 1 2477 9 discriminator 2 view .LVU1341
 4657 001e FFF7FEFF 		bl	vTaskSuspendAll
 4658              	.LVL334:
2471:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 4659              		.loc 1 2471 21 is_stmt 0 discriminator 2 view .LVU1342
 4660 0022 0526     		movs	r6, #5
 4661              	.LVL335:
 4662              	.L341:
2480:FreeRTOS/tasks.c ****             {
 4663              		.loc 1 2480 13 is_stmt 1 view .LVU1343
2482:FreeRTOS/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueu
 4664              		.loc 1 2482 17 view .LVU1344
2482:FreeRTOS/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueu
 4665              		.loc 1 2482 24 is_stmt 0 view .LVU1345
 4666 0024 013E     		subs	r6, r6, #1
 4667              	.LVL336:
2483:FreeRTOS/tasks.c **** 
 4668              		.loc 1 2483 17 is_stmt 1 view .LVU1346
2483:FreeRTOS/tasks.c **** 
 4669              		.loc 1 2483 25 is_stmt 0 view .LVU1347
 4670 0026 06EB8600 		add	r0, r6, r6, lsl #2
 4671 002a 2946     		mov	r1, r5
 4672 002c 154B     		ldr	r3, .L351
 4673 002e 03EB8000 		add	r0, r3, r0, lsl #2
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 202


 4674 0032 FFF7FEFF 		bl	prvSearchForNameWithinSingleList
 4675              	.LVL337:
2485:FreeRTOS/tasks.c ****                 {
 4676              		.loc 1 2485 17 is_stmt 1 view .LVU1348
2485:FreeRTOS/tasks.c ****                 {
 4677              		.loc 1 2485 19 is_stmt 0 view .LVU1349
 4678 0036 0446     		mov	r4, r0
 4679 0038 08B9     		cbnz	r0, .L340
2490:FreeRTOS/tasks.c **** 
 4680              		.loc 1 2490 20 is_stmt 1 view .LVU1350
2490:FreeRTOS/tasks.c **** 
 4681              		.loc 1 2490 13 is_stmt 0 view .LVU1351
 4682 003a 002E     		cmp	r6, #0
 4683 003c F2D1     		bne	.L341
 4684              	.L340:
2493:FreeRTOS/tasks.c ****             {
 4685              		.loc 1 2493 13 is_stmt 1 view .LVU1352
2493:FreeRTOS/tasks.c ****             {
 4686              		.loc 1 2493 15 is_stmt 0 view .LVU1353
 4687 003e 34B1     		cbz	r4, .L347
 4688              	.L342:
2498:FreeRTOS/tasks.c ****             {
 4689              		.loc 1 2498 13 is_stmt 1 view .LVU1354
2498:FreeRTOS/tasks.c ****             {
 4690              		.loc 1 2498 15 is_stmt 0 view .LVU1355
 4691 0040 64B1     		cbz	r4, .L348
 4692              	.L343:
2505:FreeRTOS/tasks.c ****                     {
 4693              		.loc 1 2505 21 is_stmt 1 view .LVU1356
2505:FreeRTOS/tasks.c ****                     {
 4694              		.loc 1 2505 23 is_stmt 0 view .LVU1357
 4695 0042 94B1     		cbz	r4, .L349
 4696              	.L344:
2515:FreeRTOS/tasks.c ****                     {
 4697              		.loc 1 2515 21 is_stmt 1 view .LVU1358
2515:FreeRTOS/tasks.c ****                     {
 4698              		.loc 1 2515 23 is_stmt 0 view .LVU1359
 4699 0044 BCB1     		cbz	r4, .L350
 4700              	.L345:
2523:FreeRTOS/tasks.c **** 
 4701              		.loc 1 2523 9 is_stmt 1 view .LVU1360
2523:FreeRTOS/tasks.c **** 
 4702              		.loc 1 2523 18 is_stmt 0 view .LVU1361
 4703 0046 FFF7FEFF 		bl	xTaskResumeAll
 4704              	.LVL338:
2525:FreeRTOS/tasks.c ****     }
 4705              		.loc 1 2525 9 is_stmt 1 view .LVU1362
2526:FreeRTOS/tasks.c **** 
 4706              		.loc 1 2526 5 is_stmt 0 view .LVU1363
 4707 004a 2046     		mov	r0, r4
 4708 004c 70BD     		pop	{r4, r5, r6, pc}
 4709              	.LVL339:
 4710              	.L347:
2495:FreeRTOS/tasks.c ****             }
 4711              		.loc 1 2495 17 is_stmt 1 view .LVU1364
2495:FreeRTOS/tasks.c ****             }
 4712              		.loc 1 2495 25 is_stmt 0 view .LVU1365
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 203


 4713 004e 0E4B     		ldr	r3, .L351+4
 4714 0050 1868     		ldr	r0, [r3]
 4715              	.LVL340:
2495:FreeRTOS/tasks.c ****             }
 4716              		.loc 1 2495 25 view .LVU1366
 4717 0052 2946     		mov	r1, r5
 4718 0054 FFF7FEFF 		bl	prvSearchForNameWithinSingleList
 4719              	.LVL341:
 4720 0058 0446     		mov	r4, r0
 4721              	.LVL342:
2495:FreeRTOS/tasks.c ****             }
 4722              		.loc 1 2495 25 view .LVU1367
 4723 005a F1E7     		b	.L342
 4724              	.L348:
2500:FreeRTOS/tasks.c ****             }
 4725              		.loc 1 2500 17 is_stmt 1 view .LVU1368
2500:FreeRTOS/tasks.c ****             }
 4726              		.loc 1 2500 25 is_stmt 0 view .LVU1369
 4727 005c 0B4B     		ldr	r3, .L351+8
 4728 005e 1868     		ldr	r0, [r3]
 4729              	.LVL343:
2500:FreeRTOS/tasks.c ****             }
 4730              		.loc 1 2500 25 view .LVU1370
 4731 0060 2946     		mov	r1, r5
 4732 0062 FFF7FEFF 		bl	prvSearchForNameWithinSingleList
 4733              	.LVL344:
 4734 0066 0446     		mov	r4, r0
 4735              	.LVL345:
2500:FreeRTOS/tasks.c ****             }
 4736              		.loc 1 2500 25 view .LVU1371
 4737 0068 EBE7     		b	.L343
 4738              	.L349:
2508:FreeRTOS/tasks.c ****                     }
 4739              		.loc 1 2508 25 is_stmt 1 view .LVU1372
2508:FreeRTOS/tasks.c ****                     }
 4740              		.loc 1 2508 33 is_stmt 0 view .LVU1373
 4741 006a 2946     		mov	r1, r5
 4742 006c 0848     		ldr	r0, .L351+12
 4743              	.LVL346:
2508:FreeRTOS/tasks.c ****                     }
 4744              		.loc 1 2508 33 view .LVU1374
 4745 006e FFF7FEFF 		bl	prvSearchForNameWithinSingleList
 4746              	.LVL347:
 4747 0072 0446     		mov	r4, r0
 4748              	.LVL348:
2508:FreeRTOS/tasks.c ****                     }
 4749              		.loc 1 2508 33 view .LVU1375
 4750 0074 E6E7     		b	.L344
 4751              	.L350:
2518:FreeRTOS/tasks.c ****                     }
 4752              		.loc 1 2518 25 is_stmt 1 view .LVU1376
2518:FreeRTOS/tasks.c ****                     }
 4753              		.loc 1 2518 33 is_stmt 0 view .LVU1377
 4754 0076 2946     		mov	r1, r5
 4755 0078 0648     		ldr	r0, .L351+16
 4756              	.LVL349:
2518:FreeRTOS/tasks.c ****                     }
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 204


 4757              		.loc 1 2518 33 view .LVU1378
 4758 007a FFF7FEFF 		bl	prvSearchForNameWithinSingleList
 4759              	.LVL350:
 4760 007e 0446     		mov	r4, r0
 4761              	.LVL351:
2518:FreeRTOS/tasks.c ****                     }
 4762              		.loc 1 2518 33 view .LVU1379
 4763 0080 E1E7     		b	.L345
 4764              	.L352:
 4765 0082 00BF     		.align	2
 4766              	.L351:
 4767 0084 00000000 		.word	.LANCHOR4
 4768 0088 00000000 		.word	.LANCHOR7
 4769 008c 00000000 		.word	.LANCHOR11
 4770 0090 00000000 		.word	.LANCHOR0
 4771 0094 00000000 		.word	.LANCHOR10
 4772              		.cfi_endproc
 4773              	.LFE30:
 4775              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 4776              		.align	1
 4777              		.global	xTaskCatchUpTicks
 4778              		.syntax unified
 4779              		.thumb
 4780              		.thumb_func
 4781              		.fpu fpv4-sp-d16
 4783              	xTaskCatchUpTicks:
 4784              	.LVL352:
 4785              	.LFB34:
2639:FreeRTOS/tasks.c ****     BaseType_t xYieldOccurred;
 4786              		.loc 1 2639 1 is_stmt 1 view -0
 4787              		.cfi_startproc
 4788              		@ args = 0, pretend = 0, frame = 0
 4789              		@ frame_needed = 0, uses_anonymous_args = 0
2640:FreeRTOS/tasks.c **** 
 4790              		.loc 1 2640 5 view .LVU1381
2644:FreeRTOS/tasks.c **** 
 4791              		.loc 1 2644 5 view .LVU1382
 4792 0000 0B4B     		ldr	r3, .L358
 4793 0002 1B68     		ldr	r3, [r3]
 4794 0004 43B1     		cbz	r3, .L354
2644:FreeRTOS/tasks.c **** 
 4795              		.loc 1 2644 5 view .LVU1383
 4796              	.LBB271:
 4797              	.LBI271:
 194:FreeRTOS/portable/portmacro.h ****     {
 4798              		.loc 2 194 34 view .LVU1384
 4799              	.LBB272:
 196:FreeRTOS/portable/portmacro.h **** 
 4800              		.loc 2 196 9 view .LVU1385
 198:FreeRTOS/portable/portmacro.h ****         (
 4801              		.loc 2 198 9 view .LVU1386
 4802              		.syntax unified
 4803              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 4804 0006 4FF05003 			mov r3, #80												
 4805 000a 83F31188 		msr basepri, r3											
 4806 000e BFF36F8F 		isb														
 4807 0012 BFF34F8F 		dsb														
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 205


 4808              	
 4809              	@ 0 "" 2
 4810              	.LVL353:
 4811              		.thumb
 4812              		.syntax unified
 4813              	.L355:
 198:FreeRTOS/portable/portmacro.h ****         (
 4814              		.loc 2 198 9 is_stmt 0 view .LVU1387
 4815              	.LBE272:
 4816              	.LBE271:
2644:FreeRTOS/tasks.c **** 
 4817              		.loc 1 2644 5 is_stmt 1 discriminator 1 view .LVU1388
2644:FreeRTOS/tasks.c **** 
 4818              		.loc 1 2644 5 discriminator 1 view .LVU1389
2644:FreeRTOS/tasks.c **** 
 4819              		.loc 1 2644 5 discriminator 1 view .LVU1390
 4820 0016 FEE7     		b	.L355
 4821              	.L354:
2639:FreeRTOS/tasks.c ****     BaseType_t xYieldOccurred;
 4822              		.loc 1 2639 1 is_stmt 0 discriminator 2 view .LVU1391
 4823 0018 10B5     		push	{r4, lr}
 4824              	.LCFI36:
 4825              		.cfi_def_cfa_offset 8
 4826              		.cfi_offset 4, -8
 4827              		.cfi_offset 14, -4
 4828 001a 0446     		mov	r4, r0
2644:FreeRTOS/tasks.c **** 
 4829              		.loc 1 2644 46 is_stmt 1 discriminator 2 view .LVU1392
2648:FreeRTOS/tasks.c ****     xPendedTicks += xTicksToCatchUp;
 4830              		.loc 1 2648 5 discriminator 2 view .LVU1393
 4831 001c FFF7FEFF 		bl	vTaskSuspendAll
 4832              	.LVL354:
2649:FreeRTOS/tasks.c ****     xYieldOccurred = xTaskResumeAll();
 4833              		.loc 1 2649 5 discriminator 2 view .LVU1394
2649:FreeRTOS/tasks.c ****     xYieldOccurred = xTaskResumeAll();
 4834              		.loc 1 2649 18 is_stmt 0 discriminator 2 view .LVU1395
 4835 0020 044A     		ldr	r2, .L358+4
 4836 0022 1368     		ldr	r3, [r2]
 4837 0024 2344     		add	r3, r3, r4
 4838 0026 1360     		str	r3, [r2]
2650:FreeRTOS/tasks.c **** 
 4839              		.loc 1 2650 5 is_stmt 1 discriminator 2 view .LVU1396
2650:FreeRTOS/tasks.c **** 
 4840              		.loc 1 2650 22 is_stmt 0 discriminator 2 view .LVU1397
 4841 0028 FFF7FEFF 		bl	xTaskResumeAll
 4842              	.LVL355:
2652:FreeRTOS/tasks.c **** }
 4843              		.loc 1 2652 5 is_stmt 1 discriminator 2 view .LVU1398
2653:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
 4844              		.loc 1 2653 1 is_stmt 0 discriminator 2 view .LVU1399
 4845 002c 10BD     		pop	{r4, pc}
 4846              	.LVL356:
 4847              	.L359:
2653:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
 4848              		.loc 1 2653 1 discriminator 2 view .LVU1400
 4849 002e 00BF     		.align	2
 4850              	.L358:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 206


 4851 0030 00000000 		.word	.LANCHOR16
 4852 0034 00000000 		.word	.LANCHOR21
 4853              		.cfi_endproc
 4854              	.LFE34:
 4856              		.section	.text.xTaskAbortDelay,"ax",%progbits
 4857              		.align	1
 4858              		.global	xTaskAbortDelay
 4859              		.syntax unified
 4860              		.thumb
 4861              		.thumb_func
 4862              		.fpu fpv4-sp-d16
 4864              	xTaskAbortDelay:
 4865              	.LVL357:
 4866              	.LFB35:
2659:FreeRTOS/tasks.c ****         TCB_t * pxTCB = xTask;
 4867              		.loc 1 2659 5 is_stmt 1 view -0
 4868              		.cfi_startproc
 4869              		@ args = 0, pretend = 0, frame = 0
 4870              		@ frame_needed = 0, uses_anonymous_args = 0
2659:FreeRTOS/tasks.c ****         TCB_t * pxTCB = xTask;
 4871              		.loc 1 2659 5 is_stmt 0 view .LVU1402
 4872 0000 38B5     		push	{r3, r4, r5, lr}
 4873              	.LCFI37:
 4874              		.cfi_def_cfa_offset 16
 4875              		.cfi_offset 3, -16
 4876              		.cfi_offset 4, -12
 4877              		.cfi_offset 5, -8
 4878              		.cfi_offset 14, -4
2660:FreeRTOS/tasks.c ****         BaseType_t xReturn;
 4879              		.loc 1 2660 9 is_stmt 1 view .LVU1403
 4880              	.LVL358:
2661:FreeRTOS/tasks.c **** 
 4881              		.loc 1 2661 9 view .LVU1404
2663:FreeRTOS/tasks.c **** 
 4882              		.loc 1 2663 9 view .LVU1405
 4883 0002 60B1     		cbz	r0, .L368
 4884 0004 0446     		mov	r4, r0
2663:FreeRTOS/tasks.c **** 
 4885              		.loc 1 2663 30 discriminator 2 view .LVU1406
2665:FreeRTOS/tasks.c ****         {
 4886              		.loc 1 2665 9 discriminator 2 view .LVU1407
 4887 0006 FFF7FEFF 		bl	vTaskSuspendAll
 4888              	.LVL359:
2669:FreeRTOS/tasks.c ****             {
 4889              		.loc 1 2669 13 discriminator 2 view .LVU1408
2669:FreeRTOS/tasks.c ****             {
 4890              		.loc 1 2669 17 is_stmt 0 discriminator 2 view .LVU1409
 4891 000a 2046     		mov	r0, r4
 4892 000c FFF7FEFF 		bl	eTaskGetState
 4893              	.LVL360:
2669:FreeRTOS/tasks.c ****             {
 4894              		.loc 1 2669 15 discriminator 2 view .LVU1410
 4895 0010 0228     		cmp	r0, #2
 4896 0012 0DD0     		beq	.L369
2725:FreeRTOS/tasks.c ****             }
 4897              		.loc 1 2725 25 view .LVU1411
 4898 0014 0024     		movs	r4, #0
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 207


 4899              	.LVL361:
 4900              	.L363:
2728:FreeRTOS/tasks.c **** 
 4901              		.loc 1 2728 9 is_stmt 1 view .LVU1412
2728:FreeRTOS/tasks.c **** 
 4902              		.loc 1 2728 18 is_stmt 0 view .LVU1413
 4903 0016 FFF7FEFF 		bl	xTaskResumeAll
 4904              	.LVL362:
2730:FreeRTOS/tasks.c ****     }
 4905              		.loc 1 2730 9 is_stmt 1 view .LVU1414
2731:FreeRTOS/tasks.c **** 
 4906              		.loc 1 2731 5 is_stmt 0 view .LVU1415
 4907 001a 2046     		mov	r0, r4
 4908 001c 38BD     		pop	{r3, r4, r5, pc}
 4909              	.LVL363:
 4910              	.L368:
2663:FreeRTOS/tasks.c **** 
 4911              		.loc 1 2663 9 is_stmt 1 view .LVU1416
 4912              	.LBB273:
 4913              	.LBI273:
 194:FreeRTOS/portable/portmacro.h ****     {
 4914              		.loc 2 194 34 view .LVU1417
 4915              	.LBB274:
 196:FreeRTOS/portable/portmacro.h **** 
 4916              		.loc 2 196 9 view .LVU1418
 198:FreeRTOS/portable/portmacro.h ****         (
 4917              		.loc 2 198 9 view .LVU1419
 4918              		.syntax unified
 4919              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 4920 001e 4FF05003 			mov r3, #80												
 4921 0022 83F31188 		msr basepri, r3											
 4922 0026 BFF36F8F 		isb														
 4923 002a BFF34F8F 		dsb														
 4924              	
 4925              	@ 0 "" 2
 4926              	.LVL364:
 4927              		.thumb
 4928              		.syntax unified
 4929              	.L362:
 198:FreeRTOS/portable/portmacro.h ****         (
 4930              		.loc 2 198 9 is_stmt 0 view .LVU1420
 4931              	.LBE274:
 4932              	.LBE273:
2663:FreeRTOS/tasks.c **** 
 4933              		.loc 1 2663 9 is_stmt 1 discriminator 1 view .LVU1421
2663:FreeRTOS/tasks.c **** 
 4934              		.loc 1 2663 9 discriminator 1 view .LVU1422
2663:FreeRTOS/tasks.c **** 
 4935              		.loc 1 2663 9 discriminator 1 view .LVU1423
 4936 002e FEE7     		b	.L362
 4937              	.LVL365:
 4938              	.L369:
2671:FreeRTOS/tasks.c **** 
 4939              		.loc 1 2671 17 view .LVU1424
2676:FreeRTOS/tasks.c **** 
 4940              		.loc 1 2676 17 view .LVU1425
2676:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 208


 4941              		.loc 1 2676 26 is_stmt 0 view .LVU1426
 4942 0030 251D     		adds	r5, r4, #4
 4943 0032 2846     		mov	r0, r5
 4944 0034 FFF7FEFF 		bl	uxListRemove
 4945              	.LVL366:
2682:FreeRTOS/tasks.c ****                 {
 4946              		.loc 1 2682 17 is_stmt 1 view .LVU1427
 4947 0038 FFF7FEFF 		bl	vPortEnterCritical
 4948              	.LVL367:
2684:FreeRTOS/tasks.c ****                     {
 4949              		.loc 1 2684 21 view .LVU1428
2684:FreeRTOS/tasks.c ****                     {
 4950              		.loc 1 2684 25 is_stmt 0 view .LVU1429
 4951 003c A36A     		ldr	r3, [r4, #40]
2684:FreeRTOS/tasks.c ****                     {
 4952              		.loc 1 2684 23 view .LVU1430
 4953 003e 33B1     		cbz	r3, .L364
2686:FreeRTOS/tasks.c **** 
 4954              		.loc 1 2686 25 is_stmt 1 view .LVU1431
2686:FreeRTOS/tasks.c **** 
 4955              		.loc 1 2686 34 is_stmt 0 view .LVU1432
 4956 0040 04F11800 		add	r0, r4, #24
 4957 0044 FFF7FEFF 		bl	uxListRemove
 4958              	.LVL368:
2691:FreeRTOS/tasks.c ****                     }
 4959              		.loc 1 2691 25 is_stmt 1 view .LVU1433
2691:FreeRTOS/tasks.c ****                     }
 4960              		.loc 1 2691 47 is_stmt 0 view .LVU1434
 4961 0048 0123     		movs	r3, #1
 4962 004a 84F85630 		strb	r3, [r4, #86]
 4963              	.L364:
2695:FreeRTOS/tasks.c ****                     }
 4964              		.loc 1 2695 49 is_stmt 1 view .LVU1435
2698:FreeRTOS/tasks.c **** 
 4965              		.loc 1 2698 17 view .LVU1436
 4966 004e FFF7FEFF 		bl	vPortExitCritical
 4967              	.LVL369:
2701:FreeRTOS/tasks.c **** 
 4968              		.loc 1 2701 17 view .LVU1437
2701:FreeRTOS/tasks.c **** 
 4969              		.loc 1 2701 17 view .LVU1438
 4970 0052 E36A     		ldr	r3, [r4, #44]
 4971 0054 0122     		movs	r2, #1
 4972 0056 9A40     		lsls	r2, r2, r3
 4973 0058 1249     		ldr	r1, .L370
 4974 005a 0868     		ldr	r0, [r1]
 4975 005c 0243     		orrs	r2, r2, r0
 4976 005e 0A60     		str	r2, [r1]
 4977              	.LBB275:
2701:FreeRTOS/tasks.c **** 
 4978              		.loc 1 2701 17 view .LVU1439
 4979 0060 114A     		ldr	r2, .L370+4
 4980 0062 03EB8303 		add	r3, r3, r3, lsl #2
 4981 0066 02EB8303 		add	r3, r2, r3, lsl #2
 4982 006a 5B68     		ldr	r3, [r3, #4]
 4983              	.LVL370:
2701:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 209


 4984              		.loc 1 2701 17 view .LVU1440
2701:FreeRTOS/tasks.c **** 
 4985              		.loc 1 2701 17 view .LVU1441
2701:FreeRTOS/tasks.c **** 
 4986              		.loc 1 2701 17 view .LVU1442
 4987 006c A360     		str	r3, [r4, #8]
2701:FreeRTOS/tasks.c **** 
 4988              		.loc 1 2701 17 view .LVU1443
 4989 006e 9968     		ldr	r1, [r3, #8]
 4990 0070 E160     		str	r1, [r4, #12]
2701:FreeRTOS/tasks.c **** 
 4991              		.loc 1 2701 17 view .LVU1444
 4992 0072 4D60     		str	r5, [r1, #4]
2701:FreeRTOS/tasks.c **** 
 4993              		.loc 1 2701 17 view .LVU1445
 4994 0074 9D60     		str	r5, [r3, #8]
2701:FreeRTOS/tasks.c **** 
 4995              		.loc 1 2701 17 view .LVU1446
 4996 0076 E36A     		ldr	r3, [r4, #44]
 4997              	.LVL371:
2701:FreeRTOS/tasks.c **** 
 4998              		.loc 1 2701 17 is_stmt 0 view .LVU1447
 4999 0078 03EB8301 		add	r1, r3, r3, lsl #2
 5000 007c 8800     		lsls	r0, r1, #2
 5001 007e 02EB8101 		add	r1, r2, r1, lsl #2
 5002 0082 6161     		str	r1, [r4, #20]
2701:FreeRTOS/tasks.c **** 
 5003              		.loc 1 2701 17 is_stmt 1 view .LVU1448
 5004 0084 1158     		ldr	r1, [r2, r0]
 5005 0086 0131     		adds	r1, r1, #1
 5006 0088 1150     		str	r1, [r2, r0]
 5007              	.LBE275:
2701:FreeRTOS/tasks.c **** 
 5008              		.loc 1 2701 17 view .LVU1449
2701:FreeRTOS/tasks.c **** 
 5009              		.loc 1 2701 47 view .LVU1450
2710:FreeRTOS/tasks.c ****                         {
 5010              		.loc 1 2710 25 view .LVU1451
2710:FreeRTOS/tasks.c ****                         {
 5011              		.loc 1 2710 34 is_stmt 0 view .LVU1452
 5012 008a E26A     		ldr	r2, [r4, #44]
2710:FreeRTOS/tasks.c ****                         {
 5013              		.loc 1 2710 61 view .LVU1453
 5014 008c 074B     		ldr	r3, .L370+8
 5015 008e 1B68     		ldr	r3, [r3]
 5016 0090 DB6A     		ldr	r3, [r3, #44]
2710:FreeRTOS/tasks.c ****                         {
 5017              		.loc 1 2710 27 view .LVU1454
 5018 0092 9A42     		cmp	r2, r3
 5019 0094 03D9     		bls	.L366
2714:FreeRTOS/tasks.c ****                         }
 5020              		.loc 1 2714 29 is_stmt 1 view .LVU1455
2714:FreeRTOS/tasks.c ****                         }
 5021              		.loc 1 2714 43 is_stmt 0 view .LVU1456
 5022 0096 0124     		movs	r4, #1
 5023              	.LVL372:
2714:FreeRTOS/tasks.c ****                         }
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 210


 5024              		.loc 1 2714 43 view .LVU1457
 5025 0098 054B     		ldr	r3, .L370+12
 5026 009a 1C60     		str	r4, [r3]
 5027 009c BBE7     		b	.L363
 5028              	.LVL373:
 5029              	.L366:
2671:FreeRTOS/tasks.c **** 
 5030              		.loc 1 2671 25 view .LVU1458
 5031 009e 0124     		movs	r4, #1
 5032              	.LVL374:
2671:FreeRTOS/tasks.c **** 
 5033              		.loc 1 2671 25 view .LVU1459
 5034 00a0 B9E7     		b	.L363
 5035              	.L371:
 5036 00a2 00BF     		.align	2
 5037              	.L370:
 5038 00a4 00000000 		.word	.LANCHOR2
 5039 00a8 00000000 		.word	.LANCHOR4
 5040 00ac 00000000 		.word	.LANCHOR3
 5041 00b0 00000000 		.word	.LANCHOR17
 5042              		.cfi_endproc
 5043              	.LFE35:
 5045              		.section	.text.vTaskSwitchContext,"ax",%progbits
 5046              		.align	1
 5047              		.global	vTaskSwitchContext
 5048              		.syntax unified
 5049              		.thumb
 5050              		.thumb_func
 5051              		.fpu fpv4-sp-d16
 5053              	vTaskSwitchContext:
 5054              	.LFB37:
3022:FreeRTOS/tasks.c ****     if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 5055              		.loc 1 3022 1 is_stmt 1 view -0
 5056              		.cfi_startproc
 5057              		@ args = 0, pretend = 0, frame = 0
 5058              		@ frame_needed = 0, uses_anonymous_args = 0
 5059              		@ link register save eliminated.
3023:FreeRTOS/tasks.c ****     {
 5060              		.loc 1 3023 5 view .LVU1461
3023:FreeRTOS/tasks.c ****     {
 5061              		.loc 1 3023 30 is_stmt 0 view .LVU1462
 5062 0000 204B     		ldr	r3, .L382
 5063 0002 1B68     		ldr	r3, [r3]
3023:FreeRTOS/tasks.c ****     {
 5064              		.loc 1 3023 7 view .LVU1463
 5065 0004 1BB1     		cbz	r3, .L373
3027:FreeRTOS/tasks.c ****     }
 5066              		.loc 1 3027 9 is_stmt 1 view .LVU1464
3027:FreeRTOS/tasks.c ****     }
 5067              		.loc 1 3027 23 is_stmt 0 view .LVU1465
 5068 0006 204B     		ldr	r3, .L382+4
 5069 0008 0122     		movs	r2, #1
 5070 000a 1A60     		str	r2, [r3]
 5071 000c 7047     		bx	lr
 5072              	.L373:
3031:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_OUT();
 5073              		.loc 1 3031 9 is_stmt 1 view .LVU1466
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 211


3031:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_OUT();
 5074              		.loc 1 3031 23 is_stmt 0 view .LVU1467
 5075 000e 1E4B     		ldr	r3, .L382+4
 5076 0010 0022     		movs	r2, #0
 5077 0012 1A60     		str	r2, [r3]
3032:FreeRTOS/tasks.c **** 
 5078              		.loc 1 3032 33 is_stmt 1 view .LVU1468
3063:FreeRTOS/tasks.c **** 
 5079              		.loc 1 3063 39 view .LVU1469
 5080              	.LBB276:
3074:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 5081              		.loc 1 3074 9 view .LVU1470
3074:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 5082              		.loc 1 3074 9 view .LVU1471
 5083 0014 1D4B     		ldr	r3, .L382+8
 5084 0016 1B68     		ldr	r3, [r3]
 5085              	.LVL375:
 5086              	.LBB277:
 5087              	.LBI277:
 132:FreeRTOS/portable/portmacro.h ****         {
 5088              		.loc 2 132 66 view .LVU1472
 5089              	.LBB278:
 134:FreeRTOS/portable/portmacro.h **** 
 5090              		.loc 2 134 13 view .LVU1473
 136:FreeRTOS/portable/portmacro.h **** 
 5091              		.loc 2 136 13 view .LVU1474
 5092              		.syntax unified
 5093              	@ 136 "FreeRTOS/portable/portmacro.h" 1
 5094 0018 B3FA83F3 		clz r3, r3
 5095              	@ 0 "" 2
 5096              	.LVL376:
 136:FreeRTOS/portable/portmacro.h **** 
 5097              		.loc 2 136 13 is_stmt 0 view .LVU1475
 5098              		.thumb
 5099              		.syntax unified
 5100 001c DBB2     		uxtb	r3, r3
 5101              	.LVL377:
 138:FreeRTOS/portable/portmacro.h ****         }
 5102              		.loc 2 138 13 is_stmt 1 view .LVU1476
 138:FreeRTOS/portable/portmacro.h ****         }
 5103              		.loc 2 138 13 is_stmt 0 view .LVU1477
 5104              	.LBE278:
 5105              	.LBE277:
3074:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 5106              		.loc 1 3074 9 view .LVU1478
 5107 001e C3F11F03 		rsb	r3, r3, #31
 5108              	.LVL378:
3074:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 5109              		.loc 1 3074 9 is_stmt 1 view .LVU1479
 5110 0022 03EB8301 		add	r1, r3, r3, lsl #2
 5111 0026 8A00     		lsls	r2, r1, #2
 5112 0028 1949     		ldr	r1, .L382+12
 5113 002a 8A58     		ldr	r2, [r1, r2]
 5114 002c 42B9     		cbnz	r2, .L375
3074:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 5115              		.loc 1 3074 9 view .LVU1480
 5116              	.LBB279:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 212


 5117              	.LBI279:
 194:FreeRTOS/portable/portmacro.h ****     {
 5118              		.loc 2 194 34 view .LVU1481
 5119              	.LBB280:
 196:FreeRTOS/portable/portmacro.h **** 
 5120              		.loc 2 196 9 view .LVU1482
 198:FreeRTOS/portable/portmacro.h ****         (
 5121              		.loc 2 198 9 view .LVU1483
 5122              		.syntax unified
 5123              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 5124 002e 4FF05003 			mov r3, #80												
 5125 0032 83F31188 		msr basepri, r3											
 5126 0036 BFF36F8F 		isb														
 5127 003a BFF34F8F 		dsb														
 5128              	
 5129              	@ 0 "" 2
 5130              	.LVL379:
 5131              		.thumb
 5132              		.syntax unified
 5133              	.L376:
 198:FreeRTOS/portable/portmacro.h ****         (
 5134              		.loc 2 198 9 is_stmt 0 view .LVU1484
 5135              	.LBE280:
 5136              	.LBE279:
3074:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 5137              		.loc 1 3074 9 is_stmt 1 discriminator 1 view .LVU1485
3074:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 5138              		.loc 1 3074 9 discriminator 1 view .LVU1486
3074:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 5139              		.loc 1 3074 9 discriminator 1 view .LVU1487
 5140 003e FEE7     		b	.L376
 5141              	.LVL380:
 5142              	.L375:
3074:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 5143              		.loc 1 3074 9 is_stmt 0 discriminator 1 view .LVU1488
 5144              	.LBE276:
3022:FreeRTOS/tasks.c ****     if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 5145              		.loc 1 3022 1 discriminator 2 view .LVU1489
 5146 0040 10B4     		push	{r4}
 5147              	.LCFI38:
 5148              		.cfi_def_cfa_offset 4
 5149              		.cfi_offset 4, -4
 5150              	.LBB283:
3074:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 5151              		.loc 1 3074 9 is_stmt 1 discriminator 2 view .LVU1490
 5152              	.LBB281:
3074:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 5153              		.loc 1 3074 9 discriminator 2 view .LVU1491
 5154              	.LVL381:
3074:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 5155              		.loc 1 3074 9 discriminator 2 view .LVU1492
 5156 0042 1349     		ldr	r1, .L382+12
 5157 0044 03EB8300 		add	r0, r3, r3, lsl #2
 5158 0048 8200     		lsls	r2, r0, #2
 5159 004a 0A44     		add	r2, r2, r1
 5160 004c 5068     		ldr	r0, [r2, #4]
 5161 004e 4068     		ldr	r0, [r0, #4]
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 213


 5162 0050 5060     		str	r0, [r2, #4]
3074:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 5163              		.loc 1 3074 9 discriminator 2 view .LVU1493
 5164 0052 03EB8304 		add	r4, r3, r3, lsl #2
 5165 0056 A200     		lsls	r2, r4, #2
 5166 0058 1446     		mov	r4, r2
 5167 005a 0832     		adds	r2, r2, #8
 5168 005c 1144     		add	r1, r1, r2
 5169 005e 8842     		cmp	r0, r1
 5170 0060 0BD0     		beq	.L381
 5171              	.L377:
3074:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 5172              		.loc 1 3074 9 discriminator 6 view .LVU1494
 5173 0062 03EB8303 		add	r3, r3, r3, lsl #2
 5174              	.LVL382:
3074:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 5175              		.loc 1 3074 9 is_stmt 0 discriminator 6 view .LVU1495
 5176 0066 9A00     		lsls	r2, r3, #2
 5177 0068 094B     		ldr	r3, .L382+12
 5178 006a 1344     		add	r3, r3, r2
 5179 006c 5B68     		ldr	r3, [r3, #4]
 5180 006e DA68     		ldr	r2, [r3, #12]
 5181 0070 084B     		ldr	r3, .L382+16
 5182 0072 1A60     		str	r2, [r3]
 5183              	.LBE281:
3074:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 5184              		.loc 1 3074 9 is_stmt 1 discriminator 6 view .LVU1496
 5185              	.LBE283:
3074:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 5186              		.loc 1 3074 43 discriminator 6 view .LVU1497
3075:FreeRTOS/tasks.c **** 
 5187              		.loc 1 3075 32 discriminator 6 view .LVU1498
3094:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 5188              		.loc 1 3094 1 is_stmt 0 discriminator 6 view .LVU1499
 5189 0074 5DF8044B 		ldr	r4, [sp], #4
 5190              	.LCFI39:
 5191              		.cfi_remember_state
 5192              		.cfi_restore 4
 5193              		.cfi_def_cfa_offset 0
 5194 0078 7047     		bx	lr
 5195              	.LVL383:
 5196              	.L381:
 5197              	.LCFI40:
 5198              		.cfi_restore_state
 5199              	.LBB284:
 5200              	.LBB282:
3074:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 5201              		.loc 1 3074 9 is_stmt 1 discriminator 4 view .LVU1500
 5202 007a 4068     		ldr	r0, [r0, #4]
 5203 007c 044A     		ldr	r2, .L382+12
 5204 007e 2244     		add	r2, r2, r4
 5205 0080 5060     		str	r0, [r2, #4]
 5206 0082 EEE7     		b	.L377
 5207              	.L383:
 5208              		.align	2
 5209              	.L382:
 5210 0084 00000000 		.word	.LANCHOR16
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 214


 5211 0088 00000000 		.word	.LANCHOR17
 5212 008c 00000000 		.word	.LANCHOR2
 5213 0090 00000000 		.word	.LANCHOR4
 5214 0094 00000000 		.word	.LANCHOR3
 5215              	.LBE282:
 5216              	.LBE284:
 5217              		.cfi_endproc
 5218              	.LFE37:
 5220              		.section	.text.vTaskSuspend,"ax",%progbits
 5221              		.align	1
 5222              		.global	vTaskSuspend
 5223              		.syntax unified
 5224              		.thumb
 5225              		.thumb_func
 5226              		.fpu fpv4-sp-d16
 5228              	vTaskSuspend:
 5229              	.LVL384:
 5230              	.LFB16:
1717:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 5231              		.loc 1 1717 5 view -0
 5232              		.cfi_startproc
 5233              		@ args = 0, pretend = 0, frame = 0
 5234              		@ frame_needed = 0, uses_anonymous_args = 0
1717:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 5235              		.loc 1 1717 5 is_stmt 0 view .LVU1502
 5236 0000 38B5     		push	{r3, r4, r5, lr}
 5237              	.LCFI41:
 5238              		.cfi_def_cfa_offset 16
 5239              		.cfi_offset 3, -16
 5240              		.cfi_offset 4, -12
 5241              		.cfi_offset 5, -8
 5242              		.cfi_offset 14, -4
 5243 0002 0446     		mov	r4, r0
1718:FreeRTOS/tasks.c **** 
 5244              		.loc 1 1718 9 is_stmt 1 view .LVU1503
1720:FreeRTOS/tasks.c ****         {
 5245              		.loc 1 1720 9 view .LVU1504
 5246 0004 FFF7FEFF 		bl	vPortEnterCritical
 5247              	.LVL385:
1724:FreeRTOS/tasks.c **** 
 5248              		.loc 1 1724 13 view .LVU1505
1724:FreeRTOS/tasks.c **** 
 5249              		.loc 1 1724 21 is_stmt 0 view .LVU1506
 5250 0008 54B3     		cbz	r4, .L398
 5251              	.LVL386:
 5252              	.L385:
1726:FreeRTOS/tasks.c **** 
 5253              		.loc 1 1726 39 is_stmt 1 discriminator 4 view .LVU1507
1730:FreeRTOS/tasks.c ****             {
 5254              		.loc 1 1730 13 discriminator 4 view .LVU1508
1730:FreeRTOS/tasks.c ****             {
 5255              		.loc 1 1730 17 is_stmt 0 discriminator 4 view .LVU1509
 5256 000a 251D     		adds	r5, r4, #4
 5257 000c 2846     		mov	r0, r5
 5258 000e FFF7FEFF 		bl	uxListRemove
 5259              	.LVL387:
1730:FreeRTOS/tasks.c ****             {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 215


 5260              		.loc 1 1730 15 discriminator 4 view .LVU1510
 5261 0012 70B9     		cbnz	r0, .L386
1732:FreeRTOS/tasks.c ****             }
 5262              		.loc 1 1732 17 is_stmt 1 view .LVU1511
 5263 0014 E26A     		ldr	r2, [r4, #44]
 5264 0016 02EB8203 		add	r3, r2, r2, lsl #2
 5265 001a 9B00     		lsls	r3, r3, #2
 5266 001c 2E49     		ldr	r1, .L402
 5267 001e CB58     		ldr	r3, [r1, r3]
 5268 0020 3BB9     		cbnz	r3, .L386
1732:FreeRTOS/tasks.c ****             }
 5269              		.loc 1 1732 17 discriminator 1 view .LVU1512
 5270 0022 0123     		movs	r3, #1
 5271 0024 03FA02F2 		lsl	r2, r3, r2
 5272 0028 2C49     		ldr	r1, .L402+4
 5273 002a 0B68     		ldr	r3, [r1]
 5274 002c 23EA0203 		bic	r3, r3, r2
 5275 0030 0B60     		str	r3, [r1]
 5276              	.L386:
1736:FreeRTOS/tasks.c ****             }
 5277              		.loc 1 1736 41 view .LVU1513
1740:FreeRTOS/tasks.c ****             {
 5278              		.loc 1 1740 13 view .LVU1514
1740:FreeRTOS/tasks.c ****             {
 5279              		.loc 1 1740 17 is_stmt 0 view .LVU1515
 5280 0032 A36A     		ldr	r3, [r4, #40]
1740:FreeRTOS/tasks.c ****             {
 5281              		.loc 1 1740 15 view .LVU1516
 5282 0034 1BB1     		cbz	r3, .L387
1742:FreeRTOS/tasks.c ****             }
 5283              		.loc 1 1742 17 is_stmt 1 view .LVU1517
1742:FreeRTOS/tasks.c ****             }
 5284              		.loc 1 1742 26 is_stmt 0 view .LVU1518
 5285 0036 04F11800 		add	r0, r4, #24
 5286 003a FFF7FEFF 		bl	uxListRemove
 5287              	.LVL388:
 5288              	.L387:
1746:FreeRTOS/tasks.c ****             }
 5289              		.loc 1 1746 41 is_stmt 1 view .LVU1519
1749:FreeRTOS/tasks.c **** 
 5290              		.loc 1 1749 13 view .LVU1520
 5291 003e 2946     		mov	r1, r5
 5292 0040 2748     		ldr	r0, .L402+8
 5293 0042 FFF7FEFF 		bl	vListInsertEnd
 5294              	.LVL389:
 5295              	.LBB285:
1753:FreeRTOS/tasks.c **** 
 5296              		.loc 1 1753 21 view .LVU1521
1755:FreeRTOS/tasks.c ****                     {
 5297              		.loc 1 1755 21 view .LVU1522
1755:FreeRTOS/tasks.c ****                     {
 5298              		.loc 1 1755 28 is_stmt 0 view .LVU1523
 5299 0046 0023     		movs	r3, #0
 5300              	.LVL390:
 5301              	.L388:
1755:FreeRTOS/tasks.c ****                     {
 5302              		.loc 1 1755 33 is_stmt 1 discriminator 1 view .LVU1524
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 216


1755:FreeRTOS/tasks.c ****                     {
 5303              		.loc 1 1755 21 is_stmt 0 discriminator 1 view .LVU1525
 5304 0048 002B     		cmp	r3, #0
 5305 004a 0CDD     		ble	.L390
 5306              	.LBE285:
1767:FreeRTOS/tasks.c **** 
 5307              		.loc 1 1767 9 is_stmt 1 view .LVU1526
 5308 004c FFF7FEFF 		bl	vPortExitCritical
 5309              	.LVL391:
1769:FreeRTOS/tasks.c ****         {
 5310              		.loc 1 1769 9 view .LVU1527
1769:FreeRTOS/tasks.c ****         {
 5311              		.loc 1 1769 31 is_stmt 0 view .LVU1528
 5312 0050 244B     		ldr	r3, .L402+12
 5313 0052 1B68     		ldr	r3, [r3]
1769:FreeRTOS/tasks.c ****         {
 5314              		.loc 1 1769 11 view .LVU1529
 5315 0054 A3B9     		cbnz	r3, .L399
 5316              	.L391:
1781:FreeRTOS/tasks.c ****         }
 5317              		.loc 1 1781 37 is_stmt 1 view .LVU1530
1784:FreeRTOS/tasks.c ****         {
 5318              		.loc 1 1784 9 view .LVU1531
1784:FreeRTOS/tasks.c ****         {
 5319              		.loc 1 1784 19 is_stmt 0 view .LVU1532
 5320 0056 244B     		ldr	r3, .L402+16
 5321 0058 1B68     		ldr	r3, [r3]
1784:FreeRTOS/tasks.c ****         {
 5322              		.loc 1 1784 11 view .LVU1533
 5323 005a A342     		cmp	r3, r4
 5324 005c 17D0     		beq	.L400
 5325              	.L384:
1815:FreeRTOS/tasks.c **** 
 5326              		.loc 1 1815 5 view .LVU1534
 5327 005e 38BD     		pop	{r3, r4, r5, pc}
 5328              	.LVL392:
 5329              	.L398:
1724:FreeRTOS/tasks.c **** 
 5330              		.loc 1 1724 21 discriminator 1 view .LVU1535
 5331 0060 214B     		ldr	r3, .L402+16
 5332 0062 1C68     		ldr	r4, [r3]
 5333              	.LVL393:
1724:FreeRTOS/tasks.c **** 
 5334              		.loc 1 1724 21 discriminator 1 view .LVU1536
 5335 0064 D1E7     		b	.L385
 5336              	.LVL394:
 5337              	.L390:
 5338              	.LBB286:
1757:FreeRTOS/tasks.c ****                         {
 5339              		.loc 1 1757 25 is_stmt 1 view .LVU1537
1757:FreeRTOS/tasks.c ****                         {
 5340              		.loc 1 1757 49 is_stmt 0 view .LVU1538
 5341 0066 E218     		adds	r2, r4, r3
 5342 0068 92F85420 		ldrb	r2, [r2, #84]	@ zero_extendqisi2
 5343 006c D2B2     		uxtb	r2, r2
1757:FreeRTOS/tasks.c ****                         {
 5344              		.loc 1 1757 27 view .LVU1539
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 217


 5345 006e 012A     		cmp	r2, #1
 5346 0070 01D0     		beq	.L401
 5347              	.L389:
1755:FreeRTOS/tasks.c ****                     {
 5348              		.loc 1 1755 76 is_stmt 1 discriminator 2 view .LVU1540
1755:FreeRTOS/tasks.c ****                     {
 5349              		.loc 1 1755 77 is_stmt 0 discriminator 2 view .LVU1541
 5350 0072 0133     		adds	r3, r3, #1
 5351              	.LVL395:
1755:FreeRTOS/tasks.c ****                     {
 5352              		.loc 1 1755 77 discriminator 2 view .LVU1542
 5353 0074 E8E7     		b	.L388
 5354              	.L401:
1761:FreeRTOS/tasks.c ****                         }
 5355              		.loc 1 1761 29 is_stmt 1 view .LVU1543
1761:FreeRTOS/tasks.c ****                         }
 5356              		.loc 1 1761 55 is_stmt 0 view .LVU1544
 5357 0076 E218     		adds	r2, r4, r3
 5358 0078 0021     		movs	r1, #0
 5359 007a 82F85410 		strb	r1, [r2, #84]
 5360 007e F8E7     		b	.L389
 5361              	.LVL396:
 5362              	.L399:
1761:FreeRTOS/tasks.c ****                         }
 5363              		.loc 1 1761 55 view .LVU1545
 5364              	.LBE286:
1773:FreeRTOS/tasks.c ****             {
 5365              		.loc 1 1773 13 is_stmt 1 view .LVU1546
 5366 0080 FFF7FEFF 		bl	vPortEnterCritical
 5367              	.LVL397:
1775:FreeRTOS/tasks.c ****             }
 5368              		.loc 1 1775 17 view .LVU1547
 5369 0084 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 5370              	.LVL398:
1777:FreeRTOS/tasks.c ****         }
 5371              		.loc 1 1777 13 view .LVU1548
 5372 0088 FFF7FEFF 		bl	vPortExitCritical
 5373              	.LVL399:
 5374 008c E3E7     		b	.L391
 5375              	.L400:
1786:FreeRTOS/tasks.c ****             {
 5376              		.loc 1 1786 13 view .LVU1549
1786:FreeRTOS/tasks.c ****             {
 5377              		.loc 1 1786 35 is_stmt 0 view .LVU1550
 5378 008e 154B     		ldr	r3, .L402+12
 5379 0090 1B68     		ldr	r3, [r3]
1786:FreeRTOS/tasks.c ****             {
 5380              		.loc 1 1786 15 view .LVU1551
 5381 0092 A3B1     		cbz	r3, .L393
1789:FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 5382              		.loc 1 1789 17 is_stmt 1 view .LVU1552
 5383 0094 154B     		ldr	r3, .L402+20
 5384 0096 1B68     		ldr	r3, [r3]
 5385 0098 43B1     		cbz	r3, .L394
1789:FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 5386              		.loc 1 1789 17 view .LVU1553
 5387              	.LBB287:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 218


 5388              	.LBI287:
 194:FreeRTOS/portable/portmacro.h ****     {
 5389              		.loc 2 194 34 view .LVU1554
 5390              	.LBB288:
 196:FreeRTOS/portable/portmacro.h **** 
 5391              		.loc 2 196 9 view .LVU1555
 198:FreeRTOS/portable/portmacro.h ****         (
 5392              		.loc 2 198 9 view .LVU1556
 5393              		.syntax unified
 5394              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 5395 009a 4FF05003 			mov r3, #80												
 5396 009e 83F31188 		msr basepri, r3											
 5397 00a2 BFF36F8F 		isb														
 5398 00a6 BFF34F8F 		dsb														
 5399              	
 5400              	@ 0 "" 2
 5401              	.LVL400:
 5402              		.thumb
 5403              		.syntax unified
 5404              	.L395:
 198:FreeRTOS/portable/portmacro.h ****         (
 5405              		.loc 2 198 9 is_stmt 0 view .LVU1557
 5406              	.LBE288:
 5407              	.LBE287:
1789:FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 5408              		.loc 1 1789 17 is_stmt 1 discriminator 1 view .LVU1558
1789:FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 5409              		.loc 1 1789 17 discriminator 1 view .LVU1559
1789:FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 5410              		.loc 1 1789 17 discriminator 1 view .LVU1560
 5411 00aa FEE7     		b	.L395
 5412              	.L394:
1789:FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 5413              		.loc 1 1789 58 discriminator 2 view .LVU1561
1790:FreeRTOS/tasks.c ****             }
 5414              		.loc 1 1790 17 discriminator 2 view .LVU1562
 5415 00ac 104B     		ldr	r3, .L402+24
 5416 00ae 4FF08052 		mov	r2, #268435456
 5417 00b2 1A60     		str	r2, [r3]
1790:FreeRTOS/tasks.c ****             }
 5418              		.loc 1 1790 17 discriminator 2 view .LVU1563
 5419              		.syntax unified
 5420              	@ 1790 "FreeRTOS/tasks.c" 1
 5421 00b4 BFF34F8F 		dsb
 5422              	@ 0 "" 2
1790:FreeRTOS/tasks.c ****             }
 5423              		.loc 1 1790 17 discriminator 2 view .LVU1564
 5424              	@ 1790 "FreeRTOS/tasks.c" 1
 5425 00b8 BFF36F8F 		isb
 5426              	@ 0 "" 2
1790:FreeRTOS/tasks.c ****             }
 5427              		.loc 1 1790 39 discriminator 2 view .LVU1565
 5428              		.thumb
 5429              		.syntax unified
 5430 00bc CFE7     		b	.L384
 5431              	.L393:
1797:FreeRTOS/tasks.c ****                 {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 219


 5432              		.loc 1 1797 17 view .LVU1566
1797:FreeRTOS/tasks.c ****                 {
 5433              		.loc 1 1797 21 is_stmt 0 view .LVU1567
 5434 00be 084B     		ldr	r3, .L402+8
 5435 00c0 1A68     		ldr	r2, [r3]
1797:FreeRTOS/tasks.c ****                 {
 5436              		.loc 1 1797 68 view .LVU1568
 5437 00c2 0C4B     		ldr	r3, .L402+28
 5438 00c4 1B68     		ldr	r3, [r3]
1797:FreeRTOS/tasks.c ****                 {
 5439              		.loc 1 1797 19 view .LVU1569
 5440 00c6 9A42     		cmp	r2, r3
 5441 00c8 03D1     		bne	.L396
1803:FreeRTOS/tasks.c ****                 }
 5442              		.loc 1 1803 21 is_stmt 1 view .LVU1570
1803:FreeRTOS/tasks.c ****                 }
 5443              		.loc 1 1803 34 is_stmt 0 view .LVU1571
 5444 00ca 074B     		ldr	r3, .L402+16
 5445 00cc 0022     		movs	r2, #0
 5446 00ce 1A60     		str	r2, [r3]
 5447 00d0 C5E7     		b	.L384
 5448              	.L396:
1807:FreeRTOS/tasks.c ****                 }
 5449              		.loc 1 1807 21 is_stmt 1 view .LVU1572
 5450 00d2 FFF7FEFF 		bl	vTaskSwitchContext
 5451              	.LVL401:
1813:FreeRTOS/tasks.c ****         }
 5452              		.loc 1 1813 37 view .LVU1573
1815:FreeRTOS/tasks.c **** 
 5453              		.loc 1 1815 5 is_stmt 0 view .LVU1574
 5454 00d6 C2E7     		b	.L384
 5455              	.L403:
 5456              		.align	2
 5457              	.L402:
 5458 00d8 00000000 		.word	.LANCHOR4
 5459 00dc 00000000 		.word	.LANCHOR2
 5460 00e0 00000000 		.word	.LANCHOR0
 5461 00e4 00000000 		.word	.LANCHOR13
 5462 00e8 00000000 		.word	.LANCHOR3
 5463 00ec 00000000 		.word	.LANCHOR16
 5464 00f0 04ED00E0 		.word	-536810236
 5465 00f4 00000000 		.word	.LANCHOR12
 5466              		.cfi_endproc
 5467              	.LFE16:
 5469              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 5470              		.align	1
 5471              		.global	vTaskPlaceOnEventList
 5472              		.syntax unified
 5473              		.thumb
 5474              		.thumb_func
 5475              		.fpu fpv4-sp-d16
 5477              	vTaskPlaceOnEventList:
 5478              	.LVL402:
 5479              	.LFB38:
3099:FreeRTOS/tasks.c ****     configASSERT( pxEventList );
 5480              		.loc 1 3099 1 is_stmt 1 view -0
 5481              		.cfi_startproc
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 220


 5482              		@ args = 0, pretend = 0, frame = 0
 5483              		@ frame_needed = 0, uses_anonymous_args = 0
3100:FreeRTOS/tasks.c **** 
 5484              		.loc 1 3100 5 view .LVU1576
 5485 0000 58B1     		cbz	r0, .L409
3099:FreeRTOS/tasks.c ****     configASSERT( pxEventList );
 5486              		.loc 1 3099 1 is_stmt 0 discriminator 2 view .LVU1577
 5487 0002 10B5     		push	{r4, lr}
 5488              	.LCFI42:
 5489              		.cfi_def_cfa_offset 8
 5490              		.cfi_offset 4, -8
 5491              		.cfi_offset 14, -4
 5492 0004 0C46     		mov	r4, r1
3100:FreeRTOS/tasks.c **** 
 5493              		.loc 1 3100 32 is_stmt 1 discriminator 2 view .LVU1578
3116:FreeRTOS/tasks.c **** 
 5494              		.loc 1 3116 5 discriminator 2 view .LVU1579
3116:FreeRTOS/tasks.c **** 
 5495              		.loc 1 3116 46 is_stmt 0 discriminator 2 view .LVU1580
 5496 0006 094B     		ldr	r3, .L410
 5497 0008 1968     		ldr	r1, [r3]
 5498              	.LVL403:
3116:FreeRTOS/tasks.c **** 
 5499              		.loc 1 3116 5 discriminator 2 view .LVU1581
 5500 000a 1831     		adds	r1, r1, #24
 5501 000c FFF7FEFF 		bl	vListInsert
 5502              	.LVL404:
3118:FreeRTOS/tasks.c **** }
 5503              		.loc 1 3118 5 is_stmt 1 discriminator 2 view .LVU1582
 5504 0010 0121     		movs	r1, #1
 5505 0012 2046     		mov	r0, r4
 5506 0014 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5507              	.LVL405:
3119:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 5508              		.loc 1 3119 1 is_stmt 0 discriminator 2 view .LVU1583
 5509 0018 10BD     		pop	{r4, pc}
 5510              	.LVL406:
 5511              	.L409:
 5512              	.LCFI43:
 5513              		.cfi_def_cfa_offset 0
 5514              		.cfi_restore 4
 5515              		.cfi_restore 14
3100:FreeRTOS/tasks.c **** 
 5516              		.loc 1 3100 5 is_stmt 1 view .LVU1584
 5517              	.LBB289:
 5518              	.LBI289:
 194:FreeRTOS/portable/portmacro.h ****     {
 5519              		.loc 2 194 34 view .LVU1585
 5520              	.LBB290:
 196:FreeRTOS/portable/portmacro.h **** 
 5521              		.loc 2 196 9 view .LVU1586
 198:FreeRTOS/portable/portmacro.h ****         (
 5522              		.loc 2 198 9 view .LVU1587
 5523              		.syntax unified
 5524              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 5525 001a 4FF05003 			mov r3, #80												
 5526 001e 83F31188 		msr basepri, r3											
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 221


 5527 0022 BFF36F8F 		isb														
 5528 0026 BFF34F8F 		dsb														
 5529              	
 5530              	@ 0 "" 2
 5531              	.LVL407:
 5532              		.thumb
 5533              		.syntax unified
 5534              	.L406:
 198:FreeRTOS/portable/portmacro.h ****         (
 5535              		.loc 2 198 9 is_stmt 0 view .LVU1588
 5536              	.LBE290:
 5537              	.LBE289:
3100:FreeRTOS/tasks.c **** 
 5538              		.loc 1 3100 5 is_stmt 1 discriminator 1 view .LVU1589
3100:FreeRTOS/tasks.c **** 
 5539              		.loc 1 3100 5 discriminator 1 view .LVU1590
3100:FreeRTOS/tasks.c **** 
 5540              		.loc 1 3100 5 discriminator 1 view .LVU1591
 5541 002a FEE7     		b	.L406
 5542              	.L411:
 5543              		.align	2
 5544              	.L410:
 5545 002c 00000000 		.word	.LANCHOR3
 5546              		.cfi_endproc
 5547              	.LFE38:
 5549              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 5550              		.align	1
 5551              		.global	vTaskPlaceOnUnorderedEventList
 5552              		.syntax unified
 5553              		.thumb
 5554              		.thumb_func
 5555              		.fpu fpv4-sp-d16
 5557              	vTaskPlaceOnUnorderedEventList:
 5558              	.LVL408:
 5559              	.LFB39:
3125:FreeRTOS/tasks.c ****     configASSERT( pxEventList );
 5560              		.loc 1 3125 1 view -0
 5561              		.cfi_startproc
 5562              		@ args = 0, pretend = 0, frame = 0
 5563              		@ frame_needed = 0, uses_anonymous_args = 0
3125:FreeRTOS/tasks.c ****     configASSERT( pxEventList );
 5564              		.loc 1 3125 1 is_stmt 0 view .LVU1593
 5565 0000 38B5     		push	{r3, r4, r5, lr}
 5566              	.LCFI44:
 5567              		.cfi_def_cfa_offset 16
 5568              		.cfi_offset 3, -16
 5569              		.cfi_offset 4, -12
 5570              		.cfi_offset 5, -8
 5571              		.cfi_offset 14, -4
 5572 0002 0346     		mov	r3, r0
3126:FreeRTOS/tasks.c **** 
 5573              		.loc 1 3126 5 is_stmt 1 view .LVU1594
 5574 0004 68B1     		cbz	r0, .L418
 5575 0006 1046     		mov	r0, r2
 5576              	.LVL409:
3126:FreeRTOS/tasks.c **** 
 5577              		.loc 1 3126 5 is_stmt 0 view .LVU1595
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 222


 5578 0008 1A46     		mov	r2, r3
 5579              	.LVL410:
3126:FreeRTOS/tasks.c **** 
 5580              		.loc 1 3126 32 is_stmt 1 discriminator 2 view .LVU1596
3130:FreeRTOS/tasks.c **** 
 5581              		.loc 1 3130 5 discriminator 2 view .LVU1597
 5582 000a 174B     		ldr	r3, .L419
 5583              	.LVL411:
3130:FreeRTOS/tasks.c **** 
 5584              		.loc 1 3130 5 is_stmt 0 discriminator 2 view .LVU1598
 5585 000c 1B68     		ldr	r3, [r3]
 5586 000e 8BB9     		cbnz	r3, .L415
3130:FreeRTOS/tasks.c **** 
 5587              		.loc 1 3130 5 is_stmt 1 view .LVU1599
 5588              	.LBB291:
 5589              	.LBI291:
 194:FreeRTOS/portable/portmacro.h ****     {
 5590              		.loc 2 194 34 view .LVU1600
 5591              	.LBB292:
 196:FreeRTOS/portable/portmacro.h **** 
 5592              		.loc 2 196 9 view .LVU1601
 198:FreeRTOS/portable/portmacro.h ****         (
 5593              		.loc 2 198 9 view .LVU1602
 5594              		.syntax unified
 5595              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 5596 0010 4FF05003 			mov r3, #80												
 5597 0014 83F31188 		msr basepri, r3											
 5598 0018 BFF36F8F 		isb														
 5599 001c BFF34F8F 		dsb														
 5600              	
 5601              	@ 0 "" 2
 5602              	.LVL412:
 5603              		.thumb
 5604              		.syntax unified
 5605              	.L416:
 198:FreeRTOS/portable/portmacro.h ****         (
 5606              		.loc 2 198 9 is_stmt 0 view .LVU1603
 5607              	.LBE292:
 5608              	.LBE291:
3130:FreeRTOS/tasks.c **** 
 5609              		.loc 1 3130 5 is_stmt 1 discriminator 2 view .LVU1604
3130:FreeRTOS/tasks.c **** 
 5610              		.loc 1 3130 5 discriminator 2 view .LVU1605
3130:FreeRTOS/tasks.c **** 
 5611              		.loc 1 3130 5 discriminator 2 view .LVU1606
 5612 0020 FEE7     		b	.L416
 5613              	.LVL413:
 5614              	.L418:
3126:FreeRTOS/tasks.c **** 
 5615              		.loc 1 3126 5 view .LVU1607
 5616              	.LBB293:
 5617              	.LBI293:
 194:FreeRTOS/portable/portmacro.h ****     {
 5618              		.loc 2 194 34 view .LVU1608
 5619              	.LBB294:
 196:FreeRTOS/portable/portmacro.h **** 
 5620              		.loc 2 196 9 view .LVU1609
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 223


 198:FreeRTOS/portable/portmacro.h ****         (
 5621              		.loc 2 198 9 view .LVU1610
 5622              		.syntax unified
 5623              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 5624 0022 4FF05003 			mov r3, #80												
 5625 0026 83F31188 		msr basepri, r3											
 5626 002a BFF36F8F 		isb														
 5627 002e BFF34F8F 		dsb														
 5628              	
 5629              	@ 0 "" 2
 5630              	.LVL414:
 5631              		.thumb
 5632              		.syntax unified
 5633              	.L414:
 198:FreeRTOS/portable/portmacro.h ****         (
 5634              		.loc 2 198 9 is_stmt 0 view .LVU1611
 5635              	.LBE294:
 5636              	.LBE293:
3126:FreeRTOS/tasks.c **** 
 5637              		.loc 1 3126 5 is_stmt 1 discriminator 1 view .LVU1612
3126:FreeRTOS/tasks.c **** 
 5638              		.loc 1 3126 5 discriminator 1 view .LVU1613
3126:FreeRTOS/tasks.c **** 
 5639              		.loc 1 3126 5 discriminator 1 view .LVU1614
 5640 0032 FEE7     		b	.L414
 5641              	.LVL415:
 5642              	.L415:
3130:FreeRTOS/tasks.c **** 
 5643              		.loc 1 3130 46 discriminator 2 view .LVU1615
3135:FreeRTOS/tasks.c **** 
 5644              		.loc 1 3135 5 discriminator 2 view .LVU1616
 5645 0034 0D4B     		ldr	r3, .L419+4
 5646 0036 1C68     		ldr	r4, [r3]
 5647 0038 41F00041 		orr	r1, r1, #-2147483648
 5648              	.LVL416:
3135:FreeRTOS/tasks.c **** 
 5649              		.loc 1 3135 5 is_stmt 0 discriminator 2 view .LVU1617
 5650 003c A161     		str	r1, [r4, #24]
 5651              	.LBB295:
3142:FreeRTOS/tasks.c **** 
 5652              		.loc 1 3142 5 is_stmt 1 discriminator 2 view .LVU1618
 5653 003e 5168     		ldr	r1, [r2, #4]
 5654              	.LVL417:
3142:FreeRTOS/tasks.c **** 
 5655              		.loc 1 3142 5 discriminator 2 view .LVU1619
3142:FreeRTOS/tasks.c **** 
 5656              		.loc 1 3142 5 discriminator 2 view .LVU1620
3142:FreeRTOS/tasks.c **** 
 5657              		.loc 1 3142 5 discriminator 2 view .LVU1621
 5658 0040 1C68     		ldr	r4, [r3]
 5659 0042 E161     		str	r1, [r4, #28]
3142:FreeRTOS/tasks.c **** 
 5660              		.loc 1 3142 5 discriminator 2 view .LVU1622
 5661 0044 1C68     		ldr	r4, [r3]
 5662 0046 8D68     		ldr	r5, [r1, #8]
 5663 0048 2562     		str	r5, [r4, #32]
3142:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 224


 5664              		.loc 1 3142 5 discriminator 2 view .LVU1623
 5665 004a 1C68     		ldr	r4, [r3]
 5666 004c 1834     		adds	r4, r4, #24
 5667 004e 6C60     		str	r4, [r5, #4]
3142:FreeRTOS/tasks.c **** 
 5668              		.loc 1 3142 5 discriminator 2 view .LVU1624
 5669 0050 1C68     		ldr	r4, [r3]
 5670 0052 1834     		adds	r4, r4, #24
 5671 0054 8C60     		str	r4, [r1, #8]
3142:FreeRTOS/tasks.c **** 
 5672              		.loc 1 3142 5 discriminator 2 view .LVU1625
 5673 0056 1B68     		ldr	r3, [r3]
 5674 0058 9A62     		str	r2, [r3, #40]
3142:FreeRTOS/tasks.c **** 
 5675              		.loc 1 3142 5 discriminator 2 view .LVU1626
 5676 005a 1368     		ldr	r3, [r2]
 5677 005c 0133     		adds	r3, r3, #1
 5678 005e 1360     		str	r3, [r2]
 5679              	.LBE295:
3142:FreeRTOS/tasks.c **** 
 5680              		.loc 1 3142 69 discriminator 2 view .LVU1627
3144:FreeRTOS/tasks.c **** }
 5681              		.loc 1 3144 5 discriminator 2 view .LVU1628
 5682 0060 0121     		movs	r1, #1
 5683              	.LVL418:
3144:FreeRTOS/tasks.c **** }
 5684              		.loc 1 3144 5 is_stmt 0 discriminator 2 view .LVU1629
 5685 0062 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5686              	.LVL419:
3145:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 5687              		.loc 1 3145 1 discriminator 2 view .LVU1630
 5688 0066 38BD     		pop	{r3, r4, r5, pc}
 5689              	.L420:
 5690              		.align	2
 5691              	.L419:
 5692 0068 00000000 		.word	.LANCHOR16
 5693 006c 00000000 		.word	.LANCHOR3
 5694              		.cfi_endproc
 5695              	.LFE39:
 5697              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 5698              		.align	1
 5699              		.global	xTaskRemoveFromEventList
 5700              		.syntax unified
 5701              		.thumb
 5702              		.thumb_func
 5703              		.fpu fpv4-sp-d16
 5705              	xTaskRemoveFromEventList:
 5706              	.LVL420:
 5707              	.LFB40:
3184:FreeRTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
 5708              		.loc 1 3184 1 is_stmt 1 view -0
 5709              		.cfi_startproc
 5710              		@ args = 0, pretend = 0, frame = 0
 5711              		@ frame_needed = 0, uses_anonymous_args = 0
3184:FreeRTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
 5712              		.loc 1 3184 1 is_stmt 0 view .LVU1632
 5713 0000 38B5     		push	{r3, r4, r5, lr}
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 225


 5714              	.LCFI45:
 5715              		.cfi_def_cfa_offset 16
 5716              		.cfi_offset 3, -16
 5717              		.cfi_offset 4, -12
 5718              		.cfi_offset 5, -8
 5719              		.cfi_offset 14, -4
3185:FreeRTOS/tasks.c ****     BaseType_t xReturn;
 5720              		.loc 1 3185 5 is_stmt 1 view .LVU1633
3186:FreeRTOS/tasks.c **** 
 5721              		.loc 1 3186 5 view .LVU1634
3201:FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
 5722              		.loc 1 3201 5 view .LVU1635
3201:FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
 5723              		.loc 1 3201 22 is_stmt 0 view .LVU1636
 5724 0002 C368     		ldr	r3, [r0, #12]
3201:FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
 5725              		.loc 1 3201 20 view .LVU1637
 5726 0004 DC68     		ldr	r4, [r3, #12]
 5727              	.LVL421:
3202:FreeRTOS/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 5728              		.loc 1 3202 5 is_stmt 1 view .LVU1638
 5729 0006 002C     		cmp	r4, #0
 5730 0008 4AD0     		beq	.L431
3202:FreeRTOS/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 5731              		.loc 1 3202 35 discriminator 2 view .LVU1639
 5732              	.LBB296:
3203:FreeRTOS/tasks.c **** 
 5733              		.loc 1 3203 5 discriminator 2 view .LVU1640
 5734 000a A36A     		ldr	r3, [r4, #40]
 5735              	.LVL422:
3203:FreeRTOS/tasks.c **** 
 5736              		.loc 1 3203 5 discriminator 2 view .LVU1641
 5737 000c E169     		ldr	r1, [r4, #28]
 5738 000e 226A     		ldr	r2, [r4, #32]
 5739 0010 8A60     		str	r2, [r1, #8]
3203:FreeRTOS/tasks.c **** 
 5740              		.loc 1 3203 5 discriminator 2 view .LVU1642
 5741 0012 E169     		ldr	r1, [r4, #28]
 5742 0014 5160     		str	r1, [r2, #4]
3203:FreeRTOS/tasks.c **** 
 5743              		.loc 1 3203 5 discriminator 2 view .LVU1643
 5744 0016 5A68     		ldr	r2, [r3, #4]
 5745 0018 04F11801 		add	r1, r4, #24
 5746 001c 8A42     		cmp	r2, r1
 5747 001e 48D0     		beq	.L432
 5748              	.L424:
3203:FreeRTOS/tasks.c **** 
 5749              		.loc 1 3203 5 discriminator 3 view .LVU1644
 5750 0020 0022     		movs	r2, #0
 5751 0022 A262     		str	r2, [r4, #40]
3203:FreeRTOS/tasks.c **** 
 5752              		.loc 1 3203 5 discriminator 3 view .LVU1645
 5753 0024 1A68     		ldr	r2, [r3]
 5754 0026 013A     		subs	r2, r2, #1
 5755 0028 1A60     		str	r2, [r3]
 5756              	.LBE296:
3203:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 226


 5757              		.loc 1 3203 59 discriminator 3 view .LVU1646
3205:FreeRTOS/tasks.c ****     {
 5758              		.loc 1 3205 5 discriminator 3 view .LVU1647
3205:FreeRTOS/tasks.c ****     {
 5759              		.loc 1 3205 30 is_stmt 0 discriminator 3 view .LVU1648
 5760 002a 2C4B     		ldr	r3, .L434
 5761              	.LVL423:
3205:FreeRTOS/tasks.c ****     {
 5762              		.loc 1 3205 30 discriminator 3 view .LVU1649
 5763 002c 1B68     		ldr	r3, [r3]
3205:FreeRTOS/tasks.c ****     {
 5764              		.loc 1 3205 7 discriminator 3 view .LVU1650
 5765 002e 002B     		cmp	r3, #0
 5766 0030 45D1     		bne	.L425
 5767              	.LBB297:
3207:FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 5768              		.loc 1 3207 9 is_stmt 1 view .LVU1651
 5769 0032 6369     		ldr	r3, [r4, #20]
 5770              	.LVL424:
3207:FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 5771              		.loc 1 3207 9 view .LVU1652
 5772 0034 A168     		ldr	r1, [r4, #8]
 5773 0036 E268     		ldr	r2, [r4, #12]
 5774 0038 8A60     		str	r2, [r1, #8]
3207:FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 5775              		.loc 1 3207 9 view .LVU1653
 5776 003a A168     		ldr	r1, [r4, #8]
 5777 003c 5160     		str	r1, [r2, #4]
3207:FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 5778              		.loc 1 3207 9 view .LVU1654
 5779 003e 5A68     		ldr	r2, [r3, #4]
 5780 0040 211D     		adds	r1, r4, #4
 5781 0042 8A42     		cmp	r2, r1
 5782 0044 38D0     		beq	.L433
 5783              	.L426:
3207:FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 5784              		.loc 1 3207 9 discriminator 3 view .LVU1655
 5785 0046 0022     		movs	r2, #0
 5786 0048 6261     		str	r2, [r4, #20]
3207:FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 5787              		.loc 1 3207 9 discriminator 3 view .LVU1656
 5788 004a 1A68     		ldr	r2, [r3]
 5789 004c 013A     		subs	r2, r2, #1
 5790 004e 1A60     		str	r2, [r3]
 5791              	.LBE297:
3207:FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 5792              		.loc 1 3207 63 discriminator 3 view .LVU1657
3208:FreeRTOS/tasks.c **** 
 5793              		.loc 1 3208 9 discriminator 3 view .LVU1658
3208:FreeRTOS/tasks.c **** 
 5794              		.loc 1 3208 9 discriminator 3 view .LVU1659
 5795 0050 E36A     		ldr	r3, [r4, #44]
 5796              	.LVL425:
3208:FreeRTOS/tasks.c **** 
 5797              		.loc 1 3208 9 is_stmt 0 discriminator 3 view .LVU1660
 5798 0052 0122     		movs	r2, #1
 5799 0054 9A40     		lsls	r2, r2, r3
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 227


 5800 0056 2248     		ldr	r0, .L434+4
 5801              	.LVL426:
3208:FreeRTOS/tasks.c **** 
 5802              		.loc 1 3208 9 discriminator 3 view .LVU1661
 5803 0058 0568     		ldr	r5, [r0]
 5804 005a 2A43     		orrs	r2, r2, r5
 5805 005c 0260     		str	r2, [r0]
 5806              	.LBB298:
3208:FreeRTOS/tasks.c **** 
 5807              		.loc 1 3208 9 is_stmt 1 discriminator 3 view .LVU1662
 5808 005e 214A     		ldr	r2, .L434+8
 5809 0060 03EB8303 		add	r3, r3, r3, lsl #2
 5810 0064 02EB8303 		add	r3, r2, r3, lsl #2
 5811 0068 5B68     		ldr	r3, [r3, #4]
 5812              	.LVL427:
3208:FreeRTOS/tasks.c **** 
 5813              		.loc 1 3208 9 discriminator 3 view .LVU1663
3208:FreeRTOS/tasks.c **** 
 5814              		.loc 1 3208 9 discriminator 3 view .LVU1664
3208:FreeRTOS/tasks.c **** 
 5815              		.loc 1 3208 9 discriminator 3 view .LVU1665
 5816 006a A360     		str	r3, [r4, #8]
3208:FreeRTOS/tasks.c **** 
 5817              		.loc 1 3208 9 discriminator 3 view .LVU1666
 5818 006c 9868     		ldr	r0, [r3, #8]
 5819 006e E060     		str	r0, [r4, #12]
3208:FreeRTOS/tasks.c **** 
 5820              		.loc 1 3208 9 discriminator 3 view .LVU1667
 5821 0070 4160     		str	r1, [r0, #4]
3208:FreeRTOS/tasks.c **** 
 5822              		.loc 1 3208 9 discriminator 3 view .LVU1668
 5823 0072 9960     		str	r1, [r3, #8]
3208:FreeRTOS/tasks.c **** 
 5824              		.loc 1 3208 9 discriminator 3 view .LVU1669
 5825 0074 E36A     		ldr	r3, [r4, #44]
 5826              	.LVL428:
3208:FreeRTOS/tasks.c **** 
 5827              		.loc 1 3208 9 is_stmt 0 discriminator 3 view .LVU1670
 5828 0076 03EB8301 		add	r1, r3, r3, lsl #2
 5829 007a 8800     		lsls	r0, r1, #2
 5830 007c 02EB8101 		add	r1, r2, r1, lsl #2
 5831 0080 6161     		str	r1, [r4, #20]
3208:FreeRTOS/tasks.c **** 
 5832              		.loc 1 3208 9 is_stmt 1 discriminator 3 view .LVU1671
 5833 0082 1158     		ldr	r1, [r2, r0]
 5834 0084 0131     		adds	r1, r1, #1
 5835 0086 1150     		str	r1, [r2, r0]
 5836              	.LBE298:
3208:FreeRTOS/tasks.c **** 
 5837              		.loc 1 3208 9 discriminator 3 view .LVU1672
3208:FreeRTOS/tasks.c **** 
 5838              		.loc 1 3208 48 discriminator 3 view .LVU1673
3220:FreeRTOS/tasks.c ****             }
 5839              		.loc 1 3220 17 discriminator 3 view .LVU1674
 5840 0088 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 5841              	.LVL429:
 5842              	.L427:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 228


3228:FreeRTOS/tasks.c ****     }
 5843              		.loc 1 3228 86 discriminator 1 view .LVU1675
3231:FreeRTOS/tasks.c ****     {
 5844              		.loc 1 3231 5 discriminator 1 view .LVU1676
3231:FreeRTOS/tasks.c ****     {
 5845              		.loc 1 3231 23 is_stmt 0 discriminator 1 view .LVU1677
 5846 008c E26A     		ldr	r2, [r4, #44]
3231:FreeRTOS/tasks.c ****     {
 5847              		.loc 1 3231 50 discriminator 1 view .LVU1678
 5848 008e 164B     		ldr	r3, .L434+12
 5849 0090 1B68     		ldr	r3, [r3]
 5850 0092 DB6A     		ldr	r3, [r3, #44]
3231:FreeRTOS/tasks.c ****     {
 5851              		.loc 1 3231 7 discriminator 1 view .LVU1679
 5852 0094 9A42     		cmp	r2, r3
 5853 0096 1ED9     		bls	.L429
3236:FreeRTOS/tasks.c **** 
 5854              		.loc 1 3236 9 is_stmt 1 view .LVU1680
 5855              	.LVL430:
3240:FreeRTOS/tasks.c ****     }
 5856              		.loc 1 3240 9 view .LVU1681
3240:FreeRTOS/tasks.c ****     }
 5857              		.loc 1 3240 23 is_stmt 0 view .LVU1682
 5858 0098 0120     		movs	r0, #1
 5859 009a 144B     		ldr	r3, .L434+16
 5860 009c 1860     		str	r0, [r3]
 5861              	.LVL431:
 5862              	.L421:
3248:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 5863              		.loc 1 3248 1 view .LVU1683
 5864 009e 38BD     		pop	{r3, r4, r5, pc}
 5865              	.LVL432:
 5866              	.L431:
3202:FreeRTOS/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 5867              		.loc 1 3202 5 is_stmt 1 view .LVU1684
 5868              	.LBB299:
 5869              	.LBI299:
 194:FreeRTOS/portable/portmacro.h ****     {
 5870              		.loc 2 194 34 view .LVU1685
 5871              	.LBB300:
 196:FreeRTOS/portable/portmacro.h **** 
 5872              		.loc 2 196 9 view .LVU1686
 198:FreeRTOS/portable/portmacro.h ****         (
 5873              		.loc 2 198 9 view .LVU1687
 5874              		.syntax unified
 5875              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 5876 00a0 4FF05003 			mov r3, #80												
 5877 00a4 83F31188 		msr basepri, r3											
 5878 00a8 BFF36F8F 		isb														
 5879 00ac BFF34F8F 		dsb														
 5880              	
 5881              	@ 0 "" 2
 5882              	.LVL433:
 5883              		.thumb
 5884              		.syntax unified
 5885              	.L423:
 198:FreeRTOS/portable/portmacro.h ****         (
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 229


 5886              		.loc 2 198 9 is_stmt 0 view .LVU1688
 5887              	.LBE300:
 5888              	.LBE299:
3202:FreeRTOS/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 5889              		.loc 1 3202 5 is_stmt 1 discriminator 1 view .LVU1689
3202:FreeRTOS/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 5890              		.loc 1 3202 5 discriminator 1 view .LVU1690
3202:FreeRTOS/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 5891              		.loc 1 3202 5 discriminator 1 view .LVU1691
 5892 00b0 FEE7     		b	.L423
 5893              	.LVL434:
 5894              	.L432:
 5895              	.LBB301:
3203:FreeRTOS/tasks.c **** 
 5896              		.loc 1 3203 5 discriminator 1 view .LVU1692
 5897 00b2 226A     		ldr	r2, [r4, #32]
 5898 00b4 5A60     		str	r2, [r3, #4]
 5899 00b6 B3E7     		b	.L424
 5900              	.LVL435:
 5901              	.L433:
3203:FreeRTOS/tasks.c **** 
 5902              		.loc 1 3203 5 is_stmt 0 discriminator 1 view .LVU1693
 5903              	.LBE301:
 5904              	.LBB302:
3207:FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 5905              		.loc 1 3207 9 is_stmt 1 discriminator 1 view .LVU1694
 5906 00b8 E268     		ldr	r2, [r4, #12]
 5907 00ba 5A60     		str	r2, [r3, #4]
 5908 00bc C3E7     		b	.L426
 5909              	.LVL436:
 5910              	.L425:
3207:FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 5911              		.loc 1 3207 9 is_stmt 0 discriminator 1 view .LVU1695
 5912              	.LBE302:
 5913              	.LBB303:
3228:FreeRTOS/tasks.c ****     }
 5914              		.loc 1 3228 9 is_stmt 1 view .LVU1696
 5915 00be 0C4B     		ldr	r3, .L434+20
 5916 00c0 5A68     		ldr	r2, [r3, #4]
 5917              	.LVL437:
3228:FreeRTOS/tasks.c ****     }
 5918              		.loc 1 3228 9 view .LVU1697
3228:FreeRTOS/tasks.c ****     }
 5919              		.loc 1 3228 9 view .LVU1698
3228:FreeRTOS/tasks.c ****     }
 5920              		.loc 1 3228 9 view .LVU1699
 5921 00c2 E261     		str	r2, [r4, #28]
3228:FreeRTOS/tasks.c ****     }
 5922              		.loc 1 3228 9 view .LVU1700
 5923 00c4 9068     		ldr	r0, [r2, #8]
 5924              	.LVL438:
3228:FreeRTOS/tasks.c ****     }
 5925              		.loc 1 3228 9 is_stmt 0 view .LVU1701
 5926 00c6 2062     		str	r0, [r4, #32]
3228:FreeRTOS/tasks.c ****     }
 5927              		.loc 1 3228 9 is_stmt 1 view .LVU1702
 5928 00c8 4160     		str	r1, [r0, #4]
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 230


3228:FreeRTOS/tasks.c ****     }
 5929              		.loc 1 3228 9 view .LVU1703
 5930 00ca 9160     		str	r1, [r2, #8]
3228:FreeRTOS/tasks.c ****     }
 5931              		.loc 1 3228 9 view .LVU1704
 5932 00cc A362     		str	r3, [r4, #40]
3228:FreeRTOS/tasks.c ****     }
 5933              		.loc 1 3228 9 view .LVU1705
 5934 00ce 1A68     		ldr	r2, [r3]
 5935              	.LVL439:
3228:FreeRTOS/tasks.c ****     }
 5936              		.loc 1 3228 9 is_stmt 0 view .LVU1706
 5937 00d0 0132     		adds	r2, r2, #1
 5938 00d2 1A60     		str	r2, [r3]
 5939 00d4 DAE7     		b	.L427
 5940              	.L429:
3228:FreeRTOS/tasks.c ****     }
 5941              		.loc 1 3228 9 view .LVU1707
 5942              	.LBE303:
3244:FreeRTOS/tasks.c ****     }
 5943              		.loc 1 3244 17 view .LVU1708
 5944 00d6 0020     		movs	r0, #0
 5945              	.LVL440:
3247:FreeRTOS/tasks.c **** }
 5946              		.loc 1 3247 5 is_stmt 1 view .LVU1709
3247:FreeRTOS/tasks.c **** }
 5947              		.loc 1 3247 12 is_stmt 0 view .LVU1710
 5948 00d8 E1E7     		b	.L421
 5949              	.L435:
 5950 00da 00BF     		.align	2
 5951              	.L434:
 5952 00dc 00000000 		.word	.LANCHOR16
 5953 00e0 00000000 		.word	.LANCHOR2
 5954 00e4 00000000 		.word	.LANCHOR4
 5955 00e8 00000000 		.word	.LANCHOR3
 5956 00ec 00000000 		.word	.LANCHOR17
 5957 00f0 00000000 		.word	.LANCHOR1
 5958              		.cfi_endproc
 5959              	.LFE40:
 5961              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 5962              		.align	1
 5963              		.global	vTaskRemoveFromUnorderedEventList
 5964              		.syntax unified
 5965              		.thumb
 5966              		.thumb_func
 5967              		.fpu fpv4-sp-d16
 5969              	vTaskRemoveFromUnorderedEventList:
 5970              	.LVL441:
 5971              	.LFB41:
3253:FreeRTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
 5972              		.loc 1 3253 1 is_stmt 1 view -0
 5973              		.cfi_startproc
 5974              		@ args = 0, pretend = 0, frame = 0
 5975              		@ frame_needed = 0, uses_anonymous_args = 0
3253:FreeRTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
 5976              		.loc 1 3253 1 is_stmt 0 view .LVU1712
 5977 0000 38B5     		push	{r3, r4, r5, lr}
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 231


 5978              	.LCFI46:
 5979              		.cfi_def_cfa_offset 16
 5980              		.cfi_offset 3, -16
 5981              		.cfi_offset 4, -12
 5982              		.cfi_offset 5, -8
 5983              		.cfi_offset 14, -4
 5984 0002 0A46     		mov	r2, r1
3254:FreeRTOS/tasks.c **** 
 5985              		.loc 1 3254 5 is_stmt 1 view .LVU1713
3258:FreeRTOS/tasks.c **** 
 5986              		.loc 1 3258 5 view .LVU1714
 5987 0004 3349     		ldr	r1, .L448
 5988              	.LVL442:
3258:FreeRTOS/tasks.c **** 
 5989              		.loc 1 3258 5 is_stmt 0 view .LVU1715
 5990 0006 0968     		ldr	r1, [r1]
 5991 0008 41B9     		cbnz	r1, .L437
3258:FreeRTOS/tasks.c **** 
 5992              		.loc 1 3258 5 is_stmt 1 view .LVU1716
 5993              	.LBB304:
 5994              	.LBI304:
 194:FreeRTOS/portable/portmacro.h ****     {
 5995              		.loc 2 194 34 view .LVU1717
 5996              	.LBB305:
 196:FreeRTOS/portable/portmacro.h **** 
 5997              		.loc 2 196 9 view .LVU1718
 198:FreeRTOS/portable/portmacro.h ****         (
 5998              		.loc 2 198 9 view .LVU1719
 5999              		.syntax unified
 6000              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 6001 000a 4FF05003 			mov r3, #80												
 6002 000e 83F31188 		msr basepri, r3											
 6003 0012 BFF36F8F 		isb														
 6004 0016 BFF34F8F 		dsb														
 6005              	
 6006              	@ 0 "" 2
 6007              	.LVL443:
 6008              		.thumb
 6009              		.syntax unified
 6010              	.L438:
 198:FreeRTOS/portable/portmacro.h ****         (
 6011              		.loc 2 198 9 is_stmt 0 view .LVU1720
 6012              	.LBE305:
 6013              	.LBE304:
3258:FreeRTOS/tasks.c **** 
 6014              		.loc 1 3258 5 is_stmt 1 discriminator 1 view .LVU1721
3258:FreeRTOS/tasks.c **** 
 6015              		.loc 1 3258 5 discriminator 1 view .LVU1722
3258:FreeRTOS/tasks.c **** 
 6016              		.loc 1 3258 5 discriminator 1 view .LVU1723
 6017 001a FEE7     		b	.L438
 6018              	.L437:
 6019 001c 0346     		mov	r3, r0
3258:FreeRTOS/tasks.c **** 
 6020              		.loc 1 3258 52 discriminator 2 view .LVU1724
3261:FreeRTOS/tasks.c **** 
 6021              		.loc 1 3261 5 discriminator 2 view .LVU1725
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 232


 6022 001e 42F00042 		orr	r2, r2, #-2147483648
 6023              	.LVL444:
3261:FreeRTOS/tasks.c **** 
 6024              		.loc 1 3261 5 is_stmt 0 discriminator 2 view .LVU1726
 6025 0022 0260     		str	r2, [r0]
3265:FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
 6026              		.loc 1 3265 5 is_stmt 1 discriminator 2 view .LVU1727
3265:FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
 6027              		.loc 1 3265 20 is_stmt 0 discriminator 2 view .LVU1728
 6028 0024 C468     		ldr	r4, [r0, #12]
 6029              	.LVL445:
3266:FreeRTOS/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
 6030              		.loc 1 3266 5 is_stmt 1 discriminator 2 view .LVU1729
 6031 0026 002C     		cmp	r4, #0
 6032 0028 45D0     		beq	.L445
3266:FreeRTOS/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
 6033              		.loc 1 3266 35 discriminator 2 view .LVU1730
 6034              	.LBB306:
3267:FreeRTOS/tasks.c **** 
 6035              		.loc 1 3267 5 discriminator 2 view .LVU1731
 6036 002a 0269     		ldr	r2, [r0, #16]
 6037              	.LVL446:
3267:FreeRTOS/tasks.c **** 
 6038              		.loc 1 3267 5 discriminator 2 view .LVU1732
 6039 002c 4168     		ldr	r1, [r0, #4]
 6040 002e 8068     		ldr	r0, [r0, #8]
 6041              	.LVL447:
3267:FreeRTOS/tasks.c **** 
 6042              		.loc 1 3267 5 is_stmt 0 discriminator 2 view .LVU1733
 6043 0030 8860     		str	r0, [r1, #8]
3267:FreeRTOS/tasks.c **** 
 6044              		.loc 1 3267 5 is_stmt 1 discriminator 2 view .LVU1734
 6045 0032 9968     		ldr	r1, [r3, #8]
 6046 0034 5868     		ldr	r0, [r3, #4]
 6047 0036 4860     		str	r0, [r1, #4]
3267:FreeRTOS/tasks.c **** 
 6048              		.loc 1 3267 5 discriminator 2 view .LVU1735
 6049 0038 5168     		ldr	r1, [r2, #4]
 6050 003a 9942     		cmp	r1, r3
 6051 003c 44D0     		beq	.L446
 6052              	.L441:
3267:FreeRTOS/tasks.c **** 
 6053              		.loc 1 3267 5 discriminator 3 view .LVU1736
 6054 003e 0021     		movs	r1, #0
 6055 0040 1961     		str	r1, [r3, #16]
3267:FreeRTOS/tasks.c **** 
 6056              		.loc 1 3267 5 discriminator 3 view .LVU1737
 6057 0042 1368     		ldr	r3, [r2]
 6058              	.LVL448:
3267:FreeRTOS/tasks.c **** 
 6059              		.loc 1 3267 5 is_stmt 0 discriminator 3 view .LVU1738
 6060 0044 013B     		subs	r3, r3, #1
 6061 0046 1360     		str	r3, [r2]
 6062              	.LBE306:
3267:FreeRTOS/tasks.c **** 
 6063              		.loc 1 3267 39 is_stmt 1 discriminator 3 view .LVU1739
3279:FreeRTOS/tasks.c ****         }
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 233


 6064              		.loc 1 3279 13 discriminator 3 view .LVU1740
 6065 0048 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 6066              	.LVL449:
 6067              	.LBB307:
3286:FreeRTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 6068              		.loc 1 3286 5 discriminator 3 view .LVU1741
 6069 004c 6369     		ldr	r3, [r4, #20]
 6070              	.LVL450:
3286:FreeRTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 6071              		.loc 1 3286 5 discriminator 3 view .LVU1742
 6072 004e A168     		ldr	r1, [r4, #8]
 6073 0050 E268     		ldr	r2, [r4, #12]
 6074 0052 8A60     		str	r2, [r1, #8]
3286:FreeRTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 6075              		.loc 1 3286 5 discriminator 3 view .LVU1743
 6076 0054 A168     		ldr	r1, [r4, #8]
 6077 0056 5160     		str	r1, [r2, #4]
3286:FreeRTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 6078              		.loc 1 3286 5 discriminator 3 view .LVU1744
 6079 0058 5A68     		ldr	r2, [r3, #4]
 6080 005a 211D     		adds	r1, r4, #4
 6081 005c 8A42     		cmp	r2, r1
 6082 005e 36D0     		beq	.L447
 6083              	.L442:
3286:FreeRTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 6084              		.loc 1 3286 5 discriminator 3 view .LVU1745
 6085 0060 0022     		movs	r2, #0
 6086 0062 6261     		str	r2, [r4, #20]
3286:FreeRTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 6087              		.loc 1 3286 5 discriminator 3 view .LVU1746
 6088 0064 1A68     		ldr	r2, [r3]
 6089 0066 013A     		subs	r2, r2, #1
 6090 0068 1A60     		str	r2, [r3]
 6091              	.LBE307:
3286:FreeRTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 6092              		.loc 1 3286 59 discriminator 3 view .LVU1747
3287:FreeRTOS/tasks.c **** 
 6093              		.loc 1 3287 5 discriminator 3 view .LVU1748
3287:FreeRTOS/tasks.c **** 
 6094              		.loc 1 3287 5 discriminator 3 view .LVU1749
 6095 006a E36A     		ldr	r3, [r4, #44]
 6096              	.LVL451:
3287:FreeRTOS/tasks.c **** 
 6097              		.loc 1 3287 5 is_stmt 0 discriminator 3 view .LVU1750
 6098 006c 0122     		movs	r2, #1
 6099 006e 9A40     		lsls	r2, r2, r3
 6100 0070 1948     		ldr	r0, .L448+4
 6101 0072 0568     		ldr	r5, [r0]
 6102 0074 2A43     		orrs	r2, r2, r5
 6103 0076 0260     		str	r2, [r0]
 6104              	.LBB308:
3287:FreeRTOS/tasks.c **** 
 6105              		.loc 1 3287 5 is_stmt 1 discriminator 3 view .LVU1751
 6106 0078 184A     		ldr	r2, .L448+8
 6107 007a 03EB8303 		add	r3, r3, r3, lsl #2
 6108 007e 02EB8303 		add	r3, r2, r3, lsl #2
 6109 0082 5B68     		ldr	r3, [r3, #4]
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 234


 6110              	.LVL452:
3287:FreeRTOS/tasks.c **** 
 6111              		.loc 1 3287 5 discriminator 3 view .LVU1752
3287:FreeRTOS/tasks.c **** 
 6112              		.loc 1 3287 5 discriminator 3 view .LVU1753
3287:FreeRTOS/tasks.c **** 
 6113              		.loc 1 3287 5 discriminator 3 view .LVU1754
 6114 0084 A360     		str	r3, [r4, #8]
3287:FreeRTOS/tasks.c **** 
 6115              		.loc 1 3287 5 discriminator 3 view .LVU1755
 6116 0086 9868     		ldr	r0, [r3, #8]
 6117 0088 E060     		str	r0, [r4, #12]
3287:FreeRTOS/tasks.c **** 
 6118              		.loc 1 3287 5 discriminator 3 view .LVU1756
 6119 008a 4160     		str	r1, [r0, #4]
3287:FreeRTOS/tasks.c **** 
 6120              		.loc 1 3287 5 discriminator 3 view .LVU1757
 6121 008c 9960     		str	r1, [r3, #8]
3287:FreeRTOS/tasks.c **** 
 6122              		.loc 1 3287 5 discriminator 3 view .LVU1758
 6123 008e E36A     		ldr	r3, [r4, #44]
 6124              	.LVL453:
3287:FreeRTOS/tasks.c **** 
 6125              		.loc 1 3287 5 is_stmt 0 discriminator 3 view .LVU1759
 6126 0090 03EB8301 		add	r1, r3, r3, lsl #2
 6127 0094 8800     		lsls	r0, r1, #2
 6128 0096 02EB8101 		add	r1, r2, r1, lsl #2
 6129 009a 6161     		str	r1, [r4, #20]
3287:FreeRTOS/tasks.c **** 
 6130              		.loc 1 3287 5 is_stmt 1 discriminator 3 view .LVU1760
 6131 009c 1158     		ldr	r1, [r2, r0]
 6132 009e 0131     		adds	r1, r1, #1
 6133 00a0 1150     		str	r1, [r2, r0]
 6134              	.LBE308:
3287:FreeRTOS/tasks.c **** 
 6135              		.loc 1 3287 5 discriminator 3 view .LVU1761
3287:FreeRTOS/tasks.c **** 
 6136              		.loc 1 3287 44 discriminator 3 view .LVU1762
3289:FreeRTOS/tasks.c ****     {
 6137              		.loc 1 3289 5 discriminator 3 view .LVU1763
3289:FreeRTOS/tasks.c ****     {
 6138              		.loc 1 3289 23 is_stmt 0 discriminator 3 view .LVU1764
 6139 00a2 E26A     		ldr	r2, [r4, #44]
3289:FreeRTOS/tasks.c ****     {
 6140              		.loc 1 3289 50 discriminator 3 view .LVU1765
 6141 00a4 0E4B     		ldr	r3, .L448+12
 6142 00a6 1B68     		ldr	r3, [r3]
 6143 00a8 DB6A     		ldr	r3, [r3, #44]
3289:FreeRTOS/tasks.c ****     {
 6144              		.loc 1 3289 7 discriminator 3 view .LVU1766
 6145 00aa 9A42     		cmp	r2, r3
 6146 00ac 02D9     		bls	.L436
3295:FreeRTOS/tasks.c ****     }
 6147              		.loc 1 3295 9 is_stmt 1 view .LVU1767
3295:FreeRTOS/tasks.c ****     }
 6148              		.loc 1 3295 23 is_stmt 0 view .LVU1768
 6149 00ae 0D4B     		ldr	r3, .L448+16
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 235


 6150 00b0 0122     		movs	r2, #1
 6151 00b2 1A60     		str	r2, [r3]
 6152              	.L436:
3297:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 6153              		.loc 1 3297 1 view .LVU1769
 6154 00b4 38BD     		pop	{r3, r4, r5, pc}
 6155              	.LVL454:
 6156              	.L445:
3266:FreeRTOS/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
 6157              		.loc 1 3266 5 is_stmt 1 view .LVU1770
 6158              	.LBB309:
 6159              	.LBI309:
 194:FreeRTOS/portable/portmacro.h ****     {
 6160              		.loc 2 194 34 view .LVU1771
 6161              	.LBB310:
 196:FreeRTOS/portable/portmacro.h **** 
 6162              		.loc 2 196 9 view .LVU1772
 198:FreeRTOS/portable/portmacro.h ****         (
 6163              		.loc 2 198 9 view .LVU1773
 6164              		.syntax unified
 6165              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 6166 00b6 4FF05003 			mov r3, #80												
 6167 00ba 83F31188 		msr basepri, r3											
 6168 00be BFF36F8F 		isb														
 6169 00c2 BFF34F8F 		dsb														
 6170              	
 6171              	@ 0 "" 2
 6172              	.LVL455:
 6173              		.thumb
 6174              		.syntax unified
 6175              	.L440:
 198:FreeRTOS/portable/portmacro.h ****         (
 6176              		.loc 2 198 9 is_stmt 0 view .LVU1774
 6177              	.LBE310:
 6178              	.LBE309:
3266:FreeRTOS/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
 6179              		.loc 1 3266 5 is_stmt 1 discriminator 2 view .LVU1775
3266:FreeRTOS/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
 6180              		.loc 1 3266 5 discriminator 2 view .LVU1776
3266:FreeRTOS/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
 6181              		.loc 1 3266 5 discriminator 2 view .LVU1777
 6182 00c6 FEE7     		b	.L440
 6183              	.LVL456:
 6184              	.L446:
 6185              	.LBB311:
3267:FreeRTOS/tasks.c **** 
 6186              		.loc 1 3267 5 discriminator 1 view .LVU1778
 6187 00c8 9968     		ldr	r1, [r3, #8]
 6188 00ca 5160     		str	r1, [r2, #4]
 6189 00cc B7E7     		b	.L441
 6190              	.LVL457:
 6191              	.L447:
3267:FreeRTOS/tasks.c **** 
 6192              		.loc 1 3267 5 is_stmt 0 discriminator 1 view .LVU1779
 6193              	.LBE311:
 6194              	.LBB312:
3286:FreeRTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 236


 6195              		.loc 1 3286 5 is_stmt 1 discriminator 1 view .LVU1780
 6196 00ce E268     		ldr	r2, [r4, #12]
 6197 00d0 5A60     		str	r2, [r3, #4]
 6198 00d2 C5E7     		b	.L442
 6199              	.L449:
 6200              		.align	2
 6201              	.L448:
 6202 00d4 00000000 		.word	.LANCHOR16
 6203 00d8 00000000 		.word	.LANCHOR2
 6204 00dc 00000000 		.word	.LANCHOR4
 6205 00e0 00000000 		.word	.LANCHOR3
 6206 00e4 00000000 		.word	.LANCHOR17
 6207              	.LBE312:
 6208              		.cfi_endproc
 6209              	.LFE41:
 6211              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 6212              		.align	1
 6213              		.global	vTaskSetTimeOutState
 6214              		.syntax unified
 6215              		.thumb
 6216              		.thumb_func
 6217              		.fpu fpv4-sp-d16
 6219              	vTaskSetTimeOutState:
 6220              	.LVL458:
 6221              	.LFB42:
3301:FreeRTOS/tasks.c ****     configASSERT( pxTimeOut );
 6222              		.loc 1 3301 1 view -0
 6223              		.cfi_startproc
 6224              		@ args = 0, pretend = 0, frame = 0
 6225              		@ frame_needed = 0, uses_anonymous_args = 0
3302:FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
 6226              		.loc 1 3302 5 view .LVU1782
 6227 0000 60B1     		cbz	r0, .L455
3301:FreeRTOS/tasks.c ****     configASSERT( pxTimeOut );
 6228              		.loc 1 3301 1 is_stmt 0 discriminator 2 view .LVU1783
 6229 0002 10B5     		push	{r4, lr}
 6230              	.LCFI47:
 6231              		.cfi_def_cfa_offset 8
 6232              		.cfi_offset 4, -8
 6233              		.cfi_offset 14, -4
 6234 0004 0446     		mov	r4, r0
3302:FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
 6235              		.loc 1 3302 30 is_stmt 1 discriminator 2 view .LVU1784
3303:FreeRTOS/tasks.c ****     {
 6236              		.loc 1 3303 5 discriminator 2 view .LVU1785
 6237 0006 FFF7FEFF 		bl	vPortEnterCritical
 6238              	.LVL459:
3305:FreeRTOS/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
 6239              		.loc 1 3305 9 discriminator 2 view .LVU1786
3305:FreeRTOS/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
 6240              		.loc 1 3305 35 is_stmt 0 discriminator 2 view .LVU1787
 6241 000a 094B     		ldr	r3, .L456
 6242 000c 1B68     		ldr	r3, [r3]
 6243 000e 2360     		str	r3, [r4]
3306:FreeRTOS/tasks.c ****     }
 6244              		.loc 1 3306 9 is_stmt 1 discriminator 2 view .LVU1788
3306:FreeRTOS/tasks.c ****     }
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 237


 6245              		.loc 1 3306 36 is_stmt 0 discriminator 2 view .LVU1789
 6246 0010 084B     		ldr	r3, .L456+4
 6247 0012 1B68     		ldr	r3, [r3]
 6248 0014 6360     		str	r3, [r4, #4]
3308:FreeRTOS/tasks.c **** }
 6249              		.loc 1 3308 5 is_stmt 1 discriminator 2 view .LVU1790
 6250 0016 FFF7FEFF 		bl	vPortExitCritical
 6251              	.LVL460:
3309:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 6252              		.loc 1 3309 1 is_stmt 0 discriminator 2 view .LVU1791
 6253 001a 10BD     		pop	{r4, pc}
 6254              	.LVL461:
 6255              	.L455:
 6256              	.LCFI48:
 6257              		.cfi_def_cfa_offset 0
 6258              		.cfi_restore 4
 6259              		.cfi_restore 14
3302:FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
 6260              		.loc 1 3302 5 is_stmt 1 view .LVU1792
 6261              	.LBB313:
 6262              	.LBI313:
 194:FreeRTOS/portable/portmacro.h ****     {
 6263              		.loc 2 194 34 view .LVU1793
 6264              	.LBB314:
 196:FreeRTOS/portable/portmacro.h **** 
 6265              		.loc 2 196 9 view .LVU1794
 198:FreeRTOS/portable/portmacro.h ****         (
 6266              		.loc 2 198 9 view .LVU1795
 6267              		.syntax unified
 6268              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 6269 001c 4FF05003 			mov r3, #80												
 6270 0020 83F31188 		msr basepri, r3											
 6271 0024 BFF36F8F 		isb														
 6272 0028 BFF34F8F 		dsb														
 6273              	
 6274              	@ 0 "" 2
 6275              	.LVL462:
 6276              		.thumb
 6277              		.syntax unified
 6278              	.L452:
 198:FreeRTOS/portable/portmacro.h ****         (
 6279              		.loc 2 198 9 is_stmt 0 view .LVU1796
 6280              	.LBE314:
 6281              	.LBE313:
3302:FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
 6282              		.loc 1 3302 5 is_stmt 1 discriminator 1 view .LVU1797
3302:FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
 6283              		.loc 1 3302 5 discriminator 1 view .LVU1798
3302:FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
 6284              		.loc 1 3302 5 discriminator 1 view .LVU1799
 6285 002c FEE7     		b	.L452
 6286              	.L457:
 6287 002e 00BF     		.align	2
 6288              	.L456:
 6289 0030 00000000 		.word	.LANCHOR20
 6290 0034 00000000 		.word	.LANCHOR6
 6291              		.cfi_endproc
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 238


 6292              	.LFE42:
 6294              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 6295              		.align	1
 6296              		.global	vTaskInternalSetTimeOutState
 6297              		.syntax unified
 6298              		.thumb
 6299              		.thumb_func
 6300              		.fpu fpv4-sp-d16
 6302              	vTaskInternalSetTimeOutState:
 6303              	.LVL463:
 6304              	.LFB43:
3313:FreeRTOS/tasks.c ****     /* For internal use only as it does not use a critical section. */
 6305              		.loc 1 3313 1 view -0
 6306              		.cfi_startproc
 6307              		@ args = 0, pretend = 0, frame = 0
 6308              		@ frame_needed = 0, uses_anonymous_args = 0
 6309              		@ link register save eliminated.
3315:FreeRTOS/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
 6310              		.loc 1 3315 5 view .LVU1801
3315:FreeRTOS/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
 6311              		.loc 1 3315 31 is_stmt 0 view .LVU1802
 6312 0000 034B     		ldr	r3, .L459
 6313 0002 1B68     		ldr	r3, [r3]
 6314 0004 0360     		str	r3, [r0]
3316:FreeRTOS/tasks.c **** }
 6315              		.loc 1 3316 5 is_stmt 1 view .LVU1803
3316:FreeRTOS/tasks.c **** }
 6316              		.loc 1 3316 32 is_stmt 0 view .LVU1804
 6317 0006 034B     		ldr	r3, .L459+4
 6318 0008 1B68     		ldr	r3, [r3]
 6319 000a 4360     		str	r3, [r0, #4]
3317:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 6320              		.loc 1 3317 1 view .LVU1805
 6321 000c 7047     		bx	lr
 6322              	.L460:
 6323 000e 00BF     		.align	2
 6324              	.L459:
 6325 0010 00000000 		.word	.LANCHOR20
 6326 0014 00000000 		.word	.LANCHOR6
 6327              		.cfi_endproc
 6328              	.LFE43:
 6330              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 6331              		.align	1
 6332              		.global	xTaskCheckForTimeOut
 6333              		.syntax unified
 6334              		.thumb
 6335              		.thumb_func
 6336              		.fpu fpv4-sp-d16
 6338              	xTaskCheckForTimeOut:
 6339              	.LVL464:
 6340              	.LFB44:
3322:FreeRTOS/tasks.c ****     BaseType_t xReturn;
 6341              		.loc 1 3322 1 is_stmt 1 view -0
 6342              		.cfi_startproc
 6343              		@ args = 0, pretend = 0, frame = 0
 6344              		@ frame_needed = 0, uses_anonymous_args = 0
3322:FreeRTOS/tasks.c ****     BaseType_t xReturn;
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 239


 6345              		.loc 1 3322 1 is_stmt 0 view .LVU1807
 6346 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 6347              	.LCFI49:
 6348              		.cfi_def_cfa_offset 24
 6349              		.cfi_offset 3, -24
 6350              		.cfi_offset 4, -20
 6351              		.cfi_offset 5, -16
 6352              		.cfi_offset 6, -12
 6353              		.cfi_offset 7, -8
 6354              		.cfi_offset 14, -4
3323:FreeRTOS/tasks.c **** 
 6355              		.loc 1 3323 5 is_stmt 1 view .LVU1808
3325:FreeRTOS/tasks.c ****     configASSERT( pxTicksToWait );
 6356              		.loc 1 3325 5 view .LVU1809
 6357 0002 B8B1     		cbz	r0, .L472
 6358 0004 0C46     		mov	r4, r1
 6359 0006 0546     		mov	r5, r0
3325:FreeRTOS/tasks.c ****     configASSERT( pxTicksToWait );
 6360              		.loc 1 3325 30 discriminator 2 view .LVU1810
3326:FreeRTOS/tasks.c **** 
 6361              		.loc 1 3326 5 discriminator 2 view .LVU1811
 6362 0008 E9B1     		cbz	r1, .L473
3326:FreeRTOS/tasks.c **** 
 6363              		.loc 1 3326 34 discriminator 2 view .LVU1812
3328:FreeRTOS/tasks.c ****     {
 6364              		.loc 1 3328 5 discriminator 2 view .LVU1813
 6365 000a FFF7FEFF 		bl	vPortEnterCritical
 6366              	.LVL465:
 6367              	.LBB315:
3331:FreeRTOS/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 6368              		.loc 1 3331 9 discriminator 2 view .LVU1814
3331:FreeRTOS/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 6369              		.loc 1 3331 26 is_stmt 0 discriminator 2 view .LVU1815
 6370 000e 224B     		ldr	r3, .L475
 6371 0010 1968     		ldr	r1, [r3]
 6372              	.LVL466:
3332:FreeRTOS/tasks.c **** 
 6373              		.loc 1 3332 9 is_stmt 1 discriminator 2 view .LVU1816
3332:FreeRTOS/tasks.c **** 
 6374              		.loc 1 3332 68 is_stmt 0 discriminator 2 view .LVU1817
 6375 0012 6B68     		ldr	r3, [r5, #4]
3332:FreeRTOS/tasks.c **** 
 6376              		.loc 1 3332 26 discriminator 2 view .LVU1818
 6377 0014 C81A     		subs	r0, r1, r3
 6378              	.LVL467:
3335:FreeRTOS/tasks.c ****             {
 6379              		.loc 1 3335 13 is_stmt 1 discriminator 2 view .LVU1819
3335:FreeRTOS/tasks.c ****             {
 6380              		.loc 1 3335 29 is_stmt 0 discriminator 2 view .LVU1820
 6381 0016 214A     		ldr	r2, .L475+4
 6382 0018 1268     		ldr	r2, [r2]
 6383 001a 92F85620 		ldrb	r2, [r2, #86]	@ zero_extendqisi2
3335:FreeRTOS/tasks.c ****             {
 6384              		.loc 1 3335 15 discriminator 2 view .LVU1821
 6385 001e DAB1     		cbz	r2, .L466
3339:FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
 6386              		.loc 1 3339 17 is_stmt 1 view .LVU1822
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 240


3339:FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
 6387              		.loc 1 3339 29 is_stmt 0 view .LVU1823
 6388 0020 1E4B     		ldr	r3, .L475+4
 6389 0022 1B68     		ldr	r3, [r3]
3339:FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
 6390              		.loc 1 3339 46 view .LVU1824
 6391 0024 0022     		movs	r2, #0
 6392 0026 83F85620 		strb	r2, [r3, #86]
3340:FreeRTOS/tasks.c ****             }
 6393              		.loc 1 3340 17 is_stmt 1 view .LVU1825
 6394              	.LVL468:
3340:FreeRTOS/tasks.c ****             }
 6395              		.loc 1 3340 25 is_stmt 0 view .LVU1826
 6396 002a 0124     		movs	r4, #1
 6397              	.LVL469:
 6398              	.L467:
3340:FreeRTOS/tasks.c ****             }
 6399              		.loc 1 3340 25 view .LVU1827
 6400              	.LBE315:
3379:FreeRTOS/tasks.c **** 
 6401              		.loc 1 3379 5 is_stmt 1 view .LVU1828
 6402 002c FFF7FEFF 		bl	vPortExitCritical
 6403              	.LVL470:
3381:FreeRTOS/tasks.c **** }
 6404              		.loc 1 3381 5 view .LVU1829
3382:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 6405              		.loc 1 3382 1 is_stmt 0 view .LVU1830
 6406 0030 2046     		mov	r0, r4
 6407 0032 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 6408              	.LVL471:
 6409              	.L472:
3325:FreeRTOS/tasks.c ****     configASSERT( pxTicksToWait );
 6410              		.loc 1 3325 5 is_stmt 1 view .LVU1831
 6411              	.LBB316:
 6412              	.LBI316:
 194:FreeRTOS/portable/portmacro.h ****     {
 6413              		.loc 2 194 34 view .LVU1832
 6414              	.LBB317:
 196:FreeRTOS/portable/portmacro.h **** 
 6415              		.loc 2 196 9 view .LVU1833
 198:FreeRTOS/portable/portmacro.h ****         (
 6416              		.loc 2 198 9 view .LVU1834
 6417              		.syntax unified
 6418              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 6419 0034 4FF05003 			mov r3, #80												
 6420 0038 83F31188 		msr basepri, r3											
 6421 003c BFF36F8F 		isb														
 6422 0040 BFF34F8F 		dsb														
 6423              	
 6424              	@ 0 "" 2
 6425              	.LVL472:
 6426              		.thumb
 6427              		.syntax unified
 6428              	.L463:
 198:FreeRTOS/portable/portmacro.h ****         (
 6429              		.loc 2 198 9 is_stmt 0 view .LVU1835
 6430              	.LBE317:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 241


 6431              	.LBE316:
3325:FreeRTOS/tasks.c ****     configASSERT( pxTicksToWait );
 6432              		.loc 1 3325 5 is_stmt 1 discriminator 1 view .LVU1836
3325:FreeRTOS/tasks.c ****     configASSERT( pxTicksToWait );
 6433              		.loc 1 3325 5 discriminator 1 view .LVU1837
3325:FreeRTOS/tasks.c ****     configASSERT( pxTicksToWait );
 6434              		.loc 1 3325 5 discriminator 1 view .LVU1838
 6435 0044 FEE7     		b	.L463
 6436              	.L473:
3326:FreeRTOS/tasks.c **** 
 6437              		.loc 1 3326 5 view .LVU1839
 6438              	.LBB318:
 6439              	.LBI318:
 194:FreeRTOS/portable/portmacro.h ****     {
 6440              		.loc 2 194 34 view .LVU1840
 6441              	.LBB319:
 196:FreeRTOS/portable/portmacro.h **** 
 6442              		.loc 2 196 9 view .LVU1841
 198:FreeRTOS/portable/portmacro.h ****         (
 6443              		.loc 2 198 9 view .LVU1842
 6444              		.syntax unified
 6445              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 6446 0046 4FF05003 			mov r3, #80												
 6447 004a 83F31188 		msr basepri, r3											
 6448 004e BFF36F8F 		isb														
 6449 0052 BFF34F8F 		dsb														
 6450              	
 6451              	@ 0 "" 2
 6452              	.LVL473:
 6453              		.thumb
 6454              		.syntax unified
 6455              	.L465:
 198:FreeRTOS/portable/portmacro.h ****         (
 6456              		.loc 2 198 9 is_stmt 0 view .LVU1843
 6457              	.LBE319:
 6458              	.LBE318:
3326:FreeRTOS/tasks.c **** 
 6459              		.loc 1 3326 5 is_stmt 1 discriminator 2 view .LVU1844
3326:FreeRTOS/tasks.c **** 
 6460              		.loc 1 3326 5 discriminator 2 view .LVU1845
3326:FreeRTOS/tasks.c **** 
 6461              		.loc 1 3326 5 discriminator 2 view .LVU1846
 6462 0056 FEE7     		b	.L465
 6463              	.LVL474:
 6464              	.L466:
 6465              	.LBB320:
3346:FreeRTOS/tasks.c ****             {
 6466              		.loc 1 3346 13 view .LVU1847
3346:FreeRTOS/tasks.c ****             {
 6467              		.loc 1 3346 17 is_stmt 0 view .LVU1848
 6468 0058 2268     		ldr	r2, [r4]
3346:FreeRTOS/tasks.c ****             {
 6469              		.loc 1 3346 15 view .LVU1849
 6470 005a B2F1FF3F 		cmp	r2, #-1
 6471 005e 18D0     		beq	.L470
3356:FreeRTOS/tasks.c ****         {
 6472              		.loc 1 3356 9 is_stmt 1 view .LVU1850
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 242


3356:FreeRTOS/tasks.c ****         {
 6473              		.loc 1 3356 43 is_stmt 0 view .LVU1851
 6474 0060 2F68     		ldr	r7, [r5]
3356:FreeRTOS/tasks.c ****         {
 6475              		.loc 1 3356 31 view .LVU1852
 6476 0062 0F4E     		ldr	r6, .L475+8
 6477 0064 3668     		ldr	r6, [r6]
3356:FreeRTOS/tasks.c ****         {
 6478              		.loc 1 3356 11 view .LVU1853
 6479 0066 B742     		cmp	r7, r6
 6480 0068 05D0     		beq	.L468
3356:FreeRTOS/tasks.c ****         {
 6481              		.loc 1 3356 62 discriminator 1 view .LVU1854
 6482 006a 8B42     		cmp	r3, r1
 6483 006c 03D8     		bhi	.L468
3363:FreeRTOS/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
 6484              		.loc 1 3363 13 is_stmt 1 view .LVU1855
 6485              	.LVL475:
3364:FreeRTOS/tasks.c ****         }
 6486              		.loc 1 3364 13 view .LVU1856
3364:FreeRTOS/tasks.c ****         }
 6487              		.loc 1 3364 28 is_stmt 0 view .LVU1857
 6488 006e 0023     		movs	r3, #0
 6489 0070 2360     		str	r3, [r4]
3363:FreeRTOS/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
 6490              		.loc 1 3363 21 view .LVU1858
 6491 0072 0124     		movs	r4, #1
 6492              	.LVL476:
3364:FreeRTOS/tasks.c ****         }
 6493              		.loc 1 3364 28 view .LVU1859
 6494 0074 DAE7     		b	.L467
 6495              	.LVL477:
 6496              	.L468:
3366:FreeRTOS/tasks.c ****         {
 6497              		.loc 1 3366 14 is_stmt 1 view .LVU1860
3366:FreeRTOS/tasks.c ****         {
 6498              		.loc 1 3366 16 is_stmt 0 view .LVU1861
 6499 0076 8242     		cmp	r2, r0
 6500 0078 03D8     		bhi	.L474
3375:FreeRTOS/tasks.c ****             xReturn = pdTRUE;
 6501              		.loc 1 3375 13 is_stmt 1 view .LVU1862
3375:FreeRTOS/tasks.c ****             xReturn = pdTRUE;
 6502              		.loc 1 3375 28 is_stmt 0 view .LVU1863
 6503 007a 0023     		movs	r3, #0
 6504 007c 2360     		str	r3, [r4]
3376:FreeRTOS/tasks.c ****         }
 6505              		.loc 1 3376 13 is_stmt 1 view .LVU1864
 6506              	.LVL478:
3376:FreeRTOS/tasks.c ****         }
 6507              		.loc 1 3376 21 is_stmt 0 view .LVU1865
 6508 007e 0124     		movs	r4, #1
 6509              	.LVL479:
3376:FreeRTOS/tasks.c ****         }
 6510              		.loc 1 3376 21 view .LVU1866
 6511 0080 D4E7     		b	.L467
 6512              	.LVL480:
 6513              	.L474:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 243


3369:FreeRTOS/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
 6514              		.loc 1 3369 13 is_stmt 1 view .LVU1867
3369:FreeRTOS/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
 6515              		.loc 1 3369 28 is_stmt 0 view .LVU1868
 6516 0082 5B1A     		subs	r3, r3, r1
 6517 0084 1344     		add	r3, r3, r2
 6518 0086 2360     		str	r3, [r4]
3370:FreeRTOS/tasks.c ****             xReturn = pdFALSE;
 6519              		.loc 1 3370 13 is_stmt 1 view .LVU1869
 6520 0088 2846     		mov	r0, r5
 6521              	.LVL481:
3370:FreeRTOS/tasks.c ****             xReturn = pdFALSE;
 6522              		.loc 1 3370 13 is_stmt 0 view .LVU1870
 6523 008a FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 6524              	.LVL482:
3371:FreeRTOS/tasks.c ****         }
 6525              		.loc 1 3371 13 is_stmt 1 view .LVU1871
3371:FreeRTOS/tasks.c ****         }
 6526              		.loc 1 3371 21 is_stmt 0 view .LVU1872
 6527 008e 0024     		movs	r4, #0
 6528              	.LVL483:
3371:FreeRTOS/tasks.c ****         }
 6529              		.loc 1 3371 21 view .LVU1873
 6530 0090 CCE7     		b	.L467
 6531              	.LVL484:
 6532              	.L470:
3351:FreeRTOS/tasks.c ****             }
 6533              		.loc 1 3351 25 view .LVU1874
 6534 0092 0024     		movs	r4, #0
 6535              	.LVL485:
3351:FreeRTOS/tasks.c ****             }
 6536              		.loc 1 3351 25 view .LVU1875
 6537 0094 CAE7     		b	.L467
 6538              	.L476:
 6539 0096 00BF     		.align	2
 6540              	.L475:
 6541 0098 00000000 		.word	.LANCHOR6
 6542 009c 00000000 		.word	.LANCHOR3
 6543 00a0 00000000 		.word	.LANCHOR20
 6544              	.LBE320:
 6545              		.cfi_endproc
 6546              	.LFE44:
 6548              		.section	.text.vTaskMissedYield,"ax",%progbits
 6549              		.align	1
 6550              		.global	vTaskMissedYield
 6551              		.syntax unified
 6552              		.thumb
 6553              		.thumb_func
 6554              		.fpu fpv4-sp-d16
 6556              	vTaskMissedYield:
 6557              	.LFB45:
3386:FreeRTOS/tasks.c ****     xYieldPending = pdTRUE;
 6558              		.loc 1 3386 1 is_stmt 1 view -0
 6559              		.cfi_startproc
 6560              		@ args = 0, pretend = 0, frame = 0
 6561              		@ frame_needed = 0, uses_anonymous_args = 0
 6562              		@ link register save eliminated.
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 244


3387:FreeRTOS/tasks.c **** }
 6563              		.loc 1 3387 5 view .LVU1877
3387:FreeRTOS/tasks.c **** }
 6564              		.loc 1 3387 19 is_stmt 0 view .LVU1878
 6565 0000 014B     		ldr	r3, .L478
 6566 0002 0122     		movs	r2, #1
 6567 0004 1A60     		str	r2, [r3]
3388:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 6568              		.loc 1 3388 1 view .LVU1879
 6569 0006 7047     		bx	lr
 6570              	.L479:
 6571              		.align	2
 6572              	.L478:
 6573 0008 00000000 		.word	.LANCHOR17
 6574              		.cfi_endproc
 6575              	.LFE45:
 6577              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 6578              		.align	1
 6579              		.global	uxTaskGetTaskNumber
 6580              		.syntax unified
 6581              		.thumb
 6582              		.thumb_func
 6583              		.fpu fpv4-sp-d16
 6585              	uxTaskGetTaskNumber:
 6586              	.LVL486:
 6587              	.LFB46:
3394:FreeRTOS/tasks.c ****         UBaseType_t uxReturn;
 6588              		.loc 1 3394 5 is_stmt 1 view -0
 6589              		.cfi_startproc
 6590              		@ args = 0, pretend = 0, frame = 0
 6591              		@ frame_needed = 0, uses_anonymous_args = 0
 6592              		@ link register save eliminated.
3395:FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
 6593              		.loc 1 3395 9 view .LVU1881
3396:FreeRTOS/tasks.c **** 
 6594              		.loc 1 3396 9 view .LVU1882
3398:FreeRTOS/tasks.c ****         {
 6595              		.loc 1 3398 9 view .LVU1883
3398:FreeRTOS/tasks.c ****         {
 6596              		.loc 1 3398 11 is_stmt 0 view .LVU1884
 6597 0000 08B1     		cbz	r0, .L482
3400:FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxTaskNumber;
 6598              		.loc 1 3400 13 is_stmt 1 view .LVU1885
 6599              	.LVL487:
3401:FreeRTOS/tasks.c ****         }
 6600              		.loc 1 3401 13 view .LVU1886
3401:FreeRTOS/tasks.c ****         }
 6601              		.loc 1 3401 22 is_stmt 0 view .LVU1887
 6602 0002 406C     		ldr	r0, [r0, #68]
 6603              	.LVL488:
3401:FreeRTOS/tasks.c ****         }
 6604              		.loc 1 3401 22 view .LVU1888
 6605 0004 7047     		bx	lr
 6606              	.LVL489:
 6607              	.L482:
3405:FreeRTOS/tasks.c ****         }
 6608              		.loc 1 3405 22 view .LVU1889
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 245


 6609 0006 0020     		movs	r0, #0
 6610              	.LVL490:
3408:FreeRTOS/tasks.c ****     }
 6611              		.loc 1 3408 9 is_stmt 1 view .LVU1890
3409:FreeRTOS/tasks.c **** 
 6612              		.loc 1 3409 5 is_stmt 0 view .LVU1891
 6613 0008 7047     		bx	lr
 6614              		.cfi_endproc
 6615              	.LFE46:
 6617              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 6618              		.align	1
 6619              		.global	vTaskSetTaskNumber
 6620              		.syntax unified
 6621              		.thumb
 6622              		.thumb_func
 6623              		.fpu fpv4-sp-d16
 6625              	vTaskSetTaskNumber:
 6626              	.LVL491:
 6627              	.LFB47:
3418:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 6628              		.loc 1 3418 5 is_stmt 1 view -0
 6629              		.cfi_startproc
 6630              		@ args = 0, pretend = 0, frame = 0
 6631              		@ frame_needed = 0, uses_anonymous_args = 0
 6632              		@ link register save eliminated.
3419:FreeRTOS/tasks.c **** 
 6633              		.loc 1 3419 9 view .LVU1893
3421:FreeRTOS/tasks.c ****         {
 6634              		.loc 1 3421 9 view .LVU1894
3421:FreeRTOS/tasks.c ****         {
 6635              		.loc 1 3421 11 is_stmt 0 view .LVU1895
 6636 0000 00B1     		cbz	r0, .L483
3423:FreeRTOS/tasks.c ****             pxTCB->uxTaskNumber = uxHandle;
 6637              		.loc 1 3423 13 is_stmt 1 view .LVU1896
 6638              	.LVL492:
3424:FreeRTOS/tasks.c ****         }
 6639              		.loc 1 3424 13 view .LVU1897
3424:FreeRTOS/tasks.c ****         }
 6640              		.loc 1 3424 33 is_stmt 0 view .LVU1898
 6641 0002 4164     		str	r1, [r0, #68]
 6642              	.LVL493:
 6643              	.L483:
3426:FreeRTOS/tasks.c **** 
 6644              		.loc 1 3426 5 view .LVU1899
 6645 0004 7047     		bx	lr
 6646              		.cfi_endproc
 6647              	.LFE47:
 6649              		.section	.text.eTaskConfirmSleepModeStatus,"ax",%progbits
 6650              		.align	1
 6651              		.global	eTaskConfirmSleepModeStatus
 6652              		.syntax unified
 6653              		.thumb
 6654              		.thumb_func
 6655              		.fpu fpv4-sp-d16
 6657              	eTaskConfirmSleepModeStatus:
 6658              	.LFB49:
3561:FreeRTOS/tasks.c ****         /* The idle task exists in addition to the application tasks. */
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 246


 6659              		.loc 1 3561 5 is_stmt 1 view -0
 6660              		.cfi_startproc
 6661              		@ args = 0, pretend = 0, frame = 0
 6662              		@ frame_needed = 0, uses_anonymous_args = 0
 6663              		@ link register save eliminated.
3563:FreeRTOS/tasks.c ****         eSleepModeStatus eReturn = eStandardSleep;
 6664              		.loc 1 3563 9 view .LVU1901
 6665              	.LVL494:
3564:FreeRTOS/tasks.c **** 
 6666              		.loc 1 3564 9 view .LVU1902
3568:FreeRTOS/tasks.c ****         {
 6667              		.loc 1 3568 9 view .LVU1903
3568:FreeRTOS/tasks.c ****         {
 6668              		.loc 1 3568 13 is_stmt 0 view .LVU1904
 6669 0000 0C4B     		ldr	r3, .L491
 6670 0002 1B68     		ldr	r3, [r3]
3568:FreeRTOS/tasks.c ****         {
 6671              		.loc 1 3568 11 view .LVU1905
 6672 0004 73B9     		cbnz	r3, .L487
3573:FreeRTOS/tasks.c ****         {
 6673              		.loc 1 3573 14 is_stmt 1 view .LVU1906
3573:FreeRTOS/tasks.c ****         {
 6674              		.loc 1 3573 32 is_stmt 0 view .LVU1907
 6675 0006 0C4B     		ldr	r3, .L491+4
 6676 0008 1B68     		ldr	r3, [r3]
3573:FreeRTOS/tasks.c ****         {
 6677              		.loc 1 3573 16 view .LVU1908
 6678 000a 6BB9     		cbnz	r3, .L488
3578:FreeRTOS/tasks.c ****         {
 6679              		.loc 1 3578 14 is_stmt 1 view .LVU1909
3578:FreeRTOS/tasks.c ****         {
 6680              		.loc 1 3578 31 is_stmt 0 view .LVU1910
 6681 000c 0B4B     		ldr	r3, .L491+8
 6682 000e 1B68     		ldr	r3, [r3]
3578:FreeRTOS/tasks.c ****         {
 6683              		.loc 1 3578 16 view .LVU1911
 6684 0010 63B9     		cbnz	r3, .L489
3590:FreeRTOS/tasks.c ****             {
 6685              		.loc 1 3590 13 is_stmt 1 view .LVU1912
3590:FreeRTOS/tasks.c ****             {
 6686              		.loc 1 3590 17 is_stmt 0 view .LVU1913
 6687 0012 0B4B     		ldr	r3, .L491+12
 6688 0014 1A68     		ldr	r2, [r3]
3590:FreeRTOS/tasks.c ****             {
 6689              		.loc 1 3590 92 view .LVU1914
 6690 0016 0B4B     		ldr	r3, .L491+16
 6691 0018 1B68     		ldr	r3, [r3]
 6692 001a 013B     		subs	r3, r3, #1
3590:FreeRTOS/tasks.c ****             {
 6693              		.loc 1 3590 15 view .LVU1915
 6694 001c 9A42     		cmp	r2, r3
 6695 001e 07D0     		beq	.L490
3564:FreeRTOS/tasks.c **** 
 6696              		.loc 1 3564 26 view .LVU1916
 6697 0020 0120     		movs	r0, #1
 6698 0022 7047     		bx	lr
 6699              	.L487:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 247


3571:FreeRTOS/tasks.c ****         }
 6700              		.loc 1 3571 21 view .LVU1917
 6701 0024 0020     		movs	r0, #0
 6702 0026 7047     		bx	lr
 6703              	.L488:
3576:FreeRTOS/tasks.c ****         }
 6704              		.loc 1 3576 21 view .LVU1918
 6705 0028 0020     		movs	r0, #0
 6706 002a 7047     		bx	lr
 6707              	.L489:
3582:FreeRTOS/tasks.c ****         }
 6708              		.loc 1 3582 21 view .LVU1919
 6709 002c 0020     		movs	r0, #0
 6710 002e 7047     		bx	lr
 6711              	.L490:
3592:FreeRTOS/tasks.c ****             }
 6712              		.loc 1 3592 25 view .LVU1920
 6713 0030 0220     		movs	r0, #2
 6714              	.LVL495:
3596:FreeRTOS/tasks.c ****             }
 6715              		.loc 1 3596 41 is_stmt 1 view .LVU1921
3600:FreeRTOS/tasks.c ****     }
 6716              		.loc 1 3600 9 view .LVU1922
3601:FreeRTOS/tasks.c **** 
 6717              		.loc 1 3601 5 is_stmt 0 view .LVU1923
 6718 0032 7047     		bx	lr
 6719              	.L492:
 6720              		.align	2
 6721              	.L491:
 6722 0034 00000000 		.word	.LANCHOR1
 6723 0038 00000000 		.word	.LANCHOR17
 6724 003c 00000000 		.word	.LANCHOR21
 6725 0040 00000000 		.word	.LANCHOR0
 6726 0044 00000000 		.word	.LANCHOR12
 6727              		.cfi_endproc
 6728              	.LFE49:
 6730              		.section	.text.vTaskGetInfo,"ax",%progbits
 6731              		.align	1
 6732              		.global	vTaskGetInfo
 6733              		.syntax unified
 6734              		.thumb
 6735              		.thumb_func
 6736              		.fpu fpv4-sp-d16
 6738              	vTaskGetInfo:
 6739              	.LVL496:
 6740              	.LFB52:
3732:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 6741              		.loc 1 3732 5 is_stmt 1 view -0
 6742              		.cfi_startproc
 6743              		@ args = 0, pretend = 0, frame = 0
 6744              		@ frame_needed = 0, uses_anonymous_args = 0
3732:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 6745              		.loc 1 3732 5 is_stmt 0 view .LVU1925
 6746 0000 70B5     		push	{r4, r5, r6, lr}
 6747              	.LCFI50:
 6748              		.cfi_def_cfa_offset 16
 6749              		.cfi_offset 4, -16
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 248


 6750              		.cfi_offset 5, -12
 6751              		.cfi_offset 6, -8
 6752              		.cfi_offset 14, -4
 6753 0002 0C46     		mov	r4, r1
 6754 0004 1646     		mov	r6, r2
3733:FreeRTOS/tasks.c **** 
 6755              		.loc 1 3733 9 is_stmt 1 view .LVU1926
3736:FreeRTOS/tasks.c **** 
 6756              		.loc 1 3736 9 view .LVU1927
3736:FreeRTOS/tasks.c **** 
 6757              		.loc 1 3736 17 is_stmt 0 view .LVU1928
 6758 0006 0546     		mov	r5, r0
 6759 0008 D0B1     		cbz	r0, .L502
 6760              	.LVL497:
 6761              	.L494:
3738:FreeRTOS/tasks.c ****         pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 6762              		.loc 1 3738 9 is_stmt 1 discriminator 4 view .LVU1929
3738:FreeRTOS/tasks.c ****         pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 6763              		.loc 1 3738 31 is_stmt 0 discriminator 4 view .LVU1930
 6764 000a 2560     		str	r5, [r4]
3739:FreeRTOS/tasks.c ****         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 6765              		.loc 1 3739 9 is_stmt 1 discriminator 4 view .LVU1931
3739:FreeRTOS/tasks.c ****         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 6766              		.loc 1 3739 53 is_stmt 0 discriminator 4 view .LVU1932
 6767 000c 05F13402 		add	r2, r5, #52
3739:FreeRTOS/tasks.c ****         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 6768              		.loc 1 3739 34 discriminator 4 view .LVU1933
 6769 0010 6260     		str	r2, [r4, #4]
3740:FreeRTOS/tasks.c ****         pxTaskStatus->pxStackBase = pxTCB->pxStack;
 6770              		.loc 1 3740 9 is_stmt 1 discriminator 4 view .LVU1934
3740:FreeRTOS/tasks.c ****         pxTaskStatus->pxStackBase = pxTCB->pxStack;
 6771              		.loc 1 3740 48 is_stmt 0 discriminator 4 view .LVU1935
 6772 0012 EA6A     		ldr	r2, [r5, #44]
3740:FreeRTOS/tasks.c ****         pxTaskStatus->pxStackBase = pxTCB->pxStack;
 6773              		.loc 1 3740 41 discriminator 4 view .LVU1936
 6774 0014 2261     		str	r2, [r4, #16]
3741:FreeRTOS/tasks.c ****         pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 6775              		.loc 1 3741 9 is_stmt 1 discriminator 4 view .LVU1937
3741:FreeRTOS/tasks.c ****         pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 6776              		.loc 1 3741 42 is_stmt 0 discriminator 4 view .LVU1938
 6777 0016 2A6B     		ldr	r2, [r5, #48]
3741:FreeRTOS/tasks.c ****         pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 6778              		.loc 1 3741 35 discriminator 4 view .LVU1939
 6779 0018 E261     		str	r2, [r4, #28]
3742:FreeRTOS/tasks.c **** 
 6780              		.loc 1 3742 9 is_stmt 1 discriminator 4 view .LVU1940
3742:FreeRTOS/tasks.c **** 
 6781              		.loc 1 3742 42 is_stmt 0 discriminator 4 view .LVU1941
 6782 001a 2A6C     		ldr	r2, [r5, #64]
3742:FreeRTOS/tasks.c **** 
 6783              		.loc 1 3742 35 discriminator 4 view .LVU1942
 6784 001c A260     		str	r2, [r4, #8]
3746:FreeRTOS/tasks.c ****             }
 6785              		.loc 1 3746 17 is_stmt 1 discriminator 4 view .LVU1943
3746:FreeRTOS/tasks.c ****             }
 6786              		.loc 1 3746 53 is_stmt 0 discriminator 4 view .LVU1944
 6787 001e AA6C     		ldr	r2, [r5, #72]
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 249


3746:FreeRTOS/tasks.c ****             }
 6788              		.loc 1 3746 46 discriminator 4 view .LVU1945
 6789 0020 6261     		str	r2, [r4, #20]
3760:FreeRTOS/tasks.c ****             }
 6790              		.loc 1 3760 17 is_stmt 1 discriminator 4 view .LVU1946
3760:FreeRTOS/tasks.c ****             }
 6791              		.loc 1 3760 48 is_stmt 0 discriminator 4 view .LVU1947
 6792 0022 0022     		movs	r2, #0
 6793 0024 A261     		str	r2, [r4, #24]
3767:FreeRTOS/tasks.c ****         {
 6794              		.loc 1 3767 9 is_stmt 1 discriminator 4 view .LVU1948
3767:FreeRTOS/tasks.c ****         {
 6795              		.loc 1 3767 11 is_stmt 0 discriminator 4 view .LVU1949
 6796 0026 052B     		cmp	r3, #5
 6797 0028 19D0     		beq	.L495
3769:FreeRTOS/tasks.c ****             {
 6798              		.loc 1 3769 13 is_stmt 1 view .LVU1950
3769:FreeRTOS/tasks.c ****             {
 6799              		.loc 1 3769 23 is_stmt 0 view .LVU1951
 6800 002a 124A     		ldr	r2, .L506
 6801 002c 1268     		ldr	r2, [r2]
3769:FreeRTOS/tasks.c ****             {
 6802              		.loc 1 3769 15 view .LVU1952
 6803 002e AA42     		cmp	r2, r5
 6804 0030 09D0     		beq	.L503
3775:FreeRTOS/tasks.c **** 
 6805              		.loc 1 3775 17 is_stmt 1 view .LVU1953
3775:FreeRTOS/tasks.c **** 
 6806              		.loc 1 3775 45 is_stmt 0 view .LVU1954
 6807 0032 2373     		strb	r3, [r4, #12]
3782:FreeRTOS/tasks.c ****                         {
 6808              		.loc 1 3782 25 is_stmt 1 view .LVU1955
3782:FreeRTOS/tasks.c ****                         {
 6809              		.loc 1 3782 27 is_stmt 0 view .LVU1956
 6810 0034 032B     		cmp	r3, #3
 6811 0036 09D0     		beq	.L504
 6812              	.LVL498:
 6813              	.L497:
3804:FreeRTOS/tasks.c ****         {
 6814              		.loc 1 3804 9 is_stmt 1 view .LVU1957
3804:FreeRTOS/tasks.c ****         {
 6815              		.loc 1 3804 11 is_stmt 0 view .LVU1958
 6816 0038 B6B9     		cbnz	r6, .L505
3818:FreeRTOS/tasks.c ****         }
 6817              		.loc 1 3818 13 is_stmt 1 view .LVU1959
3818:FreeRTOS/tasks.c ****         }
 6818              		.loc 1 3818 48 is_stmt 0 view .LVU1960
 6819 003a 0023     		movs	r3, #0
 6820 003c 2384     		strh	r3, [r4, #32]	@ movhi
 6821              	.L493:
3820:FreeRTOS/tasks.c **** 
 6822              		.loc 1 3820 5 view .LVU1961
 6823 003e 70BD     		pop	{r4, r5, r6, pc}
 6824              	.LVL499:
 6825              	.L502:
3736:FreeRTOS/tasks.c **** 
 6826              		.loc 1 3736 17 discriminator 1 view .LVU1962
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 250


 6827 0040 0C4A     		ldr	r2, .L506
 6828              	.LVL500:
3736:FreeRTOS/tasks.c **** 
 6829              		.loc 1 3736 17 discriminator 1 view .LVU1963
 6830 0042 1568     		ldr	r5, [r2]
 6831              	.LVL501:
3736:FreeRTOS/tasks.c **** 
 6832              		.loc 1 3736 17 discriminator 1 view .LVU1964
 6833 0044 E1E7     		b	.L494
 6834              	.LVL502:
 6835              	.L503:
3771:FreeRTOS/tasks.c ****             }
 6836              		.loc 1 3771 17 is_stmt 1 view .LVU1965
3771:FreeRTOS/tasks.c ****             }
 6837              		.loc 1 3771 45 is_stmt 0 view .LVU1966
 6838 0046 0023     		movs	r3, #0
 6839              	.LVL503:
3771:FreeRTOS/tasks.c ****             }
 6840              		.loc 1 3771 45 view .LVU1967
 6841 0048 2373     		strb	r3, [r4, #12]
 6842 004a F5E7     		b	.L497
 6843              	.LVL504:
 6844              	.L504:
3784:FreeRTOS/tasks.c ****                             {
 6845              		.loc 1 3784 29 is_stmt 1 view .LVU1968
 6846 004c FFF7FEFF 		bl	vTaskSuspendAll
 6847              	.LVL505:
3786:FreeRTOS/tasks.c ****                                 {
 6848              		.loc 1 3786 33 view .LVU1969
3786:FreeRTOS/tasks.c ****                                 {
 6849              		.loc 1 3786 37 is_stmt 0 view .LVU1970
 6850 0050 AB6A     		ldr	r3, [r5, #40]
3786:FreeRTOS/tasks.c ****                                 {
 6851              		.loc 1 3786 35 view .LVU1971
 6852 0052 0BB1     		cbz	r3, .L498
3788:FreeRTOS/tasks.c ****                                 }
 6853              		.loc 1 3788 37 is_stmt 1 view .LVU1972
3788:FreeRTOS/tasks.c ****                                 }
 6854              		.loc 1 3788 65 is_stmt 0 view .LVU1973
 6855 0054 0223     		movs	r3, #2
 6856 0056 2373     		strb	r3, [r4, #12]
 6857              	.L498:
3791:FreeRTOS/tasks.c ****                         }
 6858              		.loc 1 3791 29 is_stmt 1 view .LVU1974
3791:FreeRTOS/tasks.c ****                         }
 6859              		.loc 1 3791 38 is_stmt 0 view .LVU1975
 6860 0058 FFF7FEFF 		bl	xTaskResumeAll
 6861              	.LVL506:
 6862 005c ECE7     		b	.L497
 6863              	.LVL507:
 6864              	.L495:
3799:FreeRTOS/tasks.c ****         }
 6865              		.loc 1 3799 13 is_stmt 1 view .LVU1976
3799:FreeRTOS/tasks.c ****         }
 6866              		.loc 1 3799 43 is_stmt 0 view .LVU1977
 6867 005e 2846     		mov	r0, r5
 6868 0060 FFF7FEFF 		bl	eTaskGetState
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 251


 6869              	.LVL508:
3799:FreeRTOS/tasks.c ****         }
 6870              		.loc 1 3799 41 view .LVU1978
 6871 0064 2073     		strb	r0, [r4, #12]
 6872 0066 E7E7     		b	.L497
 6873              	.L505:
3812:FreeRTOS/tasks.c ****                 }
 6874              		.loc 1 3812 21 is_stmt 1 view .LVU1979
3812:FreeRTOS/tasks.c ****                 }
 6875              		.loc 1 3812 58 is_stmt 0 view .LVU1980
 6876 0068 286B     		ldr	r0, [r5, #48]
 6877 006a FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 6878              	.LVL509:
3812:FreeRTOS/tasks.c ****                 }
 6879              		.loc 1 3812 56 view .LVU1981
 6880 006e 2084     		strh	r0, [r4, #32]	@ movhi
 6881 0070 E5E7     		b	.L493
 6882              	.L507:
 6883 0072 00BF     		.align	2
 6884              	.L506:
 6885 0074 00000000 		.word	.LANCHOR3
 6886              		.cfi_endproc
 6887              	.LFE52:
 6889              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 6890              		.align	1
 6891              		.syntax unified
 6892              		.thumb
 6893              		.thumb_func
 6894              		.fpu fpv4-sp-d16
 6896              	prvListTasksWithinSingleList:
 6897              	.LVL510:
 6898              	.LFB53:
3830:FreeRTOS/tasks.c ****         configLIST_VOLATILE TCB_t * pxNextTCB, * pxFirstTCB;
 6899              		.loc 1 3830 5 is_stmt 1 view -0
 6900              		.cfi_startproc
 6901              		@ args = 0, pretend = 0, frame = 0
 6902              		@ frame_needed = 0, uses_anonymous_args = 0
3830:FreeRTOS/tasks.c ****         configLIST_VOLATILE TCB_t * pxNextTCB, * pxFirstTCB;
 6903              		.loc 1 3830 5 is_stmt 0 view .LVU1983
 6904 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 6905              	.LCFI51:
 6906              		.cfi_def_cfa_offset 32
 6907              		.cfi_offset 4, -32
 6908              		.cfi_offset 5, -28
 6909              		.cfi_offset 6, -24
 6910              		.cfi_offset 7, -20
 6911              		.cfi_offset 8, -16
 6912              		.cfi_offset 9, -12
 6913              		.cfi_offset 10, -8
 6914              		.cfi_offset 14, -4
3831:FreeRTOS/tasks.c ****         UBaseType_t uxTask = 0;
 6915              		.loc 1 3831 29 is_stmt 1 view .LVU1984
3832:FreeRTOS/tasks.c **** 
 6916              		.loc 1 3832 9 view .LVU1985
 6917              	.LVL511:
3834:FreeRTOS/tasks.c ****         {
 6918              		.loc 1 3834 9 view .LVU1986
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 252


3834:FreeRTOS/tasks.c ****         {
 6919              		.loc 1 3834 13 is_stmt 0 view .LVU1987
 6920 0004 0C68     		ldr	r4, [r1]
3834:FreeRTOS/tasks.c ****         {
 6921              		.loc 1 3834 11 view .LVU1988
 6922 0006 3CB3     		cbz	r4, .L508
 6923 0008 0746     		mov	r7, r0
 6924 000a 0D46     		mov	r5, r1
 6925 000c 9046     		mov	r8, r2
 6926              	.LBB321:
3836:FreeRTOS/tasks.c **** 
 6927              		.loc 1 3836 13 is_stmt 1 view .LVU1989
 6928              	.LVL512:
3836:FreeRTOS/tasks.c **** 
 6929              		.loc 1 3836 13 view .LVU1990
 6930 000e 4B68     		ldr	r3, [r1, #4]
 6931 0010 5B68     		ldr	r3, [r3, #4]
 6932 0012 4B60     		str	r3, [r1, #4]
3836:FreeRTOS/tasks.c **** 
 6933              		.loc 1 3836 13 view .LVU1991
 6934 0014 01F10809 		add	r9, r1, #8
 6935 0018 4B45     		cmp	r3, r9
 6936 001a 04D0     		beq	.L514
 6937              	.L510:
3836:FreeRTOS/tasks.c **** 
 6938              		.loc 1 3836 13 discriminator 3 view .LVU1992
 6939 001c 6B68     		ldr	r3, [r5, #4]
 6940 001e D3F80CA0 		ldr	r10, [r3, #12]
 6941              	.LVL513:
3836:FreeRTOS/tasks.c **** 
 6942              		.loc 1 3836 13 is_stmt 0 discriminator 3 view .LVU1993
 6943              	.LBE321:
3832:FreeRTOS/tasks.c **** 
 6944              		.loc 1 3832 21 discriminator 3 view .LVU1994
 6945 0022 0024     		movs	r4, #0
 6946 0024 12E0     		b	.L512
 6947              	.LVL514:
 6948              	.L514:
 6949              	.LBB322:
3836:FreeRTOS/tasks.c **** 
 6950              		.loc 1 3836 13 is_stmt 1 discriminator 1 view .LVU1995
 6951 0026 5B68     		ldr	r3, [r3, #4]
 6952 0028 4B60     		str	r3, [r1, #4]
 6953 002a F7E7     		b	.L510
 6954              	.LVL515:
 6955              	.L515:
3836:FreeRTOS/tasks.c **** 
 6956              		.loc 1 3836 13 is_stmt 0 discriminator 1 view .LVU1996
 6957              	.LBE322:
 6958              	.LBB323:
3844:FreeRTOS/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 6959              		.loc 1 3844 17 is_stmt 1 discriminator 1 view .LVU1997
 6960 002c 5B68     		ldr	r3, [r3, #4]
 6961 002e 6B60     		str	r3, [r5, #4]
 6962              	.L511:
3844:FreeRTOS/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 6963              		.loc 1 3844 17 discriminator 3 view .LVU1998
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 253


 6964 0030 6B68     		ldr	r3, [r5, #4]
 6965 0032 DE68     		ldr	r6, [r3, #12]
 6966              	.LVL516:
3844:FreeRTOS/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 6967              		.loc 1 3844 17 is_stmt 0 discriminator 3 view .LVU1999
 6968              	.LBE323:
3844:FreeRTOS/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 6969              		.loc 1 3844 65 is_stmt 1 discriminator 3 view .LVU2000
3845:FreeRTOS/tasks.c ****                 uxTask++;
 6970              		.loc 1 3845 17 discriminator 3 view .LVU2001
3845:FreeRTOS/tasks.c ****                 uxTask++;
 6971              		.loc 1 3845 79 is_stmt 0 discriminator 3 view .LVU2002
 6972 0034 04EBC401 		add	r1, r4, r4, lsl #3
3845:FreeRTOS/tasks.c ****                 uxTask++;
 6973              		.loc 1 3845 17 discriminator 3 view .LVU2003
 6974 0038 4346     		mov	r3, r8
 6975 003a 0122     		movs	r2, #1
 6976 003c 07EB8101 		add	r1, r7, r1, lsl #2
 6977 0040 3046     		mov	r0, r6
 6978 0042 FFF7FEFF 		bl	vTaskGetInfo
 6979              	.LVL517:
3846:FreeRTOS/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
 6980              		.loc 1 3846 17 is_stmt 1 discriminator 3 view .LVU2004
3846:FreeRTOS/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
 6981              		.loc 1 3846 23 is_stmt 0 discriminator 3 view .LVU2005
 6982 0046 0134     		adds	r4, r4, #1
 6983              	.LVL518:
3847:FreeRTOS/tasks.c ****         }
 6984              		.loc 1 3847 20 is_stmt 1 discriminator 3 view .LVU2006
3847:FreeRTOS/tasks.c ****         }
 6985              		.loc 1 3847 13 is_stmt 0 discriminator 3 view .LVU2007
 6986 0048 B245     		cmp	r10, r6
 6987 004a 05D0     		beq	.L508
 6988              	.LVL519:
 6989              	.L512:
3836:FreeRTOS/tasks.c **** 
 6990              		.loc 1 3836 62 is_stmt 1 discriminator 4 view .LVU2008
3842:FreeRTOS/tasks.c ****             {
 6991              		.loc 1 3842 13 discriminator 4 view .LVU2009
 6992              	.LBB324:
3844:FreeRTOS/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 6993              		.loc 1 3844 17 discriminator 4 view .LVU2010
3844:FreeRTOS/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 6994              		.loc 1 3844 17 discriminator 4 view .LVU2011
 6995 004c 6B68     		ldr	r3, [r5, #4]
 6996 004e 5B68     		ldr	r3, [r3, #4]
 6997 0050 6B60     		str	r3, [r5, #4]
3844:FreeRTOS/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 6998              		.loc 1 3844 17 discriminator 4 view .LVU2012
 6999 0052 9945     		cmp	r9, r3
 7000 0054 ECD1     		bne	.L511
 7001 0056 E9E7     		b	.L515
 7002              	.LVL520:
 7003              	.L508:
3844:FreeRTOS/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 7004              		.loc 1 3844 17 is_stmt 0 discriminator 4 view .LVU2013
 7005              	.LBE324:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 254


3855:FreeRTOS/tasks.c **** 
 7006              		.loc 1 3855 5 view .LVU2014
 7007 0058 2046     		mov	r0, r4
 7008 005a BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 7009              		.cfi_endproc
 7010              	.LFE53:
 7012              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 7013              		.align	1
 7014              		.global	uxTaskGetSystemState
 7015              		.syntax unified
 7016              		.thumb
 7017              		.thumb_func
 7018              		.fpu fpv4-sp-d16
 7020              	uxTaskGetSystemState:
 7021              	.LVL521:
 7022              	.LFB31:
2536:FreeRTOS/tasks.c ****         UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 7023              		.loc 1 2536 5 is_stmt 1 view -0
 7024              		.cfi_startproc
 7025              		@ args = 0, pretend = 0, frame = 0
 7026              		@ frame_needed = 0, uses_anonymous_args = 0
2536:FreeRTOS/tasks.c ****         UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 7027              		.loc 1 2536 5 is_stmt 0 view .LVU2016
 7028 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 7029              	.LCFI52:
 7030              		.cfi_def_cfa_offset 24
 7031              		.cfi_offset 3, -24
 7032              		.cfi_offset 4, -20
 7033              		.cfi_offset 5, -16
 7034              		.cfi_offset 6, -12
 7035              		.cfi_offset 7, -8
 7036              		.cfi_offset 14, -4
 7037 0002 0646     		mov	r6, r0
 7038 0004 0C46     		mov	r4, r1
 7039 0006 1746     		mov	r7, r2
2537:FreeRTOS/tasks.c **** 
 7040              		.loc 1 2537 9 is_stmt 1 view .LVU2017
 7041              	.LVL522:
2539:FreeRTOS/tasks.c ****         {
 7042              		.loc 1 2539 9 view .LVU2018
 7043 0008 FFF7FEFF 		bl	vTaskSuspendAll
 7044              	.LVL523:
2542:FreeRTOS/tasks.c ****             {
 7045              		.loc 1 2542 13 view .LVU2019
2542:FreeRTOS/tasks.c ****             {
 7046              		.loc 1 2542 29 is_stmt 0 view .LVU2020
 7047 000c 224B     		ldr	r3, .L521
 7048 000e 1B68     		ldr	r3, [r3]
2542:FreeRTOS/tasks.c ****             {
 7049              		.loc 1 2542 15 view .LVU2021
 7050 0010 A342     		cmp	r3, r4
 7051 0012 3BD8     		bhi	.L519
2537:FreeRTOS/tasks.c **** 
 7052              		.loc 1 2537 33 view .LVU2022
 7053 0014 0525     		movs	r5, #5
2537:FreeRTOS/tasks.c **** 
 7054              		.loc 1 2537 21 view .LVU2023
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 255


 7055 0016 0024     		movs	r4, #0
 7056              	.LVL524:
 7057              	.L518:
2546:FreeRTOS/tasks.c ****                 {
 7058              		.loc 1 2546 17 is_stmt 1 discriminator 1 view .LVU2024
2548:FreeRTOS/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( px
 7059              		.loc 1 2548 21 discriminator 1 view .LVU2025
2548:FreeRTOS/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( px
 7060              		.loc 1 2548 28 is_stmt 0 discriminator 1 view .LVU2026
 7061 0018 013D     		subs	r5, r5, #1
 7062              	.LVL525:
2549:FreeRTOS/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
 7063              		.loc 1 2549 21 is_stmt 1 discriminator 1 view .LVU2027
2549:FreeRTOS/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
 7064              		.loc 1 2549 81 is_stmt 0 discriminator 1 view .LVU2028
 7065 001a 04EBC400 		add	r0, r4, r4, lsl #3
2549:FreeRTOS/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
 7066              		.loc 1 2549 31 discriminator 1 view .LVU2029
 7067 001e 05EB8501 		add	r1, r5, r5, lsl #2
 7068 0022 0122     		movs	r2, #1
 7069 0024 1D4B     		ldr	r3, .L521+4
 7070 0026 03EB8101 		add	r1, r3, r1, lsl #2
 7071 002a 06EB8000 		add	r0, r6, r0, lsl #2
 7072 002e FFF7FEFF 		bl	prvListTasksWithinSingleList
 7073              	.LVL526:
2549:FreeRTOS/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
 7074              		.loc 1 2549 28 discriminator 1 view .LVU2030
 7075 0032 0444     		add	r4, r4, r0
 7076              	.LVL527:
2550:FreeRTOS/tasks.c **** 
 7077              		.loc 1 2550 24 is_stmt 1 discriminator 1 view .LVU2031
2550:FreeRTOS/tasks.c **** 
 7078              		.loc 1 2550 17 is_stmt 0 discriminator 1 view .LVU2032
 7079 0034 002D     		cmp	r5, #0
 7080 0036 EFD1     		bne	.L518
2554:FreeRTOS/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
 7081              		.loc 1 2554 17 is_stmt 1 view .LVU2033
2554:FreeRTOS/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
 7082              		.loc 1 2554 77 is_stmt 0 view .LVU2034
 7083 0038 04EBC400 		add	r0, r4, r4, lsl #3
2554:FreeRTOS/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
 7084              		.loc 1 2554 27 view .LVU2035
 7085 003c 184B     		ldr	r3, .L521+8
 7086 003e 1968     		ldr	r1, [r3]
 7087 0040 0222     		movs	r2, #2
 7088 0042 06EB8000 		add	r0, r6, r0, lsl #2
 7089 0046 FFF7FEFF 		bl	prvListTasksWithinSingleList
 7090              	.LVL528:
2554:FreeRTOS/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
 7091              		.loc 1 2554 24 view .LVU2036
 7092 004a 0444     		add	r4, r4, r0
 7093              	.LVL529:
2555:FreeRTOS/tasks.c **** 
 7094              		.loc 1 2555 17 is_stmt 1 view .LVU2037
2555:FreeRTOS/tasks.c **** 
 7095              		.loc 1 2555 77 is_stmt 0 view .LVU2038
 7096 004c 04EBC400 		add	r0, r4, r4, lsl #3
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 256


2555:FreeRTOS/tasks.c **** 
 7097              		.loc 1 2555 27 view .LVU2039
 7098 0050 144B     		ldr	r3, .L521+12
 7099 0052 1968     		ldr	r1, [r3]
 7100 0054 0222     		movs	r2, #2
 7101 0056 06EB8000 		add	r0, r6, r0, lsl #2
 7102 005a FFF7FEFF 		bl	prvListTasksWithinSingleList
 7103              	.LVL530:
2555:FreeRTOS/tasks.c **** 
 7104              		.loc 1 2555 24 view .LVU2040
 7105 005e 0444     		add	r4, r4, r0
 7106              	.LVL531:
2561:FreeRTOS/tasks.c ****                     }
 7107              		.loc 1 2561 25 is_stmt 1 view .LVU2041
2561:FreeRTOS/tasks.c ****                     }
 7108              		.loc 1 2561 85 is_stmt 0 view .LVU2042
 7109 0060 04EBC400 		add	r0, r4, r4, lsl #3
2561:FreeRTOS/tasks.c ****                     }
 7110              		.loc 1 2561 35 view .LVU2043
 7111 0064 0422     		movs	r2, #4
 7112 0066 1049     		ldr	r1, .L521+16
 7113 0068 06EB8000 		add	r0, r6, r0, lsl #2
 7114 006c FFF7FEFF 		bl	prvListTasksWithinSingleList
 7115              	.LVL532:
2561:FreeRTOS/tasks.c ****                     }
 7116              		.loc 1 2561 32 view .LVU2044
 7117 0070 0444     		add	r4, r4, r0
 7118              	.LVL533:
2569:FreeRTOS/tasks.c ****                     }
 7119              		.loc 1 2569 25 is_stmt 1 view .LVU2045
2569:FreeRTOS/tasks.c ****                     }
 7120              		.loc 1 2569 85 is_stmt 0 view .LVU2046
 7121 0072 04EBC400 		add	r0, r4, r4, lsl #3
2569:FreeRTOS/tasks.c ****                     }
 7122              		.loc 1 2569 35 view .LVU2047
 7123 0076 0322     		movs	r2, #3
 7124 0078 0C49     		ldr	r1, .L521+20
 7125 007a 06EB8000 		add	r0, r6, r0, lsl #2
 7126 007e FFF7FEFF 		bl	prvListTasksWithinSingleList
 7127              	.LVL534:
2569:FreeRTOS/tasks.c ****                     }
 7128              		.loc 1 2569 32 view .LVU2048
 7129 0082 0444     		add	r4, r4, r0
 7130              	.LVL535:
2586:FreeRTOS/tasks.c ****                         {
 7131              		.loc 1 2586 25 is_stmt 1 view .LVU2049
2586:FreeRTOS/tasks.c ****                         {
 7132              		.loc 1 2586 27 is_stmt 0 view .LVU2050
 7133 0084 1FB1     		cbz	r7, .L517
2588:FreeRTOS/tasks.c ****                         }
 7134              		.loc 1 2588 29 is_stmt 1 view .LVU2051
2588:FreeRTOS/tasks.c ****                         }
 7135              		.loc 1 2588 46 is_stmt 0 view .LVU2052
 7136 0086 0023     		movs	r3, #0
 7137 0088 3B60     		str	r3, [r7]
 7138 008a 00E0     		b	.L517
 7139              	.LVL536:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 257


 7140              	.L519:
2537:FreeRTOS/tasks.c **** 
 7141              		.loc 1 2537 21 view .LVU2053
 7142 008c 0024     		movs	r4, #0
 7143              	.LVL537:
 7144              	.L517:
2595:FreeRTOS/tasks.c ****             }
 7145              		.loc 1 2595 41 is_stmt 1 view .LVU2054
2598:FreeRTOS/tasks.c **** 
 7146              		.loc 1 2598 9 view .LVU2055
2598:FreeRTOS/tasks.c **** 
 7147              		.loc 1 2598 18 is_stmt 0 view .LVU2056
 7148 008e FFF7FEFF 		bl	xTaskResumeAll
 7149              	.LVL538:
2600:FreeRTOS/tasks.c ****     }
 7150              		.loc 1 2600 9 is_stmt 1 view .LVU2057
2601:FreeRTOS/tasks.c **** 
 7151              		.loc 1 2601 5 is_stmt 0 view .LVU2058
 7152 0092 2046     		mov	r0, r4
 7153 0094 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 7154              	.LVL539:
 7155              	.L522:
2601:FreeRTOS/tasks.c **** 
 7156              		.loc 1 2601 5 view .LVU2059
 7157 0096 00BF     		.align	2
 7158              	.L521:
 7159 0098 00000000 		.word	.LANCHOR12
 7160 009c 00000000 		.word	.LANCHOR4
 7161 00a0 00000000 		.word	.LANCHOR7
 7162 00a4 00000000 		.word	.LANCHOR11
 7163 00a8 00000000 		.word	.LANCHOR10
 7164 00ac 00000000 		.word	.LANCHOR0
 7165              		.cfi_endproc
 7166              	.LFE31:
 7168              		.section	.text.uxTaskGetStackHighWaterMark2,"ax",%progbits
 7169              		.align	1
 7170              		.global	uxTaskGetStackHighWaterMark2
 7171              		.syntax unified
 7172              		.thumb
 7173              		.thumb_func
 7174              		.fpu fpv4-sp-d16
 7176              	uxTaskGetStackHighWaterMark2:
 7177              	.LVL540:
 7178              	.LFB55:
3888:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 7179              		.loc 1 3888 5 is_stmt 1 view -0
 7180              		.cfi_startproc
 7181              		@ args = 0, pretend = 0, frame = 0
 7182              		@ frame_needed = 0, uses_anonymous_args = 0
3888:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 7183              		.loc 1 3888 5 is_stmt 0 view .LVU2061
 7184 0000 08B5     		push	{r3, lr}
 7185              	.LCFI53:
 7186              		.cfi_def_cfa_offset 8
 7187              		.cfi_offset 3, -8
 7188              		.cfi_offset 14, -4
3889:FreeRTOS/tasks.c ****         uint8_t * pucEndOfStack;
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 258


 7189              		.loc 1 3889 9 is_stmt 1 view .LVU2062
3890:FreeRTOS/tasks.c ****         configSTACK_DEPTH_TYPE uxReturn;
 7190              		.loc 1 3890 9 view .LVU2063
3891:FreeRTOS/tasks.c **** 
 7191              		.loc 1 3891 9 view .LVU2064
3900:FreeRTOS/tasks.c **** 
 7192              		.loc 1 3900 9 view .LVU2065
3900:FreeRTOS/tasks.c **** 
 7193              		.loc 1 3900 17 is_stmt 0 view .LVU2066
 7194 0002 0346     		mov	r3, r0
 7195 0004 18B1     		cbz	r0, .L526
 7196              	.LVL541:
 7197              	.L524:
3904:FreeRTOS/tasks.c ****             }
 7198              		.loc 1 3904 17 is_stmt 1 discriminator 4 view .LVU2067
3912:FreeRTOS/tasks.c **** 
 7199              		.loc 1 3912 9 discriminator 4 view .LVU2068
3912:FreeRTOS/tasks.c **** 
 7200              		.loc 1 3912 20 is_stmt 0 discriminator 4 view .LVU2069
 7201 0006 186B     		ldr	r0, [r3, #48]
 7202 0008 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 7203              	.LVL542:
3914:FreeRTOS/tasks.c ****     }
 7204              		.loc 1 3914 9 is_stmt 1 discriminator 4 view .LVU2070
3915:FreeRTOS/tasks.c **** 
 7205              		.loc 1 3915 5 is_stmt 0 discriminator 4 view .LVU2071
 7206 000c 08BD     		pop	{r3, pc}
 7207              	.LVL543:
 7208              	.L526:
3900:FreeRTOS/tasks.c **** 
 7209              		.loc 1 3900 17 discriminator 1 view .LVU2072
 7210 000e 014B     		ldr	r3, .L527
 7211 0010 1B68     		ldr	r3, [r3]
 7212              	.LVL544:
3900:FreeRTOS/tasks.c **** 
 7213              		.loc 1 3900 17 discriminator 1 view .LVU2073
 7214 0012 F8E7     		b	.L524
 7215              	.L528:
 7216              		.align	2
 7217              	.L527:
 7218 0014 00000000 		.word	.LANCHOR3
 7219              		.cfi_endproc
 7220              	.LFE55:
 7222              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 7223              		.align	1
 7224              		.global	uxTaskGetStackHighWaterMark
 7225              		.syntax unified
 7226              		.thumb
 7227              		.thumb_func
 7228              		.fpu fpv4-sp-d16
 7230              	uxTaskGetStackHighWaterMark:
 7231              	.LVL545:
 7232              	.LFB56:
3923:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 7233              		.loc 1 3923 5 is_stmt 1 view -0
 7234              		.cfi_startproc
 7235              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 259


 7236              		@ frame_needed = 0, uses_anonymous_args = 0
3923:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 7237              		.loc 1 3923 5 is_stmt 0 view .LVU2075
 7238 0000 08B5     		push	{r3, lr}
 7239              	.LCFI54:
 7240              		.cfi_def_cfa_offset 8
 7241              		.cfi_offset 3, -8
 7242              		.cfi_offset 14, -4
3924:FreeRTOS/tasks.c ****         uint8_t * pucEndOfStack;
 7243              		.loc 1 3924 9 is_stmt 1 view .LVU2076
3925:FreeRTOS/tasks.c ****         UBaseType_t uxReturn;
 7244              		.loc 1 3925 9 view .LVU2077
3926:FreeRTOS/tasks.c **** 
 7245              		.loc 1 3926 9 view .LVU2078
3928:FreeRTOS/tasks.c **** 
 7246              		.loc 1 3928 9 view .LVU2079
3928:FreeRTOS/tasks.c **** 
 7247              		.loc 1 3928 17 is_stmt 0 view .LVU2080
 7248 0002 0346     		mov	r3, r0
 7249 0004 18B1     		cbz	r0, .L532
 7250              	.LVL546:
 7251              	.L530:
3932:FreeRTOS/tasks.c ****             }
 7252              		.loc 1 3932 17 is_stmt 1 discriminator 4 view .LVU2081
3940:FreeRTOS/tasks.c **** 
 7253              		.loc 1 3940 9 discriminator 4 view .LVU2082
3940:FreeRTOS/tasks.c **** 
 7254              		.loc 1 3940 36 is_stmt 0 discriminator 4 view .LVU2083
 7255 0006 186B     		ldr	r0, [r3, #48]
 7256 0008 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 7257              	.LVL547:
3942:FreeRTOS/tasks.c ****     }
 7258              		.loc 1 3942 9 is_stmt 1 discriminator 4 view .LVU2084
3943:FreeRTOS/tasks.c **** 
 7259              		.loc 1 3943 5 is_stmt 0 discriminator 4 view .LVU2085
 7260 000c 08BD     		pop	{r3, pc}
 7261              	.LVL548:
 7262              	.L532:
3928:FreeRTOS/tasks.c **** 
 7263              		.loc 1 3928 17 discriminator 1 view .LVU2086
 7264 000e 014B     		ldr	r3, .L533
 7265 0010 1B68     		ldr	r3, [r3]
 7266              	.LVL549:
3928:FreeRTOS/tasks.c **** 
 7267              		.loc 1 3928 17 discriminator 1 view .LVU2087
 7268 0012 F8E7     		b	.L530
 7269              	.L534:
 7270              		.align	2
 7271              	.L533:
 7272 0014 00000000 		.word	.LANCHOR3
 7273              		.cfi_endproc
 7274              	.LFE56:
 7276              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 7277              		.align	1
 7278              		.global	xTaskGetCurrentTaskHandle
 7279              		.syntax unified
 7280              		.thumb
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 260


 7281              		.thumb_func
 7282              		.fpu fpv4-sp-d16
 7284              	xTaskGetCurrentTaskHandle:
 7285              	.LFB59:
4030:FreeRTOS/tasks.c ****         TaskHandle_t xReturn;
 7286              		.loc 1 4030 5 is_stmt 1 view -0
 7287              		.cfi_startproc
 7288              		@ args = 0, pretend = 0, frame = 0
 7289              		@ frame_needed = 0, uses_anonymous_args = 0
 7290              		@ link register save eliminated.
4031:FreeRTOS/tasks.c **** 
 7291              		.loc 1 4031 9 view .LVU2089
4036:FreeRTOS/tasks.c **** 
 7292              		.loc 1 4036 9 view .LVU2090
4036:FreeRTOS/tasks.c **** 
 7293              		.loc 1 4036 17 is_stmt 0 view .LVU2091
 7294 0000 014B     		ldr	r3, .L536
 7295 0002 1868     		ldr	r0, [r3]
 7296              	.LVL550:
4038:FreeRTOS/tasks.c ****     }
 7297              		.loc 1 4038 9 is_stmt 1 view .LVU2092
4039:FreeRTOS/tasks.c **** 
 7298              		.loc 1 4039 5 is_stmt 0 view .LVU2093
 7299 0004 7047     		bx	lr
 7300              	.L537:
 7301 0006 00BF     		.align	2
 7302              	.L536:
 7303 0008 00000000 		.word	.LANCHOR3
 7304              		.cfi_endproc
 7305              	.LFE59:
 7307              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 7308              		.align	1
 7309              		.global	xTaskGetSchedulerState
 7310              		.syntax unified
 7311              		.thumb
 7312              		.thumb_func
 7313              		.fpu fpv4-sp-d16
 7315              	xTaskGetSchedulerState:
 7316              	.LFB60:
4047:FreeRTOS/tasks.c ****         BaseType_t xReturn;
 7317              		.loc 1 4047 5 is_stmt 1 view -0
 7318              		.cfi_startproc
 7319              		@ args = 0, pretend = 0, frame = 0
 7320              		@ frame_needed = 0, uses_anonymous_args = 0
 7321              		@ link register save eliminated.
4048:FreeRTOS/tasks.c **** 
 7322              		.loc 1 4048 9 view .LVU2095
4050:FreeRTOS/tasks.c ****         {
 7323              		.loc 1 4050 9 view .LVU2096
4050:FreeRTOS/tasks.c ****         {
 7324              		.loc 1 4050 31 is_stmt 0 view .LVU2097
 7325 0000 054B     		ldr	r3, .L543
 7326 0002 1B68     		ldr	r3, [r3]
4050:FreeRTOS/tasks.c ****         {
 7327              		.loc 1 4050 11 view .LVU2098
 7328 0004 33B1     		cbz	r3, .L540
4056:FreeRTOS/tasks.c ****             {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 261


 7329              		.loc 1 4056 13 is_stmt 1 view .LVU2099
4056:FreeRTOS/tasks.c ****             {
 7330              		.loc 1 4056 38 is_stmt 0 view .LVU2100
 7331 0006 054B     		ldr	r3, .L543+4
 7332 0008 1B68     		ldr	r3, [r3]
4056:FreeRTOS/tasks.c ****             {
 7333              		.loc 1 4056 15 view .LVU2101
 7334 000a 0BB1     		cbz	r3, .L542
4062:FreeRTOS/tasks.c ****             }
 7335              		.loc 1 4062 25 view .LVU2102
 7336 000c 0020     		movs	r0, #0
 7337              	.LVL551:
4066:FreeRTOS/tasks.c ****     }
 7338              		.loc 1 4066 9 is_stmt 1 view .LVU2103
4067:FreeRTOS/tasks.c **** 
 7339              		.loc 1 4067 5 is_stmt 0 view .LVU2104
 7340 000e 7047     		bx	lr
 7341              	.LVL552:
 7342              	.L542:
4058:FreeRTOS/tasks.c ****             }
 7343              		.loc 1 4058 25 view .LVU2105
 7344 0010 0220     		movs	r0, #2
 7345 0012 7047     		bx	lr
 7346              	.L540:
4052:FreeRTOS/tasks.c ****         }
 7347              		.loc 1 4052 21 view .LVU2106
 7348 0014 0120     		movs	r0, #1
 7349 0016 7047     		bx	lr
 7350              	.L544:
 7351              		.align	2
 7352              	.L543:
 7353 0018 00000000 		.word	.LANCHOR13
 7354 001c 00000000 		.word	.LANCHOR16
 7355              		.cfi_endproc
 7356              	.LFE60:
 7358              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 7359              		.align	1
 7360              		.global	xTaskPriorityInherit
 7361              		.syntax unified
 7362              		.thumb
 7363              		.thumb_func
 7364              		.fpu fpv4-sp-d16
 7366              	xTaskPriorityInherit:
 7367              	.LVL553:
 7368              	.LFB61:
4075:FreeRTOS/tasks.c ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 7369              		.loc 1 4075 5 is_stmt 1 view -0
 7370              		.cfi_startproc
 7371              		@ args = 0, pretend = 0, frame = 0
 7372              		@ frame_needed = 0, uses_anonymous_args = 0
4076:FreeRTOS/tasks.c ****         BaseType_t xReturn = pdFALSE;
 7373              		.loc 1 4076 9 view .LVU2108
4077:FreeRTOS/tasks.c **** 
 7374              		.loc 1 4077 9 view .LVU2109
4082:FreeRTOS/tasks.c ****         {
 7375              		.loc 1 4082 9 view .LVU2110
4082:FreeRTOS/tasks.c ****         {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 262


 7376              		.loc 1 4082 11 is_stmt 0 view .LVU2111
 7377 0000 0028     		cmp	r0, #0
 7378 0002 55D0     		beq	.L551
4075:FreeRTOS/tasks.c ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 7379              		.loc 1 4075 5 view .LVU2112
 7380 0004 70B5     		push	{r4, r5, r6, lr}
 7381              	.LCFI55:
 7382              		.cfi_def_cfa_offset 16
 7383              		.cfi_offset 4, -16
 7384              		.cfi_offset 5, -12
 7385              		.cfi_offset 6, -8
 7386              		.cfi_offset 14, -4
 7387 0006 0446     		mov	r4, r0
4087:FreeRTOS/tasks.c ****             {
 7388              		.loc 1 4087 13 is_stmt 1 view .LVU2113
4087:FreeRTOS/tasks.c ****             {
 7389              		.loc 1 4087 33 is_stmt 0 view .LVU2114
 7390 0008 C36A     		ldr	r3, [r0, #44]
4087:FreeRTOS/tasks.c ****             {
 7391              		.loc 1 4087 60 view .LVU2115
 7392 000a 2B4A     		ldr	r2, .L558
 7393 000c 1268     		ldr	r2, [r2]
 7394 000e D26A     		ldr	r2, [r2, #44]
4087:FreeRTOS/tasks.c ****             {
 7395              		.loc 1 4087 15 view .LVU2116
 7396 0010 9342     		cmp	r3, r2
 7397 0012 45D2     		bcs	.L547
4092:FreeRTOS/tasks.c ****                 {
 7398              		.loc 1 4092 17 is_stmt 1 view .LVU2117
4092:FreeRTOS/tasks.c ****                 {
 7399              		.loc 1 4092 23 is_stmt 0 view .LVU2118
 7400 0014 8269     		ldr	r2, [r0, #24]
4092:FreeRTOS/tasks.c ****                 {
 7401              		.loc 1 4092 19 view .LVU2119
 7402 0016 002A     		cmp	r2, #0
 7403 0018 05DB     		blt	.L548
4094:FreeRTOS/tasks.c ****                 }
 7404              		.loc 1 4094 21 is_stmt 1 view .LVU2120
 7405 001a 274A     		ldr	r2, .L558
 7406 001c 1268     		ldr	r2, [r2]
 7407 001e D26A     		ldr	r2, [r2, #44]
 7408 0020 C2F10502 		rsb	r2, r2, #5
 7409 0024 8261     		str	r2, [r0, #24]
 7410              	.L548:
4098:FreeRTOS/tasks.c ****                 }
 7411              		.loc 1 4098 45 view .LVU2121
4103:FreeRTOS/tasks.c ****                 {
 7412              		.loc 1 4103 17 view .LVU2122
4103:FreeRTOS/tasks.c ****                 {
 7413              		.loc 1 4103 21 is_stmt 0 view .LVU2123
 7414 0026 6169     		ldr	r1, [r4, #20]
 7415 0028 03EB8303 		add	r3, r3, r3, lsl #2
 7416 002c 234A     		ldr	r2, .L558+4
 7417 002e 02EB8303 		add	r3, r2, r3, lsl #2
4103:FreeRTOS/tasks.c ****                 {
 7418              		.loc 1 4103 19 view .LVU2124
 7419 0032 9942     		cmp	r1, r3
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 263


 7420 0034 05D0     		beq	.L557
4124:FreeRTOS/tasks.c ****                 }
 7421              		.loc 1 4124 21 is_stmt 1 view .LVU2125
4124:FreeRTOS/tasks.c ****                 }
 7422              		.loc 1 4124 64 is_stmt 0 view .LVU2126
 7423 0036 204B     		ldr	r3, .L558
 7424 0038 1B68     		ldr	r3, [r3]
 7425 003a DB6A     		ldr	r3, [r3, #44]
4124:FreeRTOS/tasks.c ****                 }
 7426              		.loc 1 4124 50 view .LVU2127
 7427 003c E362     		str	r3, [r4, #44]
4130:FreeRTOS/tasks.c ****             }
 7428              		.loc 1 4130 25 view .LVU2128
 7429 003e 0120     		movs	r0, #1
 7430              	.LVL554:
 7431              	.L545:
4157:FreeRTOS/tasks.c **** 
 7432              		.loc 1 4157 5 view .LVU2129
 7433 0040 70BD     		pop	{r4, r5, r6, pc}
 7434              	.LVL555:
 7435              	.L557:
4105:FreeRTOS/tasks.c ****                     {
 7436              		.loc 1 4105 21 is_stmt 1 view .LVU2130
4105:FreeRTOS/tasks.c ****                     {
 7437              		.loc 1 4105 25 is_stmt 0 view .LVU2131
 7438 0042 251D     		adds	r5, r4, #4
 7439 0044 2846     		mov	r0, r5
 7440              	.LVL556:
4105:FreeRTOS/tasks.c ****                     {
 7441              		.loc 1 4105 25 view .LVU2132
 7442 0046 FFF7FEFF 		bl	uxListRemove
 7443              	.LVL557:
4105:FreeRTOS/tasks.c ****                     {
 7444              		.loc 1 4105 23 view .LVU2133
 7445 004a 40B9     		cbnz	r0, .L550
4110:FreeRTOS/tasks.c ****                     }
 7446              		.loc 1 4110 25 is_stmt 1 view .LVU2134
 7447 004c E26A     		ldr	r2, [r4, #44]
 7448 004e 0123     		movs	r3, #1
 7449 0050 03FA02F2 		lsl	r2, r3, r2
 7450 0054 1A49     		ldr	r1, .L558+8
 7451 0056 0B68     		ldr	r3, [r1]
 7452 0058 23EA0203 		bic	r3, r3, r2
 7453 005c 0B60     		str	r3, [r1]
 7454              	.L550:
4114:FreeRTOS/tasks.c ****                     }
 7455              		.loc 1 4114 49 view .LVU2135
4118:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
 7456              		.loc 1 4118 21 view .LVU2136
4118:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
 7457              		.loc 1 4118 64 is_stmt 0 view .LVU2137
 7458 005e 164B     		ldr	r3, .L558
 7459 0060 1B68     		ldr	r3, [r3]
 7460 0062 DB6A     		ldr	r3, [r3, #44]
4118:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
 7461              		.loc 1 4118 50 view .LVU2138
 7462 0064 E362     		str	r3, [r4, #44]
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 264


4119:FreeRTOS/tasks.c ****                 }
 7463              		.loc 1 4119 21 is_stmt 1 view .LVU2139
4119:FreeRTOS/tasks.c ****                 }
 7464              		.loc 1 4119 21 view .LVU2140
 7465 0066 0120     		movs	r0, #1
 7466 0068 00FA03F2 		lsl	r2, r0, r3
 7467 006c 1449     		ldr	r1, .L558+8
 7468 006e 0E68     		ldr	r6, [r1]
 7469 0070 3243     		orrs	r2, r2, r6
 7470 0072 0A60     		str	r2, [r1]
 7471              	.LBB325:
4119:FreeRTOS/tasks.c ****                 }
 7472              		.loc 1 4119 21 view .LVU2141
 7473 0074 114A     		ldr	r2, .L558+4
 7474 0076 03EB8303 		add	r3, r3, r3, lsl #2
 7475 007a 02EB8303 		add	r3, r2, r3, lsl #2
 7476 007e 5B68     		ldr	r3, [r3, #4]
 7477              	.LVL558:
4119:FreeRTOS/tasks.c ****                 }
 7478              		.loc 1 4119 21 view .LVU2142
4119:FreeRTOS/tasks.c ****                 }
 7479              		.loc 1 4119 21 view .LVU2143
4119:FreeRTOS/tasks.c ****                 }
 7480              		.loc 1 4119 21 view .LVU2144
 7481 0080 A360     		str	r3, [r4, #8]
4119:FreeRTOS/tasks.c ****                 }
 7482              		.loc 1 4119 21 view .LVU2145
 7483 0082 9968     		ldr	r1, [r3, #8]
 7484 0084 E160     		str	r1, [r4, #12]
4119:FreeRTOS/tasks.c ****                 }
 7485              		.loc 1 4119 21 view .LVU2146
 7486 0086 4D60     		str	r5, [r1, #4]
4119:FreeRTOS/tasks.c ****                 }
 7487              		.loc 1 4119 21 view .LVU2147
 7488 0088 9D60     		str	r5, [r3, #8]
4119:FreeRTOS/tasks.c ****                 }
 7489              		.loc 1 4119 21 view .LVU2148
 7490 008a E36A     		ldr	r3, [r4, #44]
 7491              	.LVL559:
4119:FreeRTOS/tasks.c ****                 }
 7492              		.loc 1 4119 21 is_stmt 0 view .LVU2149
 7493 008c 03EB8301 		add	r1, r3, r3, lsl #2
 7494 0090 8D00     		lsls	r5, r1, #2
 7495 0092 02EB8101 		add	r1, r2, r1, lsl #2
 7496 0096 6161     		str	r1, [r4, #20]
4119:FreeRTOS/tasks.c ****                 }
 7497              		.loc 1 4119 21 is_stmt 1 view .LVU2150
 7498 0098 5159     		ldr	r1, [r2, r5]
 7499 009a 0144     		add	r1, r1, r0
 7500 009c 5151     		str	r1, [r2, r5]
 7501              	.LBE325:
4119:FreeRTOS/tasks.c ****                 }
 7502              		.loc 1 4119 21 view .LVU2151
4119:FreeRTOS/tasks.c ****                 }
 7503              		.loc 1 4119 62 view .LVU2152
 7504 009e CFE7     		b	.L545
 7505              	.LVL560:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 265


 7506              	.L547:
4134:FreeRTOS/tasks.c ****                 {
 7507              		.loc 1 4134 17 view .LVU2153
4134:FreeRTOS/tasks.c ****                 {
 7508              		.loc 1 4134 37 is_stmt 0 view .LVU2154
 7509 00a0 826C     		ldr	r2, [r0, #72]
4134:FreeRTOS/tasks.c ****                 {
 7510              		.loc 1 4134 68 view .LVU2155
 7511 00a2 054B     		ldr	r3, .L558
 7512 00a4 1B68     		ldr	r3, [r3]
 7513 00a6 DB6A     		ldr	r3, [r3, #44]
4134:FreeRTOS/tasks.c ****                 {
 7514              		.loc 1 4134 19 view .LVU2156
 7515 00a8 9A42     		cmp	r2, r3
 7516 00aa 03D3     		bcc	.L552
4077:FreeRTOS/tasks.c **** 
 7517              		.loc 1 4077 20 view .LVU2157
 7518 00ac 0020     		movs	r0, #0
 7519              	.LVL561:
4077:FreeRTOS/tasks.c **** 
 7520              		.loc 1 4077 20 view .LVU2158
 7521 00ae C7E7     		b	.L545
 7522              	.LVL562:
 7523              	.L551:
 7524              	.LCFI56:
 7525              		.cfi_def_cfa_offset 0
 7526              		.cfi_restore 4
 7527              		.cfi_restore 5
 7528              		.cfi_restore 6
 7529              		.cfi_restore 14
4077:FreeRTOS/tasks.c **** 
 7530              		.loc 1 4077 20 view .LVU2159
 7531 00b0 0020     		movs	r0, #0
 7532              	.LVL563:
4157:FreeRTOS/tasks.c **** 
 7533              		.loc 1 4157 5 view .LVU2160
 7534 00b2 7047     		bx	lr
 7535              	.LVL564:
 7536              	.L552:
 7537              	.LCFI57:
 7538              		.cfi_def_cfa_offset 16
 7539              		.cfi_offset 4, -16
 7540              		.cfi_offset 5, -12
 7541              		.cfi_offset 6, -8
 7542              		.cfi_offset 14, -4
4143:FreeRTOS/tasks.c ****                 }
 7543              		.loc 1 4143 29 view .LVU2161
 7544 00b4 0120     		movs	r0, #1
 7545              	.LVL565:
4153:FreeRTOS/tasks.c ****         }
 7546              		.loc 1 4153 37 is_stmt 1 view .LVU2162
4156:FreeRTOS/tasks.c ****     }
 7547              		.loc 1 4156 9 view .LVU2163
4156:FreeRTOS/tasks.c ****     }
 7548              		.loc 1 4156 16 is_stmt 0 view .LVU2164
 7549 00b6 C3E7     		b	.L545
 7550              	.L559:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 266


 7551              		.align	2
 7552              	.L558:
 7553 00b8 00000000 		.word	.LANCHOR3
 7554 00bc 00000000 		.word	.LANCHOR4
 7555 00c0 00000000 		.word	.LANCHOR2
 7556              		.cfi_endproc
 7557              	.LFE61:
 7559              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 7560              		.align	1
 7561              		.global	xTaskPriorityDisinherit
 7562              		.syntax unified
 7563              		.thumb
 7564              		.thumb_func
 7565              		.fpu fpv4-sp-d16
 7567              	xTaskPriorityDisinherit:
 7568              	.LVL566:
 7569              	.LFB62:
4165:FreeRTOS/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 7570              		.loc 1 4165 5 is_stmt 1 view -0
 7571              		.cfi_startproc
 7572              		@ args = 0, pretend = 0, frame = 0
 7573              		@ frame_needed = 0, uses_anonymous_args = 0
4166:FreeRTOS/tasks.c ****         BaseType_t xReturn = pdFALSE;
 7574              		.loc 1 4166 9 view .LVU2166
4167:FreeRTOS/tasks.c **** 
 7575              		.loc 1 4167 9 view .LVU2167
4169:FreeRTOS/tasks.c ****         {
 7576              		.loc 1 4169 9 view .LVU2168
4169:FreeRTOS/tasks.c ****         {
 7577              		.loc 1 4169 11 is_stmt 0 view .LVU2169
 7578 0000 0028     		cmp	r0, #0
 7579 0002 52D0     		beq	.L567
4165:FreeRTOS/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 7580              		.loc 1 4165 5 view .LVU2170
 7581 0004 70B5     		push	{r4, r5, r6, lr}
 7582              	.LCFI58:
 7583              		.cfi_def_cfa_offset 16
 7584              		.cfi_offset 4, -16
 7585              		.cfi_offset 5, -12
 7586              		.cfi_offset 6, -8
 7587              		.cfi_offset 14, -4
 7588 0006 0446     		mov	r4, r0
4175:FreeRTOS/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
 7589              		.loc 1 4175 13 is_stmt 1 view .LVU2171
 7590 0008 2A4B     		ldr	r3, .L575
 7591 000a 1B68     		ldr	r3, [r3]
 7592 000c 8342     		cmp	r3, r0
 7593 000e 08D0     		beq	.L562
4175:FreeRTOS/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
 7594              		.loc 1 4175 13 view .LVU2172
 7595              	.LBB326:
 7596              	.LBI326:
 194:FreeRTOS/portable/portmacro.h ****     {
 7597              		.loc 2 194 34 view .LVU2173
 7598              	.LBB327:
 196:FreeRTOS/portable/portmacro.h **** 
 7599              		.loc 2 196 9 view .LVU2174
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 267


 198:FreeRTOS/portable/portmacro.h ****         (
 7600              		.loc 2 198 9 view .LVU2175
 7601              		.syntax unified
 7602              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 7603 0010 4FF05003 			mov r3, #80												
 7604 0014 83F31188 		msr basepri, r3											
 7605 0018 BFF36F8F 		isb														
 7606 001c BFF34F8F 		dsb														
 7607              	
 7608              	@ 0 "" 2
 7609              	.LVL567:
 7610              		.thumb
 7611              		.syntax unified
 7612              	.L563:
 198:FreeRTOS/portable/portmacro.h ****         (
 7613              		.loc 2 198 9 is_stmt 0 view .LVU2176
 7614              	.LBE327:
 7615              	.LBE326:
4175:FreeRTOS/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
 7616              		.loc 1 4175 13 is_stmt 1 discriminator 1 view .LVU2177
4175:FreeRTOS/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
 7617              		.loc 1 4175 13 discriminator 1 view .LVU2178
4175:FreeRTOS/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
 7618              		.loc 1 4175 13 discriminator 1 view .LVU2179
 7619 0020 FEE7     		b	.L563
 7620              	.L562:
4175:FreeRTOS/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
 7621              		.loc 1 4175 50 discriminator 2 view .LVU2180
4176:FreeRTOS/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
 7622              		.loc 1 4176 13 discriminator 2 view .LVU2181
 7623 0022 C36C     		ldr	r3, [r0, #76]
 7624 0024 43B9     		cbnz	r3, .L564
4176:FreeRTOS/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
 7625              		.loc 1 4176 13 view .LVU2182
 7626              	.LBB328:
 7627              	.LBI328:
 194:FreeRTOS/portable/portmacro.h ****     {
 7628              		.loc 2 194 34 view .LVU2183
 7629              	.LBB329:
 196:FreeRTOS/portable/portmacro.h **** 
 7630              		.loc 2 196 9 view .LVU2184
 198:FreeRTOS/portable/portmacro.h ****         (
 7631              		.loc 2 198 9 view .LVU2185
 7632              		.syntax unified
 7633              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 7634 0026 4FF05003 			mov r3, #80												
 7635 002a 83F31188 		msr basepri, r3											
 7636 002e BFF36F8F 		isb														
 7637 0032 BFF34F8F 		dsb														
 7638              	
 7639              	@ 0 "" 2
 7640              	.LVL568:
 7641              		.thumb
 7642              		.syntax unified
 7643              	.L565:
 198:FreeRTOS/portable/portmacro.h ****         (
 7644              		.loc 2 198 9 is_stmt 0 view .LVU2186
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 268


 7645              	.LBE329:
 7646              	.LBE328:
4176:FreeRTOS/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
 7647              		.loc 1 4176 13 is_stmt 1 discriminator 2 view .LVU2187
4176:FreeRTOS/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
 7648              		.loc 1 4176 13 discriminator 2 view .LVU2188
4176:FreeRTOS/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
 7649              		.loc 1 4176 13 discriminator 2 view .LVU2189
 7650 0036 FEE7     		b	.L565
 7651              	.L564:
4176:FreeRTOS/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
 7652              		.loc 1 4176 49 discriminator 2 view .LVU2190
4177:FreeRTOS/tasks.c **** 
 7653              		.loc 1 4177 13 discriminator 2 view .LVU2191
4177:FreeRTOS/tasks.c **** 
 7654              		.loc 1 4177 37 is_stmt 0 discriminator 2 view .LVU2192
 7655 0038 013B     		subs	r3, r3, #1
 7656 003a C364     		str	r3, [r0, #76]
4181:FreeRTOS/tasks.c ****             {
 7657              		.loc 1 4181 13 is_stmt 1 discriminator 2 view .LVU2193
4181:FreeRTOS/tasks.c ****             {
 7658              		.loc 1 4181 22 is_stmt 0 discriminator 2 view .LVU2194
 7659 003c C16A     		ldr	r1, [r0, #44]
4181:FreeRTOS/tasks.c ****             {
 7660              		.loc 1 4181 43 discriminator 2 view .LVU2195
 7661 003e 826C     		ldr	r2, [r0, #72]
4181:FreeRTOS/tasks.c ****             {
 7662              		.loc 1 4181 15 discriminator 2 view .LVU2196
 7663 0040 9142     		cmp	r1, r2
 7664 0042 34D0     		beq	.L568
4184:FreeRTOS/tasks.c ****                 {
 7665              		.loc 1 4184 17 is_stmt 1 view .LVU2197
4184:FreeRTOS/tasks.c ****                 {
 7666              		.loc 1 4184 19 is_stmt 0 view .LVU2198
 7667 0044 0BB1     		cbz	r3, .L574
4167:FreeRTOS/tasks.c **** 
 7668              		.loc 1 4167 20 view .LVU2199
 7669 0046 0020     		movs	r0, #0
 7670              	.LVL569:
4233:FreeRTOS/tasks.c ****         }
 7671              		.loc 1 4233 37 is_stmt 1 view .LVU2200
4236:FreeRTOS/tasks.c ****     }
 7672              		.loc 1 4236 9 view .LVU2201
 7673              	.L560:
4237:FreeRTOS/tasks.c **** 
 7674              		.loc 1 4237 5 is_stmt 0 view .LVU2202
 7675 0048 70BD     		pop	{r4, r5, r6, pc}
 7676              	.LVL570:
 7677              	.L574:
4191:FreeRTOS/tasks.c ****                     {
 7678              		.loc 1 4191 21 is_stmt 1 view .LVU2203
4191:FreeRTOS/tasks.c ****                     {
 7679              		.loc 1 4191 25 is_stmt 0 view .LVU2204
 7680 004a 051D     		adds	r5, r0, #4
 7681 004c 2846     		mov	r0, r5
 7682              	.LVL571:
4191:FreeRTOS/tasks.c ****                     {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 269


 7683              		.loc 1 4191 25 view .LVU2205
 7684 004e FFF7FEFF 		bl	uxListRemove
 7685              	.LVL572:
4191:FreeRTOS/tasks.c ****                     {
 7686              		.loc 1 4191 23 view .LVU2206
 7687 0052 40B9     		cbnz	r0, .L566
4193:FreeRTOS/tasks.c ****                     }
 7688              		.loc 1 4193 25 is_stmt 1 view .LVU2207
 7689 0054 E26A     		ldr	r2, [r4, #44]
 7690 0056 0123     		movs	r3, #1
 7691 0058 03FA02F2 		lsl	r2, r3, r2
 7692 005c 1649     		ldr	r1, .L575+4
 7693 005e 0B68     		ldr	r3, [r1]
 7694 0060 23EA0203 		bic	r3, r3, r2
 7695 0064 0B60     		str	r3, [r1]
 7696              	.L566:
4197:FreeRTOS/tasks.c ****                     }
 7697              		.loc 1 4197 49 view .LVU2208
4202:FreeRTOS/tasks.c ****                     pxTCB->uxPriority = pxTCB->uxBasePriority;
 7698              		.loc 1 4202 82 view .LVU2209
4203:FreeRTOS/tasks.c **** 
 7699              		.loc 1 4203 21 view .LVU2210
4203:FreeRTOS/tasks.c **** 
 7700              		.loc 1 4203 46 is_stmt 0 view .LVU2211
 7701 0066 A36C     		ldr	r3, [r4, #72]
4203:FreeRTOS/tasks.c **** 
 7702              		.loc 1 4203 39 view .LVU2212
 7703 0068 E362     		str	r3, [r4, #44]
4208:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 7704              		.loc 1 4208 21 is_stmt 1 view .LVU2213
 7705 006a C3F10502 		rsb	r2, r3, #5
 7706 006e A261     		str	r2, [r4, #24]
4209:FreeRTOS/tasks.c **** 
 7707              		.loc 1 4209 21 view .LVU2214
4209:FreeRTOS/tasks.c **** 
 7708              		.loc 1 4209 21 view .LVU2215
 7709 0070 0120     		movs	r0, #1
 7710 0072 00FA03F2 		lsl	r2, r0, r3
 7711 0076 1049     		ldr	r1, .L575+4
 7712 0078 0E68     		ldr	r6, [r1]
 7713 007a 3243     		orrs	r2, r2, r6
 7714 007c 0A60     		str	r2, [r1]
 7715              	.LBB330:
4209:FreeRTOS/tasks.c **** 
 7716              		.loc 1 4209 21 view .LVU2216
 7717 007e 0F4A     		ldr	r2, .L575+8
 7718 0080 03EB8303 		add	r3, r3, r3, lsl #2
 7719 0084 02EB8303 		add	r3, r2, r3, lsl #2
 7720 0088 5B68     		ldr	r3, [r3, #4]
 7721              	.LVL573:
4209:FreeRTOS/tasks.c **** 
 7722              		.loc 1 4209 21 view .LVU2217
4209:FreeRTOS/tasks.c **** 
 7723              		.loc 1 4209 21 view .LVU2218
4209:FreeRTOS/tasks.c **** 
 7724              		.loc 1 4209 21 view .LVU2219
 7725 008a A360     		str	r3, [r4, #8]
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 270


4209:FreeRTOS/tasks.c **** 
 7726              		.loc 1 4209 21 view .LVU2220
 7727 008c 9968     		ldr	r1, [r3, #8]
 7728 008e E160     		str	r1, [r4, #12]
4209:FreeRTOS/tasks.c **** 
 7729              		.loc 1 4209 21 view .LVU2221
 7730 0090 4D60     		str	r5, [r1, #4]
4209:FreeRTOS/tasks.c **** 
 7731              		.loc 1 4209 21 view .LVU2222
 7732 0092 9D60     		str	r5, [r3, #8]
4209:FreeRTOS/tasks.c **** 
 7733              		.loc 1 4209 21 view .LVU2223
 7734 0094 E36A     		ldr	r3, [r4, #44]
 7735              	.LVL574:
4209:FreeRTOS/tasks.c **** 
 7736              		.loc 1 4209 21 is_stmt 0 view .LVU2224
 7737 0096 03EB8301 		add	r1, r3, r3, lsl #2
 7738 009a 8D00     		lsls	r5, r1, #2
 7739 009c 02EB8101 		add	r1, r2, r1, lsl #2
 7740 00a0 6161     		str	r1, [r4, #20]
4209:FreeRTOS/tasks.c **** 
 7741              		.loc 1 4209 21 is_stmt 1 view .LVU2225
 7742 00a2 5159     		ldr	r1, [r2, r5]
 7743 00a4 0144     		add	r1, r1, r0
 7744 00a6 5151     		str	r1, [r2, r5]
 7745              	.LBE330:
4209:FreeRTOS/tasks.c **** 
 7746              		.loc 1 4209 21 view .LVU2226
4209:FreeRTOS/tasks.c **** 
 7747              		.loc 1 4209 51 view .LVU2227
4219:FreeRTOS/tasks.c ****                 }
 7748              		.loc 1 4219 21 view .LVU2228
 7749              	.LVL575:
4219:FreeRTOS/tasks.c ****                 }
 7750              		.loc 1 4219 21 is_stmt 0 view .LVU2229
 7751 00a8 CEE7     		b	.L560
 7752              	.LVL576:
 7753              	.L567:
 7754              	.LCFI59:
 7755              		.cfi_def_cfa_offset 0
 7756              		.cfi_restore 4
 7757              		.cfi_restore 5
 7758              		.cfi_restore 6
 7759              		.cfi_restore 14
4167:FreeRTOS/tasks.c **** 
 7760              		.loc 1 4167 20 view .LVU2230
 7761 00aa 0020     		movs	r0, #0
 7762              	.LVL577:
4237:FreeRTOS/tasks.c **** 
 7763              		.loc 1 4237 5 view .LVU2231
 7764 00ac 7047     		bx	lr
 7765              	.LVL578:
 7766              	.L568:
 7767              	.LCFI60:
 7768              		.cfi_def_cfa_offset 16
 7769              		.cfi_offset 4, -16
 7770              		.cfi_offset 5, -12
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 271


 7771              		.cfi_offset 6, -8
 7772              		.cfi_offset 14, -4
4167:FreeRTOS/tasks.c **** 
 7773              		.loc 1 4167 20 view .LVU2232
 7774 00ae 0020     		movs	r0, #0
 7775              	.LVL579:
4167:FreeRTOS/tasks.c **** 
 7776              		.loc 1 4167 20 view .LVU2233
 7777 00b0 CAE7     		b	.L560
 7778              	.L576:
 7779 00b2 00BF     		.align	2
 7780              	.L575:
 7781 00b4 00000000 		.word	.LANCHOR3
 7782 00b8 00000000 		.word	.LANCHOR2
 7783 00bc 00000000 		.word	.LANCHOR4
 7784              		.cfi_endproc
 7785              	.LFE62:
 7787              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 7788              		.align	1
 7789              		.global	vTaskPriorityDisinheritAfterTimeout
 7790              		.syntax unified
 7791              		.thumb
 7792              		.thumb_func
 7793              		.fpu fpv4-sp-d16
 7795              	vTaskPriorityDisinheritAfterTimeout:
 7796              	.LVL580:
 7797              	.LFB63:
4246:FreeRTOS/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 7798              		.loc 1 4246 5 is_stmt 1 view -0
 7799              		.cfi_startproc
 7800              		@ args = 0, pretend = 0, frame = 0
 7801              		@ frame_needed = 0, uses_anonymous_args = 0
4247:FreeRTOS/tasks.c ****         UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
 7802              		.loc 1 4247 9 view .LVU2235
4248:FreeRTOS/tasks.c ****         const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 7803              		.loc 1 4248 9 view .LVU2236
4249:FreeRTOS/tasks.c **** 
 7804              		.loc 1 4249 9 view .LVU2237
4251:FreeRTOS/tasks.c ****         {
 7805              		.loc 1 4251 9 view .LVU2238
4251:FreeRTOS/tasks.c ****         {
 7806              		.loc 1 4251 11 is_stmt 0 view .LVU2239
 7807 0000 0028     		cmp	r0, #0
 7808 0002 5ED0     		beq	.L587
4246:FreeRTOS/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 7809              		.loc 1 4246 5 view .LVU2240
 7810 0004 38B5     		push	{r3, r4, r5, lr}
 7811              	.LCFI61:
 7812              		.cfi_def_cfa_offset 16
 7813              		.cfi_offset 3, -16
 7814              		.cfi_offset 4, -12
 7815              		.cfi_offset 5, -8
 7816              		.cfi_offset 14, -4
 7817 0006 0A46     		mov	r2, r1
 7818 0008 0446     		mov	r4, r0
4255:FreeRTOS/tasks.c **** 
 7819              		.loc 1 4255 13 is_stmt 1 view .LVU2241
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 272


 7820 000a C16C     		ldr	r1, [r0, #76]
 7821              	.LVL581:
4255:FreeRTOS/tasks.c **** 
 7822              		.loc 1 4255 13 is_stmt 0 view .LVU2242
 7823 000c 41B9     		cbnz	r1, .L579
4255:FreeRTOS/tasks.c **** 
 7824              		.loc 1 4255 13 is_stmt 1 view .LVU2243
 7825              	.LBB331:
 7826              	.LBI331:
 194:FreeRTOS/portable/portmacro.h ****     {
 7827              		.loc 2 194 34 view .LVU2244
 7828              	.LBB332:
 196:FreeRTOS/portable/portmacro.h **** 
 7829              		.loc 2 196 9 view .LVU2245
 198:FreeRTOS/portable/portmacro.h ****         (
 7830              		.loc 2 198 9 view .LVU2246
 7831              		.syntax unified
 7832              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 7833 000e 4FF05003 			mov r3, #80												
 7834 0012 83F31188 		msr basepri, r3											
 7835 0016 BFF36F8F 		isb														
 7836 001a BFF34F8F 		dsb														
 7837              	
 7838              	@ 0 "" 2
 7839              	.LVL582:
 7840              		.thumb
 7841              		.syntax unified
 7842              	.L580:
 198:FreeRTOS/portable/portmacro.h ****         (
 7843              		.loc 2 198 9 is_stmt 0 view .LVU2247
 7844              	.LBE332:
 7845              	.LBE331:
4255:FreeRTOS/tasks.c **** 
 7846              		.loc 1 4255 13 is_stmt 1 discriminator 1 view .LVU2248
4255:FreeRTOS/tasks.c **** 
 7847              		.loc 1 4255 13 discriminator 1 view .LVU2249
4255:FreeRTOS/tasks.c **** 
 7848              		.loc 1 4255 13 discriminator 1 view .LVU2250
 7849 001e FEE7     		b	.L580
 7850              	.L579:
4255:FreeRTOS/tasks.c **** 
 7851              		.loc 1 4255 49 discriminator 2 view .LVU2251
4261:FreeRTOS/tasks.c ****             {
 7852              		.loc 1 4261 13 discriminator 2 view .LVU2252
4261:FreeRTOS/tasks.c ****             {
 7853              		.loc 1 4261 22 is_stmt 0 discriminator 2 view .LVU2253
 7854 0020 836C     		ldr	r3, [r0, #72]
4261:FreeRTOS/tasks.c ****             {
 7855              		.loc 1 4261 15 discriminator 2 view .LVU2254
 7856 0022 9342     		cmp	r3, r2
 7857 0024 00D2     		bcs	.L581
4263:FreeRTOS/tasks.c ****             }
 7858              		.loc 1 4263 33 view .LVU2255
 7859 0026 1346     		mov	r3, r2
 7860              	.L581:
 7861              	.LVL583:
4271:FreeRTOS/tasks.c ****             {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 273


 7862              		.loc 1 4271 13 is_stmt 1 view .LVU2256
4271:FreeRTOS/tasks.c ****             {
 7863              		.loc 1 4271 22 is_stmt 0 view .LVU2257
 7864 0028 E26A     		ldr	r2, [r4, #44]
 7865              	.LVL584:
4271:FreeRTOS/tasks.c ****             {
 7866              		.loc 1 4271 15 view .LVU2258
 7867 002a 9A42     		cmp	r2, r3
 7868 002c 01D0     		beq	.L577
4277:FreeRTOS/tasks.c ****                 {
 7869              		.loc 1 4277 17 is_stmt 1 view .LVU2259
4277:FreeRTOS/tasks.c ****                 {
 7870              		.loc 1 4277 19 is_stmt 0 view .LVU2260
 7871 002e 0129     		cmp	r1, #1
 7872 0030 00D0     		beq	.L590
 7873              	.LVL585:
 7874              	.L577:
4343:FreeRTOS/tasks.c **** 
 7875              		.loc 1 4343 5 view .LVU2261
 7876 0032 38BD     		pop	{r3, r4, r5, pc}
 7877              	.LVL586:
 7878              	.L590:
4282:FreeRTOS/tasks.c **** 
 7879              		.loc 1 4282 21 is_stmt 1 view .LVU2262
 7880 0034 2349     		ldr	r1, .L592
 7881 0036 0968     		ldr	r1, [r1]
 7882 0038 A142     		cmp	r1, r4
 7883 003a 39D0     		beq	.L591
4282:FreeRTOS/tasks.c **** 
 7884              		.loc 1 4282 58 discriminator 2 view .LVU2263
4287:FreeRTOS/tasks.c ****                     uxPriorityUsedOnEntry = pxTCB->uxPriority;
 7885              		.loc 1 4287 76 discriminator 2 view .LVU2264
4288:FreeRTOS/tasks.c ****                     pxTCB->uxPriority = uxPriorityToUse;
 7886              		.loc 1 4288 21 discriminator 2 view .LVU2265
 7887              	.LVL587:
4289:FreeRTOS/tasks.c **** 
 7888              		.loc 1 4289 21 discriminator 2 view .LVU2266
4289:FreeRTOS/tasks.c **** 
 7889              		.loc 1 4289 39 is_stmt 0 discriminator 2 view .LVU2267
 7890 003c E362     		str	r3, [r4, #44]
4293:FreeRTOS/tasks.c ****                     {
 7891              		.loc 1 4293 21 is_stmt 1 discriminator 2 view .LVU2268
4293:FreeRTOS/tasks.c ****                     {
 7892              		.loc 1 4293 27 is_stmt 0 discriminator 2 view .LVU2269
 7893 003e A169     		ldr	r1, [r4, #24]
4293:FreeRTOS/tasks.c ****                     {
 7894              		.loc 1 4293 23 discriminator 2 view .LVU2270
 7895 0040 0029     		cmp	r1, #0
 7896 0042 02DB     		blt	.L584
4295:FreeRTOS/tasks.c ****                     }
 7897              		.loc 1 4295 25 is_stmt 1 view .LVU2271
 7898 0044 C3F10503 		rsb	r3, r3, #5
 7899              	.LVL588:
4295:FreeRTOS/tasks.c ****                     }
 7900              		.loc 1 4295 25 is_stmt 0 view .LVU2272
 7901 0048 A361     		str	r3, [r4, #24]
 7902              	.L584:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 274


4299:FreeRTOS/tasks.c ****                     }
 7903              		.loc 1 4299 49 is_stmt 1 view .LVU2273
4308:FreeRTOS/tasks.c ****                     {
 7904              		.loc 1 4308 21 view .LVU2274
4308:FreeRTOS/tasks.c ****                     {
 7905              		.loc 1 4308 25 is_stmt 0 view .LVU2275
 7906 004a 6169     		ldr	r1, [r4, #20]
 7907 004c 02EB8202 		add	r2, r2, r2, lsl #2
 7908              	.LVL589:
4308:FreeRTOS/tasks.c ****                     {
 7909              		.loc 1 4308 25 view .LVU2276
 7910 0050 1D4B     		ldr	r3, .L592+4
 7911 0052 03EB8202 		add	r2, r3, r2, lsl #2
4308:FreeRTOS/tasks.c ****                     {
 7912              		.loc 1 4308 23 view .LVU2277
 7913 0056 9142     		cmp	r1, r2
 7914 0058 EBD1     		bne	.L577
4310:FreeRTOS/tasks.c ****                         {
 7915              		.loc 1 4310 25 is_stmt 1 view .LVU2278
4310:FreeRTOS/tasks.c ****                         {
 7916              		.loc 1 4310 29 is_stmt 0 view .LVU2279
 7917 005a 251D     		adds	r5, r4, #4
 7918 005c 2846     		mov	r0, r5
 7919              	.LVL590:
4310:FreeRTOS/tasks.c ****                         {
 7920              		.loc 1 4310 29 view .LVU2280
 7921 005e FFF7FEFF 		bl	uxListRemove
 7922              	.LVL591:
4310:FreeRTOS/tasks.c ****                         {
 7923              		.loc 1 4310 27 view .LVU2281
 7924 0062 40B9     		cbnz	r0, .L585
4315:FreeRTOS/tasks.c ****                         }
 7925              		.loc 1 4315 29 is_stmt 1 view .LVU2282
 7926 0064 E26A     		ldr	r2, [r4, #44]
 7927 0066 0123     		movs	r3, #1
 7928 0068 03FA02F2 		lsl	r2, r3, r2
 7929 006c 1749     		ldr	r1, .L592+8
 7930 006e 0B68     		ldr	r3, [r1]
 7931 0070 23EA0203 		bic	r3, r3, r2
 7932 0074 0B60     		str	r3, [r1]
 7933              	.L585:
4319:FreeRTOS/tasks.c ****                         }
 7934              		.loc 1 4319 53 view .LVU2283
4322:FreeRTOS/tasks.c ****                     }
 7935              		.loc 1 4322 25 view .LVU2284
4322:FreeRTOS/tasks.c ****                     }
 7936              		.loc 1 4322 25 view .LVU2285
 7937 0076 E36A     		ldr	r3, [r4, #44]
 7938 0078 0122     		movs	r2, #1
 7939 007a 9A40     		lsls	r2, r2, r3
 7940 007c 1349     		ldr	r1, .L592+8
 7941 007e 0868     		ldr	r0, [r1]
 7942 0080 0243     		orrs	r2, r2, r0
 7943 0082 0A60     		str	r2, [r1]
 7944              	.LBB333:
4322:FreeRTOS/tasks.c ****                     }
 7945              		.loc 1 4322 25 view .LVU2286
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 275


 7946 0084 104A     		ldr	r2, .L592+4
 7947 0086 03EB8303 		add	r3, r3, r3, lsl #2
 7948 008a 02EB8303 		add	r3, r2, r3, lsl #2
 7949 008e 5B68     		ldr	r3, [r3, #4]
 7950              	.LVL592:
4322:FreeRTOS/tasks.c ****                     }
 7951              		.loc 1 4322 25 view .LVU2287
4322:FreeRTOS/tasks.c ****                     }
 7952              		.loc 1 4322 25 view .LVU2288
4322:FreeRTOS/tasks.c ****                     }
 7953              		.loc 1 4322 25 view .LVU2289
 7954 0090 A360     		str	r3, [r4, #8]
4322:FreeRTOS/tasks.c ****                     }
 7955              		.loc 1 4322 25 view .LVU2290
 7956 0092 9968     		ldr	r1, [r3, #8]
 7957 0094 E160     		str	r1, [r4, #12]
4322:FreeRTOS/tasks.c ****                     }
 7958              		.loc 1 4322 25 view .LVU2291
 7959 0096 4D60     		str	r5, [r1, #4]
4322:FreeRTOS/tasks.c ****                     }
 7960              		.loc 1 4322 25 view .LVU2292
 7961 0098 9D60     		str	r5, [r3, #8]
4322:FreeRTOS/tasks.c ****                     }
 7962              		.loc 1 4322 25 view .LVU2293
 7963 009a E36A     		ldr	r3, [r4, #44]
 7964              	.LVL593:
4322:FreeRTOS/tasks.c ****                     }
 7965              		.loc 1 4322 25 is_stmt 0 view .LVU2294
 7966 009c 03EB8301 		add	r1, r3, r3, lsl #2
 7967 00a0 8800     		lsls	r0, r1, #2
 7968 00a2 02EB8101 		add	r1, r2, r1, lsl #2
 7969 00a6 6161     		str	r1, [r4, #20]
4322:FreeRTOS/tasks.c ****                     }
 7970              		.loc 1 4322 25 is_stmt 1 view .LVU2295
 7971 00a8 1158     		ldr	r1, [r2, r0]
 7972 00aa 0131     		adds	r1, r1, #1
 7973 00ac 1150     		str	r1, [r2, r0]
 7974              	.LBE333:
4322:FreeRTOS/tasks.c ****                     }
 7975              		.loc 1 4322 25 view .LVU2296
4322:FreeRTOS/tasks.c ****                     }
 7976              		.loc 1 4322 55 view .LVU2297
4341:FreeRTOS/tasks.c ****         }
 7977              		.loc 1 4341 37 view .LVU2298
4343:FreeRTOS/tasks.c **** 
 7978              		.loc 1 4343 5 is_stmt 0 view .LVU2299
 7979 00ae C0E7     		b	.L577
 7980              	.LVL594:
 7981              	.L591:
4282:FreeRTOS/tasks.c **** 
 7982              		.loc 1 4282 21 is_stmt 1 view .LVU2300
 7983              	.LBB334:
 7984              	.LBI334:
 194:FreeRTOS/portable/portmacro.h ****     {
 7985              		.loc 2 194 34 view .LVU2301
 7986              	.LBB335:
 196:FreeRTOS/portable/portmacro.h **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 276


 7987              		.loc 2 196 9 view .LVU2302
 198:FreeRTOS/portable/portmacro.h ****         (
 7988              		.loc 2 198 9 view .LVU2303
 7989              		.syntax unified
 7990              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 7991 00b0 4FF05003 			mov r3, #80												
 7992 00b4 83F31188 		msr basepri, r3											
 7993 00b8 BFF36F8F 		isb														
 7994 00bc BFF34F8F 		dsb														
 7995              	
 7996              	@ 0 "" 2
 7997              	.LVL595:
 7998              		.thumb
 7999              		.syntax unified
 8000              	.L583:
 198:FreeRTOS/portable/portmacro.h ****         (
 8001              		.loc 2 198 9 is_stmt 0 view .LVU2304
 8002              	.LBE335:
 8003              	.LBE334:
4282:FreeRTOS/tasks.c **** 
 8004              		.loc 1 4282 21 is_stmt 1 discriminator 2 view .LVU2305
4282:FreeRTOS/tasks.c **** 
 8005              		.loc 1 4282 21 discriminator 2 view .LVU2306
4282:FreeRTOS/tasks.c **** 
 8006              		.loc 1 4282 21 discriminator 2 view .LVU2307
 8007 00c0 FEE7     		b	.L583
 8008              	.LVL596:
 8009              	.L587:
 8010              	.LCFI62:
 8011              		.cfi_def_cfa_offset 0
 8012              		.cfi_restore 3
 8013              		.cfi_restore 4
 8014              		.cfi_restore 5
 8015              		.cfi_restore 14
4282:FreeRTOS/tasks.c **** 
 8016              		.loc 1 4282 21 is_stmt 0 discriminator 2 view .LVU2308
 8017 00c2 7047     		bx	lr
 8018              	.L593:
 8019              		.align	2
 8020              	.L592:
 8021 00c4 00000000 		.word	.LANCHOR3
 8022 00c8 00000000 		.word	.LANCHOR4
 8023 00cc 00000000 		.word	.LANCHOR2
 8024              		.cfi_endproc
 8025              	.LFE63:
 8027              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 8028              		.align	1
 8029              		.global	uxTaskResetEventItemValue
 8030              		.syntax unified
 8031              		.thumb
 8032              		.thumb_func
 8033              		.fpu fpv4-sp-d16
 8035              	uxTaskResetEventItemValue:
 8036              	.LFB64:
4672:FreeRTOS/tasks.c ****     TickType_t uxReturn;
 8037              		.loc 1 4672 1 is_stmt 1 view -0
 8038              		.cfi_startproc
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 277


 8039              		@ args = 0, pretend = 0, frame = 0
 8040              		@ frame_needed = 0, uses_anonymous_args = 0
 8041              		@ link register save eliminated.
4673:FreeRTOS/tasks.c **** 
 8042              		.loc 1 4673 5 view .LVU2310
4675:FreeRTOS/tasks.c **** 
 8043              		.loc 1 4675 5 view .LVU2311
4675:FreeRTOS/tasks.c **** 
 8044              		.loc 1 4675 16 is_stmt 0 view .LVU2312
 8045 0000 044A     		ldr	r2, .L595
 8046 0002 1368     		ldr	r3, [r2]
4675:FreeRTOS/tasks.c **** 
 8047              		.loc 1 4675 14 view .LVU2313
 8048 0004 9869     		ldr	r0, [r3, #24]
 8049              	.LVL597:
4679:FreeRTOS/tasks.c **** 
 8050              		.loc 1 4679 5 is_stmt 1 view .LVU2314
 8051 0006 1368     		ldr	r3, [r2]
 8052 0008 DB6A     		ldr	r3, [r3, #44]
 8053 000a 1268     		ldr	r2, [r2]
 8054 000c C3F10503 		rsb	r3, r3, #5
 8055 0010 9361     		str	r3, [r2, #24]
4681:FreeRTOS/tasks.c **** }
 8056              		.loc 1 4681 5 view .LVU2315
4682:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 8057              		.loc 1 4682 1 is_stmt 0 view .LVU2316
 8058 0012 7047     		bx	lr
 8059              	.L596:
 8060              		.align	2
 8061              	.L595:
 8062 0014 00000000 		.word	.LANCHOR3
 8063              		.cfi_endproc
 8064              	.LFE64:
 8066              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 8067              		.align	1
 8068              		.global	pvTaskIncrementMutexHeldCount
 8069              		.syntax unified
 8070              		.thumb
 8071              		.thumb_func
 8072              		.fpu fpv4-sp-d16
 8074              	pvTaskIncrementMutexHeldCount:
 8075              	.LFB65:
4688:FreeRTOS/tasks.c ****         /* If xSemaphoreCreateMutex() is called before any tasks have been created
 8076              		.loc 1 4688 5 is_stmt 1 view -0
 8077              		.cfi_startproc
 8078              		@ args = 0, pretend = 0, frame = 0
 8079              		@ frame_needed = 0, uses_anonymous_args = 0
 8080              		@ link register save eliminated.
4691:FreeRTOS/tasks.c ****         {
 8081              		.loc 1 4691 9 view .LVU2318
4691:FreeRTOS/tasks.c ****         {
 8082              		.loc 1 4691 26 is_stmt 0 view .LVU2319
 8083 0000 054B     		ldr	r3, .L599
 8084 0002 1B68     		ldr	r3, [r3]
4691:FreeRTOS/tasks.c ****         {
 8085              		.loc 1 4691 11 view .LVU2320
 8086 0004 23B1     		cbz	r3, .L598
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 278


4693:FreeRTOS/tasks.c ****         }
 8087              		.loc 1 4693 13 is_stmt 1 view .LVU2321
4693:FreeRTOS/tasks.c ****         }
 8088              		.loc 1 4693 27 is_stmt 0 view .LVU2322
 8089 0006 044B     		ldr	r3, .L599
 8090 0008 1A68     		ldr	r2, [r3]
 8091 000a D36C     		ldr	r3, [r2, #76]
4693:FreeRTOS/tasks.c ****         }
 8092              		.loc 1 4693 44 view .LVU2323
 8093 000c 0133     		adds	r3, r3, #1
 8094 000e D364     		str	r3, [r2, #76]
 8095              	.L598:
4696:FreeRTOS/tasks.c ****     }
 8096              		.loc 1 4696 9 is_stmt 1 view .LVU2324
4696:FreeRTOS/tasks.c ****     }
 8097              		.loc 1 4696 16 is_stmt 0 view .LVU2325
 8098 0010 014B     		ldr	r3, .L599
 8099 0012 1868     		ldr	r0, [r3]
4697:FreeRTOS/tasks.c **** 
 8100              		.loc 1 4697 5 view .LVU2326
 8101 0014 7047     		bx	lr
 8102              	.L600:
 8103 0016 00BF     		.align	2
 8104              	.L599:
 8105 0018 00000000 		.word	.LANCHOR3
 8106              		.cfi_endproc
 8107              	.LFE65:
 8109              		.section	.text.ulTaskGenericNotifyTake,"ax",%progbits
 8110              		.align	1
 8111              		.global	ulTaskGenericNotifyTake
 8112              		.syntax unified
 8113              		.thumb
 8114              		.thumb_func
 8115              		.fpu fpv4-sp-d16
 8117              	ulTaskGenericNotifyTake:
 8118              	.LVL598:
 8119              	.LFB66:
4707:FreeRTOS/tasks.c ****         uint32_t ulReturn;
 8120              		.loc 1 4707 5 is_stmt 1 view -0
 8121              		.cfi_startproc
 8122              		@ args = 0, pretend = 0, frame = 0
 8123              		@ frame_needed = 0, uses_anonymous_args = 0
4708:FreeRTOS/tasks.c **** 
 8124              		.loc 1 4708 9 view .LVU2328
4710:FreeRTOS/tasks.c **** 
 8125              		.loc 1 4710 9 view .LVU2329
 8126 0000 40B1     		cbz	r0, .L602
4710:FreeRTOS/tasks.c **** 
 8127              		.loc 1 4710 9 view .LVU2330
 8128              	.LBB336:
 8129              	.LBI336:
 194:FreeRTOS/portable/portmacro.h ****     {
 8130              		.loc 2 194 34 view .LVU2331
 8131              	.LBB337:
 196:FreeRTOS/portable/portmacro.h **** 
 8132              		.loc 2 196 9 view .LVU2332
 198:FreeRTOS/portable/portmacro.h ****         (
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 279


 8133              		.loc 2 198 9 view .LVU2333
 8134              		.syntax unified
 8135              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 8136 0002 4FF05003 			mov r3, #80												
 8137 0006 83F31188 		msr basepri, r3											
 8138 000a BFF36F8F 		isb														
 8139 000e BFF34F8F 		dsb														
 8140              	
 8141              	@ 0 "" 2
 8142              	.LVL599:
 8143              		.thumb
 8144              		.syntax unified
 8145              	.L603:
 198:FreeRTOS/portable/portmacro.h ****         (
 8146              		.loc 2 198 9 is_stmt 0 view .LVU2334
 8147              	.LBE337:
 8148              	.LBE336:
4710:FreeRTOS/tasks.c **** 
 8149              		.loc 1 4710 9 is_stmt 1 discriminator 1 view .LVU2335
4710:FreeRTOS/tasks.c **** 
 8150              		.loc 1 4710 9 discriminator 1 view .LVU2336
4710:FreeRTOS/tasks.c **** 
 8151              		.loc 1 4710 9 discriminator 1 view .LVU2337
 8152 0012 FEE7     		b	.L603
 8153              	.L602:
4707:FreeRTOS/tasks.c ****         uint32_t ulReturn;
 8154              		.loc 1 4707 5 is_stmt 0 discriminator 2 view .LVU2338
 8155 0014 70B5     		push	{r4, r5, r6, lr}
 8156              	.LCFI63:
 8157              		.cfi_def_cfa_offset 16
 8158              		.cfi_offset 4, -16
 8159              		.cfi_offset 5, -12
 8160              		.cfi_offset 6, -8
 8161              		.cfi_offset 14, -4
 8162 0016 0E46     		mov	r6, r1
 8163 0018 1546     		mov	r5, r2
 8164 001a 0446     		mov	r4, r0
4710:FreeRTOS/tasks.c **** 
 8165              		.loc 1 4710 78 is_stmt 1 discriminator 2 view .LVU2339
4712:FreeRTOS/tasks.c ****         {
 8166              		.loc 1 4712 9 discriminator 2 view .LVU2340
 8167 001c FFF7FEFF 		bl	vPortEnterCritical
 8168              	.LVL600:
4715:FreeRTOS/tasks.c ****             {
 8169              		.loc 1 4715 13 discriminator 2 view .LVU2341
4715:FreeRTOS/tasks.c ****             {
 8170              		.loc 1 4715 29 is_stmt 0 discriminator 2 view .LVU2342
 8171 0020 1F4B     		ldr	r3, .L610
 8172 0022 1B68     		ldr	r3, [r3]
4715:FreeRTOS/tasks.c ****             {
 8173              		.loc 1 4715 46 discriminator 2 view .LVU2343
 8174 0024 04F11402 		add	r2, r4, #20
 8175 0028 53F82230 		ldr	r3, [r3, r2, lsl #2]
4715:FreeRTOS/tasks.c ****             {
 8176              		.loc 1 4715 15 discriminator 2 view .LVU2344
 8177 002c 33B9     		cbnz	r3, .L604
4718:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 280


 8178              		.loc 1 4718 17 is_stmt 1 view .LVU2345
4718:FreeRTOS/tasks.c **** 
 8179              		.loc 1 4718 29 is_stmt 0 view .LVU2346
 8180 002e 1C4B     		ldr	r3, .L610
 8181 0030 1B68     		ldr	r3, [r3]
4718:FreeRTOS/tasks.c **** 
 8182              		.loc 1 4718 62 view .LVU2347
 8183 0032 2344     		add	r3, r3, r4
 8184 0034 0122     		movs	r2, #1
 8185 0036 83F85420 		strb	r2, [r3, #84]
4720:FreeRTOS/tasks.c ****                 {
 8186              		.loc 1 4720 17 is_stmt 1 view .LVU2348
4720:FreeRTOS/tasks.c ****                 {
 8187              		.loc 1 4720 19 is_stmt 0 view .LVU2349
 8188 003a E5B9     		cbnz	r5, .L609
 8189              	.L604:
4738:FreeRTOS/tasks.c ****             }
 8190              		.loc 1 4738 41 is_stmt 1 view .LVU2350
4741:FreeRTOS/tasks.c **** 
 8191              		.loc 1 4741 9 view .LVU2351
 8192 003c FFF7FEFF 		bl	vPortExitCritical
 8193              	.LVL601:
4743:FreeRTOS/tasks.c ****         {
 8194              		.loc 1 4743 9 view .LVU2352
 8195 0040 FFF7FEFF 		bl	vPortEnterCritical
 8196              	.LVL602:
4745:FreeRTOS/tasks.c ****             ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8197              		.loc 1 4745 51 view .LVU2353
4746:FreeRTOS/tasks.c **** 
 8198              		.loc 1 4746 13 view .LVU2354
4746:FreeRTOS/tasks.c **** 
 8199              		.loc 1 4746 36 is_stmt 0 view .LVU2355
 8200 0044 164B     		ldr	r3, .L610
 8201 0046 1B68     		ldr	r3, [r3]
4746:FreeRTOS/tasks.c **** 
 8202              		.loc 1 4746 22 view .LVU2356
 8203 0048 04F11402 		add	r2, r4, #20
 8204 004c 53F82250 		ldr	r5, [r3, r2, lsl #2]
 8205              	.LVL603:
4748:FreeRTOS/tasks.c ****             {
 8206              		.loc 1 4748 13 is_stmt 1 view .LVU2357
4748:FreeRTOS/tasks.c ****             {
 8207              		.loc 1 4748 15 is_stmt 0 view .LVU2358
 8208 0050 3DB1     		cbz	r5, .L605
4750:FreeRTOS/tasks.c ****                 {
 8209              		.loc 1 4750 17 is_stmt 1 view .LVU2359
4750:FreeRTOS/tasks.c ****                 {
 8210              		.loc 1 4750 19 is_stmt 0 view .LVU2360
 8211 0052 EEB1     		cbz	r6, .L606
4752:FreeRTOS/tasks.c ****                 }
 8212              		.loc 1 4752 21 is_stmt 1 view .LVU2361
4752:FreeRTOS/tasks.c ****                 }
 8213              		.loc 1 4752 33 is_stmt 0 view .LVU2362
 8214 0054 124B     		ldr	r3, .L610
 8215 0056 1A68     		ldr	r2, [r3]
4752:FreeRTOS/tasks.c ****                 }
 8216              		.loc 1 4752 68 view .LVU2363
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 281


 8217 0058 04F11403 		add	r3, r4, #20
 8218 005c 0021     		movs	r1, #0
 8219 005e 42F82310 		str	r1, [r2, r3, lsl #2]
 8220              	.L605:
4761:FreeRTOS/tasks.c ****             }
 8221              		.loc 1 4761 41 is_stmt 1 view .LVU2364
4764:FreeRTOS/tasks.c ****         }
 8222              		.loc 1 4764 13 view .LVU2365
4764:FreeRTOS/tasks.c ****         }
 8223              		.loc 1 4764 25 is_stmt 0 view .LVU2366
 8224 0062 0F4B     		ldr	r3, .L610
 8225 0064 1B68     		ldr	r3, [r3]
4764:FreeRTOS/tasks.c ****         }
 8226              		.loc 1 4764 58 view .LVU2367
 8227 0066 1C44     		add	r4, r4, r3
 8228              	.LVL604:
4764:FreeRTOS/tasks.c ****         }
 8229              		.loc 1 4764 58 view .LVU2368
 8230 0068 0023     		movs	r3, #0
 8231 006a 84F85430 		strb	r3, [r4, #84]
4766:FreeRTOS/tasks.c **** 
 8232              		.loc 1 4766 9 is_stmt 1 view .LVU2369
 8233 006e FFF7FEFF 		bl	vPortExitCritical
 8234              	.LVL605:
4768:FreeRTOS/tasks.c ****     }
 8235              		.loc 1 4768 9 view .LVU2370
4769:FreeRTOS/tasks.c **** 
 8236              		.loc 1 4769 5 is_stmt 0 view .LVU2371
 8237 0072 2846     		mov	r0, r5
 8238 0074 70BD     		pop	{r4, r5, r6, pc}
 8239              	.LVL606:
 8240              	.L609:
4722:FreeRTOS/tasks.c ****                     traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWait );
 8241              		.loc 1 4722 21 is_stmt 1 view .LVU2372
 8242 0076 1146     		mov	r1, r2
 8243 0078 2846     		mov	r0, r5
 8244 007a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 8245              	.LVL607:
4723:FreeRTOS/tasks.c **** 
 8246              		.loc 1 4723 65 view .LVU2373
4729:FreeRTOS/tasks.c ****                 }
 8247              		.loc 1 4729 21 view .LVU2374
 8248 007e 094B     		ldr	r3, .L610+4
 8249 0080 4FF08052 		mov	r2, #268435456
 8250 0084 1A60     		str	r2, [r3]
4729:FreeRTOS/tasks.c ****                 }
 8251              		.loc 1 4729 21 view .LVU2375
 8252              		.syntax unified
 8253              	@ 4729 "FreeRTOS/tasks.c" 1
 8254 0086 BFF34F8F 		dsb
 8255              	@ 0 "" 2
4729:FreeRTOS/tasks.c ****                 }
 8256              		.loc 1 4729 21 view .LVU2376
 8257              	@ 4729 "FreeRTOS/tasks.c" 1
 8258 008a BFF36F8F 		isb
 8259              	@ 0 "" 2
4729:FreeRTOS/tasks.c ****                 }
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 282


 8260              		.loc 1 4729 43 view .LVU2377
 8261              		.thumb
 8262              		.syntax unified
 8263 008e D5E7     		b	.L604
 8264              	.LVL608:
 8265              	.L606:
4756:FreeRTOS/tasks.c ****                 }
 8266              		.loc 1 4756 21 view .LVU2378
4756:FreeRTOS/tasks.c ****                 }
 8267              		.loc 1 4756 33 is_stmt 0 view .LVU2379
 8268 0090 034B     		ldr	r3, .L610
 8269 0092 1A68     		ldr	r2, [r3]
4756:FreeRTOS/tasks.c ****                 }
 8270              		.loc 1 4756 79 view .LVU2380
 8271 0094 6B1E     		subs	r3, r5, #1
4756:FreeRTOS/tasks.c ****                 }
 8272              		.loc 1 4756 68 view .LVU2381
 8273 0096 04F11401 		add	r1, r4, #20
 8274 009a 42F82130 		str	r3, [r2, r1, lsl #2]
 8275 009e E0E7     		b	.L605
 8276              	.L611:
 8277              		.align	2
 8278              	.L610:
 8279 00a0 00000000 		.word	.LANCHOR3
 8280 00a4 04ED00E0 		.word	-536810236
 8281              		.cfi_endproc
 8282              	.LFE66:
 8284              		.section	.text.xTaskGenericNotifyWait,"ax",%progbits
 8285              		.align	1
 8286              		.global	xTaskGenericNotifyWait
 8287              		.syntax unified
 8288              		.thumb
 8289              		.thumb_func
 8290              		.fpu fpv4-sp-d16
 8292              	xTaskGenericNotifyWait:
 8293              	.LVL609:
 8294              	.LFB67:
4781:FreeRTOS/tasks.c ****         BaseType_t xReturn;
 8295              		.loc 1 4781 5 is_stmt 1 view -0
 8296              		.cfi_startproc
 8297              		@ args = 4, pretend = 0, frame = 0
 8298              		@ frame_needed = 0, uses_anonymous_args = 0
4781:FreeRTOS/tasks.c ****         BaseType_t xReturn;
 8299              		.loc 1 4781 5 is_stmt 0 view .LVU2383
 8300 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 8301              	.LCFI64:
 8302              		.cfi_def_cfa_offset 24
 8303              		.cfi_offset 4, -24
 8304              		.cfi_offset 5, -20
 8305              		.cfi_offset 6, -16
 8306              		.cfi_offset 7, -12
 8307              		.cfi_offset 8, -8
 8308              		.cfi_offset 14, -4
 8309 0004 069F     		ldr	r7, [sp, #24]
4782:FreeRTOS/tasks.c **** 
 8310              		.loc 1 4782 9 is_stmt 1 view .LVU2384
4784:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 283


 8311              		.loc 1 4784 9 view .LVU2385
 8312 0006 40B1     		cbz	r0, .L613
4784:FreeRTOS/tasks.c **** 
 8313              		.loc 1 4784 9 view .LVU2386
 8314              	.LBB338:
 8315              	.LBI338:
 194:FreeRTOS/portable/portmacro.h ****     {
 8316              		.loc 2 194 34 view .LVU2387
 8317              	.LBB339:
 196:FreeRTOS/portable/portmacro.h **** 
 8318              		.loc 2 196 9 view .LVU2388
 198:FreeRTOS/portable/portmacro.h ****         (
 8319              		.loc 2 198 9 view .LVU2389
 8320              		.syntax unified
 8321              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 8322 0008 4FF05003 			mov r3, #80												
 8323 000c 83F31188 		msr basepri, r3											
 8324 0010 BFF36F8F 		isb														
 8325 0014 BFF34F8F 		dsb														
 8326              	
 8327              	@ 0 "" 2
 8328              	.LVL610:
 8329              		.thumb
 8330              		.syntax unified
 8331              	.L614:
 198:FreeRTOS/portable/portmacro.h ****         (
 8332              		.loc 2 198 9 is_stmt 0 view .LVU2390
 8333              	.LBE339:
 8334              	.LBE338:
4784:FreeRTOS/tasks.c **** 
 8335              		.loc 1 4784 9 is_stmt 1 discriminator 1 view .LVU2391
4784:FreeRTOS/tasks.c **** 
 8336              		.loc 1 4784 9 discriminator 1 view .LVU2392
4784:FreeRTOS/tasks.c **** 
 8337              		.loc 1 4784 9 discriminator 1 view .LVU2393
 8338 0018 FEE7     		b	.L614
 8339              	.LVL611:
 8340              	.L613:
4784:FreeRTOS/tasks.c **** 
 8341              		.loc 1 4784 9 is_stmt 0 discriminator 1 view .LVU2394
 8342 001a 8846     		mov	r8, r1
 8343 001c 1646     		mov	r6, r2
 8344 001e 1D46     		mov	r5, r3
 8345 0020 0446     		mov	r4, r0
4784:FreeRTOS/tasks.c **** 
 8346              		.loc 1 4784 78 is_stmt 1 discriminator 2 view .LVU2395
4786:FreeRTOS/tasks.c ****         {
 8347              		.loc 1 4786 9 discriminator 2 view .LVU2396
 8348 0022 FFF7FEFF 		bl	vPortEnterCritical
 8349              	.LVL612:
4789:FreeRTOS/tasks.c ****             {
 8350              		.loc 1 4789 13 discriminator 2 view .LVU2397
4789:FreeRTOS/tasks.c ****             {
 8351              		.loc 1 4789 29 is_stmt 0 discriminator 2 view .LVU2398
 8352 0026 284B     		ldr	r3, .L622
 8353 0028 1B68     		ldr	r3, [r3]
4789:FreeRTOS/tasks.c ****             {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 284


 8354              		.loc 1 4789 44 discriminator 2 view .LVU2399
 8355 002a 2344     		add	r3, r3, r4
 8356 002c 93F85430 		ldrb	r3, [r3, #84]	@ zero_extendqisi2
 8357 0030 DBB2     		uxtb	r3, r3
4789:FreeRTOS/tasks.c ****             {
 8358              		.loc 1 4789 15 discriminator 2 view .LVU2400
 8359 0032 022B     		cmp	r3, #2
 8360 0034 0FD0     		beq	.L615
4794:FreeRTOS/tasks.c **** 
 8361              		.loc 1 4794 17 is_stmt 1 view .LVU2401
4794:FreeRTOS/tasks.c **** 
 8362              		.loc 1 4794 64 is_stmt 0 view .LVU2402
 8363 0036 244A     		ldr	r2, .L622
 8364 0038 1168     		ldr	r1, [r2]
 8365 003a 04F11400 		add	r0, r4, #20
 8366 003e 51F82030 		ldr	r3, [r1, r0, lsl #2]
 8367 0042 23EA0803 		bic	r3, r3, r8
 8368 0046 41F82030 		str	r3, [r1, r0, lsl #2]
4797:FreeRTOS/tasks.c **** 
 8369              		.loc 1 4797 17 is_stmt 1 view .LVU2403
4797:FreeRTOS/tasks.c **** 
 8370              		.loc 1 4797 29 is_stmt 0 view .LVU2404
 8371 004a 1368     		ldr	r3, [r2]
4797:FreeRTOS/tasks.c **** 
 8372              		.loc 1 4797 62 view .LVU2405
 8373 004c 2344     		add	r3, r3, r4
 8374 004e 0122     		movs	r2, #1
 8375 0050 83F85420 		strb	r2, [r3, #84]
4799:FreeRTOS/tasks.c ****                 {
 8376              		.loc 1 4799 17 is_stmt 1 view .LVU2406
4799:FreeRTOS/tasks.c ****                 {
 8377              		.loc 1 4799 19 is_stmt 0 view .LVU2407
 8378 0054 FFB9     		cbnz	r7, .L620
 8379              	.LVL613:
 8380              	.L615:
4817:FreeRTOS/tasks.c ****             }
 8381              		.loc 1 4817 41 is_stmt 1 view .LVU2408
4820:FreeRTOS/tasks.c **** 
 8382              		.loc 1 4820 9 view .LVU2409
 8383 0056 FFF7FEFF 		bl	vPortExitCritical
 8384              	.LVL614:
4822:FreeRTOS/tasks.c ****         {
 8385              		.loc 1 4822 9 view .LVU2410
 8386 005a FFF7FEFF 		bl	vPortEnterCritical
 8387              	.LVL615:
4824:FreeRTOS/tasks.c **** 
 8388              		.loc 1 4824 51 view .LVU2411
4826:FreeRTOS/tasks.c ****             {
 8389              		.loc 1 4826 13 view .LVU2412
4826:FreeRTOS/tasks.c ****             {
 8390              		.loc 1 4826 15 is_stmt 0 view .LVU2413
 8391 005e 35B1     		cbz	r5, .L616
4830:FreeRTOS/tasks.c ****             }
 8392              		.loc 1 4830 17 is_stmt 1 view .LVU2414
4830:FreeRTOS/tasks.c ****             }
 8393              		.loc 1 4830 53 is_stmt 0 view .LVU2415
 8394 0060 194B     		ldr	r3, .L622
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 285


 8395 0062 1B68     		ldr	r3, [r3]
4830:FreeRTOS/tasks.c ****             }
 8396              		.loc 1 4830 70 view .LVU2416
 8397 0064 04F11402 		add	r2, r4, #20
 8398 0068 53F82230 		ldr	r3, [r3, r2, lsl #2]
4830:FreeRTOS/tasks.c ****             }
 8399              		.loc 1 4830 39 view .LVU2417
 8400 006c 2B60     		str	r3, [r5]
 8401              	.L616:
4837:FreeRTOS/tasks.c ****             {
 8402              		.loc 1 4837 13 is_stmt 1 view .LVU2418
4837:FreeRTOS/tasks.c ****             {
 8403              		.loc 1 4837 29 is_stmt 0 view .LVU2419
 8404 006e 164B     		ldr	r3, .L622
 8405 0070 1B68     		ldr	r3, [r3]
4837:FreeRTOS/tasks.c ****             {
 8406              		.loc 1 4837 44 view .LVU2420
 8407 0072 2344     		add	r3, r3, r4
 8408 0074 93F85430 		ldrb	r3, [r3, #84]	@ zero_extendqisi2
 8409 0078 DBB2     		uxtb	r3, r3
4837:FreeRTOS/tasks.c ****             {
 8410              		.loc 1 4837 15 view .LVU2421
 8411 007a 022B     		cmp	r3, #2
 8412 007c 18D0     		beq	.L621
4840:FreeRTOS/tasks.c ****             }
 8413              		.loc 1 4840 25 view .LVU2422
 8414 007e 0025     		movs	r5, #0
 8415              	.LVL616:
 8416              	.L617:
4850:FreeRTOS/tasks.c ****         }
 8417              		.loc 1 4850 13 is_stmt 1 view .LVU2423
4850:FreeRTOS/tasks.c ****         }
 8418              		.loc 1 4850 25 is_stmt 0 view .LVU2424
 8419 0080 114B     		ldr	r3, .L622
 8420 0082 1B68     		ldr	r3, [r3]
4850:FreeRTOS/tasks.c ****         }
 8421              		.loc 1 4850 58 view .LVU2425
 8422 0084 1C44     		add	r4, r4, r3
 8423              	.LVL617:
4850:FreeRTOS/tasks.c ****         }
 8424              		.loc 1 4850 58 view .LVU2426
 8425 0086 0023     		movs	r3, #0
 8426 0088 84F85430 		strb	r3, [r4, #84]
4852:FreeRTOS/tasks.c **** 
 8427              		.loc 1 4852 9 is_stmt 1 view .LVU2427
 8428 008c FFF7FEFF 		bl	vPortExitCritical
 8429              	.LVL618:
4854:FreeRTOS/tasks.c ****     }
 8430              		.loc 1 4854 9 view .LVU2428
4855:FreeRTOS/tasks.c **** 
 8431              		.loc 1 4855 5 is_stmt 0 view .LVU2429
 8432 0090 2846     		mov	r0, r5
 8433 0092 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8434              	.LVL619:
 8435              	.L620:
4801:FreeRTOS/tasks.c ****                     traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWait );
 8436              		.loc 1 4801 21 is_stmt 1 view .LVU2430
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 286


 8437 0096 1146     		mov	r1, r2
 8438 0098 3846     		mov	r0, r7
 8439 009a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 8440              	.LVL620:
4802:FreeRTOS/tasks.c **** 
 8441              		.loc 1 4802 65 view .LVU2431
4808:FreeRTOS/tasks.c ****                 }
 8442              		.loc 1 4808 21 view .LVU2432
 8443 009e 0B4B     		ldr	r3, .L622+4
 8444 00a0 4FF08052 		mov	r2, #268435456
 8445 00a4 1A60     		str	r2, [r3]
 8446              	.LVL621:
4808:FreeRTOS/tasks.c ****                 }
 8447              		.loc 1 4808 21 view .LVU2433
 8448              		.syntax unified
 8449              	@ 4808 "FreeRTOS/tasks.c" 1
 8450 00a6 BFF34F8F 		dsb
 8451              	@ 0 "" 2
4808:FreeRTOS/tasks.c ****                 }
 8452              		.loc 1 4808 21 view .LVU2434
 8453              	@ 4808 "FreeRTOS/tasks.c" 1
 8454 00aa BFF36F8F 		isb
 8455              	@ 0 "" 2
4808:FreeRTOS/tasks.c ****                 }
 8456              		.loc 1 4808 43 view .LVU2435
 8457              		.thumb
 8458              		.syntax unified
 8459 00ae D2E7     		b	.L615
 8460              	.L621:
4846:FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
 8461              		.loc 1 4846 17 view .LVU2436
4846:FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
 8462              		.loc 1 4846 64 is_stmt 0 view .LVU2437
 8463 00b0 054B     		ldr	r3, .L622
 8464 00b2 1A68     		ldr	r2, [r3]
 8465 00b4 04F11401 		add	r1, r4, #20
 8466 00b8 52F82130 		ldr	r3, [r2, r1, lsl #2]
 8467 00bc 23EA0603 		bic	r3, r3, r6
 8468 00c0 42F82130 		str	r3, [r2, r1, lsl #2]
4847:FreeRTOS/tasks.c ****             }
 8469              		.loc 1 4847 17 is_stmt 1 view .LVU2438
 8470              	.LVL622:
4847:FreeRTOS/tasks.c ****             }
 8471              		.loc 1 4847 25 is_stmt 0 view .LVU2439
 8472 00c4 0125     		movs	r5, #1
 8473              	.LVL623:
4847:FreeRTOS/tasks.c ****             }
 8474              		.loc 1 4847 25 view .LVU2440
 8475 00c6 DBE7     		b	.L617
 8476              	.L623:
 8477              		.align	2
 8478              	.L622:
 8479 00c8 00000000 		.word	.LANCHOR3
 8480 00cc 04ED00E0 		.word	-536810236
 8481              		.cfi_endproc
 8482              	.LFE67:
 8484              		.section	.text.xTaskGenericNotify,"ax",%progbits
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 287


 8485              		.align	1
 8486              		.global	xTaskGenericNotify
 8487              		.syntax unified
 8488              		.thumb
 8489              		.thumb_func
 8490              		.fpu fpv4-sp-d16
 8492              	xTaskGenericNotify:
 8493              	.LVL624:
 8494              	.LFB68:
4867:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 8495              		.loc 1 4867 5 is_stmt 1 view -0
 8496              		.cfi_startproc
 8497              		@ args = 4, pretend = 0, frame = 0
 8498              		@ frame_needed = 0, uses_anonymous_args = 0
4867:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 8499              		.loc 1 4867 5 is_stmt 0 view .LVU2442
 8500 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 8501              	.LCFI65:
 8502              		.cfi_def_cfa_offset 24
 8503              		.cfi_offset 4, -24
 8504              		.cfi_offset 5, -20
 8505              		.cfi_offset 6, -16
 8506              		.cfi_offset 7, -12
 8507              		.cfi_offset 8, -8
 8508              		.cfi_offset 14, -4
 8509 0004 069F     		ldr	r7, [sp, #24]
4868:FreeRTOS/tasks.c ****         BaseType_t xReturn = pdPASS;
 8510              		.loc 1 4868 9 is_stmt 1 view .LVU2443
4869:FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
 8511              		.loc 1 4869 9 view .LVU2444
 8512              	.LVL625:
4870:FreeRTOS/tasks.c **** 
 8513              		.loc 1 4870 9 view .LVU2445
4872:FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
 8514              		.loc 1 4872 9 view .LVU2446
 8515 0006 41B1     		cbz	r1, .L625
4872:FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
 8516              		.loc 1 4872 9 view .LVU2447
 8517              	.LBB340:
 8518              	.LBI340:
 194:FreeRTOS/portable/portmacro.h ****     {
 8519              		.loc 2 194 34 view .LVU2448
 8520              	.LBB341:
 196:FreeRTOS/portable/portmacro.h **** 
 8521              		.loc 2 196 9 view .LVU2449
 198:FreeRTOS/portable/portmacro.h ****         (
 8522              		.loc 2 198 9 view .LVU2450
 8523              		.syntax unified
 8524              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 8525 0008 4FF05003 			mov r3, #80												
 8526 000c 83F31188 		msr basepri, r3											
 8527 0010 BFF36F8F 		isb														
 8528 0014 BFF34F8F 		dsb														
 8529              	
 8530              	@ 0 "" 2
 8531              	.LVL626:
 8532              		.thumb
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 288


 8533              		.syntax unified
 8534              	.L626:
 198:FreeRTOS/portable/portmacro.h ****         (
 8535              		.loc 2 198 9 is_stmt 0 view .LVU2451
 8536              	.LBE341:
 8537              	.LBE340:
4872:FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
 8538              		.loc 1 4872 9 is_stmt 1 discriminator 1 view .LVU2452
4872:FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
 8539              		.loc 1 4872 9 discriminator 1 view .LVU2453
4872:FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
 8540              		.loc 1 4872 9 discriminator 1 view .LVU2454
 8541 0018 FEE7     		b	.L626
 8542              	.LVL627:
 8543              	.L625:
4872:FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
 8544              		.loc 1 4872 9 is_stmt 0 discriminator 1 view .LVU2455
 8545 001a 0446     		mov	r4, r0
 8546 001c 1646     		mov	r6, r2
 8547 001e 9846     		mov	r8, r3
 8548 0020 0D46     		mov	r5, r1
4872:FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
 8549              		.loc 1 4872 80 is_stmt 1 discriminator 2 view .LVU2456
4873:FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
 8550              		.loc 1 4873 9 discriminator 2 view .LVU2457
 8551 0022 B0B1     		cbz	r0, .L646
4873:FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
 8552              		.loc 1 4873 38 discriminator 2 view .LVU2458
4874:FreeRTOS/tasks.c **** 
 8553              		.loc 1 4874 9 discriminator 2 view .LVU2459
 8554              	.LVL628:
4876:FreeRTOS/tasks.c ****         {
 8555              		.loc 1 4876 9 discriminator 2 view .LVU2460
 8556 0024 FFF7FEFF 		bl	vPortEnterCritical
 8557              	.LVL629:
4878:FreeRTOS/tasks.c ****             {
 8558              		.loc 1 4878 13 discriminator 2 view .LVU2461
4878:FreeRTOS/tasks.c ****             {
 8559              		.loc 1 4878 15 is_stmt 0 discriminator 2 view .LVU2462
 8560 0028 27B1     		cbz	r7, .L629
4880:FreeRTOS/tasks.c ****             }
 8561              		.loc 1 4880 17 is_stmt 1 view .LVU2463
4880:FreeRTOS/tasks.c ****             }
 8562              		.loc 1 4880 71 is_stmt 0 view .LVU2464
 8563 002a 05F11403 		add	r3, r5, #20
 8564 002e 54F82330 		ldr	r3, [r4, r3, lsl #2]
4880:FreeRTOS/tasks.c ****             }
 8565              		.loc 1 4880 47 view .LVU2465
 8566 0032 3B60     		str	r3, [r7]
 8567              	.L629:
4883:FreeRTOS/tasks.c **** 
 8568              		.loc 1 4883 13 is_stmt 1 view .LVU2466
4883:FreeRTOS/tasks.c **** 
 8569              		.loc 1 4883 35 is_stmt 0 view .LVU2467
 8570 0034 6319     		adds	r3, r4, r5
 8571 0036 93F85420 		ldrb	r2, [r3, #84]	@ zero_extendqisi2
 8572 003a D2B2     		uxtb	r2, r2
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 289


 8573              	.LVL630:
4885:FreeRTOS/tasks.c **** 
 8574              		.loc 1 4885 13 is_stmt 1 view .LVU2468
4885:FreeRTOS/tasks.c **** 
 8575              		.loc 1 4885 53 is_stmt 0 view .LVU2469
 8576 003c 0221     		movs	r1, #2
 8577 003e 83F85410 		strb	r1, [r3, #84]
4887:FreeRTOS/tasks.c ****             {
 8578              		.loc 1 4887 13 is_stmt 1 view .LVU2470
 8579 0042 B8F1040F 		cmp	r8, #4
 8580 0046 29D8     		bhi	.L630
 8581 0048 DFE808F0 		tbb	[pc, r8]
 8582              	.L632:
 8583 004c 35       		.byte	(.L642-.L632)/2
 8584 004d 0C       		.byte	(.L635-.L632)/2
 8585 004e 14       		.byte	(.L634-.L632)/2
 8586 004f 1C       		.byte	(.L633-.L632)/2
 8587 0050 21       		.byte	(.L631-.L632)/2
 8588              	.LVL631:
 8589 0051 00       		.p2align 1
 8590              	.L646:
4873:FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
 8591              		.loc 1 4873 9 view .LVU2471
 8592              	.LBB342:
 8593              	.LBI342:
 194:FreeRTOS/portable/portmacro.h ****     {
 8594              		.loc 2 194 34 view .LVU2472
 8595              	.LBB343:
 196:FreeRTOS/portable/portmacro.h **** 
 8596              		.loc 2 196 9 view .LVU2473
 198:FreeRTOS/portable/portmacro.h ****         (
 8597              		.loc 2 198 9 view .LVU2474
 8598              		.syntax unified
 8599              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 8600 0052 4FF05003 			mov r3, #80												
 8601 0056 83F31188 		msr basepri, r3											
 8602 005a BFF36F8F 		isb														
 8603 005e BFF34F8F 		dsb														
 8604              	
 8605              	@ 0 "" 2
 8606              	.LVL632:
 8607              		.thumb
 8608              		.syntax unified
 8609              	.L628:
 198:FreeRTOS/portable/portmacro.h ****         (
 8610              		.loc 2 198 9 is_stmt 0 view .LVU2475
 8611              	.LBE343:
 8612              	.LBE342:
4873:FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
 8613              		.loc 1 4873 9 is_stmt 1 discriminator 2 view .LVU2476
4873:FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
 8614              		.loc 1 4873 9 discriminator 2 view .LVU2477
4873:FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
 8615              		.loc 1 4873 9 discriminator 2 view .LVU2478
 8616 0062 FEE7     		b	.L628
 8617              	.LVL633:
 8618              	.L635:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 290


4890:FreeRTOS/tasks.c ****                     break;
 8619              		.loc 1 4890 21 view .LVU2479
4890:FreeRTOS/tasks.c ****                     break;
 8620              		.loc 1 4890 63 is_stmt 0 view .LVU2480
 8621 0064 1435     		adds	r5, r5, #20
 8622              	.LVL634:
4890:FreeRTOS/tasks.c ****                     break;
 8623              		.loc 1 4890 63 view .LVU2481
 8624 0066 54F82530 		ldr	r3, [r4, r5, lsl #2]
 8625 006a 3343     		orrs	r3, r3, r6
 8626 006c 44F82530 		str	r3, [r4, r5, lsl #2]
4891:FreeRTOS/tasks.c **** 
 8627              		.loc 1 4891 21 is_stmt 1 view .LVU2482
4869:FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
 8628              		.loc 1 4869 20 is_stmt 0 view .LVU2483
 8629 0070 0125     		movs	r5, #1
 8630              	.LVL635:
4891:FreeRTOS/tasks.c **** 
 8631              		.loc 1 4891 21 view .LVU2484
 8632 0072 21E0     		b	.L636
 8633              	.LVL636:
 8634              	.L634:
4894:FreeRTOS/tasks.c ****                     break;
 8635              		.loc 1 4894 21 is_stmt 1 view .LVU2485
4894:FreeRTOS/tasks.c ****                     break;
 8636              		.loc 1 4894 45 is_stmt 0 view .LVU2486
 8637 0074 1435     		adds	r5, r5, #20
 8638              	.LVL637:
4894:FreeRTOS/tasks.c ****                     break;
 8639              		.loc 1 4894 45 view .LVU2487
 8640 0076 54F82530 		ldr	r3, [r4, r5, lsl #2]
4894:FreeRTOS/tasks.c ****                     break;
 8641              		.loc 1 4894 66 view .LVU2488
 8642 007a 0133     		adds	r3, r3, #1
 8643 007c 44F82530 		str	r3, [r4, r5, lsl #2]
4895:FreeRTOS/tasks.c **** 
 8644              		.loc 1 4895 21 is_stmt 1 view .LVU2489
4869:FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
 8645              		.loc 1 4869 20 is_stmt 0 view .LVU2490
 8646 0080 0125     		movs	r5, #1
 8647              	.LVL638:
4895:FreeRTOS/tasks.c **** 
 8648              		.loc 1 4895 21 view .LVU2491
 8649 0082 19E0     		b	.L636
 8650              	.LVL639:
 8651              	.L633:
4898:FreeRTOS/tasks.c ****                     break;
 8652              		.loc 1 4898 21 is_stmt 1 view .LVU2492
4898:FreeRTOS/tasks.c ****                     break;
 8653              		.loc 1 4898 63 is_stmt 0 view .LVU2493
 8654 0084 1435     		adds	r5, r5, #20
 8655              	.LVL640:
4898:FreeRTOS/tasks.c ****                     break;
 8656              		.loc 1 4898 63 view .LVU2494
 8657 0086 44F82560 		str	r6, [r4, r5, lsl #2]
4899:FreeRTOS/tasks.c **** 
 8658              		.loc 1 4899 21 is_stmt 1 view .LVU2495
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 291


4869:FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
 8659              		.loc 1 4869 20 is_stmt 0 view .LVU2496
 8660 008a 0125     		movs	r5, #1
 8661              	.LVL641:
4899:FreeRTOS/tasks.c **** 
 8662              		.loc 1 4899 21 view .LVU2497
 8663 008c 14E0     		b	.L636
 8664              	.LVL642:
 8665              	.L631:
4903:FreeRTOS/tasks.c ****                     {
 8666              		.loc 1 4903 21 is_stmt 1 view .LVU2498
4903:FreeRTOS/tasks.c ****                     {
 8667              		.loc 1 4903 23 is_stmt 0 view .LVU2499
 8668 008e 022A     		cmp	r2, #2
 8669 0090 4BD0     		beq	.L643
4905:FreeRTOS/tasks.c ****                     }
 8670              		.loc 1 4905 25 is_stmt 1 view .LVU2500
4905:FreeRTOS/tasks.c ****                     }
 8671              		.loc 1 4905 67 is_stmt 0 view .LVU2501
 8672 0092 1435     		adds	r5, r5, #20
 8673              	.LVL643:
4905:FreeRTOS/tasks.c ****                     }
 8674              		.loc 1 4905 67 view .LVU2502
 8675 0094 44F82560 		str	r6, [r4, r5, lsl #2]
4869:FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
 8676              		.loc 1 4869 20 view .LVU2503
 8677 0098 0125     		movs	r5, #1
 8678              	.LVL644:
4869:FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
 8679              		.loc 1 4869 20 view .LVU2504
 8680 009a 0DE0     		b	.L636
 8681              	.LVL645:
 8682              	.L630:
4926:FreeRTOS/tasks.c **** 
 8683              		.loc 1 4926 21 is_stmt 1 view .LVU2505
 8684 009c 314B     		ldr	r3, .L648
 8685 009e 1B68     		ldr	r3, [r3]
 8686 00a0 002B     		cmp	r3, #0
 8687 00a2 44D0     		beq	.L644
4926:FreeRTOS/tasks.c **** 
 8688              		.loc 1 4926 21 view .LVU2506
 8689              	.LBB344:
 8690              	.LBI344:
 194:FreeRTOS/portable/portmacro.h ****     {
 8691              		.loc 2 194 34 view .LVU2507
 8692              	.LBB345:
 196:FreeRTOS/portable/portmacro.h **** 
 8693              		.loc 2 196 9 view .LVU2508
 198:FreeRTOS/portable/portmacro.h ****         (
 8694              		.loc 2 198 9 view .LVU2509
 8695              		.syntax unified
 8696              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 8697 00a4 4FF05003 			mov r3, #80												
 8698 00a8 83F31188 		msr basepri, r3											
 8699 00ac BFF36F8F 		isb														
 8700 00b0 BFF34F8F 		dsb														
 8701              	
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 292


 8702              	@ 0 "" 2
 8703              	.LVL646:
 8704              		.thumb
 8705              		.syntax unified
 8706              	.L637:
 198:FreeRTOS/portable/portmacro.h ****         (
 8707              		.loc 2 198 9 is_stmt 0 view .LVU2510
 8708              	.LBE345:
 8709              	.LBE344:
4926:FreeRTOS/tasks.c **** 
 8710              		.loc 1 4926 21 is_stmt 1 discriminator 3 view .LVU2511
4926:FreeRTOS/tasks.c **** 
 8711              		.loc 1 4926 21 discriminator 3 view .LVU2512
4926:FreeRTOS/tasks.c **** 
 8712              		.loc 1 4926 21 discriminator 3 view .LVU2513
 8713 00b4 FEE7     		b	.L637
 8714              	.L642:
4885:FreeRTOS/tasks.c **** 
 8715              		.loc 1 4885 53 is_stmt 0 view .LVU2514
 8716 00b6 0125     		movs	r5, #1
 8717              	.LVL647:
 8718              	.L636:
4931:FreeRTOS/tasks.c **** 
 8719              		.loc 1 4931 48 is_stmt 1 view .LVU2515
4935:FreeRTOS/tasks.c ****             {
 8720              		.loc 1 4935 13 view .LVU2516
4935:FreeRTOS/tasks.c ****             {
 8721              		.loc 1 4935 15 is_stmt 0 view .LVU2517
 8722 00b8 012A     		cmp	r2, #1
 8723 00ba 4DD1     		bne	.L638
 8724              	.LBB346:
4937:FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 8725              		.loc 1 4937 17 is_stmt 1 view .LVU2518
 8726 00bc 6369     		ldr	r3, [r4, #20]
 8727              	.LVL648:
4937:FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 8728              		.loc 1 4937 17 view .LVU2519
 8729 00be A268     		ldr	r2, [r4, #8]
 8730              	.LVL649:
4937:FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 8731              		.loc 1 4937 17 is_stmt 0 view .LVU2520
 8732 00c0 E168     		ldr	r1, [r4, #12]
 8733 00c2 9160     		str	r1, [r2, #8]
4937:FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 8734              		.loc 1 4937 17 is_stmt 1 view .LVU2521
 8735 00c4 E268     		ldr	r2, [r4, #12]
 8736 00c6 A168     		ldr	r1, [r4, #8]
 8737 00c8 5160     		str	r1, [r2, #4]
4937:FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 8738              		.loc 1 4937 17 view .LVU2522
 8739 00ca 5A68     		ldr	r2, [r3, #4]
 8740 00cc 211D     		adds	r1, r4, #4
 8741 00ce 8A42     		cmp	r2, r1
 8742 00d0 2FD0     		beq	.L647
 8743              	.L639:
4937:FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 8744              		.loc 1 4937 17 discriminator 3 view .LVU2523
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 293


 8745 00d2 0022     		movs	r2, #0
 8746 00d4 6261     		str	r2, [r4, #20]
4937:FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 8747              		.loc 1 4937 17 discriminator 3 view .LVU2524
 8748 00d6 1A68     		ldr	r2, [r3]
 8749 00d8 013A     		subs	r2, r2, #1
 8750 00da 1A60     		str	r2, [r3]
 8751              	.LBE346:
4937:FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 8752              		.loc 1 4937 62 discriminator 3 view .LVU2525
4938:FreeRTOS/tasks.c **** 
 8753              		.loc 1 4938 17 discriminator 3 view .LVU2526
4938:FreeRTOS/tasks.c **** 
 8754              		.loc 1 4938 17 discriminator 3 view .LVU2527
 8755 00dc E36A     		ldr	r3, [r4, #44]
 8756              	.LVL650:
4938:FreeRTOS/tasks.c **** 
 8757              		.loc 1 4938 17 is_stmt 0 discriminator 3 view .LVU2528
 8758 00de 0122     		movs	r2, #1
 8759 00e0 9A40     		lsls	r2, r2, r3
 8760 00e2 2148     		ldr	r0, .L648+4
 8761 00e4 0668     		ldr	r6, [r0]
 8762              	.LVL651:
4938:FreeRTOS/tasks.c **** 
 8763              		.loc 1 4938 17 discriminator 3 view .LVU2529
 8764 00e6 3243     		orrs	r2, r2, r6
 8765 00e8 0260     		str	r2, [r0]
 8766              	.LBB347:
4938:FreeRTOS/tasks.c **** 
 8767              		.loc 1 4938 17 is_stmt 1 discriminator 3 view .LVU2530
 8768 00ea 204A     		ldr	r2, .L648+8
 8769 00ec 03EB8303 		add	r3, r3, r3, lsl #2
 8770 00f0 02EB8303 		add	r3, r2, r3, lsl #2
 8771 00f4 5B68     		ldr	r3, [r3, #4]
 8772              	.LVL652:
4938:FreeRTOS/tasks.c **** 
 8773              		.loc 1 4938 17 discriminator 3 view .LVU2531
4938:FreeRTOS/tasks.c **** 
 8774              		.loc 1 4938 17 discriminator 3 view .LVU2532
4938:FreeRTOS/tasks.c **** 
 8775              		.loc 1 4938 17 discriminator 3 view .LVU2533
 8776 00f6 A360     		str	r3, [r4, #8]
4938:FreeRTOS/tasks.c **** 
 8777              		.loc 1 4938 17 discriminator 3 view .LVU2534
 8778 00f8 9868     		ldr	r0, [r3, #8]
 8779 00fa E060     		str	r0, [r4, #12]
4938:FreeRTOS/tasks.c **** 
 8780              		.loc 1 4938 17 discriminator 3 view .LVU2535
 8781 00fc 4160     		str	r1, [r0, #4]
4938:FreeRTOS/tasks.c **** 
 8782              		.loc 1 4938 17 discriminator 3 view .LVU2536
 8783 00fe 9960     		str	r1, [r3, #8]
4938:FreeRTOS/tasks.c **** 
 8784              		.loc 1 4938 17 discriminator 3 view .LVU2537
 8785 0100 E36A     		ldr	r3, [r4, #44]
 8786              	.LVL653:
4938:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 294


 8787              		.loc 1 4938 17 is_stmt 0 discriminator 3 view .LVU2538
 8788 0102 03EB8301 		add	r1, r3, r3, lsl #2
 8789 0106 8800     		lsls	r0, r1, #2
 8790 0108 02EB8101 		add	r1, r2, r1, lsl #2
 8791 010c 6161     		str	r1, [r4, #20]
4938:FreeRTOS/tasks.c **** 
 8792              		.loc 1 4938 17 is_stmt 1 discriminator 3 view .LVU2539
 8793 010e 1158     		ldr	r1, [r2, r0]
 8794 0110 0131     		adds	r1, r1, #1
 8795 0112 1150     		str	r1, [r2, r0]
 8796              	.LBE347:
4938:FreeRTOS/tasks.c **** 
 8797              		.loc 1 4938 17 discriminator 3 view .LVU2540
4938:FreeRTOS/tasks.c **** 
 8798              		.loc 1 4938 47 discriminator 3 view .LVU2541
4941:FreeRTOS/tasks.c **** 
 8799              		.loc 1 4941 17 discriminator 3 view .LVU2542
 8800 0114 A36A     		ldr	r3, [r4, #40]
 8801 0116 7BB1     		cbz	r3, .L640
4941:FreeRTOS/tasks.c **** 
 8802              		.loc 1 4941 17 view .LVU2543
 8803              	.LBB348:
 8804              	.LBI348:
 194:FreeRTOS/portable/portmacro.h ****     {
 8805              		.loc 2 194 34 view .LVU2544
 8806              	.LBB349:
 196:FreeRTOS/portable/portmacro.h **** 
 8807              		.loc 2 196 9 view .LVU2545
 198:FreeRTOS/portable/portmacro.h ****         (
 8808              		.loc 2 198 9 view .LVU2546
 8809              		.syntax unified
 8810              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 8811 0118 4FF05003 			mov r3, #80												
 8812 011c 83F31188 		msr basepri, r3											
 8813 0120 BFF36F8F 		isb														
 8814 0124 BFF34F8F 		dsb														
 8815              	
 8816              	@ 0 "" 2
 8817              	.LVL654:
 8818              		.thumb
 8819              		.syntax unified
 8820              	.L641:
 198:FreeRTOS/portable/portmacro.h ****         (
 8821              		.loc 2 198 9 is_stmt 0 view .LVU2547
 8822              	.LBE349:
 8823              	.LBE348:
4941:FreeRTOS/tasks.c **** 
 8824              		.loc 1 4941 17 is_stmt 1 discriminator 4 view .LVU2548
4941:FreeRTOS/tasks.c **** 
 8825              		.loc 1 4941 17 discriminator 4 view .LVU2549
4941:FreeRTOS/tasks.c **** 
 8826              		.loc 1 4941 17 discriminator 4 view .LVU2550
 8827 0128 FEE7     		b	.L641
 8828              	.LVL655:
 8829              	.L643:
4910:FreeRTOS/tasks.c ****                     }
 8830              		.loc 1 4910 33 is_stmt 0 view .LVU2551
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 295


 8831 012a 0025     		movs	r5, #0
 8832              	.LVL656:
4910:FreeRTOS/tasks.c ****                     }
 8833              		.loc 1 4910 33 view .LVU2552
 8834 012c C4E7     		b	.L636
 8835              	.LVL657:
 8836              	.L644:
4869:FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
 8837              		.loc 1 4869 20 view .LVU2553
 8838 012e 0125     		movs	r5, #1
 8839              	.LVL658:
4869:FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
 8840              		.loc 1 4869 20 view .LVU2554
 8841 0130 C2E7     		b	.L636
 8842              	.LVL659:
 8843              	.L647:
 8844              	.LBB350:
4937:FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 8845              		.loc 1 4937 17 is_stmt 1 discriminator 1 view .LVU2555
 8846 0132 E268     		ldr	r2, [r4, #12]
 8847 0134 5A60     		str	r2, [r3, #4]
 8848 0136 CCE7     		b	.L639
 8849              	.LVL660:
 8850              	.L640:
4937:FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 8851              		.loc 1 4937 17 is_stmt 0 discriminator 1 view .LVU2556
 8852              	.LBE350:
4941:FreeRTOS/tasks.c **** 
 8853              		.loc 1 4941 94 is_stmt 1 discriminator 2 view .LVU2557
4955:FreeRTOS/tasks.c ****                     }
 8854              		.loc 1 4955 25 discriminator 2 view .LVU2558
 8855 0138 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 8856              	.LVL661:
4959:FreeRTOS/tasks.c ****                 {
 8857              		.loc 1 4959 17 discriminator 2 view .LVU2559
4959:FreeRTOS/tasks.c ****                 {
 8858              		.loc 1 4959 26 is_stmt 0 discriminator 2 view .LVU2560
 8859 013c E26A     		ldr	r2, [r4, #44]
4959:FreeRTOS/tasks.c ****                 {
 8860              		.loc 1 4959 53 discriminator 2 view .LVU2561
 8861 013e 0C4B     		ldr	r3, .L648+12
 8862 0140 1B68     		ldr	r3, [r3]
 8863 0142 DB6A     		ldr	r3, [r3, #44]
4959:FreeRTOS/tasks.c ****                 {
 8864              		.loc 1 4959 19 discriminator 2 view .LVU2562
 8865 0144 9A42     		cmp	r2, r3
 8866 0146 07D9     		bls	.L638
4963:FreeRTOS/tasks.c ****                 }
 8867              		.loc 1 4963 21 is_stmt 1 view .LVU2563
 8868 0148 0A4B     		ldr	r3, .L648+16
 8869 014a 4FF08052 		mov	r2, #268435456
 8870 014e 1A60     		str	r2, [r3]
 8871              	.LVL662:
4963:FreeRTOS/tasks.c ****                 }
 8872              		.loc 1 4963 21 view .LVU2564
 8873              		.syntax unified
 8874              	@ 4963 "FreeRTOS/tasks.c" 1
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 296


 8875 0150 BFF34F8F 		dsb
 8876              	@ 0 "" 2
4963:FreeRTOS/tasks.c ****                 }
 8877              		.loc 1 4963 21 view .LVU2565
 8878              	@ 4963 "FreeRTOS/tasks.c" 1
 8879 0154 BFF36F8F 		isb
 8880              	@ 0 "" 2
4963:FreeRTOS/tasks.c ****                 }
 8881              		.loc 1 4963 52 view .LVU2566
 8882              		.thumb
 8883              		.syntax unified
 8884              	.L638:
4972:FreeRTOS/tasks.c ****             }
 8885              		.loc 1 4972 41 view .LVU2567
4975:FreeRTOS/tasks.c **** 
 8886              		.loc 1 4975 9 view .LVU2568
 8887 0158 FFF7FEFF 		bl	vPortExitCritical
 8888              	.LVL663:
4977:FreeRTOS/tasks.c ****     }
 8889              		.loc 1 4977 9 view .LVU2569
4978:FreeRTOS/tasks.c **** 
 8890              		.loc 1 4978 5 is_stmt 0 view .LVU2570
 8891 015c 2846     		mov	r0, r5
 8892 015e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8893              	.LVL664:
 8894              	.L649:
4978:FreeRTOS/tasks.c **** 
 8895              		.loc 1 4978 5 view .LVU2571
 8896 0162 00BF     		.align	2
 8897              	.L648:
 8898 0164 00000000 		.word	.LANCHOR6
 8899 0168 00000000 		.word	.LANCHOR2
 8900 016c 00000000 		.word	.LANCHOR4
 8901 0170 00000000 		.word	.LANCHOR3
 8902 0174 04ED00E0 		.word	-536810236
 8903              		.cfi_endproc
 8904              	.LFE68:
 8906              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 8907              		.align	1
 8908              		.global	xTaskGenericNotifyFromISR
 8909              		.syntax unified
 8910              		.thumb
 8911              		.thumb_func
 8912              		.fpu fpv4-sp-d16
 8914              	xTaskGenericNotifyFromISR:
 8915              	.LVL665:
 8916              	.LFB69:
4991:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 8917              		.loc 1 4991 5 is_stmt 1 view -0
 8918              		.cfi_startproc
 8919              		@ args = 8, pretend = 0, frame = 0
 8920              		@ frame_needed = 0, uses_anonymous_args = 0
4991:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 8921              		.loc 1 4991 5 is_stmt 0 view .LVU2573
 8922 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 8923              	.LCFI66:
 8924              		.cfi_def_cfa_offset 32
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 297


 8925              		.cfi_offset 3, -32
 8926              		.cfi_offset 4, -28
 8927              		.cfi_offset 5, -24
 8928              		.cfi_offset 6, -20
 8929              		.cfi_offset 7, -16
 8930              		.cfi_offset 8, -12
 8931              		.cfi_offset 9, -8
 8932              		.cfi_offset 14, -4
 8933 0004 DDF82090 		ldr	r9, [sp, #32]
 8934 0008 099E     		ldr	r6, [sp, #36]
4992:FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
 8935              		.loc 1 4992 9 is_stmt 1 view .LVU2574
4993:FreeRTOS/tasks.c ****         BaseType_t xReturn = pdPASS;
 8936              		.loc 1 4993 9 view .LVU2575
4994:FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 8937              		.loc 1 4994 9 view .LVU2576
 8938              	.LVL666:
4995:FreeRTOS/tasks.c **** 
 8939              		.loc 1 4995 9 view .LVU2577
4997:FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8940              		.loc 1 4997 9 view .LVU2578
 8941 000a 68B1     		cbz	r0, .L675
 8942 000c 0D46     		mov	r5, r1
 8943 000e 1746     		mov	r7, r2
 8944 0010 9846     		mov	r8, r3
 8945 0012 0446     		mov	r4, r0
4997:FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8946              		.loc 1 4997 38 discriminator 2 view .LVU2579
4998:FreeRTOS/tasks.c **** 
 8947              		.loc 1 4998 9 discriminator 2 view .LVU2580
 8948 0014 89B1     		cbz	r1, .L653
4998:FreeRTOS/tasks.c **** 
 8949              		.loc 1 4998 9 view .LVU2581
 8950              	.LBB351:
 8951              	.LBI351:
 194:FreeRTOS/portable/portmacro.h ****     {
 8952              		.loc 2 194 34 view .LVU2582
 8953              	.LBB352:
 196:FreeRTOS/portable/portmacro.h **** 
 8954              		.loc 2 196 9 view .LVU2583
 198:FreeRTOS/portable/portmacro.h ****         (
 8955              		.loc 2 198 9 view .LVU2584
 8956              		.syntax unified
 8957              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 8958 0016 4FF05003 			mov r3, #80												
 8959 001a 83F31188 		msr basepri, r3											
 8960 001e BFF36F8F 		isb														
 8961 0022 BFF34F8F 		dsb														
 8962              	
 8963              	@ 0 "" 2
 8964              	.LVL667:
 8965              		.thumb
 8966              		.syntax unified
 8967              	.L654:
 198:FreeRTOS/portable/portmacro.h ****         (
 8968              		.loc 2 198 9 is_stmt 0 view .LVU2585
 8969              	.LBE352:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 298


 8970              	.LBE351:
4998:FreeRTOS/tasks.c **** 
 8971              		.loc 1 4998 9 is_stmt 1 discriminator 2 view .LVU2586
4998:FreeRTOS/tasks.c **** 
 8972              		.loc 1 4998 9 discriminator 2 view .LVU2587
4998:FreeRTOS/tasks.c **** 
 8973              		.loc 1 4998 9 discriminator 2 view .LVU2588
 8974 0026 FEE7     		b	.L654
 8975              	.LVL668:
 8976              	.L675:
4997:FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8977              		.loc 1 4997 9 view .LVU2589
 8978              	.LBB353:
 8979              	.LBI353:
 194:FreeRTOS/portable/portmacro.h ****     {
 8980              		.loc 2 194 34 view .LVU2590
 8981              	.LBB354:
 196:FreeRTOS/portable/portmacro.h **** 
 8982              		.loc 2 196 9 view .LVU2591
 198:FreeRTOS/portable/portmacro.h ****         (
 8983              		.loc 2 198 9 view .LVU2592
 8984              		.syntax unified
 8985              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 8986 0028 4FF05003 			mov r3, #80												
 8987 002c 83F31188 		msr basepri, r3											
 8988 0030 BFF36F8F 		isb														
 8989 0034 BFF34F8F 		dsb														
 8990              	
 8991              	@ 0 "" 2
 8992              	.LVL669:
 8993              		.thumb
 8994              		.syntax unified
 8995              	.L652:
 198:FreeRTOS/portable/portmacro.h ****         (
 8996              		.loc 2 198 9 is_stmt 0 view .LVU2593
 8997              	.LBE354:
 8998              	.LBE353:
4997:FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8999              		.loc 1 4997 9 is_stmt 1 discriminator 1 view .LVU2594
4997:FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 9000              		.loc 1 4997 9 discriminator 1 view .LVU2595
4997:FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 9001              		.loc 1 4997 9 discriminator 1 view .LVU2596
 9002 0038 FEE7     		b	.L652
 9003              	.LVL670:
 9004              	.L653:
4998:FreeRTOS/tasks.c **** 
 9005              		.loc 1 4998 80 discriminator 2 view .LVU2597
5016:FreeRTOS/tasks.c **** 
 9006              		.loc 1 5016 9 discriminator 2 view .LVU2598
 9007 003a FFF7FEFF 		bl	vPortValidateInterruptPriority
 9008              	.LVL671:
5018:FreeRTOS/tasks.c **** 
 9009              		.loc 1 5018 9 discriminator 2 view .LVU2599
5020:FreeRTOS/tasks.c ****         {
 9010              		.loc 1 5020 9 discriminator 2 view .LVU2600
 9011              	.LBB355:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 299


 9012              	.LBI355:
 210:FreeRTOS/portable/portmacro.h ****     {
 9013              		.loc 2 210 38 discriminator 2 view .LVU2601
 9014              	.LBB356:
 212:FreeRTOS/portable/portmacro.h **** 
 9015              		.loc 2 212 9 discriminator 2 view .LVU2602
 214:FreeRTOS/portable/portmacro.h ****         (
 9016              		.loc 2 214 9 discriminator 2 view .LVU2603
 9017              		.syntax unified
 9018              	@ 214 "FreeRTOS/portable/portmacro.h" 1
 9019 003e EFF31181 			mrs r1, basepri											
 9020 0042 4FF05003 		mov r3, #80												
 9021 0046 83F31188 		msr basepri, r3											
 9022 004a BFF36F8F 		isb														
 9023 004e BFF34F8F 		dsb														
 9024              	
 9025              	@ 0 "" 2
 9026              	.LVL672:
 226:FreeRTOS/portable/portmacro.h ****     }
 9027              		.loc 2 226 9 discriminator 2 view .LVU2604
 226:FreeRTOS/portable/portmacro.h ****     }
 9028              		.loc 2 226 9 is_stmt 0 discriminator 2 view .LVU2605
 9029              		.thumb
 9030              		.syntax unified
 9031              	.LBE356:
 9032              	.LBE355:
5022:FreeRTOS/tasks.c ****             {
 9033              		.loc 1 5022 13 is_stmt 1 discriminator 2 view .LVU2606
5022:FreeRTOS/tasks.c ****             {
 9034              		.loc 1 5022 15 is_stmt 0 discriminator 2 view .LVU2607
 9035 0052 B9F1000F 		cmp	r9, #0
 9036 0056 05D0     		beq	.L655
5024:FreeRTOS/tasks.c ****             }
 9037              		.loc 1 5024 17 is_stmt 1 view .LVU2608
5024:FreeRTOS/tasks.c ****             }
 9038              		.loc 1 5024 71 is_stmt 0 view .LVU2609
 9039 0058 05F11403 		add	r3, r5, #20
 9040 005c 54F82330 		ldr	r3, [r4, r3, lsl #2]
5024:FreeRTOS/tasks.c ****             }
 9041              		.loc 1 5024 47 view .LVU2610
 9042 0060 C9F80030 		str	r3, [r9]
 9043              	.L655:
5027:FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 9044              		.loc 1 5027 13 is_stmt 1 view .LVU2611
5027:FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 9045              		.loc 1 5027 35 is_stmt 0 view .LVU2612
 9046 0064 6319     		adds	r3, r4, r5
 9047 0066 93F85420 		ldrb	r2, [r3, #84]	@ zero_extendqisi2
 9048 006a D2B2     		uxtb	r2, r2
 9049              	.LVL673:
5028:FreeRTOS/tasks.c **** 
 9050              		.loc 1 5028 13 is_stmt 1 view .LVU2613
5028:FreeRTOS/tasks.c **** 
 9051              		.loc 1 5028 53 is_stmt 0 view .LVU2614
 9052 006c 0220     		movs	r0, #2
 9053 006e 83F85400 		strb	r0, [r3, #84]
5030:FreeRTOS/tasks.c ****             {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 300


 9054              		.loc 1 5030 13 is_stmt 1 view .LVU2615
 9055 0072 B8F1040F 		cmp	r8, #4
 9056 0076 20D8     		bhi	.L656
 9057 0078 DFE808F0 		tbb	[pc, r8]
 9058              	.L658:
 9059 007c 2B       		.byte	(.L671-.L658)/2
 9060 007d 03       		.byte	(.L661-.L658)/2
 9061 007e 0B       		.byte	(.L660-.L658)/2
 9062 007f 13       		.byte	(.L659-.L658)/2
 9063 0080 18       		.byte	(.L657-.L658)/2
 9064 0081 00       		.p2align 1
 9065              	.L661:
5033:FreeRTOS/tasks.c ****                     break;
 9066              		.loc 1 5033 21 view .LVU2616
5033:FreeRTOS/tasks.c ****                     break;
 9067              		.loc 1 5033 63 is_stmt 0 view .LVU2617
 9068 0082 1435     		adds	r5, r5, #20
 9069              	.LVL674:
5033:FreeRTOS/tasks.c ****                     break;
 9070              		.loc 1 5033 63 view .LVU2618
 9071 0084 54F82530 		ldr	r3, [r4, r5, lsl #2]
 9072 0088 3B43     		orrs	r3, r3, r7
 9073 008a 44F82530 		str	r3, [r4, r5, lsl #2]
5034:FreeRTOS/tasks.c **** 
 9074              		.loc 1 5034 21 is_stmt 1 view .LVU2619
4994:FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 9075              		.loc 1 4994 20 is_stmt 0 view .LVU2620
 9076 008e 0120     		movs	r0, #1
5034:FreeRTOS/tasks.c **** 
 9077              		.loc 1 5034 21 view .LVU2621
 9078 0090 20E0     		b	.L662
 9079              	.LVL675:
 9080              	.L660:
5037:FreeRTOS/tasks.c ****                     break;
 9081              		.loc 1 5037 21 is_stmt 1 view .LVU2622
5037:FreeRTOS/tasks.c ****                     break;
 9082              		.loc 1 5037 45 is_stmt 0 view .LVU2623
 9083 0092 1435     		adds	r5, r5, #20
 9084              	.LVL676:
5037:FreeRTOS/tasks.c ****                     break;
 9085              		.loc 1 5037 45 view .LVU2624
 9086 0094 54F82530 		ldr	r3, [r4, r5, lsl #2]
5037:FreeRTOS/tasks.c ****                     break;
 9087              		.loc 1 5037 66 view .LVU2625
 9088 0098 0133     		adds	r3, r3, #1
 9089 009a 44F82530 		str	r3, [r4, r5, lsl #2]
5038:FreeRTOS/tasks.c **** 
 9090              		.loc 1 5038 21 is_stmt 1 view .LVU2626
4994:FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 9091              		.loc 1 4994 20 is_stmt 0 view .LVU2627
 9092 009e 0120     		movs	r0, #1
5038:FreeRTOS/tasks.c **** 
 9093              		.loc 1 5038 21 view .LVU2628
 9094 00a0 18E0     		b	.L662
 9095              	.LVL677:
 9096              	.L659:
5041:FreeRTOS/tasks.c ****                     break;
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 301


 9097              		.loc 1 5041 21 is_stmt 1 view .LVU2629
5041:FreeRTOS/tasks.c ****                     break;
 9098              		.loc 1 5041 63 is_stmt 0 view .LVU2630
 9099 00a2 1435     		adds	r5, r5, #20
 9100              	.LVL678:
5041:FreeRTOS/tasks.c ****                     break;
 9101              		.loc 1 5041 63 view .LVU2631
 9102 00a4 44F82570 		str	r7, [r4, r5, lsl #2]
5042:FreeRTOS/tasks.c **** 
 9103              		.loc 1 5042 21 is_stmt 1 view .LVU2632
4994:FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 9104              		.loc 1 4994 20 is_stmt 0 view .LVU2633
 9105 00a8 0120     		movs	r0, #1
5042:FreeRTOS/tasks.c **** 
 9106              		.loc 1 5042 21 view .LVU2634
 9107 00aa 13E0     		b	.L662
 9108              	.LVL679:
 9109              	.L657:
5046:FreeRTOS/tasks.c ****                     {
 9110              		.loc 1 5046 21 is_stmt 1 view .LVU2635
5046:FreeRTOS/tasks.c ****                     {
 9111              		.loc 1 5046 23 is_stmt 0 view .LVU2636
 9112 00ac 022A     		cmp	r2, #2
 9113 00ae 17D0     		beq	.L672
5048:FreeRTOS/tasks.c ****                     }
 9114              		.loc 1 5048 25 is_stmt 1 view .LVU2637
5048:FreeRTOS/tasks.c ****                     }
 9115              		.loc 1 5048 67 is_stmt 0 view .LVU2638
 9116 00b0 1435     		adds	r5, r5, #20
 9117              	.LVL680:
5048:FreeRTOS/tasks.c ****                     }
 9118              		.loc 1 5048 67 view .LVU2639
 9119 00b2 44F82570 		str	r7, [r4, r5, lsl #2]
4994:FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 9120              		.loc 1 4994 20 view .LVU2640
 9121 00b6 0120     		movs	r0, #1
 9122 00b8 0CE0     		b	.L662
 9123              	.LVL681:
 9124              	.L656:
5069:FreeRTOS/tasks.c ****                     break;
 9125              		.loc 1 5069 21 is_stmt 1 view .LVU2641
 9126 00ba 394B     		ldr	r3, .L678
 9127 00bc 1B68     		ldr	r3, [r3]
 9128 00be 8BB1     		cbz	r3, .L673
5069:FreeRTOS/tasks.c ****                     break;
 9129              		.loc 1 5069 21 view .LVU2642
 9130              	.LBB357:
 9131              	.LBI357:
 194:FreeRTOS/portable/portmacro.h ****     {
 9132              		.loc 2 194 34 view .LVU2643
 9133              	.LBB358:
 196:FreeRTOS/portable/portmacro.h **** 
 9134              		.loc 2 196 9 view .LVU2644
 198:FreeRTOS/portable/portmacro.h ****         (
 9135              		.loc 2 198 9 view .LVU2645
 9136              		.syntax unified
 9137              	@ 198 "FreeRTOS/portable/portmacro.h" 1
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 302


 9138 00c0 4FF05003 			mov r3, #80												
 9139 00c4 83F31188 		msr basepri, r3											
 9140 00c8 BFF36F8F 		isb														
 9141 00cc BFF34F8F 		dsb														
 9142              	
 9143              	@ 0 "" 2
 9144              	.LVL682:
 9145              		.thumb
 9146              		.syntax unified
 9147              	.L663:
 198:FreeRTOS/portable/portmacro.h ****         (
 9148              		.loc 2 198 9 is_stmt 0 view .LVU2646
 9149              	.LBE358:
 9150              	.LBE357:
5069:FreeRTOS/tasks.c ****                     break;
 9151              		.loc 1 5069 21 is_stmt 1 discriminator 3 view .LVU2647
5069:FreeRTOS/tasks.c ****                     break;
 9152              		.loc 1 5069 21 discriminator 3 view .LVU2648
5069:FreeRTOS/tasks.c ****                     break;
 9153              		.loc 1 5069 21 discriminator 3 view .LVU2649
 9154 00d0 FEE7     		b	.L663
 9155              	.L671:
5028:FreeRTOS/tasks.c **** 
 9156              		.loc 1 5028 53 is_stmt 0 view .LVU2650
 9157 00d2 0120     		movs	r0, #1
 9158              	.LVL683:
 9159              	.L662:
5073:FreeRTOS/tasks.c **** 
 9160              		.loc 1 5073 57 is_stmt 1 view .LVU2651
5077:FreeRTOS/tasks.c ****             {
 9161              		.loc 1 5077 13 view .LVU2652
5077:FreeRTOS/tasks.c ****             {
 9162              		.loc 1 5077 15 is_stmt 0 view .LVU2653
 9163 00d4 012A     		cmp	r2, #1
 9164 00d6 07D0     		beq	.L676
 9165              	.LVL684:
 9166              	.L664:
5110:FreeRTOS/tasks.c ****                 }
 9167              		.loc 1 5110 45 is_stmt 1 view .LVU2654
5114:FreeRTOS/tasks.c **** 
 9168              		.loc 1 5114 9 view .LVU2655
 9169              	.LBB359:
 9170              	.LBI359:
 230:FreeRTOS/portable/portmacro.h ****     {
 9171              		.loc 2 230 34 view .LVU2656
 9172              	.LBB360:
 9173              		.loc 2 232 9 view .LVU2657
 9174              		.syntax unified
 9175              	@ 232 "FreeRTOS/portable/portmacro.h" 1
 9176 00d8 81F31188 			msr basepri, r1	
 9177              	@ 0 "" 2
 9178              	.LVL685:
 9179              		.loc 2 232 9 is_stmt 0 view .LVU2658
 9180              		.thumb
 9181              		.syntax unified
 9182              	.LBE360:
 9183              	.LBE359:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 303


5116:FreeRTOS/tasks.c ****     }
 9184              		.loc 1 5116 9 is_stmt 1 view .LVU2659
5117:FreeRTOS/tasks.c **** 
 9185              		.loc 1 5117 5 is_stmt 0 view .LVU2660
 9186 00dc BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 9187              	.LVL686:
 9188              	.L672:
5053:FreeRTOS/tasks.c ****                     }
 9189              		.loc 1 5053 33 view .LVU2661
 9190 00e0 0020     		movs	r0, #0
 9191 00e2 F7E7     		b	.L662
 9192              	.L673:
4994:FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 9193              		.loc 1 4994 20 view .LVU2662
 9194 00e4 0120     		movs	r0, #1
 9195 00e6 F5E7     		b	.L662
 9196              	.LVL687:
 9197              	.L676:
5080:FreeRTOS/tasks.c **** 
 9198              		.loc 1 5080 17 is_stmt 1 view .LVU2663
 9199 00e8 A36A     		ldr	r3, [r4, #40]
 9200 00ea 43B1     		cbz	r3, .L665
5080:FreeRTOS/tasks.c **** 
 9201              		.loc 1 5080 17 view .LVU2664
 9202              	.LBB361:
 9203              	.LBI361:
 194:FreeRTOS/portable/portmacro.h ****     {
 9204              		.loc 2 194 34 view .LVU2665
 9205              	.LBB362:
 196:FreeRTOS/portable/portmacro.h **** 
 9206              		.loc 2 196 9 view .LVU2666
 198:FreeRTOS/portable/portmacro.h ****         (
 9207              		.loc 2 198 9 view .LVU2667
 9208              		.syntax unified
 9209              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 9210 00ec 4FF05003 			mov r3, #80												
 9211 00f0 83F31188 		msr basepri, r3											
 9212 00f4 BFF36F8F 		isb														
 9213 00f8 BFF34F8F 		dsb														
 9214              	
 9215              	@ 0 "" 2
 9216              	.LVL688:
 9217              		.thumb
 9218              		.syntax unified
 9219              	.L666:
 198:FreeRTOS/portable/portmacro.h ****         (
 9220              		.loc 2 198 9 is_stmt 0 view .LVU2668
 9221              	.LBE362:
 9222              	.LBE361:
5080:FreeRTOS/tasks.c **** 
 9223              		.loc 1 5080 17 is_stmt 1 discriminator 4 view .LVU2669
5080:FreeRTOS/tasks.c **** 
 9224              		.loc 1 5080 17 discriminator 4 view .LVU2670
5080:FreeRTOS/tasks.c **** 
 9225              		.loc 1 5080 17 discriminator 4 view .LVU2671
 9226 00fc FEE7     		b	.L666
 9227              	.L665:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 304


5080:FreeRTOS/tasks.c **** 
 9228              		.loc 1 5080 94 discriminator 2 view .LVU2672
5082:FreeRTOS/tasks.c ****                 {
 9229              		.loc 1 5082 17 discriminator 2 view .LVU2673
5082:FreeRTOS/tasks.c ****                 {
 9230              		.loc 1 5082 42 is_stmt 0 discriminator 2 view .LVU2674
 9231 00fe 294B     		ldr	r3, .L678+4
 9232 0100 1B68     		ldr	r3, [r3]
5082:FreeRTOS/tasks.c ****                 {
 9233              		.loc 1 5082 19 discriminator 2 view .LVU2675
 9234 0102 002B     		cmp	r3, #0
 9235 0104 3DD1     		bne	.L667
 9236              	.LBB363:
5084:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 9237              		.loc 1 5084 21 is_stmt 1 view .LVU2676
 9238 0106 6369     		ldr	r3, [r4, #20]
 9239              	.LVL689:
5084:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 9240              		.loc 1 5084 21 view .LVU2677
 9241 0108 A268     		ldr	r2, [r4, #8]
 9242              	.LVL690:
5084:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 9243              		.loc 1 5084 21 is_stmt 0 view .LVU2678
 9244 010a E568     		ldr	r5, [r4, #12]
 9245 010c 9560     		str	r5, [r2, #8]
5084:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 9246              		.loc 1 5084 21 is_stmt 1 view .LVU2679
 9247 010e E268     		ldr	r2, [r4, #12]
 9248 0110 A568     		ldr	r5, [r4, #8]
 9249 0112 5560     		str	r5, [r2, #4]
5084:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 9250              		.loc 1 5084 21 view .LVU2680
 9251 0114 5A68     		ldr	r2, [r3, #4]
 9252 0116 251D     		adds	r5, r4, #4
 9253 0118 AA42     		cmp	r2, r5
 9254 011a 2FD0     		beq	.L677
 9255              	.L668:
5084:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 9256              		.loc 1 5084 21 discriminator 3 view .LVU2681
 9257 011c 0022     		movs	r2, #0
 9258 011e 6261     		str	r2, [r4, #20]
5084:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 9259              		.loc 1 5084 21 discriminator 3 view .LVU2682
 9260 0120 1A68     		ldr	r2, [r3]
 9261 0122 013A     		subs	r2, r2, #1
 9262 0124 1A60     		str	r2, [r3]
 9263              	.LBE363:
5084:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 9264              		.loc 1 5084 66 discriminator 3 view .LVU2683
5085:FreeRTOS/tasks.c ****                 }
 9265              		.loc 1 5085 21 discriminator 3 view .LVU2684
5085:FreeRTOS/tasks.c ****                 }
 9266              		.loc 1 5085 21 discriminator 3 view .LVU2685
 9267 0126 E36A     		ldr	r3, [r4, #44]
 9268              	.LVL691:
5085:FreeRTOS/tasks.c ****                 }
 9269              		.loc 1 5085 21 is_stmt 0 discriminator 3 view .LVU2686
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 305


 9270 0128 0122     		movs	r2, #1
 9271 012a 9A40     		lsls	r2, r2, r3
 9272 012c 1E4F     		ldr	r7, .L678+8
 9273              	.LVL692:
5085:FreeRTOS/tasks.c ****                 }
 9274              		.loc 1 5085 21 discriminator 3 view .LVU2687
 9275 012e D7F800C0 		ldr	ip, [r7]
 9276 0132 42EA0C02 		orr	r2, r2, ip
 9277 0136 3A60     		str	r2, [r7]
 9278              	.LBB364:
5085:FreeRTOS/tasks.c ****                 }
 9279              		.loc 1 5085 21 is_stmt 1 discriminator 3 view .LVU2688
 9280 0138 1C4A     		ldr	r2, .L678+12
 9281 013a 03EB8303 		add	r3, r3, r3, lsl #2
 9282 013e 02EB8303 		add	r3, r2, r3, lsl #2
 9283 0142 5B68     		ldr	r3, [r3, #4]
 9284              	.LVL693:
5085:FreeRTOS/tasks.c ****                 }
 9285              		.loc 1 5085 21 discriminator 3 view .LVU2689
5085:FreeRTOS/tasks.c ****                 }
 9286              		.loc 1 5085 21 discriminator 3 view .LVU2690
5085:FreeRTOS/tasks.c ****                 }
 9287              		.loc 1 5085 21 discriminator 3 view .LVU2691
 9288 0144 A360     		str	r3, [r4, #8]
5085:FreeRTOS/tasks.c ****                 }
 9289              		.loc 1 5085 21 discriminator 3 view .LVU2692
 9290 0146 9F68     		ldr	r7, [r3, #8]
 9291 0148 E760     		str	r7, [r4, #12]
5085:FreeRTOS/tasks.c ****                 }
 9292              		.loc 1 5085 21 discriminator 3 view .LVU2693
 9293 014a 7D60     		str	r5, [r7, #4]
5085:FreeRTOS/tasks.c ****                 }
 9294              		.loc 1 5085 21 discriminator 3 view .LVU2694
 9295 014c 9D60     		str	r5, [r3, #8]
5085:FreeRTOS/tasks.c ****                 }
 9296              		.loc 1 5085 21 discriminator 3 view .LVU2695
 9297 014e E36A     		ldr	r3, [r4, #44]
 9298              	.LVL694:
5085:FreeRTOS/tasks.c ****                 }
 9299              		.loc 1 5085 21 is_stmt 0 discriminator 3 view .LVU2696
 9300 0150 03EB8305 		add	r5, r3, r3, lsl #2
 9301 0154 AF00     		lsls	r7, r5, #2
 9302 0156 02EB8505 		add	r5, r2, r5, lsl #2
 9303 015a 6561     		str	r5, [r4, #20]
5085:FreeRTOS/tasks.c ****                 }
 9304              		.loc 1 5085 21 is_stmt 1 discriminator 3 view .LVU2697
 9305 015c D559     		ldr	r5, [r2, r7]
 9306 015e 0135     		adds	r5, r5, #1
 9307 0160 D551     		str	r5, [r2, r7]
 9308              	.LBE364:
5085:FreeRTOS/tasks.c ****                 }
 9309              		.loc 1 5085 21 discriminator 3 view .LVU2698
5085:FreeRTOS/tasks.c ****                 }
 9310              		.loc 1 5085 51 discriminator 3 view .LVU2699
 9311              	.L669:
5091:FreeRTOS/tasks.c ****                 }
 9312              		.loc 1 5091 89 discriminator 1 view .LVU2700
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 306


5094:FreeRTOS/tasks.c ****                 {
 9313              		.loc 1 5094 17 discriminator 1 view .LVU2701
5094:FreeRTOS/tasks.c ****                 {
 9314              		.loc 1 5094 26 is_stmt 0 discriminator 1 view .LVU2702
 9315 0162 E26A     		ldr	r2, [r4, #44]
5094:FreeRTOS/tasks.c ****                 {
 9316              		.loc 1 5094 53 discriminator 1 view .LVU2703
 9317 0164 124B     		ldr	r3, .L678+16
 9318 0166 1B68     		ldr	r3, [r3]
 9319 0168 DB6A     		ldr	r3, [r3, #44]
5094:FreeRTOS/tasks.c ****                 {
 9320              		.loc 1 5094 19 discriminator 1 view .LVU2704
 9321 016a 9A42     		cmp	r2, r3
 9322 016c B4D9     		bls	.L664
5098:FreeRTOS/tasks.c ****                     {
 9323              		.loc 1 5098 21 is_stmt 1 view .LVU2705
5098:FreeRTOS/tasks.c ****                     {
 9324              		.loc 1 5098 23 is_stmt 0 view .LVU2706
 9325 016e 0EB1     		cbz	r6, .L670
5100:FreeRTOS/tasks.c ****                     }
 9326              		.loc 1 5100 25 is_stmt 1 view .LVU2707
5100:FreeRTOS/tasks.c ****                     }
 9327              		.loc 1 5100 52 is_stmt 0 view .LVU2708
 9328 0170 0123     		movs	r3, #1
 9329 0172 3360     		str	r3, [r6]
 9330              	.L670:
5106:FreeRTOS/tasks.c ****                 }
 9331              		.loc 1 5106 21 is_stmt 1 view .LVU2709
5106:FreeRTOS/tasks.c ****                 }
 9332              		.loc 1 5106 35 is_stmt 0 view .LVU2710
 9333 0174 0F4B     		ldr	r3, .L678+20
 9334 0176 0122     		movs	r2, #1
 9335 0178 1A60     		str	r2, [r3]
 9336 017a ADE7     		b	.L664
 9337              	.LVL695:
 9338              	.L677:
 9339              	.LBB365:
5084:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 9340              		.loc 1 5084 21 is_stmt 1 discriminator 1 view .LVU2711
 9341 017c E268     		ldr	r2, [r4, #12]
 9342 017e 5A60     		str	r2, [r3, #4]
 9343 0180 CCE7     		b	.L668
 9344              	.LVL696:
 9345              	.L667:
5084:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 9346              		.loc 1 5084 21 is_stmt 0 discriminator 1 view .LVU2712
 9347              	.LBE365:
 9348              	.LBB366:
5091:FreeRTOS/tasks.c ****                 }
 9349              		.loc 1 5091 21 is_stmt 1 view .LVU2713
 9350 0182 0D4B     		ldr	r3, .L678+24
 9351 0184 5A68     		ldr	r2, [r3, #4]
 9352              	.LVL697:
5091:FreeRTOS/tasks.c ****                 }
 9353              		.loc 1 5091 21 view .LVU2714
5091:FreeRTOS/tasks.c ****                 }
 9354              		.loc 1 5091 21 view .LVU2715
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 307


5091:FreeRTOS/tasks.c ****                 }
 9355              		.loc 1 5091 21 view .LVU2716
 9356 0186 E261     		str	r2, [r4, #28]
5091:FreeRTOS/tasks.c ****                 }
 9357              		.loc 1 5091 21 view .LVU2717
 9358 0188 9768     		ldr	r7, [r2, #8]
 9359              	.LVL698:
5091:FreeRTOS/tasks.c ****                 }
 9360              		.loc 1 5091 21 is_stmt 0 view .LVU2718
 9361 018a 2762     		str	r7, [r4, #32]
5091:FreeRTOS/tasks.c ****                 }
 9362              		.loc 1 5091 21 is_stmt 1 view .LVU2719
 9363 018c 04F11805 		add	r5, r4, #24
 9364 0190 7D60     		str	r5, [r7, #4]
5091:FreeRTOS/tasks.c ****                 }
 9365              		.loc 1 5091 21 view .LVU2720
 9366 0192 9560     		str	r5, [r2, #8]
5091:FreeRTOS/tasks.c ****                 }
 9367              		.loc 1 5091 21 view .LVU2721
 9368 0194 A362     		str	r3, [r4, #40]
5091:FreeRTOS/tasks.c ****                 }
 9369              		.loc 1 5091 21 view .LVU2722
 9370 0196 1A68     		ldr	r2, [r3]
 9371              	.LVL699:
5091:FreeRTOS/tasks.c ****                 }
 9372              		.loc 1 5091 21 is_stmt 0 view .LVU2723
 9373 0198 0132     		adds	r2, r2, #1
 9374 019a 1A60     		str	r2, [r3]
 9375 019c E1E7     		b	.L669
 9376              	.L679:
 9377 019e 00BF     		.align	2
 9378              	.L678:
 9379 01a0 00000000 		.word	.LANCHOR6
 9380 01a4 00000000 		.word	.LANCHOR16
 9381 01a8 00000000 		.word	.LANCHOR2
 9382 01ac 00000000 		.word	.LANCHOR4
 9383 01b0 00000000 		.word	.LANCHOR3
 9384 01b4 00000000 		.word	.LANCHOR17
 9385 01b8 00000000 		.word	.LANCHOR1
 9386              	.LBE366:
 9387              		.cfi_endproc
 9388              	.LFE69:
 9390              		.section	.text.vTaskGenericNotifyGiveFromISR,"ax",%progbits
 9391              		.align	1
 9392              		.global	vTaskGenericNotifyGiveFromISR
 9393              		.syntax unified
 9394              		.thumb
 9395              		.thumb_func
 9396              		.fpu fpv4-sp-d16
 9398              	vTaskGenericNotifyGiveFromISR:
 9399              	.LVL700:
 9400              	.LFB70:
5127:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 9401              		.loc 1 5127 5 is_stmt 1 view -0
 9402              		.cfi_startproc
 9403              		@ args = 0, pretend = 0, frame = 0
 9404              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 308


5127:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 9405              		.loc 1 5127 5 is_stmt 0 view .LVU2725
 9406 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 9407              	.LCFI67:
 9408              		.cfi_def_cfa_offset 24
 9409              		.cfi_offset 3, -24
 9410              		.cfi_offset 4, -20
 9411              		.cfi_offset 5, -16
 9412              		.cfi_offset 6, -12
 9413              		.cfi_offset 7, -8
 9414              		.cfi_offset 14, -4
5128:FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
 9415              		.loc 1 5128 9 is_stmt 1 view .LVU2726
5129:FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 9416              		.loc 1 5129 9 view .LVU2727
5130:FreeRTOS/tasks.c **** 
 9417              		.loc 1 5130 9 view .LVU2728
5132:FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 9418              		.loc 1 5132 9 view .LVU2729
 9419 0002 60B1     		cbz	r0, .L693
 9420 0004 0D46     		mov	r5, r1
 9421 0006 1646     		mov	r6, r2
 9422 0008 0446     		mov	r4, r0
5132:FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 9423              		.loc 1 5132 38 discriminator 2 view .LVU2730
5133:FreeRTOS/tasks.c **** 
 9424              		.loc 1 5133 9 discriminator 2 view .LVU2731
 9425 000a 89B1     		cbz	r1, .L683
5133:FreeRTOS/tasks.c **** 
 9426              		.loc 1 5133 9 view .LVU2732
 9427              	.LBB367:
 9428              	.LBI367:
 194:FreeRTOS/portable/portmacro.h ****     {
 9429              		.loc 2 194 34 view .LVU2733
 9430              	.LBB368:
 196:FreeRTOS/portable/portmacro.h **** 
 9431              		.loc 2 196 9 view .LVU2734
 198:FreeRTOS/portable/portmacro.h ****         (
 9432              		.loc 2 198 9 view .LVU2735
 9433              		.syntax unified
 9434              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 9435 000c 4FF05003 			mov r3, #80												
 9436 0010 83F31188 		msr basepri, r3											
 9437 0014 BFF36F8F 		isb														
 9438 0018 BFF34F8F 		dsb														
 9439              	
 9440              	@ 0 "" 2
 9441              	.LVL701:
 9442              		.thumb
 9443              		.syntax unified
 9444              	.L684:
 198:FreeRTOS/portable/portmacro.h ****         (
 9445              		.loc 2 198 9 is_stmt 0 view .LVU2736
 9446              	.LBE368:
 9447              	.LBE367:
5133:FreeRTOS/tasks.c **** 
 9448              		.loc 1 5133 9 is_stmt 1 discriminator 2 view .LVU2737
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 309


5133:FreeRTOS/tasks.c **** 
 9449              		.loc 1 5133 9 discriminator 2 view .LVU2738
5133:FreeRTOS/tasks.c **** 
 9450              		.loc 1 5133 9 discriminator 2 view .LVU2739
 9451 001c FEE7     		b	.L684
 9452              	.L693:
5132:FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 9453              		.loc 1 5132 9 view .LVU2740
 9454              	.LBB369:
 9455              	.LBI369:
 194:FreeRTOS/portable/portmacro.h ****     {
 9456              		.loc 2 194 34 view .LVU2741
 9457              	.LBB370:
 196:FreeRTOS/portable/portmacro.h **** 
 9458              		.loc 2 196 9 view .LVU2742
 198:FreeRTOS/portable/portmacro.h ****         (
 9459              		.loc 2 198 9 view .LVU2743
 9460              		.syntax unified
 9461              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 9462 001e 4FF05003 			mov r3, #80												
 9463 0022 83F31188 		msr basepri, r3											
 9464 0026 BFF36F8F 		isb														
 9465 002a BFF34F8F 		dsb														
 9466              	
 9467              	@ 0 "" 2
 9468              	.LVL702:
 9469              		.thumb
 9470              		.syntax unified
 9471              	.L682:
 198:FreeRTOS/portable/portmacro.h ****         (
 9472              		.loc 2 198 9 is_stmt 0 view .LVU2744
 9473              	.LBE370:
 9474              	.LBE369:
5132:FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 9475              		.loc 1 5132 9 is_stmt 1 discriminator 1 view .LVU2745
5132:FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 9476              		.loc 1 5132 9 discriminator 1 view .LVU2746
5132:FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 9477              		.loc 1 5132 9 discriminator 1 view .LVU2747
 9478 002e FEE7     		b	.L682
 9479              	.L683:
5133:FreeRTOS/tasks.c **** 
 9480              		.loc 1 5133 80 discriminator 2 view .LVU2748
5151:FreeRTOS/tasks.c **** 
 9481              		.loc 1 5151 9 discriminator 2 view .LVU2749
 9482 0030 FFF7FEFF 		bl	vPortValidateInterruptPriority
 9483              	.LVL703:
5153:FreeRTOS/tasks.c **** 
 9484              		.loc 1 5153 9 discriminator 2 view .LVU2750
5155:FreeRTOS/tasks.c ****         {
 9485              		.loc 1 5155 9 discriminator 2 view .LVU2751
 9486              	.LBB371:
 9487              	.LBI371:
 210:FreeRTOS/portable/portmacro.h ****     {
 9488              		.loc 2 210 38 discriminator 2 view .LVU2752
 9489              	.LBB372:
 212:FreeRTOS/portable/portmacro.h **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 310


 9490              		.loc 2 212 9 discriminator 2 view .LVU2753
 214:FreeRTOS/portable/portmacro.h ****         (
 9491              		.loc 2 214 9 discriminator 2 view .LVU2754
 9492              		.syntax unified
 9493              	@ 214 "FreeRTOS/portable/portmacro.h" 1
 9494 0034 EFF31181 			mrs r1, basepri											
 9495 0038 4FF05003 		mov r3, #80												
 9496 003c 83F31188 		msr basepri, r3											
 9497 0040 BFF36F8F 		isb														
 9498 0044 BFF34F8F 		dsb														
 9499              	
 9500              	@ 0 "" 2
 9501              	.LVL704:
 226:FreeRTOS/portable/portmacro.h ****     }
 9502              		.loc 2 226 9 discriminator 2 view .LVU2755
 226:FreeRTOS/portable/portmacro.h ****     }
 9503              		.loc 2 226 9 is_stmt 0 discriminator 2 view .LVU2756
 9504              		.thumb
 9505              		.syntax unified
 9506              	.LBE372:
 9507              	.LBE371:
5157:FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 9508              		.loc 1 5157 13 is_stmt 1 discriminator 2 view .LVU2757
5157:FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 9509              		.loc 1 5157 35 is_stmt 0 discriminator 2 view .LVU2758
 9510 0048 6219     		adds	r2, r4, r5
 9511 004a 92F85430 		ldrb	r3, [r2, #84]	@ zero_extendqisi2
 9512 004e DBB2     		uxtb	r3, r3
 9513              	.LVL705:
5158:FreeRTOS/tasks.c **** 
 9514              		.loc 1 5158 13 is_stmt 1 discriminator 2 view .LVU2759
5158:FreeRTOS/tasks.c **** 
 9515              		.loc 1 5158 53 is_stmt 0 discriminator 2 view .LVU2760
 9516 0050 0220     		movs	r0, #2
 9517 0052 82F85400 		strb	r0, [r2, #84]
5162:FreeRTOS/tasks.c **** 
 9518              		.loc 1 5162 13 is_stmt 1 discriminator 2 view .LVU2761
5162:FreeRTOS/tasks.c **** 
 9519              		.loc 1 5162 37 is_stmt 0 discriminator 2 view .LVU2762
 9520 0056 1435     		adds	r5, r5, #20
 9521              	.LVL706:
5162:FreeRTOS/tasks.c **** 
 9522              		.loc 1 5162 37 discriminator 2 view .LVU2763
 9523 0058 54F82520 		ldr	r2, [r4, r5, lsl #2]
5162:FreeRTOS/tasks.c **** 
 9524              		.loc 1 5162 58 discriminator 2 view .LVU2764
 9525 005c 0132     		adds	r2, r2, #1
 9526 005e 44F82520 		str	r2, [r4, r5, lsl #2]
5164:FreeRTOS/tasks.c **** 
 9527              		.loc 1 5164 62 is_stmt 1 discriminator 2 view .LVU2765
5168:FreeRTOS/tasks.c ****             {
 9528              		.loc 1 5168 13 discriminator 2 view .LVU2766
5168:FreeRTOS/tasks.c ****             {
 9529              		.loc 1 5168 15 is_stmt 0 discriminator 2 view .LVU2767
 9530 0062 012B     		cmp	r3, #1
 9531 0064 02D0     		beq	.L694
 9532              	.LVL707:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 311


 9533              	.L685:
5201:FreeRTOS/tasks.c ****                 }
 9534              		.loc 1 5201 45 is_stmt 1 view .LVU2768
5205:FreeRTOS/tasks.c ****     }
 9535              		.loc 1 5205 9 view .LVU2769
 9536              	.LBB373:
 9537              	.LBI373:
 230:FreeRTOS/portable/portmacro.h ****     {
 9538              		.loc 2 230 34 view .LVU2770
 9539              	.LBB374:
 9540              		.loc 2 232 9 view .LVU2771
 9541              		.syntax unified
 9542              	@ 232 "FreeRTOS/portable/portmacro.h" 1
 9543 0066 81F31188 			msr basepri, r1	
 9544              	@ 0 "" 2
 9545              	.LVL708:
 9546              		.loc 2 232 9 is_stmt 0 view .LVU2772
 9547              		.thumb
 9548              		.syntax unified
 9549              	.LBE374:
 9550              	.LBE373:
5206:FreeRTOS/tasks.c **** 
 9551              		.loc 1 5206 5 view .LVU2773
 9552 006a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 9553              	.LVL709:
 9554              	.L694:
5171:FreeRTOS/tasks.c **** 
 9555              		.loc 1 5171 17 is_stmt 1 view .LVU2774
 9556 006c A36A     		ldr	r3, [r4, #40]
 9557              	.LVL710:
5171:FreeRTOS/tasks.c **** 
 9558              		.loc 1 5171 17 is_stmt 0 view .LVU2775
 9559 006e 43B1     		cbz	r3, .L686
5171:FreeRTOS/tasks.c **** 
 9560              		.loc 1 5171 17 is_stmt 1 view .LVU2776
 9561              	.LBB375:
 9562              	.LBI375:
 194:FreeRTOS/portable/portmacro.h ****     {
 9563              		.loc 2 194 34 view .LVU2777
 9564              	.LBB376:
 196:FreeRTOS/portable/portmacro.h **** 
 9565              		.loc 2 196 9 view .LVU2778
 198:FreeRTOS/portable/portmacro.h ****         (
 9566              		.loc 2 198 9 view .LVU2779
 9567              		.syntax unified
 9568              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 9569 0070 4FF05003 			mov r3, #80												
 9570 0074 83F31188 		msr basepri, r3											
 9571 0078 BFF36F8F 		isb														
 9572 007c BFF34F8F 		dsb														
 9573              	
 9574              	@ 0 "" 2
 9575              	.LVL711:
 9576              		.thumb
 9577              		.syntax unified
 9578              	.L687:
 198:FreeRTOS/portable/portmacro.h ****         (
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 312


 9579              		.loc 2 198 9 is_stmt 0 view .LVU2780
 9580              	.LBE376:
 9581              	.LBE375:
5171:FreeRTOS/tasks.c **** 
 9582              		.loc 1 5171 17 is_stmt 1 discriminator 3 view .LVU2781
5171:FreeRTOS/tasks.c **** 
 9583              		.loc 1 5171 17 discriminator 3 view .LVU2782
5171:FreeRTOS/tasks.c **** 
 9584              		.loc 1 5171 17 discriminator 3 view .LVU2783
 9585 0080 FEE7     		b	.L687
 9586              	.L686:
5171:FreeRTOS/tasks.c **** 
 9587              		.loc 1 5171 94 discriminator 2 view .LVU2784
5173:FreeRTOS/tasks.c ****                 {
 9588              		.loc 1 5173 17 discriminator 2 view .LVU2785
5173:FreeRTOS/tasks.c ****                 {
 9589              		.loc 1 5173 42 is_stmt 0 discriminator 2 view .LVU2786
 9590 0082 274B     		ldr	r3, .L696
 9591 0084 1B68     		ldr	r3, [r3]
5173:FreeRTOS/tasks.c ****                 {
 9592              		.loc 1 5173 19 discriminator 2 view .LVU2787
 9593 0086 002B     		cmp	r3, #0
 9594 0088 3BD1     		bne	.L688
 9595              	.LBB377:
5175:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 9596              		.loc 1 5175 21 is_stmt 1 view .LVU2788
 9597 008a 6369     		ldr	r3, [r4, #20]
 9598              	.LVL712:
5175:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 9599              		.loc 1 5175 21 view .LVU2789
 9600 008c A268     		ldr	r2, [r4, #8]
 9601 008e E068     		ldr	r0, [r4, #12]
 9602 0090 9060     		str	r0, [r2, #8]
5175:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 9603              		.loc 1 5175 21 view .LVU2790
 9604 0092 E268     		ldr	r2, [r4, #12]
 9605 0094 A068     		ldr	r0, [r4, #8]
 9606 0096 5060     		str	r0, [r2, #4]
5175:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 9607              		.loc 1 5175 21 view .LVU2791
 9608 0098 5A68     		ldr	r2, [r3, #4]
 9609 009a 201D     		adds	r0, r4, #4
 9610 009c 8242     		cmp	r2, r0
 9611 009e 2DD0     		beq	.L695
 9612              	.L689:
5175:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 9613              		.loc 1 5175 21 discriminator 3 view .LVU2792
 9614 00a0 0022     		movs	r2, #0
 9615 00a2 6261     		str	r2, [r4, #20]
5175:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 9616              		.loc 1 5175 21 discriminator 3 view .LVU2793
 9617 00a4 1A68     		ldr	r2, [r3]
 9618 00a6 013A     		subs	r2, r2, #1
 9619 00a8 1A60     		str	r2, [r3]
 9620              	.LBE377:
5175:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 9621              		.loc 1 5175 66 discriminator 3 view .LVU2794
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 313


5176:FreeRTOS/tasks.c ****                 }
 9622              		.loc 1 5176 21 discriminator 3 view .LVU2795
5176:FreeRTOS/tasks.c ****                 }
 9623              		.loc 1 5176 21 discriminator 3 view .LVU2796
 9624 00aa E36A     		ldr	r3, [r4, #44]
 9625              	.LVL713:
5176:FreeRTOS/tasks.c ****                 }
 9626              		.loc 1 5176 21 is_stmt 0 discriminator 3 view .LVU2797
 9627 00ac 0122     		movs	r2, #1
 9628 00ae 9A40     		lsls	r2, r2, r3
 9629 00b0 1C4D     		ldr	r5, .L696+4
 9630 00b2 2F68     		ldr	r7, [r5]
 9631 00b4 3A43     		orrs	r2, r2, r7
 9632 00b6 2A60     		str	r2, [r5]
 9633              	.LBB378:
5176:FreeRTOS/tasks.c ****                 }
 9634              		.loc 1 5176 21 is_stmt 1 discriminator 3 view .LVU2798
 9635 00b8 1B4A     		ldr	r2, .L696+8
 9636 00ba 03EB8303 		add	r3, r3, r3, lsl #2
 9637 00be 02EB8303 		add	r3, r2, r3, lsl #2
 9638 00c2 5B68     		ldr	r3, [r3, #4]
 9639              	.LVL714:
5176:FreeRTOS/tasks.c ****                 }
 9640              		.loc 1 5176 21 discriminator 3 view .LVU2799
5176:FreeRTOS/tasks.c ****                 }
 9641              		.loc 1 5176 21 discriminator 3 view .LVU2800
5176:FreeRTOS/tasks.c ****                 }
 9642              		.loc 1 5176 21 discriminator 3 view .LVU2801
 9643 00c4 A360     		str	r3, [r4, #8]
5176:FreeRTOS/tasks.c ****                 }
 9644              		.loc 1 5176 21 discriminator 3 view .LVU2802
 9645 00c6 9D68     		ldr	r5, [r3, #8]
 9646 00c8 E560     		str	r5, [r4, #12]
5176:FreeRTOS/tasks.c ****                 }
 9647              		.loc 1 5176 21 discriminator 3 view .LVU2803
 9648 00ca 6860     		str	r0, [r5, #4]
5176:FreeRTOS/tasks.c ****                 }
 9649              		.loc 1 5176 21 discriminator 3 view .LVU2804
 9650 00cc 9860     		str	r0, [r3, #8]
5176:FreeRTOS/tasks.c ****                 }
 9651              		.loc 1 5176 21 discriminator 3 view .LVU2805
 9652 00ce E36A     		ldr	r3, [r4, #44]
 9653              	.LVL715:
5176:FreeRTOS/tasks.c ****                 }
 9654              		.loc 1 5176 21 is_stmt 0 discriminator 3 view .LVU2806
 9655 00d0 03EB8300 		add	r0, r3, r3, lsl #2
 9656 00d4 8500     		lsls	r5, r0, #2
 9657 00d6 02EB8000 		add	r0, r2, r0, lsl #2
 9658 00da 6061     		str	r0, [r4, #20]
5176:FreeRTOS/tasks.c ****                 }
 9659              		.loc 1 5176 21 is_stmt 1 discriminator 3 view .LVU2807
 9660 00dc 5059     		ldr	r0, [r2, r5]
 9661 00de 0130     		adds	r0, r0, #1
 9662 00e0 5051     		str	r0, [r2, r5]
 9663              	.LBE378:
5176:FreeRTOS/tasks.c ****                 }
 9664              		.loc 1 5176 21 discriminator 3 view .LVU2808
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 314


5176:FreeRTOS/tasks.c ****                 }
 9665              		.loc 1 5176 51 discriminator 3 view .LVU2809
 9666              	.L690:
5182:FreeRTOS/tasks.c ****                 }
 9667              		.loc 1 5182 89 discriminator 1 view .LVU2810
5185:FreeRTOS/tasks.c ****                 {
 9668              		.loc 1 5185 17 discriminator 1 view .LVU2811
5185:FreeRTOS/tasks.c ****                 {
 9669              		.loc 1 5185 26 is_stmt 0 discriminator 1 view .LVU2812
 9670 00e2 E26A     		ldr	r2, [r4, #44]
5185:FreeRTOS/tasks.c ****                 {
 9671              		.loc 1 5185 53 discriminator 1 view .LVU2813
 9672 00e4 114B     		ldr	r3, .L696+12
 9673 00e6 1B68     		ldr	r3, [r3]
 9674 00e8 DB6A     		ldr	r3, [r3, #44]
5185:FreeRTOS/tasks.c ****                 {
 9675              		.loc 1 5185 19 discriminator 1 view .LVU2814
 9676 00ea 9A42     		cmp	r2, r3
 9677 00ec BBD9     		bls	.L685
5189:FreeRTOS/tasks.c ****                     {
 9678              		.loc 1 5189 21 is_stmt 1 view .LVU2815
5189:FreeRTOS/tasks.c ****                     {
 9679              		.loc 1 5189 23 is_stmt 0 view .LVU2816
 9680 00ee 0EB1     		cbz	r6, .L691
5191:FreeRTOS/tasks.c ****                     }
 9681              		.loc 1 5191 25 is_stmt 1 view .LVU2817
5191:FreeRTOS/tasks.c ****                     }
 9682              		.loc 1 5191 52 is_stmt 0 view .LVU2818
 9683 00f0 0123     		movs	r3, #1
 9684 00f2 3360     		str	r3, [r6]
 9685              	.L691:
5197:FreeRTOS/tasks.c ****                 }
 9686              		.loc 1 5197 21 is_stmt 1 view .LVU2819
5197:FreeRTOS/tasks.c ****                 }
 9687              		.loc 1 5197 35 is_stmt 0 view .LVU2820
 9688 00f4 0E4B     		ldr	r3, .L696+16
 9689 00f6 0122     		movs	r2, #1
 9690 00f8 1A60     		str	r2, [r3]
 9691 00fa B4E7     		b	.L685
 9692              	.LVL716:
 9693              	.L695:
 9694              	.LBB379:
5175:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 9695              		.loc 1 5175 21 is_stmt 1 discriminator 1 view .LVU2821
 9696 00fc E268     		ldr	r2, [r4, #12]
 9697 00fe 5A60     		str	r2, [r3, #4]
 9698 0100 CEE7     		b	.L689
 9699              	.LVL717:
 9700              	.L688:
5175:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 9701              		.loc 1 5175 21 is_stmt 0 discriminator 1 view .LVU2822
 9702              	.LBE379:
 9703              	.LBB380:
5182:FreeRTOS/tasks.c ****                 }
 9704              		.loc 1 5182 21 is_stmt 1 view .LVU2823
 9705 0102 0C4B     		ldr	r3, .L696+20
 9706 0104 5A68     		ldr	r2, [r3, #4]
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 315


 9707              	.LVL718:
5182:FreeRTOS/tasks.c ****                 }
 9708              		.loc 1 5182 21 view .LVU2824
5182:FreeRTOS/tasks.c ****                 }
 9709              		.loc 1 5182 21 view .LVU2825
5182:FreeRTOS/tasks.c ****                 }
 9710              		.loc 1 5182 21 view .LVU2826
 9711 0106 E261     		str	r2, [r4, #28]
5182:FreeRTOS/tasks.c ****                 }
 9712              		.loc 1 5182 21 view .LVU2827
 9713 0108 9568     		ldr	r5, [r2, #8]
 9714 010a 2562     		str	r5, [r4, #32]
5182:FreeRTOS/tasks.c ****                 }
 9715              		.loc 1 5182 21 view .LVU2828
 9716 010c 04F11800 		add	r0, r4, #24
 9717 0110 6860     		str	r0, [r5, #4]
5182:FreeRTOS/tasks.c ****                 }
 9718              		.loc 1 5182 21 view .LVU2829
 9719 0112 9060     		str	r0, [r2, #8]
5182:FreeRTOS/tasks.c ****                 }
 9720              		.loc 1 5182 21 view .LVU2830
 9721 0114 A362     		str	r3, [r4, #40]
5182:FreeRTOS/tasks.c ****                 }
 9722              		.loc 1 5182 21 view .LVU2831
 9723 0116 1A68     		ldr	r2, [r3]
 9724              	.LVL719:
5182:FreeRTOS/tasks.c ****                 }
 9725              		.loc 1 5182 21 is_stmt 0 view .LVU2832
 9726 0118 0132     		adds	r2, r2, #1
 9727 011a 1A60     		str	r2, [r3]
 9728 011c E1E7     		b	.L690
 9729              	.L697:
 9730 011e 00BF     		.align	2
 9731              	.L696:
 9732 0120 00000000 		.word	.LANCHOR16
 9733 0124 00000000 		.word	.LANCHOR2
 9734 0128 00000000 		.word	.LANCHOR4
 9735 012c 00000000 		.word	.LANCHOR3
 9736 0130 00000000 		.word	.LANCHOR17
 9737 0134 00000000 		.word	.LANCHOR1
 9738              	.LBE380:
 9739              		.cfi_endproc
 9740              	.LFE70:
 9742              		.section	.text.xTaskGenericNotifyStateClear,"ax",%progbits
 9743              		.align	1
 9744              		.global	xTaskGenericNotifyStateClear
 9745              		.syntax unified
 9746              		.thumb
 9747              		.thumb_func
 9748              		.fpu fpv4-sp-d16
 9750              	xTaskGenericNotifyStateClear:
 9751              	.LVL720:
 9752              	.LFB71:
5215:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 9753              		.loc 1 5215 5 is_stmt 1 view -0
 9754              		.cfi_startproc
 9755              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 316


 9756              		@ frame_needed = 0, uses_anonymous_args = 0
5215:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 9757              		.loc 1 5215 5 is_stmt 0 view .LVU2834
 9758 0000 38B5     		push	{r3, r4, r5, lr}
 9759              	.LCFI68:
 9760              		.cfi_def_cfa_offset 16
 9761              		.cfi_offset 3, -16
 9762              		.cfi_offset 4, -12
 9763              		.cfi_offset 5, -8
 9764              		.cfi_offset 14, -4
5216:FreeRTOS/tasks.c ****         BaseType_t xReturn;
 9765              		.loc 1 5216 9 is_stmt 1 view .LVU2835
5217:FreeRTOS/tasks.c **** 
 9766              		.loc 1 5217 9 view .LVU2836
5219:FreeRTOS/tasks.c **** 
 9767              		.loc 1 5219 9 view .LVU2837
 9768 0002 41B1     		cbz	r1, .L699
5219:FreeRTOS/tasks.c **** 
 9769              		.loc 1 5219 9 view .LVU2838
 9770              	.LBB381:
 9771              	.LBI381:
 194:FreeRTOS/portable/portmacro.h ****     {
 9772              		.loc 2 194 34 view .LVU2839
 9773              	.LBB382:
 196:FreeRTOS/portable/portmacro.h **** 
 9774              		.loc 2 196 9 view .LVU2840
 198:FreeRTOS/portable/portmacro.h ****         (
 9775              		.loc 2 198 9 view .LVU2841
 9776              		.syntax unified
 9777              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 9778 0004 4FF05003 			mov r3, #80												
 9779 0008 83F31188 		msr basepri, r3											
 9780 000c BFF36F8F 		isb														
 9781 0010 BFF34F8F 		dsb														
 9782              	
 9783              	@ 0 "" 2
 9784              	.LVL721:
 9785              		.thumb
 9786              		.syntax unified
 9787              	.L700:
 198:FreeRTOS/portable/portmacro.h ****         (
 9788              		.loc 2 198 9 is_stmt 0 view .LVU2842
 9789              	.LBE382:
 9790              	.LBE381:
5219:FreeRTOS/tasks.c **** 
 9791              		.loc 1 5219 9 is_stmt 1 discriminator 1 view .LVU2843
5219:FreeRTOS/tasks.c **** 
 9792              		.loc 1 5219 9 discriminator 1 view .LVU2844
5219:FreeRTOS/tasks.c **** 
 9793              		.loc 1 5219 9 discriminator 1 view .LVU2845
 9794 0014 FEE7     		b	.L700
 9795              	.L699:
 9796 0016 0446     		mov	r4, r0
 9797 0018 0D46     		mov	r5, r1
5219:FreeRTOS/tasks.c **** 
 9798              		.loc 1 5219 79 discriminator 2 view .LVU2846
5223:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 317


 9799              		.loc 1 5223 9 discriminator 2 view .LVU2847
5223:FreeRTOS/tasks.c **** 
 9800              		.loc 1 5223 17 is_stmt 0 discriminator 2 view .LVU2848
 9801 001a 60B1     		cbz	r0, .L705
 9802              	.LVL722:
 9803              	.L701:
5225:FreeRTOS/tasks.c ****         {
 9804              		.loc 1 5225 9 is_stmt 1 discriminator 4 view .LVU2849
 9805 001c FFF7FEFF 		bl	vPortEnterCritical
 9806              	.LVL723:
5227:FreeRTOS/tasks.c ****             {
 9807              		.loc 1 5227 13 discriminator 4 view .LVU2850
5227:FreeRTOS/tasks.c ****             {
 9808              		.loc 1 5227 37 is_stmt 0 discriminator 4 view .LVU2851
 9809 0020 6319     		adds	r3, r4, r5
 9810 0022 93F85430 		ldrb	r3, [r3, #84]	@ zero_extendqisi2
 9811 0026 DBB2     		uxtb	r3, r3
5227:FreeRTOS/tasks.c ****             {
 9812              		.loc 1 5227 15 discriminator 4 view .LVU2852
 9813 0028 022B     		cmp	r3, #2
 9814 002a 07D0     		beq	.L706
5234:FreeRTOS/tasks.c ****             }
 9815              		.loc 1 5234 25 view .LVU2853
 9816 002c 0024     		movs	r4, #0
 9817              	.LVL724:
 9818              	.L702:
5237:FreeRTOS/tasks.c **** 
 9819              		.loc 1 5237 9 is_stmt 1 view .LVU2854
 9820 002e FFF7FEFF 		bl	vPortExitCritical
 9821              	.LVL725:
5239:FreeRTOS/tasks.c ****     }
 9822              		.loc 1 5239 9 view .LVU2855
5240:FreeRTOS/tasks.c **** 
 9823              		.loc 1 5240 5 is_stmt 0 view .LVU2856
 9824 0032 2046     		mov	r0, r4
 9825 0034 38BD     		pop	{r3, r4, r5, pc}
 9826              	.LVL726:
 9827              	.L705:
5223:FreeRTOS/tasks.c **** 
 9828              		.loc 1 5223 17 discriminator 1 view .LVU2857
 9829 0036 044B     		ldr	r3, .L707
 9830 0038 1C68     		ldr	r4, [r3]
 9831              	.LVL727:
5223:FreeRTOS/tasks.c **** 
 9832              		.loc 1 5223 17 discriminator 1 view .LVU2858
 9833 003a EFE7     		b	.L701
 9834              	.LVL728:
 9835              	.L706:
5229:FreeRTOS/tasks.c ****                 xReturn = pdPASS;
 9836              		.loc 1 5229 17 is_stmt 1 view .LVU2859
5229:FreeRTOS/tasks.c ****                 xReturn = pdPASS;
 9837              		.loc 1 5229 56 is_stmt 0 view .LVU2860
 9838 003c 2C44     		add	r4, r4, r5
 9839              	.LVL729:
5229:FreeRTOS/tasks.c ****                 xReturn = pdPASS;
 9840              		.loc 1 5229 56 view .LVU2861
 9841 003e 0023     		movs	r3, #0
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 318


 9842 0040 84F85430 		strb	r3, [r4, #84]
5230:FreeRTOS/tasks.c ****             }
 9843              		.loc 1 5230 17 is_stmt 1 view .LVU2862
 9844              	.LVL730:
5230:FreeRTOS/tasks.c ****             }
 9845              		.loc 1 5230 25 is_stmt 0 view .LVU2863
 9846 0044 0124     		movs	r4, #1
 9847 0046 F2E7     		b	.L702
 9848              	.L708:
 9849              		.align	2
 9850              	.L707:
 9851 0048 00000000 		.word	.LANCHOR3
 9852              		.cfi_endproc
 9853              	.LFE71:
 9855              		.section	.text.ulTaskGenericNotifyValueClear,"ax",%progbits
 9856              		.align	1
 9857              		.global	ulTaskGenericNotifyValueClear
 9858              		.syntax unified
 9859              		.thumb
 9860              		.thumb_func
 9861              		.fpu fpv4-sp-d16
 9863              	ulTaskGenericNotifyValueClear:
 9864              	.LVL731:
 9865              	.LFB72:
5250:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 9866              		.loc 1 5250 5 is_stmt 1 view -0
 9867              		.cfi_startproc
 9868              		@ args = 0, pretend = 0, frame = 0
 9869              		@ frame_needed = 0, uses_anonymous_args = 0
5250:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 9870              		.loc 1 5250 5 is_stmt 0 view .LVU2865
 9871 0000 70B5     		push	{r4, r5, r6, lr}
 9872              	.LCFI69:
 9873              		.cfi_def_cfa_offset 16
 9874              		.cfi_offset 4, -16
 9875              		.cfi_offset 5, -12
 9876              		.cfi_offset 6, -8
 9877              		.cfi_offset 14, -4
 9878 0002 0C46     		mov	r4, r1
 9879 0004 1646     		mov	r6, r2
5251:FreeRTOS/tasks.c ****         uint32_t ulReturn;
 9880              		.loc 1 5251 9 is_stmt 1 view .LVU2866
5252:FreeRTOS/tasks.c **** 
 9881              		.loc 1 5252 9 view .LVU2867
5256:FreeRTOS/tasks.c **** 
 9882              		.loc 1 5256 9 view .LVU2868
5256:FreeRTOS/tasks.c **** 
 9883              		.loc 1 5256 17 is_stmt 0 view .LVU2869
 9884 0006 0546     		mov	r5, r0
 9885 0008 78B1     		cbz	r0, .L712
 9886              	.LVL732:
 9887              	.L710:
5258:FreeRTOS/tasks.c ****         {
 9888              		.loc 1 5258 9 is_stmt 1 discriminator 4 view .LVU2870
 9889 000a FFF7FEFF 		bl	vPortEnterCritical
 9890              	.LVL733:
5262:FreeRTOS/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 319


 9891              		.loc 1 5262 13 discriminator 4 view .LVU2871
5262:FreeRTOS/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 9892              		.loc 1 5262 22 is_stmt 0 discriminator 4 view .LVU2872
 9893 000e 04F11401 		add	r1, r4, #20
 9894 0012 55F82140 		ldr	r4, [r5, r1, lsl #2]
 9895              	.LVL734:
5263:FreeRTOS/tasks.c ****         }
 9896              		.loc 1 5263 13 is_stmt 1 discriminator 4 view .LVU2873
5263:FreeRTOS/tasks.c ****         }
 9897              		.loc 1 5263 54 is_stmt 0 discriminator 4 view .LVU2874
 9898 0016 55F82130 		ldr	r3, [r5, r1, lsl #2]
 9899 001a 23EA0603 		bic	r3, r3, r6
 9900 001e 45F82130 		str	r3, [r5, r1, lsl #2]
5265:FreeRTOS/tasks.c **** 
 9901              		.loc 1 5265 9 is_stmt 1 discriminator 4 view .LVU2875
 9902 0022 FFF7FEFF 		bl	vPortExitCritical
 9903              	.LVL735:
5267:FreeRTOS/tasks.c ****     }
 9904              		.loc 1 5267 9 discriminator 4 view .LVU2876
5268:FreeRTOS/tasks.c **** 
 9905              		.loc 1 5268 5 is_stmt 0 discriminator 4 view .LVU2877
 9906 0026 2046     		mov	r0, r4
 9907 0028 70BD     		pop	{r4, r5, r6, pc}
 9908              	.LVL736:
 9909              	.L712:
5256:FreeRTOS/tasks.c **** 
 9910              		.loc 1 5256 17 discriminator 1 view .LVU2878
 9911 002a 014B     		ldr	r3, .L713
 9912 002c 1D68     		ldr	r5, [r3]
 9913              	.LVL737:
5256:FreeRTOS/tasks.c **** 
 9914              		.loc 1 5256 17 discriminator 1 view .LVU2879
 9915 002e ECE7     		b	.L710
 9916              	.L714:
 9917              		.align	2
 9918              	.L713:
 9919 0030 00000000 		.word	.LANCHOR3
 9920              		.cfi_endproc
 9921              	.LFE72:
 9923              		.global	uxTopUsedPriority
 9924              		.global	pxCurrentTCB
 9925              		.section	.bss.pxCurrentTCB,"aw",%nobits
 9926              		.align	2
 9927              		.set	.LANCHOR3,. + 0
 9930              	pxCurrentTCB:
 9931 0000 00000000 		.space	4
 9932              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 9933              		.align	2
 9934              		.set	.LANCHOR7,. + 0
 9937              	pxDelayedTaskList:
 9938 0000 00000000 		.space	4
 9939              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 9940              		.align	2
 9941              		.set	.LANCHOR11,. + 0
 9944              	pxOverflowDelayedTaskList:
 9945 0000 00000000 		.space	4
 9946              		.section	.bss.pxReadyTasksLists,"aw",%nobits
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 320


 9947              		.align	2
 9948              		.set	.LANCHOR4,. + 0
 9951              	pxReadyTasksLists:
 9952 0000 00000000 		.space	100
 9952      00000000 
 9952      00000000 
 9952      00000000 
 9952      00000000 
 9953              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 9954              		.align	2
 9955              		.set	.LANCHOR12,. + 0
 9958              	uxCurrentNumberOfTasks:
 9959 0000 00000000 		.space	4
 9960              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 9961              		.align	2
 9962              		.set	.LANCHOR15,. + 0
 9965              	uxDeletedTasksWaitingCleanUp:
 9966 0000 00000000 		.space	4
 9967              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 9968              		.align	2
 9969              		.set	.LANCHOR16,. + 0
 9972              	uxSchedulerSuspended:
 9973 0000 00000000 		.space	4
 9974              		.section	.bss.uxTaskNumber,"aw",%nobits
 9975              		.align	2
 9976              		.set	.LANCHOR14,. + 0
 9979              	uxTaskNumber:
 9980 0000 00000000 		.space	4
 9981              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 9982              		.align	2
 9983              		.set	.LANCHOR2,. + 0
 9986              	uxTopReadyPriority:
 9987 0000 00000000 		.space	4
 9988              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 9989              		.align	2
 9990              		.set	.LANCHOR8,. + 0
 9993              	xDelayedTaskList1:
 9994 0000 00000000 		.space	20
 9994      00000000 
 9994      00000000 
 9994      00000000 
 9994      00000000 
 9995              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 9996              		.align	2
 9997              		.set	.LANCHOR9,. + 0
 10000              	xDelayedTaskList2:
 10001 0000 00000000 		.space	20
 10001      00000000 
 10001      00000000 
 10001      00000000 
 10001      00000000 
 10002              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 10003              		.align	2
 10004              		.set	.LANCHOR18,. + 0
 10007              	xIdleTaskHandle:
 10008 0000 00000000 		.space	4
 10009              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 321


 10010              		.align	2
 10011              		.set	.LANCHOR5,. + 0
 10014              	xNextTaskUnblockTime:
 10015 0000 00000000 		.space	4
 10016              		.section	.bss.xNumOfOverflows,"aw",%nobits
 10017              		.align	2
 10018              		.set	.LANCHOR20,. + 0
 10021              	xNumOfOverflows:
 10022 0000 00000000 		.space	4
 10023              		.section	.bss.xPendedTicks,"aw",%nobits
 10024              		.align	2
 10025              		.set	.LANCHOR21,. + 0
 10028              	xPendedTicks:
 10029 0000 00000000 		.space	4
 10030              		.section	.bss.xPendingReadyList,"aw",%nobits
 10031              		.align	2
 10032              		.set	.LANCHOR1,. + 0
 10035              	xPendingReadyList:
 10036 0000 00000000 		.space	20
 10036      00000000 
 10036      00000000 
 10036      00000000 
 10036      00000000 
 10037              		.section	.bss.xSchedulerRunning,"aw",%nobits
 10038              		.align	2
 10039              		.set	.LANCHOR13,. + 0
 10042              	xSchedulerRunning:
 10043 0000 00000000 		.space	4
 10044              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 10045              		.align	2
 10046              		.set	.LANCHOR0,. + 0
 10049              	xSuspendedTaskList:
 10050 0000 00000000 		.space	20
 10050      00000000 
 10050      00000000 
 10050      00000000 
 10050      00000000 
 10051              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 10052              		.align	2
 10053              		.set	.LANCHOR10,. + 0
 10056              	xTasksWaitingTermination:
 10057 0000 00000000 		.space	20
 10057      00000000 
 10057      00000000 
 10057      00000000 
 10057      00000000 
 10058              		.section	.bss.xTickCount,"aw",%nobits
 10059              		.align	2
 10060              		.set	.LANCHOR6,. + 0
 10063              	xTickCount:
 10064 0000 00000000 		.space	4
 10065              		.section	.bss.xYieldPending,"aw",%nobits
 10066              		.align	2
 10067              		.set	.LANCHOR17,. + 0
 10070              	xYieldPending:
 10071 0000 00000000 		.space	4
 10072              		.section	.data.uxTopUsedPriority,"aw"
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 322


 10073              		.align	2
 10074              		.set	.LANCHOR19,. + 0
 10077              	uxTopUsedPriority:
 10078 0000 04000000 		.word	4
 10079              		.text
 10080              	.Letext0:
 10081              		.file 3 "c:\\work\\arm\\xpack-arm-none-eabi-gcc-9.2.1-1.1\\lib\\gcc\\arm-none-eabi\\9.2.1\\include
 10082              		.file 4 "c:\\work\\arm\\xpack-arm-none-eabi-gcc-9.2.1-1.1\\arm-none-eabi\\include\\machine\\_defau
 10083              		.file 5 "c:\\work\\arm\\xpack-arm-none-eabi-gcc-9.2.1-1.1\\arm-none-eabi\\include\\sys\\lock.h"
 10084              		.file 6 "c:\\work\\arm\\xpack-arm-none-eabi-gcc-9.2.1-1.1\\arm-none-eabi\\include\\sys\\_types.h"
 10085              		.file 7 "c:\\work\\arm\\xpack-arm-none-eabi-gcc-9.2.1-1.1\\arm-none-eabi\\include\\sys\\reent.h"
 10086              		.file 8 "c:\\work\\arm\\xpack-arm-none-eabi-gcc-9.2.1-1.1\\arm-none-eabi\\include\\stdlib.h"
 10087              		.file 9 "c:\\work\\arm\\xpack-arm-none-eabi-gcc-9.2.1-1.1\\arm-none-eabi\\include\\sys\\_stdint.h"
 10088              		.file 10 "Core/Inc/FreeRTOSConfig.h"
 10089              		.file 11 "FreeRTOS/include/projdefs.h"
 10090              		.file 12 "FreeRTOS/include/FreeRTOS.h"
 10091              		.file 13 "FreeRTOS/include/list.h"
 10092              		.file 14 "FreeRTOS/include/task.h"
 10093              		.file 15 "FreeRTOS/include/portable.h"
 10094              		.file 16 "c:\\work\\arm\\xpack-arm-none-eabi-gcc-9.2.1-1.1\\arm-none-eabi\\include\\string.h"
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 323


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:18     .text.prvTaskIsTaskSuspended:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:25     .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:115    .text.prvTaskIsTaskSuspended:0000000000000038 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:121    .text.prvGetExpectedIdleTime:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:127    .text.prvGetExpectedIdleTime:0000000000000000 prvGetExpectedIdleTime
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:197    .text.prvGetExpectedIdleTime:0000000000000030 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:206    .text.prvSearchForNameWithinSingleList:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:212    .text.prvSearchForNameWithinSingleList:0000000000000000 prvSearchForNameWithinSingleList
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:383    .text.prvTaskCheckFreeStackSpace:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:389    .text.prvTaskCheckFreeStackSpace:0000000000000000 prvTaskCheckFreeStackSpace
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:432    .text.prvResetNextTaskUnblockTime:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:438    .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:473    .text.prvResetNextTaskUnblockTime:0000000000000020 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:479    .text.prvInitialiseNewTask:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:485    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:681    .text.prvInitialiseTaskLists:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:687    .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:762    .text.prvInitialiseTaskLists:0000000000000048 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:774    .text.prvAddNewTaskToReadyList:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:780    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:945    .text.prvAddNewTaskToReadyList:00000000000000ac $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:956    .text.prvDeleteTCB:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:962    .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:1040   .text.prvCheckTasksWaitingTermination:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:1046   .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:1123   .text.prvCheckTasksWaitingTermination:0000000000000040 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:1130   .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:1136   .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:1290   .text.prvAddCurrentTaskToDelayedList:00000000000000a0 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:1301   .text.xTaskCreateStatic:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:1308   .text.xTaskCreateStatic:0000000000000000 xTaskCreateStatic
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:1473   .text.xTaskCreate:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:1480   .text.xTaskCreate:0000000000000000 xTaskCreate
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:1605   .text.vTaskDelete:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:1612   .text.vTaskDelete:0000000000000000 vTaskDelete
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:1806   .text.vTaskDelete:00000000000000c0 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:1820   .text.eTaskGetState:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:1827   .text.eTaskGetState:0000000000000000 eTaskGetState
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:2009   .text.eTaskGetState:0000000000000088 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:2018   .text.uxTaskPriorityGet:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:2025   .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:2071   .text.uxTaskPriorityGet:000000000000001c $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:2076   .text.uxTaskPriorityGetFromISR:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:2083   .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:2164   .text.uxTaskPriorityGetFromISR:000000000000002c $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:2169   .text.vTaskPrioritySet:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:2176   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:2446   .text.vTaskPrioritySet:00000000000000f0 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:2454   .text.vTaskResume:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:2461   .text.vTaskResume:0000000000000000 vTaskResume
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:2617   .text.vTaskResume:0000000000000090 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:2625   .text.xTaskResumeFromISR:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:2632   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:2837   .text.xTaskResumeFromISR:00000000000000b4 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:2847   .rodata.vTaskStartScheduler.str1.4:0000000000000000 $d
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 324


C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:2851   .text.vTaskStartScheduler:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:2858   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:2965   .text.vTaskStartScheduler:0000000000000060 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:4457   .text.prvIdleTask:0000000000000000 prvIdleTask
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:2976   .text.vTaskEndScheduler:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:2983   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:3026   .text.vTaskEndScheduler:0000000000000020 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:3031   .text.vTaskSuspendAll:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:3038   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:3057   .text.vTaskSuspendAll:000000000000000c $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:3062   .text.xTaskGetTickCount:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:3069   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:3090   .text.xTaskGetTickCount:0000000000000008 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:3095   .text.xTaskGetTickCountFromISR:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:3102   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:3131   .text.xTaskGetTickCountFromISR:000000000000000c $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:3136   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:3143   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:3159   .text.uxTaskGetNumberOfTasks:0000000000000008 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:3164   .text.pcTaskGetName:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:3171   .text.pcTaskGetName:0000000000000000 pcTaskGetName
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:3232   .text.pcTaskGetName:0000000000000024 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:3237   .text.xTaskGetIdleTaskHandle:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:3244   .text.xTaskGetIdleTaskHandle:0000000000000000 xTaskGetIdleTaskHandle
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:3287   .text.xTaskGetIdleTaskHandle:000000000000001c $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:3292   .text.vTaskStepTick:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:3299   .text.vTaskStepTick:0000000000000000 vTaskStepTick
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:3357   .text.vTaskStepTick:000000000000002c $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:3363   .text.xTaskIncrementTick:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:3370   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:3722   .text.xTaskIncrementTick:0000000000000144 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:3737   .text.xTaskResumeAll:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:3744   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:4071   .text.xTaskResumeAll:0000000000000128 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:4084   .text.xTaskDelayUntil:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:4091   .text.xTaskDelayUntil:0000000000000000 xTaskDelayUntil
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:4338   .text.xTaskDelayUntil:00000000000000a4 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:4345   .text.vTaskDelay:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:4352   .text.vTaskDelay:0000000000000000 vTaskDelay
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:4445   .text.vTaskDelay:0000000000000044 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:4451   .text.prvIdleTask:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:4587   .text.prvIdleTask:0000000000000060 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:4596   .text.xTaskGetHandle:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:4603   .text.xTaskGetHandle:0000000000000000 xTaskGetHandle
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:4767   .text.xTaskGetHandle:0000000000000084 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:4776   .text.xTaskCatchUpTicks:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:4783   .text.xTaskCatchUpTicks:0000000000000000 xTaskCatchUpTicks
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:4851   .text.xTaskCatchUpTicks:0000000000000030 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:4857   .text.xTaskAbortDelay:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:4864   .text.xTaskAbortDelay:0000000000000000 xTaskAbortDelay
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:5038   .text.xTaskAbortDelay:00000000000000a4 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:5046   .text.vTaskSwitchContext:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:5053   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:5210   .text.vTaskSwitchContext:0000000000000084 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:5221   .text.vTaskSuspend:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:5228   .text.vTaskSuspend:0000000000000000 vTaskSuspend
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:5458   .text.vTaskSuspend:00000000000000d8 $d
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 325


C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:5470   .text.vTaskPlaceOnEventList:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:5477   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:5545   .text.vTaskPlaceOnEventList:000000000000002c $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:5550   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:5557   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:5692   .text.vTaskPlaceOnUnorderedEventList:0000000000000068 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:5698   .text.xTaskRemoveFromEventList:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:5705   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:5952   .text.xTaskRemoveFromEventList:00000000000000dc $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:5962   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:5969   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 vTaskRemoveFromUnorderedEventList
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:6202   .text.vTaskRemoveFromUnorderedEventList:00000000000000d4 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:6212   .text.vTaskSetTimeOutState:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:6219   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:6289   .text.vTaskSetTimeOutState:0000000000000030 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:6295   .text.vTaskInternalSetTimeOutState:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:6302   .text.vTaskInternalSetTimeOutState:0000000000000000 vTaskInternalSetTimeOutState
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:6325   .text.vTaskInternalSetTimeOutState:0000000000000010 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:6331   .text.xTaskCheckForTimeOut:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:6338   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:6541   .text.xTaskCheckForTimeOut:0000000000000098 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:6549   .text.vTaskMissedYield:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:6556   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:6573   .text.vTaskMissedYield:0000000000000008 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:6578   .text.uxTaskGetTaskNumber:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:6585   .text.uxTaskGetTaskNumber:0000000000000000 uxTaskGetTaskNumber
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:6618   .text.vTaskSetTaskNumber:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:6625   .text.vTaskSetTaskNumber:0000000000000000 vTaskSetTaskNumber
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:6650   .text.eTaskConfirmSleepModeStatus:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:6657   .text.eTaskConfirmSleepModeStatus:0000000000000000 eTaskConfirmSleepModeStatus
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:6722   .text.eTaskConfirmSleepModeStatus:0000000000000034 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:6731   .text.vTaskGetInfo:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:6738   .text.vTaskGetInfo:0000000000000000 vTaskGetInfo
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:6885   .text.vTaskGetInfo:0000000000000074 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:6890   .text.prvListTasksWithinSingleList:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:6896   .text.prvListTasksWithinSingleList:0000000000000000 prvListTasksWithinSingleList
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:7013   .text.uxTaskGetSystemState:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:7020   .text.uxTaskGetSystemState:0000000000000000 uxTaskGetSystemState
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:7159   .text.uxTaskGetSystemState:0000000000000098 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:7169   .text.uxTaskGetStackHighWaterMark2:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:7176   .text.uxTaskGetStackHighWaterMark2:0000000000000000 uxTaskGetStackHighWaterMark2
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:7218   .text.uxTaskGetStackHighWaterMark2:0000000000000014 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:7223   .text.uxTaskGetStackHighWaterMark:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:7230   .text.uxTaskGetStackHighWaterMark:0000000000000000 uxTaskGetStackHighWaterMark
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:7272   .text.uxTaskGetStackHighWaterMark:0000000000000014 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:7277   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:7284   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:7303   .text.xTaskGetCurrentTaskHandle:0000000000000008 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:7308   .text.xTaskGetSchedulerState:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:7315   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:7353   .text.xTaskGetSchedulerState:0000000000000018 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:7359   .text.xTaskPriorityInherit:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:7366   .text.xTaskPriorityInherit:0000000000000000 xTaskPriorityInherit
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:7553   .text.xTaskPriorityInherit:00000000000000b8 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:7560   .text.xTaskPriorityDisinherit:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:7567   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:7781   .text.xTaskPriorityDisinherit:00000000000000b4 $d
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 326


C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:7788   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:7795   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 vTaskPriorityDisinheritAfterTimeout
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:8021   .text.vTaskPriorityDisinheritAfterTimeout:00000000000000c4 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:8028   .text.uxTaskResetEventItemValue:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:8035   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:8062   .text.uxTaskResetEventItemValue:0000000000000014 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:8067   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:8074   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:8105   .text.pvTaskIncrementMutexHeldCount:0000000000000018 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:8110   .text.ulTaskGenericNotifyTake:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:8117   .text.ulTaskGenericNotifyTake:0000000000000000 ulTaskGenericNotifyTake
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:8279   .text.ulTaskGenericNotifyTake:00000000000000a0 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:8285   .text.xTaskGenericNotifyWait:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:8292   .text.xTaskGenericNotifyWait:0000000000000000 xTaskGenericNotifyWait
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:8479   .text.xTaskGenericNotifyWait:00000000000000c8 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:8485   .text.xTaskGenericNotify:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:8492   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:8583   .text.xTaskGenericNotify:000000000000004c $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:8898   .text.xTaskGenericNotify:0000000000000164 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:8907   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:8914   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:9059   .text.xTaskGenericNotifyFromISR:000000000000007c $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:9379   .text.xTaskGenericNotifyFromISR:00000000000001a0 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:9391   .text.vTaskGenericNotifyGiveFromISR:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:9398   .text.vTaskGenericNotifyGiveFromISR:0000000000000000 vTaskGenericNotifyGiveFromISR
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:9732   .text.vTaskGenericNotifyGiveFromISR:0000000000000120 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:9743   .text.xTaskGenericNotifyStateClear:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:9750   .text.xTaskGenericNotifyStateClear:0000000000000000 xTaskGenericNotifyStateClear
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:9851   .text.xTaskGenericNotifyStateClear:0000000000000048 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:9856   .text.ulTaskGenericNotifyValueClear:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:9863   .text.ulTaskGenericNotifyValueClear:0000000000000000 ulTaskGenericNotifyValueClear
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:9919   .text.ulTaskGenericNotifyValueClear:0000000000000030 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:10077  .data.uxTopUsedPriority:0000000000000000 uxTopUsedPriority
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:9930   .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:9926   .bss.pxCurrentTCB:0000000000000000 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:9933   .bss.pxDelayedTaskList:0000000000000000 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:9937   .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:9940   .bss.pxOverflowDelayedTaskList:0000000000000000 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:9944   .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:9947   .bss.pxReadyTasksLists:0000000000000000 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:9951   .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:9954   .bss.uxCurrentNumberOfTasks:0000000000000000 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:9958   .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:9961   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:9965   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:9968   .bss.uxSchedulerSuspended:0000000000000000 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:9972   .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:9975   .bss.uxTaskNumber:0000000000000000 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:9979   .bss.uxTaskNumber:0000000000000000 uxTaskNumber
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:9982   .bss.uxTopReadyPriority:0000000000000000 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:9986   .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:9989   .bss.xDelayedTaskList1:0000000000000000 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:9993   .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:9996   .bss.xDelayedTaskList2:0000000000000000 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:10000  .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:10003  .bss.xIdleTaskHandle:0000000000000000 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:10007  .bss.xIdleTaskHandle:0000000000000000 xIdleTaskHandle
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s 			page 327


C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:10010  .bss.xNextTaskUnblockTime:0000000000000000 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:10014  .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:10017  .bss.xNumOfOverflows:0000000000000000 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:10021  .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:10024  .bss.xPendedTicks:0000000000000000 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:10028  .bss.xPendedTicks:0000000000000000 xPendedTicks
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:10031  .bss.xPendingReadyList:0000000000000000 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:10035  .bss.xPendingReadyList:0000000000000000 xPendingReadyList
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:10038  .bss.xSchedulerRunning:0000000000000000 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:10042  .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:10045  .bss.xSuspendedTaskList:0000000000000000 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:10049  .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:10052  .bss.xTasksWaitingTermination:0000000000000000 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:10056  .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:10059  .bss.xTickCount:0000000000000000 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:10063  .bss.xTickCount:0000000000000000 xTickCount
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:10066  .bss.xYieldPending:0000000000000000 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:10070  .bss.xYieldPending:0000000000000000 xYieldPending
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:10073  .data.uxTopUsedPriority:0000000000000000 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:8589   .text.xTaskGenericNotify:0000000000000051 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:8589   .text.xTaskGenericNotify:0000000000000052 $t
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:9064   .text.xTaskGenericNotifyFromISR:0000000000000081 $d
C:\Users\worker\AppData\Local\Temp\ccz7qqC7.s:9064   .text.xTaskGenericNotifyFromISR:0000000000000082 $t

UNDEFINED SYMBOLS
memset
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vPortExitCritical
vPortFree
uxListRemove
vListInsert
pvPortMalloc
vListInsertEnd
vPortValidateInterruptPriority
vApplicationGetIdleTaskMemory
xPortStartScheduler
vPortEndScheduler
vPortSuppressTicksAndSleep
strlen
