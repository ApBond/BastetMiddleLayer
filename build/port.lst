ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"port.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvTaskExitError,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	prvTaskExitError:
  26              	.LFB6:
  27              		.file 1 "FreeRTOS/portable/port.c"
   1:FreeRTOS/portable/port.c **** /*
   2:FreeRTOS/portable/port.c ****  * FreeRTOS Kernel V10.4.6
   3:FreeRTOS/portable/port.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/portable/port.c ****  *
   5:FreeRTOS/portable/port.c ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS/portable/port.c ****  *
   7:FreeRTOS/portable/port.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS/portable/port.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS/portable/port.c ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS/portable/port.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS/portable/port.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS/portable/port.c ****  * subject to the following conditions:
  13:FreeRTOS/portable/port.c ****  *
  14:FreeRTOS/portable/port.c ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS/portable/port.c ****  * copies or substantial portions of the Software.
  16:FreeRTOS/portable/port.c ****  *
  17:FreeRTOS/portable/port.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS/portable/port.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS/portable/port.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS/portable/port.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS/portable/port.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS/portable/port.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS/portable/port.c ****  *
  24:FreeRTOS/portable/port.c ****  * https://www.FreeRTOS.org
  25:FreeRTOS/portable/port.c ****  * https://github.com/FreeRTOS
  26:FreeRTOS/portable/port.c ****  *
  27:FreeRTOS/portable/port.c ****  */
  28:FreeRTOS/portable/port.c **** 
  29:FreeRTOS/portable/port.c **** /*-----------------------------------------------------------
  30:FreeRTOS/portable/port.c **** * Implementation of functions defined in portable.h for the ARM CM4F port.
  31:FreeRTOS/portable/port.c **** *----------------------------------------------------------*/
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 2


  32:FreeRTOS/portable/port.c **** 
  33:FreeRTOS/portable/port.c **** /* Scheduler includes. */
  34:FreeRTOS/portable/port.c **** #include "FreeRTOS.h"
  35:FreeRTOS/portable/port.c **** #include "task.h"
  36:FreeRTOS/portable/port.c **** 
  37:FreeRTOS/portable/port.c **** #ifndef __VFP_FP__
  38:FreeRTOS/portable/port.c ****     #error This port can only be used when the project options are configured to enable hardware fl
  39:FreeRTOS/portable/port.c **** #endif
  40:FreeRTOS/portable/port.c **** 
  41:FreeRTOS/portable/port.c **** #ifndef configSYSTICK_CLOCK_HZ
  42:FreeRTOS/portable/port.c ****     #define configSYSTICK_CLOCK_HZ      configCPU_CLOCK_HZ
  43:FreeRTOS/portable/port.c ****     /* Ensure the SysTick is clocked at the same frequency as the core. */
  44:FreeRTOS/portable/port.c ****     #define portNVIC_SYSTICK_CLK_BIT    ( 1UL << 2UL )
  45:FreeRTOS/portable/port.c **** #else
  46:FreeRTOS/portable/port.c **** 
  47:FreeRTOS/portable/port.c **** /* The way the SysTick is clocked is not modified in case it is not the same
  48:FreeRTOS/portable/port.c ****  * as the core. */
  49:FreeRTOS/portable/port.c ****     #define portNVIC_SYSTICK_CLK_BIT    ( 0 )
  50:FreeRTOS/portable/port.c **** #endif
  51:FreeRTOS/portable/port.c **** 
  52:FreeRTOS/portable/port.c **** /* Constants required to manipulate the core.  Registers first... */
  53:FreeRTOS/portable/port.c **** #define portNVIC_SYSTICK_CTRL_REG             ( *( ( volatile uint32_t * ) 0xe000e010 ) )
  54:FreeRTOS/portable/port.c **** #define portNVIC_SYSTICK_LOAD_REG             ( *( ( volatile uint32_t * ) 0xe000e014 ) )
  55:FreeRTOS/portable/port.c **** #define portNVIC_SYSTICK_CURRENT_VALUE_REG    ( *( ( volatile uint32_t * ) 0xe000e018 ) )
  56:FreeRTOS/portable/port.c **** #define portNVIC_SHPR3_REG                    ( *( ( volatile uint32_t * ) 0xe000ed20 ) )
  57:FreeRTOS/portable/port.c **** /* ...then bits in the registers. */
  58:FreeRTOS/portable/port.c **** #define portNVIC_SYSTICK_INT_BIT              ( 1UL << 1UL )
  59:FreeRTOS/portable/port.c **** #define portNVIC_SYSTICK_ENABLE_BIT           ( 1UL << 0UL )
  60:FreeRTOS/portable/port.c **** #define portNVIC_SYSTICK_COUNT_FLAG_BIT       ( 1UL << 16UL )
  61:FreeRTOS/portable/port.c **** #define portNVIC_PENDSVCLEAR_BIT              ( 1UL << 27UL )
  62:FreeRTOS/portable/port.c **** #define portNVIC_PEND_SYSTICK_CLEAR_BIT       ( 1UL << 25UL )
  63:FreeRTOS/portable/port.c **** 
  64:FreeRTOS/portable/port.c **** /* Constants used to detect a Cortex-M7 r0p1 core, which should use the ARM_CM7
  65:FreeRTOS/portable/port.c ****  * r0p1 port. */
  66:FreeRTOS/portable/port.c **** #define portCPUID                             ( *( ( volatile uint32_t * ) 0xE000ed00 ) )
  67:FreeRTOS/portable/port.c **** #define portCORTEX_M7_r0p1_ID                 ( 0x410FC271UL )
  68:FreeRTOS/portable/port.c **** #define portCORTEX_M7_r0p0_ID                 ( 0x410FC270UL )
  69:FreeRTOS/portable/port.c **** 
  70:FreeRTOS/portable/port.c **** #define portNVIC_PENDSV_PRI                   ( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) <<
  71:FreeRTOS/portable/port.c **** #define portNVIC_SYSTICK_PRI                  ( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) <<
  72:FreeRTOS/portable/port.c **** 
  73:FreeRTOS/portable/port.c **** /* Constants required to check the validity of an interrupt priority. */
  74:FreeRTOS/portable/port.c **** #define portFIRST_USER_INTERRUPT_NUMBER       ( 16 )
  75:FreeRTOS/portable/port.c **** #define portNVIC_IP_REGISTERS_OFFSET_16       ( 0xE000E3F0 )
  76:FreeRTOS/portable/port.c **** #define portAIRCR_REG                         ( *( ( volatile uint32_t * ) 0xE000ED0C ) )
  77:FreeRTOS/portable/port.c **** #define portMAX_8_BIT_VALUE                   ( ( uint8_t ) 0xff )
  78:FreeRTOS/portable/port.c **** #define portTOP_BIT_OF_BYTE                   ( ( uint8_t ) 0x80 )
  79:FreeRTOS/portable/port.c **** #define portMAX_PRIGROUP_BITS                 ( ( uint8_t ) 7 )
  80:FreeRTOS/portable/port.c **** #define portPRIORITY_GROUP_MASK               ( 0x07UL << 8UL )
  81:FreeRTOS/portable/port.c **** #define portPRIGROUP_SHIFT                    ( 8UL )
  82:FreeRTOS/portable/port.c **** 
  83:FreeRTOS/portable/port.c **** /* Masks off all bits but the VECTACTIVE bits in the ICSR register. */
  84:FreeRTOS/portable/port.c **** #define portVECTACTIVE_MASK                   ( 0xFFUL )
  85:FreeRTOS/portable/port.c **** 
  86:FreeRTOS/portable/port.c **** /* Constants required to manipulate the VFP. */
  87:FreeRTOS/portable/port.c **** #define portFPCCR                             ( ( volatile uint32_t * ) 0xe000ef34 ) /* Floating po
  88:FreeRTOS/portable/port.c **** #define portASPEN_AND_LSPEN_BITS              ( 0x3UL << 30UL )
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 3


  89:FreeRTOS/portable/port.c **** 
  90:FreeRTOS/portable/port.c **** /* Constants required to set up the initial stack. */
  91:FreeRTOS/portable/port.c **** #define portINITIAL_XPSR                      ( 0x01000000 )
  92:FreeRTOS/portable/port.c **** #define portINITIAL_EXC_RETURN                ( 0xfffffffd )
  93:FreeRTOS/portable/port.c **** 
  94:FreeRTOS/portable/port.c **** /* The systick is a 24-bit counter. */
  95:FreeRTOS/portable/port.c **** #define portMAX_24_BIT_NUMBER                 ( 0xffffffUL )
  96:FreeRTOS/portable/port.c **** 
  97:FreeRTOS/portable/port.c **** /* For strict compliance with the Cortex-M spec the task start address should
  98:FreeRTOS/portable/port.c ****  * have bit-0 clear, as it is loaded into the PC on exit from an ISR. */
  99:FreeRTOS/portable/port.c **** #define portSTART_ADDRESS_MASK                ( ( StackType_t ) 0xfffffffeUL )
 100:FreeRTOS/portable/port.c **** 
 101:FreeRTOS/portable/port.c **** /* A fiddle factor to estimate the number of SysTick counts that would have
 102:FreeRTOS/portable/port.c ****  * occurred while the SysTick counter is stopped during tickless idle
 103:FreeRTOS/portable/port.c ****  * calculations. */
 104:FreeRTOS/portable/port.c **** #define portMISSED_COUNTS_FACTOR              ( 45UL )
 105:FreeRTOS/portable/port.c **** 
 106:FreeRTOS/portable/port.c **** /* Let the user override the pre-loading of the initial LR with the address of
 107:FreeRTOS/portable/port.c ****  * prvTaskExitError() in case it messes up unwinding of the stack in the
 108:FreeRTOS/portable/port.c ****  * debugger. */
 109:FreeRTOS/portable/port.c **** #ifdef configTASK_RETURN_ADDRESS
 110:FreeRTOS/portable/port.c ****     #define portTASK_RETURN_ADDRESS    configTASK_RETURN_ADDRESS
 111:FreeRTOS/portable/port.c **** #else
 112:FreeRTOS/portable/port.c ****     #define portTASK_RETURN_ADDRESS    prvTaskExitError
 113:FreeRTOS/portable/port.c **** #endif
 114:FreeRTOS/portable/port.c **** 
 115:FreeRTOS/portable/port.c **** /*
 116:FreeRTOS/portable/port.c ****  * Setup the timer to generate the tick interrupts.  The implementation in this
 117:FreeRTOS/portable/port.c ****  * file is weak to allow application writers to change the timer used to
 118:FreeRTOS/portable/port.c ****  * generate the tick interrupt.
 119:FreeRTOS/portable/port.c ****  */
 120:FreeRTOS/portable/port.c **** void vPortSetupTimerInterrupt( void );
 121:FreeRTOS/portable/port.c **** 
 122:FreeRTOS/portable/port.c **** /*
 123:FreeRTOS/portable/port.c ****  * Exception handlers.
 124:FreeRTOS/portable/port.c ****  */
 125:FreeRTOS/portable/port.c **** void xPortPendSVHandler( void ) __attribute__( ( naked ) );
 126:FreeRTOS/portable/port.c **** void xPortSysTickHandler( void );
 127:FreeRTOS/portable/port.c **** void vPortSVCHandler( void ) __attribute__( ( naked ) );
 128:FreeRTOS/portable/port.c **** 
 129:FreeRTOS/portable/port.c **** /*
 130:FreeRTOS/portable/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 131:FreeRTOS/portable/port.c ****  */
 132:FreeRTOS/portable/port.c **** static void prvPortStartFirstTask( void ) __attribute__( ( naked ) );
 133:FreeRTOS/portable/port.c **** 
 134:FreeRTOS/portable/port.c **** /*
 135:FreeRTOS/portable/port.c ****  * Function to enable the VFP.
 136:FreeRTOS/portable/port.c ****  */
 137:FreeRTOS/portable/port.c **** static void vPortEnableVFP( void ) __attribute__( ( naked ) );
 138:FreeRTOS/portable/port.c **** 
 139:FreeRTOS/portable/port.c **** /*
 140:FreeRTOS/portable/port.c ****  * Used to catch tasks that attempt to return from their implementing function.
 141:FreeRTOS/portable/port.c ****  */
 142:FreeRTOS/portable/port.c **** static void prvTaskExitError( void );
 143:FreeRTOS/portable/port.c **** 
 144:FreeRTOS/portable/port.c **** /*-----------------------------------------------------------*/
 145:FreeRTOS/portable/port.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 4


 146:FreeRTOS/portable/port.c **** /* Each task maintains its own interrupt status in the critical nesting
 147:FreeRTOS/portable/port.c ****  * variable. */
 148:FreeRTOS/portable/port.c **** static UBaseType_t uxCriticalNesting = 0xaaaaaaaa;
 149:FreeRTOS/portable/port.c **** 
 150:FreeRTOS/portable/port.c **** /*
 151:FreeRTOS/portable/port.c ****  * The number of SysTick increments that make up one tick period.
 152:FreeRTOS/portable/port.c ****  */
 153:FreeRTOS/portable/port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 154:FreeRTOS/portable/port.c ****     static uint32_t ulTimerCountsForOneTick = 0;
 155:FreeRTOS/portable/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 156:FreeRTOS/portable/port.c **** 
 157:FreeRTOS/portable/port.c **** /*
 158:FreeRTOS/portable/port.c ****  * The maximum number of tick periods that can be suppressed is limited by the
 159:FreeRTOS/portable/port.c ****  * 24 bit resolution of the SysTick timer.
 160:FreeRTOS/portable/port.c ****  */
 161:FreeRTOS/portable/port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 162:FreeRTOS/portable/port.c ****     static uint32_t xMaximumPossibleSuppressedTicks = 0;
 163:FreeRTOS/portable/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 164:FreeRTOS/portable/port.c **** 
 165:FreeRTOS/portable/port.c **** /*
 166:FreeRTOS/portable/port.c ****  * Compensate for the CPU cycles that pass while the SysTick is stopped (low
 167:FreeRTOS/portable/port.c ****  * power functionality only.
 168:FreeRTOS/portable/port.c ****  */
 169:FreeRTOS/portable/port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 170:FreeRTOS/portable/port.c ****     static uint32_t ulStoppedTimerCompensation = 0;
 171:FreeRTOS/portable/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 172:FreeRTOS/portable/port.c **** 
 173:FreeRTOS/portable/port.c **** /*
 174:FreeRTOS/portable/port.c ****  * Used by the portASSERT_IF_INTERRUPT_PRIORITY_INVALID() macro to ensure
 175:FreeRTOS/portable/port.c ****  * FreeRTOS API functions are not called from interrupts that have been assigned
 176:FreeRTOS/portable/port.c ****  * a priority above configMAX_SYSCALL_INTERRUPT_PRIORITY.
 177:FreeRTOS/portable/port.c ****  */
 178:FreeRTOS/portable/port.c **** #if ( configASSERT_DEFINED == 1 )
 179:FreeRTOS/portable/port.c ****     static uint8_t ucMaxSysCallPriority = 0;
 180:FreeRTOS/portable/port.c ****     static uint32_t ulMaxPRIGROUPValue = 0;
 181:FreeRTOS/portable/port.c ****     static const volatile uint8_t * const pcInterruptPriorityRegisters = ( const volatile uint8_t *
 182:FreeRTOS/portable/port.c **** #endif /* configASSERT_DEFINED */
 183:FreeRTOS/portable/port.c **** 
 184:FreeRTOS/portable/port.c **** /*-----------------------------------------------------------*/
 185:FreeRTOS/portable/port.c **** 
 186:FreeRTOS/portable/port.c **** /*
 187:FreeRTOS/portable/port.c ****  * See header file for description.
 188:FreeRTOS/portable/port.c ****  */
 189:FreeRTOS/portable/port.c **** StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
 190:FreeRTOS/portable/port.c ****                                      TaskFunction_t pxCode,
 191:FreeRTOS/portable/port.c ****                                      void * pvParameters )
 192:FreeRTOS/portable/port.c **** {
 193:FreeRTOS/portable/port.c ****     /* Simulate the stack frame as it would be created by a context switch
 194:FreeRTOS/portable/port.c ****      * interrupt. */
 195:FreeRTOS/portable/port.c **** 
 196:FreeRTOS/portable/port.c ****     /* Offset added to account for the way the MCU uses the stack on entry/exit
 197:FreeRTOS/portable/port.c ****      * of interrupts, and to ensure alignment. */
 198:FreeRTOS/portable/port.c ****     pxTopOfStack--;
 199:FreeRTOS/portable/port.c **** 
 200:FreeRTOS/portable/port.c ****     *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 201:FreeRTOS/portable/port.c ****     pxTopOfStack--;
 202:FreeRTOS/portable/port.c ****     *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 5


 203:FreeRTOS/portable/port.c ****     pxTopOfStack--;
 204:FreeRTOS/portable/port.c ****     *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 205:FreeRTOS/portable/port.c **** 
 206:FreeRTOS/portable/port.c ****     /* Save code space by skipping register initialisation. */
 207:FreeRTOS/portable/port.c ****     pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 208:FreeRTOS/portable/port.c ****     *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 209:FreeRTOS/portable/port.c **** 
 210:FreeRTOS/portable/port.c ****     /* A save method is being used that requires each task to maintain its
 211:FreeRTOS/portable/port.c ****      * own exec return value. */
 212:FreeRTOS/portable/port.c ****     pxTopOfStack--;
 213:FreeRTOS/portable/port.c ****     *pxTopOfStack = portINITIAL_EXC_RETURN;
 214:FreeRTOS/portable/port.c **** 
 215:FreeRTOS/portable/port.c ****     pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 216:FreeRTOS/portable/port.c **** 
 217:FreeRTOS/portable/port.c ****     return pxTopOfStack;
 218:FreeRTOS/portable/port.c **** }
 219:FreeRTOS/portable/port.c **** /*-----------------------------------------------------------*/
 220:FreeRTOS/portable/port.c **** 
 221:FreeRTOS/portable/port.c **** static void prvTaskExitError( void )
 222:FreeRTOS/portable/port.c **** {
  28              		.loc 1 222 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 82B0     		sub	sp, sp, #8
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
 223:FreeRTOS/portable/port.c ****     volatile uint32_t ulDummy = 0;
  36              		.loc 1 223 5 view .LVU1
  37              		.loc 1 223 23 is_stmt 0 view .LVU2
  38 0002 0023     		movs	r3, #0
  39 0004 0193     		str	r3, [sp, #4]
 224:FreeRTOS/portable/port.c **** 
 225:FreeRTOS/portable/port.c ****     /* A function that implements a task must not exit or attempt to return to
 226:FreeRTOS/portable/port.c ****      * its caller as there is nothing to return to.  If a task wants to exit it
 227:FreeRTOS/portable/port.c ****      * should instead call vTaskDelete( NULL ).
 228:FreeRTOS/portable/port.c ****      *
 229:FreeRTOS/portable/port.c ****      * Artificially force an assert() to be triggered if configASSERT() is
 230:FreeRTOS/portable/port.c ****      * defined, then stop here so application writers can catch the error. */
 231:FreeRTOS/portable/port.c ****     configASSERT( uxCriticalNesting == ~0UL );
  40              		.loc 1 231 5 is_stmt 1 view .LVU3
  41 0006 0D4B     		ldr	r3, .L6
  42 0008 1B68     		ldr	r3, [r3]
  43 000a B3F1FF3F 		cmp	r3, #-1
  44 000e 08D0     		beq	.L2
  45              		.loc 1 231 5 view .LVU4
  46              	.LBB31:
  47              	.LBI31:
  48              		.file 2 "FreeRTOS/portable/portmacro.h"
   1:FreeRTOS/portable/portmacro.h **** /*
   2:FreeRTOS/portable/portmacro.h ****  * FreeRTOS Kernel V10.4.6
   3:FreeRTOS/portable/portmacro.h ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/portable/portmacro.h ****  *
   5:FreeRTOS/portable/portmacro.h ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS/portable/portmacro.h ****  *
   7:FreeRTOS/portable/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 6


   8:FreeRTOS/portable/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS/portable/portmacro.h ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS/portable/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS/portable/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS/portable/portmacro.h ****  * subject to the following conditions:
  13:FreeRTOS/portable/portmacro.h ****  *
  14:FreeRTOS/portable/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS/portable/portmacro.h ****  * copies or substantial portions of the Software.
  16:FreeRTOS/portable/portmacro.h ****  *
  17:FreeRTOS/portable/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS/portable/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS/portable/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS/portable/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS/portable/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS/portable/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS/portable/portmacro.h ****  *
  24:FreeRTOS/portable/portmacro.h ****  * https://www.FreeRTOS.org
  25:FreeRTOS/portable/portmacro.h ****  * https://github.com/FreeRTOS
  26:FreeRTOS/portable/portmacro.h ****  *
  27:FreeRTOS/portable/portmacro.h ****  */
  28:FreeRTOS/portable/portmacro.h **** 
  29:FreeRTOS/portable/portmacro.h **** 
  30:FreeRTOS/portable/portmacro.h **** #ifndef PORTMACRO_H
  31:FreeRTOS/portable/portmacro.h ****     #define PORTMACRO_H
  32:FreeRTOS/portable/portmacro.h **** 
  33:FreeRTOS/portable/portmacro.h ****     #ifdef __cplusplus
  34:FreeRTOS/portable/portmacro.h ****         extern "C" {
  35:FreeRTOS/portable/portmacro.h ****     #endif
  36:FreeRTOS/portable/portmacro.h **** 
  37:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------
  38:FreeRTOS/portable/portmacro.h ****  * Port specific definitions.
  39:FreeRTOS/portable/portmacro.h ****  *
  40:FreeRTOS/portable/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  41:FreeRTOS/portable/portmacro.h ****  * given hardware and compiler.
  42:FreeRTOS/portable/portmacro.h ****  *
  43:FreeRTOS/portable/portmacro.h ****  * These settings should not be altered.
  44:FreeRTOS/portable/portmacro.h ****  *-----------------------------------------------------------
  45:FreeRTOS/portable/portmacro.h ****  */
  46:FreeRTOS/portable/portmacro.h **** 
  47:FreeRTOS/portable/portmacro.h **** /* Type definitions. */
  48:FreeRTOS/portable/portmacro.h ****     #define portCHAR          char
  49:FreeRTOS/portable/portmacro.h ****     #define portFLOAT         float
  50:FreeRTOS/portable/portmacro.h ****     #define portDOUBLE        double
  51:FreeRTOS/portable/portmacro.h ****     #define portLONG          long
  52:FreeRTOS/portable/portmacro.h ****     #define portSHORT         short
  53:FreeRTOS/portable/portmacro.h ****     #define portSTACK_TYPE    uint32_t
  54:FreeRTOS/portable/portmacro.h ****     #define portBASE_TYPE     long
  55:FreeRTOS/portable/portmacro.h **** 
  56:FreeRTOS/portable/portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  57:FreeRTOS/portable/portmacro.h ****     typedef long             BaseType_t;
  58:FreeRTOS/portable/portmacro.h ****     typedef unsigned long    UBaseType_t;
  59:FreeRTOS/portable/portmacro.h **** 
  60:FreeRTOS/portable/portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  61:FreeRTOS/portable/portmacro.h ****         typedef uint16_t     TickType_t;
  62:FreeRTOS/portable/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  63:FreeRTOS/portable/portmacro.h ****     #else
  64:FreeRTOS/portable/portmacro.h ****         typedef uint32_t     TickType_t;
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 7


  65:FreeRTOS/portable/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  66:FreeRTOS/portable/portmacro.h **** 
  67:FreeRTOS/portable/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  68:FreeRTOS/portable/portmacro.h ****  * not need to be guarded with a critical section. */
  69:FreeRTOS/portable/portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  70:FreeRTOS/portable/portmacro.h ****     #endif
  71:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
  72:FreeRTOS/portable/portmacro.h **** 
  73:FreeRTOS/portable/portmacro.h **** /* Architecture specifics. */
  74:FreeRTOS/portable/portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  75:FreeRTOS/portable/portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  76:FreeRTOS/portable/portmacro.h ****     #define portBYTE_ALIGNMENT    8
  77:FreeRTOS/portable/portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  78:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
  79:FreeRTOS/portable/portmacro.h **** 
  80:FreeRTOS/portable/portmacro.h **** /* Scheduler utilities. */
  81:FreeRTOS/portable/portmacro.h ****     #define portYIELD()                                 \
  82:FreeRTOS/portable/portmacro.h ****     {                                                   \
  83:FreeRTOS/portable/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  84:FreeRTOS/portable/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  85:FreeRTOS/portable/portmacro.h ****                                                         \
  86:FreeRTOS/portable/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  87:FreeRTOS/portable/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  88:FreeRTOS/portable/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  89:FreeRTOS/portable/portmacro.h ****         __asm volatile ( "isb" );                                  \
  90:FreeRTOS/portable/portmacro.h ****     }
  91:FreeRTOS/portable/portmacro.h **** 
  92:FreeRTOS/portable/portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  93:FreeRTOS/portable/portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  94:FreeRTOS/portable/portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    do { if( xSwitchRequired != pdFALSE ) portY
  95:FreeRTOS/portable/portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  96:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
  97:FreeRTOS/portable/portmacro.h **** 
  98:FreeRTOS/portable/portmacro.h **** /* Critical section management. */
  99:FreeRTOS/portable/portmacro.h ****     extern void vPortEnterCritical( void );
 100:FreeRTOS/portable/portmacro.h ****     extern void vPortExitCritical( void );
 101:FreeRTOS/portable/portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 102:FreeRTOS/portable/portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 103:FreeRTOS/portable/portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 104:FreeRTOS/portable/portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 105:FreeRTOS/portable/portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 106:FreeRTOS/portable/portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 107:FreeRTOS/portable/portmacro.h **** 
 108:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
 109:FreeRTOS/portable/portmacro.h **** 
 110:FreeRTOS/portable/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 111:FreeRTOS/portable/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 112:FreeRTOS/portable/portmacro.h ****  * (which build with all the ports) will build. */
 113:FreeRTOS/portable/portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 114:FreeRTOS/portable/portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 115:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
 116:FreeRTOS/portable/portmacro.h **** 
 117:FreeRTOS/portable/portmacro.h **** /* Tickless idle/low power functionality. */
 118:FreeRTOS/portable/portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 119:FreeRTOS/portable/portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 120:FreeRTOS/portable/portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 121:FreeRTOS/portable/portmacro.h ****     #endif
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 8


 122:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
 123:FreeRTOS/portable/portmacro.h **** 
 124:FreeRTOS/portable/portmacro.h **** /* Architecture specific optimisations. */
 125:FreeRTOS/portable/portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 126:FreeRTOS/portable/portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 127:FreeRTOS/portable/portmacro.h ****     #endif
 128:FreeRTOS/portable/portmacro.h **** 
 129:FreeRTOS/portable/portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 130:FreeRTOS/portable/portmacro.h **** 
 131:FreeRTOS/portable/portmacro.h **** /* Generic helper function. */
 132:FreeRTOS/portable/portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 133:FreeRTOS/portable/portmacro.h ****         {
 134:FreeRTOS/portable/portmacro.h ****             uint8_t ucReturn;
 135:FreeRTOS/portable/portmacro.h **** 
 136:FreeRTOS/portable/portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 137:FreeRTOS/portable/portmacro.h **** 
 138:FreeRTOS/portable/portmacro.h ****             return ucReturn;
 139:FreeRTOS/portable/portmacro.h ****         }
 140:FreeRTOS/portable/portmacro.h **** 
 141:FreeRTOS/portable/portmacro.h **** /* Check the configuration. */
 142:FreeRTOS/portable/portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 143:FreeRTOS/portable/portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 144:FreeRTOS/portable/portmacro.h ****         #endif
 145:FreeRTOS/portable/portmacro.h **** 
 146:FreeRTOS/portable/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 147:FreeRTOS/portable/portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 148:FreeRTOS/portable/portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 149:FreeRTOS/portable/portmacro.h **** 
 150:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
 151:FreeRTOS/portable/portmacro.h **** 
 152:FreeRTOS/portable/portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 153:FreeRTOS/portable/portmacro.h **** 
 154:FreeRTOS/portable/portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 155:FreeRTOS/portable/portmacro.h **** 
 156:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
 157:FreeRTOS/portable/portmacro.h **** 
 158:FreeRTOS/portable/portmacro.h ****     #ifdef configASSERT
 159:FreeRTOS/portable/portmacro.h ****         void vPortValidateInterruptPriority( void );
 160:FreeRTOS/portable/portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 161:FreeRTOS/portable/portmacro.h ****     #endif
 162:FreeRTOS/portable/portmacro.h **** 
 163:FreeRTOS/portable/portmacro.h **** /* portNOP() is not required by this port. */
 164:FreeRTOS/portable/portmacro.h ****     #define portNOP()
 165:FreeRTOS/portable/portmacro.h **** 
 166:FreeRTOS/portable/portmacro.h ****     #define portINLINE              __inline
 167:FreeRTOS/portable/portmacro.h **** 
 168:FreeRTOS/portable/portmacro.h ****     #ifndef portFORCE_INLINE
 169:FreeRTOS/portable/portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 170:FreeRTOS/portable/portmacro.h ****     #endif
 171:FreeRTOS/portable/portmacro.h **** 
 172:FreeRTOS/portable/portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 173:FreeRTOS/portable/portmacro.h ****     {
 174:FreeRTOS/portable/portmacro.h ****         uint32_t ulCurrentInterrupt;
 175:FreeRTOS/portable/portmacro.h ****         BaseType_t xReturn;
 176:FreeRTOS/portable/portmacro.h **** 
 177:FreeRTOS/portable/portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 178:FreeRTOS/portable/portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 9


 179:FreeRTOS/portable/portmacro.h **** 
 180:FreeRTOS/portable/portmacro.h ****         if( ulCurrentInterrupt == 0 )
 181:FreeRTOS/portable/portmacro.h ****         {
 182:FreeRTOS/portable/portmacro.h ****             xReturn = pdFALSE;
 183:FreeRTOS/portable/portmacro.h ****         }
 184:FreeRTOS/portable/portmacro.h ****         else
 185:FreeRTOS/portable/portmacro.h ****         {
 186:FreeRTOS/portable/portmacro.h ****             xReturn = pdTRUE;
 187:FreeRTOS/portable/portmacro.h ****         }
 188:FreeRTOS/portable/portmacro.h **** 
 189:FreeRTOS/portable/portmacro.h ****         return xReturn;
 190:FreeRTOS/portable/portmacro.h ****     }
 191:FreeRTOS/portable/portmacro.h **** 
 192:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
 193:FreeRTOS/portable/portmacro.h **** 
 194:FreeRTOS/portable/portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
  49              		.loc 2 194 34 view .LVU5
  50              	.LBB32:
 195:FreeRTOS/portable/portmacro.h ****     {
 196:FreeRTOS/portable/portmacro.h ****         uint32_t ulNewBASEPRI;
  51              		.loc 2 196 9 view .LVU6
 197:FreeRTOS/portable/portmacro.h **** 
 198:FreeRTOS/portable/portmacro.h ****         __asm volatile
  52              		.loc 2 198 9 view .LVU7
  53              		.syntax unified
  54              	@ 198 "FreeRTOS/portable/portmacro.h" 1
  55 0010 4FF05003 			mov r3, #80												
  56 0014 83F31188 		msr basepri, r3											
  57 0018 BFF36F8F 		isb														
  58 001c BFF34F8F 		dsb														
  59              	
  60              	@ 0 "" 2
  61              	.LVL0:
  62              		.thumb
  63              		.syntax unified
  64              	.L3:
  65              		.loc 2 198 9 is_stmt 0 view .LVU8
  66              	.LBE32:
  67              	.LBE31:
  68              		.loc 1 231 5 is_stmt 1 discriminator 1 view .LVU9
  69              		.loc 1 231 5 discriminator 1 view .LVU10
  70              		.loc 1 231 5 discriminator 1 view .LVU11
  71 0020 FEE7     		b	.L3
  72              	.L2:
  73              		.loc 1 231 46 view .LVU12
 232:FreeRTOS/portable/port.c ****     portDISABLE_INTERRUPTS();
  74              		.loc 1 232 5 view .LVU13
  75              	.LBB33:
  76              	.LBI33:
 194:FreeRTOS/portable/portmacro.h ****     {
  77              		.loc 2 194 34 view .LVU14
  78              	.LBB34:
 196:FreeRTOS/portable/portmacro.h **** 
  79              		.loc 2 196 9 view .LVU15
  80              		.loc 2 198 9 view .LVU16
  81              		.syntax unified
  82              	@ 198 "FreeRTOS/portable/portmacro.h" 1
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 10


  83 0022 4FF05003 			mov r3, #80												
  84 0026 83F31188 		msr basepri, r3											
  85 002a BFF36F8F 		isb														
  86 002e BFF34F8F 		dsb														
  87              	
  88              	@ 0 "" 2
  89              	.LVL1:
  90              		.thumb
  91              		.syntax unified
  92              	.L4:
  93              		.loc 2 198 9 is_stmt 0 view .LVU17
  94              	.LBE34:
  95              	.LBE33:
 233:FreeRTOS/portable/port.c **** 
 234:FreeRTOS/portable/port.c ****     while( ulDummy == 0 )
 235:FreeRTOS/portable/port.c ****     {
 236:FreeRTOS/portable/port.c ****         /* This file calls prvTaskExitError() after the scheduler has been
 237:FreeRTOS/portable/port.c ****          * started to remove a compiler warning about the function being defined
 238:FreeRTOS/portable/port.c ****          * but never called.  ulDummy is used purely to quieten other warnings
 239:FreeRTOS/portable/port.c ****          * about code appearing after this function is called - making ulDummy
 240:FreeRTOS/portable/port.c ****          * volatile makes the compiler think the function could return and
 241:FreeRTOS/portable/port.c ****          * therefore not output an 'unreachable code' warning for code that appears
 242:FreeRTOS/portable/port.c ****          * after it. */
 243:FreeRTOS/portable/port.c ****     }
  96              		.loc 1 243 5 is_stmt 1 discriminator 1 view .LVU18
 234:FreeRTOS/portable/port.c ****     {
  97              		.loc 1 234 10 discriminator 1 view .LVU19
 234:FreeRTOS/portable/port.c ****     {
  98              		.loc 1 234 20 is_stmt 0 discriminator 1 view .LVU20
  99 0032 019B     		ldr	r3, [sp, #4]
 234:FreeRTOS/portable/port.c ****     {
 100              		.loc 1 234 10 discriminator 1 view .LVU21
 101 0034 002B     		cmp	r3, #0
 102 0036 FCD0     		beq	.L4
 244:FreeRTOS/portable/port.c **** }
 103              		.loc 1 244 1 view .LVU22
 104 0038 02B0     		add	sp, sp, #8
 105              	.LCFI1:
 106              		.cfi_def_cfa_offset 0
 107              		@ sp needed
 108 003a 7047     		bx	lr
 109              	.L7:
 110              		.align	2
 111              	.L6:
 112 003c 00000000 		.word	.LANCHOR0
 113              		.cfi_endproc
 114              	.LFE6:
 116              		.section	.text.prvPortStartFirstTask,"ax",%progbits
 117              		.align	1
 118              		.syntax unified
 119              		.thumb
 120              		.thumb_func
 121              		.fpu fpv4-sp-d16
 123              	prvPortStartFirstTask:
 124              	.LFB8:
 245:FreeRTOS/portable/port.c **** /*-----------------------------------------------------------*/
 246:FreeRTOS/portable/port.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 11


 247:FreeRTOS/portable/port.c **** void vPortSVCHandler( void )
 248:FreeRTOS/portable/port.c **** {
 249:FreeRTOS/portable/port.c ****     __asm volatile (
 250:FreeRTOS/portable/port.c ****         "	ldr	r3, pxCurrentTCBConst2		\n"/* Restore the context. */
 251:FreeRTOS/portable/port.c ****         "	ldr r1, [r3]					\n"/* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 252:FreeRTOS/portable/port.c ****         "	ldr r0, [r1]					\n"/* The first item in pxCurrentTCB is the task top of stack. */
 253:FreeRTOS/portable/port.c ****         "	ldmia r0!, {r4-r11, r14}		\n"/* Pop the registers that are not automatically saved on exc
 254:FreeRTOS/portable/port.c ****         "	msr psp, r0						\n"/* Restore the task stack pointer. */
 255:FreeRTOS/portable/port.c ****         "	isb								\n"
 256:FreeRTOS/portable/port.c ****         "	mov r0, #0 						\n"
 257:FreeRTOS/portable/port.c ****         "	msr	basepri, r0					\n"
 258:FreeRTOS/portable/port.c ****         "	bx r14							\n"
 259:FreeRTOS/portable/port.c ****         "									\n"
 260:FreeRTOS/portable/port.c ****         "	.align 4						\n"
 261:FreeRTOS/portable/port.c ****         "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 262:FreeRTOS/portable/port.c ****         );
 263:FreeRTOS/portable/port.c **** }
 264:FreeRTOS/portable/port.c **** /*-----------------------------------------------------------*/
 265:FreeRTOS/portable/port.c **** 
 266:FreeRTOS/portable/port.c **** static void prvPortStartFirstTask( void )
 267:FreeRTOS/portable/port.c **** {
 125              		.loc 1 267 1 is_stmt 1 view -0
 126              		.cfi_startproc
 127              		@ Naked Function: prologue and epilogue provided by programmer.
 128              		@ args = 0, pretend = 0, frame = 0
 129              		@ frame_needed = 0, uses_anonymous_args = 0
 268:FreeRTOS/portable/port.c ****     /* Start the first task.  This also clears the bit that indicates the FPU is
 269:FreeRTOS/portable/port.c ****      * in use in case the FPU was used before the scheduler was started - which
 270:FreeRTOS/portable/port.c ****      * would otherwise result in the unnecessary leaving of space in the SVC stack
 271:FreeRTOS/portable/port.c ****      * for lazy saving of FPU registers. */
 272:FreeRTOS/portable/port.c ****     __asm volatile (
 130              		.loc 1 272 5 view .LVU24
 131              		.syntax unified
 132              	@ 272 "FreeRTOS/portable/port.c" 1
 133 0000 0848     		 ldr r0, =0xE000ED08 	
 134 0002 0068     	 ldr r0, [r0] 			
 135 0004 0068     	 ldr r0, [r0] 			
 136 0006 80F30888 	 msr msp, r0			
 137 000a 4FF00000 	 mov r0, #0			
 138 000e 80F31488 	 msr control, r0		
 139 0012 62B6     	 cpsie i				
 140 0014 61B6     	 cpsie f				
 141 0016 BFF34F8F 	 dsb					
 142 001a BFF36F8F 	 isb					
 143 001e 00DF     	 svc 0					
 144 0020 00BF     	 nop					
 145 0022 000008ED 	 .ltorg				
 145      00E0
 146              	
 147              	@ 0 "" 2
 273:FreeRTOS/portable/port.c ****         " ldr r0, =0xE000ED08 	\n"/* Use the NVIC offset register to locate the stack. */
 274:FreeRTOS/portable/port.c ****         " ldr r0, [r0] 			\n"
 275:FreeRTOS/portable/port.c ****         " ldr r0, [r0] 			\n"
 276:FreeRTOS/portable/port.c ****         " msr msp, r0			\n"/* Set the msp back to the start of the stack. */
 277:FreeRTOS/portable/port.c ****         " mov r0, #0			\n"/* Clear the bit that indicates the FPU is in use, see comment above. */
 278:FreeRTOS/portable/port.c ****         " msr control, r0		\n"
 279:FreeRTOS/portable/port.c ****         " cpsie i				\n"/* Globally enable interrupts. */
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 12


 280:FreeRTOS/portable/port.c ****         " cpsie f				\n"
 281:FreeRTOS/portable/port.c ****         " dsb					\n"
 282:FreeRTOS/portable/port.c ****         " isb					\n"
 283:FreeRTOS/portable/port.c ****         " svc 0					\n"/* System call to start first task. */
 284:FreeRTOS/portable/port.c ****         " nop					\n"
 285:FreeRTOS/portable/port.c ****         " .ltorg				\n"
 286:FreeRTOS/portable/port.c ****         );
 287:FreeRTOS/portable/port.c **** }
 148              		.loc 1 287 1 is_stmt 0 view .LVU25
 149              		.thumb
 150              		.syntax unified
 151              		.cfi_endproc
 152              	.LFE8:
 154              		.section	.text.vPortEnableVFP,"ax",%progbits
 155              		.align	1
 156              		.syntax unified
 157              		.thumb
 158              		.thumb_func
 159              		.fpu fpv4-sp-d16
 161              	vPortEnableVFP:
 162              	.LFB17:
 288:FreeRTOS/portable/port.c **** /*-----------------------------------------------------------*/
 289:FreeRTOS/portable/port.c **** 
 290:FreeRTOS/portable/port.c **** /*
 291:FreeRTOS/portable/port.c ****  * See header file for description.
 292:FreeRTOS/portable/port.c ****  */
 293:FreeRTOS/portable/port.c **** BaseType_t xPortStartScheduler( void )
 294:FreeRTOS/portable/port.c **** {
 295:FreeRTOS/portable/port.c ****     /* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 296:FreeRTOS/portable/port.c ****      * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
 297:FreeRTOS/portable/port.c ****     configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );
 298:FreeRTOS/portable/port.c **** 
 299:FreeRTOS/portable/port.c ****     /* This port can be used on all revisions of the Cortex-M7 core other than
 300:FreeRTOS/portable/port.c ****      * the r0p1 parts.  r0p1 parts should use the port from the
 301:FreeRTOS/portable/port.c ****      * /source/portable/GCC/ARM_CM7/r0p1 directory. */
 302:FreeRTOS/portable/port.c ****     configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 303:FreeRTOS/portable/port.c ****     configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 304:FreeRTOS/portable/port.c **** 
 305:FreeRTOS/portable/port.c ****     #if ( configASSERT_DEFINED == 1 )
 306:FreeRTOS/portable/port.c ****         {
 307:FreeRTOS/portable/port.c ****             volatile uint32_t ulOriginalPriority;
 308:FreeRTOS/portable/port.c ****             volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( 
 309:FreeRTOS/portable/port.c ****             volatile uint8_t ucMaxPriorityValue;
 310:FreeRTOS/portable/port.c **** 
 311:FreeRTOS/portable/port.c ****             /* Determine the maximum priority from which ISR safe FreeRTOS API
 312:FreeRTOS/portable/port.c ****              * functions can be called.  ISR safe functions are those that end in
 313:FreeRTOS/portable/port.c ****              * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
 314:FreeRTOS/portable/port.c ****              * ensure interrupt entry is as fast and simple as possible.
 315:FreeRTOS/portable/port.c ****              *
 316:FreeRTOS/portable/port.c ****              * Save the interrupt priority value that is about to be clobbered. */
 317:FreeRTOS/portable/port.c ****             ulOriginalPriority = *pucFirstUserPriorityRegister;
 318:FreeRTOS/portable/port.c **** 
 319:FreeRTOS/portable/port.c ****             /* Determine the number of priority bits available.  First write to all
 320:FreeRTOS/portable/port.c ****              * possible bits. */
 321:FreeRTOS/portable/port.c ****             *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 322:FreeRTOS/portable/port.c **** 
 323:FreeRTOS/portable/port.c ****             /* Read the value back to see how many bits stuck. */
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 13


 324:FreeRTOS/portable/port.c ****             ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 325:FreeRTOS/portable/port.c **** 
 326:FreeRTOS/portable/port.c ****             /* Use the same mask on the maximum system call priority. */
 327:FreeRTOS/portable/port.c ****             ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 328:FreeRTOS/portable/port.c **** 
 329:FreeRTOS/portable/port.c ****             /* Calculate the maximum acceptable priority group value for the number
 330:FreeRTOS/portable/port.c ****              * of bits read back. */
 331:FreeRTOS/portable/port.c ****             ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 332:FreeRTOS/portable/port.c **** 
 333:FreeRTOS/portable/port.c ****             while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 334:FreeRTOS/portable/port.c ****             {
 335:FreeRTOS/portable/port.c ****                 ulMaxPRIGROUPValue--;
 336:FreeRTOS/portable/port.c ****                 ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 337:FreeRTOS/portable/port.c ****             }
 338:FreeRTOS/portable/port.c **** 
 339:FreeRTOS/portable/port.c ****             #ifdef __NVIC_PRIO_BITS
 340:FreeRTOS/portable/port.c ****                 {
 341:FreeRTOS/portable/port.c ****                     /* Check the CMSIS configuration that defines the number of
 342:FreeRTOS/portable/port.c ****                      * priority bits matches the number of priority bits actually queried
 343:FreeRTOS/portable/port.c ****                      * from the hardware. */
 344:FreeRTOS/portable/port.c ****                     configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BIT
 345:FreeRTOS/portable/port.c ****                 }
 346:FreeRTOS/portable/port.c ****             #endif
 347:FreeRTOS/portable/port.c **** 
 348:FreeRTOS/portable/port.c ****             #ifdef configPRIO_BITS
 349:FreeRTOS/portable/port.c ****                 {
 350:FreeRTOS/portable/port.c ****                     /* Check the FreeRTOS configuration that defines the number of
 351:FreeRTOS/portable/port.c ****                      * priority bits matches the number of priority bits actually queried
 352:FreeRTOS/portable/port.c ****                      * from the hardware. */
 353:FreeRTOS/portable/port.c ****                     configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS
 354:FreeRTOS/portable/port.c ****                 }
 355:FreeRTOS/portable/port.c ****             #endif
 356:FreeRTOS/portable/port.c **** 
 357:FreeRTOS/portable/port.c ****             /* Shift the priority group value back to its position within the AIRCR
 358:FreeRTOS/portable/port.c ****              * register. */
 359:FreeRTOS/portable/port.c ****             ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 360:FreeRTOS/portable/port.c ****             ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 361:FreeRTOS/portable/port.c **** 
 362:FreeRTOS/portable/port.c ****             /* Restore the clobbered interrupt priority register to its original
 363:FreeRTOS/portable/port.c ****              * value. */
 364:FreeRTOS/portable/port.c ****             *pucFirstUserPriorityRegister = ulOriginalPriority;
 365:FreeRTOS/portable/port.c ****         }
 366:FreeRTOS/portable/port.c ****     #endif /* configASSERT_DEFINED */
 367:FreeRTOS/portable/port.c **** 
 368:FreeRTOS/portable/port.c ****     /* Make PendSV and SysTick the lowest priority interrupts. */
 369:FreeRTOS/portable/port.c ****     portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 370:FreeRTOS/portable/port.c ****     portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 371:FreeRTOS/portable/port.c **** 
 372:FreeRTOS/portable/port.c ****     /* Start the timer that generates the tick ISR.  Interrupts are disabled
 373:FreeRTOS/portable/port.c ****      * here already. */
 374:FreeRTOS/portable/port.c ****     vPortSetupTimerInterrupt();
 375:FreeRTOS/portable/port.c **** 
 376:FreeRTOS/portable/port.c ****     /* Initialise the critical nesting count ready for the first task. */
 377:FreeRTOS/portable/port.c ****     uxCriticalNesting = 0;
 378:FreeRTOS/portable/port.c **** 
 379:FreeRTOS/portable/port.c ****     /* Ensure the VFP is enabled - it should be anyway. */
 380:FreeRTOS/portable/port.c ****     vPortEnableVFP();
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 14


 381:FreeRTOS/portable/port.c **** 
 382:FreeRTOS/portable/port.c ****     /* Lazy save always. */
 383:FreeRTOS/portable/port.c ****     *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 384:FreeRTOS/portable/port.c **** 
 385:FreeRTOS/portable/port.c ****     /* Start the first task. */
 386:FreeRTOS/portable/port.c ****     prvPortStartFirstTask();
 387:FreeRTOS/portable/port.c **** 
 388:FreeRTOS/portable/port.c ****     /* Should never get here as the tasks will now be executing!  Call the task
 389:FreeRTOS/portable/port.c ****      * exit error function to prevent compiler warnings about a static function
 390:FreeRTOS/portable/port.c ****      * not being called in the case that the application writer overrides this
 391:FreeRTOS/portable/port.c ****      * functionality by defining configTASK_RETURN_ADDRESS.  Call
 392:FreeRTOS/portable/port.c ****      * vTaskSwitchContext() so link time optimisation does not remove the
 393:FreeRTOS/portable/port.c ****      * symbol. */
 394:FreeRTOS/portable/port.c ****     vTaskSwitchContext();
 395:FreeRTOS/portable/port.c ****     prvTaskExitError();
 396:FreeRTOS/portable/port.c **** 
 397:FreeRTOS/portable/port.c ****     /* Should not get here! */
 398:FreeRTOS/portable/port.c ****     return 0;
 399:FreeRTOS/portable/port.c **** }
 400:FreeRTOS/portable/port.c **** /*-----------------------------------------------------------*/
 401:FreeRTOS/portable/port.c **** 
 402:FreeRTOS/portable/port.c **** void vPortEndScheduler( void )
 403:FreeRTOS/portable/port.c **** {
 404:FreeRTOS/portable/port.c ****     /* Not implemented in ports where there is nothing to return to.
 405:FreeRTOS/portable/port.c ****      * Artificially force an assert. */
 406:FreeRTOS/portable/port.c ****     configASSERT( uxCriticalNesting == 1000UL );
 407:FreeRTOS/portable/port.c **** }
 408:FreeRTOS/portable/port.c **** /*-----------------------------------------------------------*/
 409:FreeRTOS/portable/port.c **** 
 410:FreeRTOS/portable/port.c **** void vPortEnterCritical( void )
 411:FreeRTOS/portable/port.c **** {
 412:FreeRTOS/portable/port.c ****     portDISABLE_INTERRUPTS();
 413:FreeRTOS/portable/port.c ****     uxCriticalNesting++;
 414:FreeRTOS/portable/port.c **** 
 415:FreeRTOS/portable/port.c ****     /* This is not the interrupt safe version of the enter critical function so
 416:FreeRTOS/portable/port.c ****      * assert() if it is being called from an interrupt context.  Only API
 417:FreeRTOS/portable/port.c ****      * functions that end in "FromISR" can be used in an interrupt.  Only assert if
 418:FreeRTOS/portable/port.c ****      * the critical nesting count is 1 to protect against recursive calls if the
 419:FreeRTOS/portable/port.c ****      * assert function also uses a critical section. */
 420:FreeRTOS/portable/port.c ****     if( uxCriticalNesting == 1 )
 421:FreeRTOS/portable/port.c ****     {
 422:FreeRTOS/portable/port.c ****         configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 423:FreeRTOS/portable/port.c ****     }
 424:FreeRTOS/portable/port.c **** }
 425:FreeRTOS/portable/port.c **** /*-----------------------------------------------------------*/
 426:FreeRTOS/portable/port.c **** 
 427:FreeRTOS/portable/port.c **** void vPortExitCritical( void )
 428:FreeRTOS/portable/port.c **** {
 429:FreeRTOS/portable/port.c ****     configASSERT( uxCriticalNesting );
 430:FreeRTOS/portable/port.c ****     uxCriticalNesting--;
 431:FreeRTOS/portable/port.c **** 
 432:FreeRTOS/portable/port.c ****     if( uxCriticalNesting == 0 )
 433:FreeRTOS/portable/port.c ****     {
 434:FreeRTOS/portable/port.c ****         portENABLE_INTERRUPTS();
 435:FreeRTOS/portable/port.c ****     }
 436:FreeRTOS/portable/port.c **** }
 437:FreeRTOS/portable/port.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 15


 438:FreeRTOS/portable/port.c **** 
 439:FreeRTOS/portable/port.c **** void xPortPendSVHandler( void )
 440:FreeRTOS/portable/port.c **** {
 441:FreeRTOS/portable/port.c ****     /* This is a naked function. */
 442:FreeRTOS/portable/port.c **** 
 443:FreeRTOS/portable/port.c ****     __asm volatile
 444:FreeRTOS/portable/port.c ****     (
 445:FreeRTOS/portable/port.c ****         "	mrs r0, psp							\n"
 446:FreeRTOS/portable/port.c ****         "	isb									\n"
 447:FreeRTOS/portable/port.c ****         "										\n"
 448:FreeRTOS/portable/port.c ****         "	ldr	r3, pxCurrentTCBConst			\n"/* Get the location of the current TCB. */
 449:FreeRTOS/portable/port.c ****         "	ldr	r2, [r3]						\n"
 450:FreeRTOS/portable/port.c ****         "										\n"
 451:FreeRTOS/portable/port.c ****         "	tst r14, #0x10						\n"/* Is the task using the FPU context?  If so, push high vfp regist
 452:FreeRTOS/portable/port.c ****         "	it eq								\n"
 453:FreeRTOS/portable/port.c ****         "	vstmdbeq r0!, {s16-s31}				\n"
 454:FreeRTOS/portable/port.c ****         "										\n"
 455:FreeRTOS/portable/port.c ****         "	stmdb r0!, {r4-r11, r14}			\n"/* Save the core registers. */
 456:FreeRTOS/portable/port.c ****         "	str r0, [r2]						\n"/* Save the new top of stack into the first member of the TCB. */
 457:FreeRTOS/portable/port.c ****         "										\n"
 458:FreeRTOS/portable/port.c ****         "	stmdb sp!, {r0, r3}					\n"
 459:FreeRTOS/portable/port.c ****         "	mov r0, %0 							\n"
 460:FreeRTOS/portable/port.c ****         "	msr basepri, r0						\n"
 461:FreeRTOS/portable/port.c ****         "	dsb									\n"
 462:FreeRTOS/portable/port.c ****         "	isb									\n"
 463:FreeRTOS/portable/port.c ****         "	bl vTaskSwitchContext				\n"
 464:FreeRTOS/portable/port.c ****         "	mov r0, #0							\n"
 465:FreeRTOS/portable/port.c ****         "	msr basepri, r0						\n"
 466:FreeRTOS/portable/port.c ****         "	ldmia sp!, {r0, r3}					\n"
 467:FreeRTOS/portable/port.c ****         "										\n"
 468:FreeRTOS/portable/port.c ****         "	ldr r1, [r3]						\n"/* The first item in pxCurrentTCB is the task top of stack. */
 469:FreeRTOS/portable/port.c ****         "	ldr r0, [r1]						\n"
 470:FreeRTOS/portable/port.c ****         "										\n"
 471:FreeRTOS/portable/port.c ****         "	ldmia r0!, {r4-r11, r14}			\n"/* Pop the core registers. */
 472:FreeRTOS/portable/port.c ****         "										\n"
 473:FreeRTOS/portable/port.c ****         "	tst r14, #0x10						\n"/* Is the task using the FPU context?  If so, pop the high vfp reg
 474:FreeRTOS/portable/port.c ****         "	it eq								\n"
 475:FreeRTOS/portable/port.c ****         "	vldmiaeq r0!, {s16-s31}				\n"
 476:FreeRTOS/portable/port.c ****         "										\n"
 477:FreeRTOS/portable/port.c ****         "	msr psp, r0							\n"
 478:FreeRTOS/portable/port.c ****         "	isb									\n"
 479:FreeRTOS/portable/port.c ****         "										\n"
 480:FreeRTOS/portable/port.c ****         #ifdef WORKAROUND_PMU_CM001 /* XMC4000 specific errata workaround. */
 481:FreeRTOS/portable/port.c ****             #if WORKAROUND_PMU_CM001 == 1
 482:FreeRTOS/portable/port.c ****                 "			push { r14 }				\n"
 483:FreeRTOS/portable/port.c ****                 "			pop { pc }					\n"
 484:FreeRTOS/portable/port.c ****             #endif
 485:FreeRTOS/portable/port.c ****         #endif
 486:FreeRTOS/portable/port.c ****         "										\n"
 487:FreeRTOS/portable/port.c ****         "	bx r14								\n"
 488:FreeRTOS/portable/port.c ****         "										\n"
 489:FreeRTOS/portable/port.c ****         "	.align 4							\n"
 490:FreeRTOS/portable/port.c ****         "pxCurrentTCBConst: .word pxCurrentTCB	\n"
 491:FreeRTOS/portable/port.c ****         ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 492:FreeRTOS/portable/port.c ****     );
 493:FreeRTOS/portable/port.c **** }
 494:FreeRTOS/portable/port.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 16


 495:FreeRTOS/portable/port.c **** 
 496:FreeRTOS/portable/port.c **** void xPortSysTickHandler( void )
 497:FreeRTOS/portable/port.c **** {
 498:FreeRTOS/portable/port.c ****     /* The SysTick runs at the lowest interrupt priority, so when this interrupt
 499:FreeRTOS/portable/port.c ****      * executes all interrupts must be unmasked.  There is therefore no need to
 500:FreeRTOS/portable/port.c ****      * save and then restore the interrupt mask value as its value is already
 501:FreeRTOS/portable/port.c ****      * known. */
 502:FreeRTOS/portable/port.c ****     portDISABLE_INTERRUPTS();
 503:FreeRTOS/portable/port.c ****     {
 504:FreeRTOS/portable/port.c ****         /* Increment the RTOS tick. */
 505:FreeRTOS/portable/port.c ****         if( xTaskIncrementTick() != pdFALSE )
 506:FreeRTOS/portable/port.c ****         {
 507:FreeRTOS/portable/port.c ****             /* A context switch is required.  Context switching is performed in
 508:FreeRTOS/portable/port.c ****              * the PendSV interrupt.  Pend the PendSV interrupt. */
 509:FreeRTOS/portable/port.c ****             portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 510:FreeRTOS/portable/port.c ****         }
 511:FreeRTOS/portable/port.c ****     }
 512:FreeRTOS/portable/port.c ****     portENABLE_INTERRUPTS();
 513:FreeRTOS/portable/port.c **** }
 514:FreeRTOS/portable/port.c **** /*-----------------------------------------------------------*/
 515:FreeRTOS/portable/port.c **** 
 516:FreeRTOS/portable/port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 517:FreeRTOS/portable/port.c **** 
 518:FreeRTOS/portable/port.c ****     __attribute__( ( weak ) ) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
 519:FreeRTOS/portable/port.c ****     {
 520:FreeRTOS/portable/port.c ****         uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
 521:FreeRTOS/portable/port.c ****         TickType_t xModifiableIdleTime;
 522:FreeRTOS/portable/port.c **** 
 523:FreeRTOS/portable/port.c ****         /* Make sure the SysTick reload value does not overflow the counter. */
 524:FreeRTOS/portable/port.c ****         if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 525:FreeRTOS/portable/port.c ****         {
 526:FreeRTOS/portable/port.c ****             xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 527:FreeRTOS/portable/port.c ****         }
 528:FreeRTOS/portable/port.c **** 
 529:FreeRTOS/portable/port.c ****         /* Stop the SysTick momentarily.  The time the SysTick is stopped for
 530:FreeRTOS/portable/port.c ****          * is accounted for as best it can be, but using the tickless mode will
 531:FreeRTOS/portable/port.c ****          * inevitably result in some tiny drift of the time maintained by the
 532:FreeRTOS/portable/port.c ****          * kernel with respect to calendar time. */
 533:FreeRTOS/portable/port.c ****         portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 534:FreeRTOS/portable/port.c **** 
 535:FreeRTOS/portable/port.c ****         /* Calculate the reload value required to wait xExpectedIdleTime
 536:FreeRTOS/portable/port.c ****          * tick periods.  -1 is used because this code will execute part way
 537:FreeRTOS/portable/port.c ****          * through one of the tick periods. */
 538:FreeRTOS/portable/port.c ****         ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpecte
 539:FreeRTOS/portable/port.c **** 
 540:FreeRTOS/portable/port.c ****         if( ulReloadValue > ulStoppedTimerCompensation )
 541:FreeRTOS/portable/port.c ****         {
 542:FreeRTOS/portable/port.c ****             ulReloadValue -= ulStoppedTimerCompensation;
 543:FreeRTOS/portable/port.c ****         }
 544:FreeRTOS/portable/port.c **** 
 545:FreeRTOS/portable/port.c ****         /* Enter a critical section but don't use the taskENTER_CRITICAL()
 546:FreeRTOS/portable/port.c ****          * method as that will mask interrupts that should exit sleep mode. */
 547:FreeRTOS/portable/port.c ****         __asm volatile ( "cpsid i" ::: "memory" );
 548:FreeRTOS/portable/port.c ****         __asm volatile ( "dsb" );
 549:FreeRTOS/portable/port.c ****         __asm volatile ( "isb" );
 550:FreeRTOS/portable/port.c **** 
 551:FreeRTOS/portable/port.c ****         /* If a context switch is pending or a task is waiting for the scheduler
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 17


 552:FreeRTOS/portable/port.c ****          * to be unsuspended then abandon the low power entry. */
 553:FreeRTOS/portable/port.c ****         if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 554:FreeRTOS/portable/port.c ****         {
 555:FreeRTOS/portable/port.c ****             /* Restart from whatever is left in the count register to complete
 556:FreeRTOS/portable/port.c ****              * this tick period. */
 557:FreeRTOS/portable/port.c ****             portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 558:FreeRTOS/portable/port.c **** 
 559:FreeRTOS/portable/port.c ****             /* Restart SysTick. */
 560:FreeRTOS/portable/port.c ****             portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 561:FreeRTOS/portable/port.c **** 
 562:FreeRTOS/portable/port.c ****             /* Reset the reload register to the value required for normal tick
 563:FreeRTOS/portable/port.c ****              * periods. */
 564:FreeRTOS/portable/port.c ****             portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 565:FreeRTOS/portable/port.c **** 
 566:FreeRTOS/portable/port.c ****             /* Re-enable interrupts - see comments above the cpsid instruction()
 567:FreeRTOS/portable/port.c ****              * above. */
 568:FreeRTOS/portable/port.c ****             __asm volatile ( "cpsie i" ::: "memory" );
 569:FreeRTOS/portable/port.c ****         }
 570:FreeRTOS/portable/port.c ****         else
 571:FreeRTOS/portable/port.c ****         {
 572:FreeRTOS/portable/port.c ****             /* Set the new reload value. */
 573:FreeRTOS/portable/port.c ****             portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 574:FreeRTOS/portable/port.c **** 
 575:FreeRTOS/portable/port.c ****             /* Clear the SysTick count flag and set the count value back to
 576:FreeRTOS/portable/port.c ****              * zero. */
 577:FreeRTOS/portable/port.c ****             portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 578:FreeRTOS/portable/port.c **** 
 579:FreeRTOS/portable/port.c ****             /* Restart SysTick. */
 580:FreeRTOS/portable/port.c ****             portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 581:FreeRTOS/portable/port.c **** 
 582:FreeRTOS/portable/port.c ****             /* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
 583:FreeRTOS/portable/port.c ****              * set its parameter to 0 to indicate that its implementation contains
 584:FreeRTOS/portable/port.c ****              * its own wait for interrupt or wait for event instruction, and so wfi
 585:FreeRTOS/portable/port.c ****              * should not be executed again.  However, the original expected idle
 586:FreeRTOS/portable/port.c ****              * time variable must remain unmodified, so a copy is taken. */
 587:FreeRTOS/portable/port.c ****             xModifiableIdleTime = xExpectedIdleTime;
 588:FreeRTOS/portable/port.c ****             configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 589:FreeRTOS/portable/port.c **** 
 590:FreeRTOS/portable/port.c ****             if( xModifiableIdleTime > 0 )
 591:FreeRTOS/portable/port.c ****             {
 592:FreeRTOS/portable/port.c ****                 __asm volatile ( "dsb" ::: "memory" );
 593:FreeRTOS/portable/port.c ****                 __asm volatile ( "wfi" );
 594:FreeRTOS/portable/port.c ****                 __asm volatile ( "isb" );
 595:FreeRTOS/portable/port.c ****             }
 596:FreeRTOS/portable/port.c **** 
 597:FreeRTOS/portable/port.c ****             configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 598:FreeRTOS/portable/port.c **** 
 599:FreeRTOS/portable/port.c ****             /* Re-enable interrupts to allow the interrupt that brought the MCU
 600:FreeRTOS/portable/port.c ****              * out of sleep mode to execute immediately.  see comments above
 601:FreeRTOS/portable/port.c ****              * __disable_interrupt() call above. */
 602:FreeRTOS/portable/port.c ****             __asm volatile ( "cpsie i" ::: "memory" );
 603:FreeRTOS/portable/port.c ****             __asm volatile ( "dsb" );
 604:FreeRTOS/portable/port.c ****             __asm volatile ( "isb" );
 605:FreeRTOS/portable/port.c **** 
 606:FreeRTOS/portable/port.c ****             /* Disable interrupts again because the clock is about to be stopped
 607:FreeRTOS/portable/port.c ****              * and interrupts that execute while the clock is stopped will increase
 608:FreeRTOS/portable/port.c ****              * any slippage between the time maintained by the RTOS and calendar
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 18


 609:FreeRTOS/portable/port.c ****              * time. */
 610:FreeRTOS/portable/port.c ****             __asm volatile ( "cpsid i" ::: "memory" );
 611:FreeRTOS/portable/port.c ****             __asm volatile ( "dsb" );
 612:FreeRTOS/portable/port.c ****             __asm volatile ( "isb" );
 613:FreeRTOS/portable/port.c **** 
 614:FreeRTOS/portable/port.c ****             /* Disable the SysTick clock without reading the
 615:FreeRTOS/portable/port.c ****              * portNVIC_SYSTICK_CTRL_REG register to ensure the
 616:FreeRTOS/portable/port.c ****              * portNVIC_SYSTICK_COUNT_FLAG_BIT is not cleared if it is set.  Again,
 617:FreeRTOS/portable/port.c ****              * the time the SysTick is stopped for is accounted for as best it can
 618:FreeRTOS/portable/port.c ****              * be, but using the tickless mode will inevitably result in some tiny
 619:FreeRTOS/portable/port.c ****              * drift of the time maintained by the kernel with respect to calendar
 620:FreeRTOS/portable/port.c ****              * time*/
 621:FreeRTOS/portable/port.c ****             portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 622:FreeRTOS/portable/port.c **** 
 623:FreeRTOS/portable/port.c ****             /* Determine if the SysTick clock has already counted to zero and
 624:FreeRTOS/portable/port.c ****              * been set back to the current reload value (the reload back being
 625:FreeRTOS/portable/port.c ****              * correct for the entire expected idle time) or if the SysTick is yet
 626:FreeRTOS/portable/port.c ****              * to count to zero (in which case an interrupt other than the SysTick
 627:FreeRTOS/portable/port.c ****              * must have brought the system out of sleep mode). */
 628:FreeRTOS/portable/port.c ****             if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 629:FreeRTOS/portable/port.c ****             {
 630:FreeRTOS/portable/port.c ****                 uint32_t ulCalculatedLoadValue;
 631:FreeRTOS/portable/port.c **** 
 632:FreeRTOS/portable/port.c ****                 /* The tick interrupt is already pending, and the SysTick count
 633:FreeRTOS/portable/port.c ****                  * reloaded with ulReloadValue.  Reset the
 634:FreeRTOS/portable/port.c ****                  * portNVIC_SYSTICK_LOAD_REG with whatever remains of this tick
 635:FreeRTOS/portable/port.c ****                  * period. */
 636:FreeRTOS/portable/port.c ****                 ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portN
 637:FreeRTOS/portable/port.c **** 
 638:FreeRTOS/portable/port.c ****                 /* Don't allow a tiny value, or values that have somehow
 639:FreeRTOS/portable/port.c ****                  * underflowed because the post sleep hook did something
 640:FreeRTOS/portable/port.c ****                  * that took too long. */
 641:FreeRTOS/portable/port.c ****                 if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadVal
 642:FreeRTOS/portable/port.c ****                 {
 643:FreeRTOS/portable/port.c ****                     ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 644:FreeRTOS/portable/port.c ****                 }
 645:FreeRTOS/portable/port.c **** 
 646:FreeRTOS/portable/port.c ****                 portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 647:FreeRTOS/portable/port.c **** 
 648:FreeRTOS/portable/port.c ****                 /* As the pending tick will be processed as soon as this
 649:FreeRTOS/portable/port.c ****                  * function exits, the tick value maintained by the tick is stepped
 650:FreeRTOS/portable/port.c ****                  * forward by one less than the time spent waiting. */
 651:FreeRTOS/portable/port.c ****                 ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 652:FreeRTOS/portable/port.c ****             }
 653:FreeRTOS/portable/port.c ****             else
 654:FreeRTOS/portable/port.c ****             {
 655:FreeRTOS/portable/port.c ****                 /* Something other than the tick interrupt ended the sleep.
 656:FreeRTOS/portable/port.c ****                  * Work out how long the sleep lasted rounded to complete tick
 657:FreeRTOS/portable/port.c ****                  * periods (not the ulReload value which accounted for part
 658:FreeRTOS/portable/port.c ****                  * ticks). */
 659:FreeRTOS/portable/port.c ****                 ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - po
 660:FreeRTOS/portable/port.c **** 
 661:FreeRTOS/portable/port.c ****                 /* How many complete tick periods passed while the processor
 662:FreeRTOS/portable/port.c ****                  * was waiting? */
 663:FreeRTOS/portable/port.c ****                 ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 664:FreeRTOS/portable/port.c **** 
 665:FreeRTOS/portable/port.c ****                 /* The reload value is set to whatever fraction of a single tick
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 19


 666:FreeRTOS/portable/port.c ****                  * period remains. */
 667:FreeRTOS/portable/port.c ****                 portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOne
 668:FreeRTOS/portable/port.c ****             }
 669:FreeRTOS/portable/port.c **** 
 670:FreeRTOS/portable/port.c ****             /* Restart SysTick so it runs from portNVIC_SYSTICK_LOAD_REG
 671:FreeRTOS/portable/port.c ****              * again, then set portNVIC_SYSTICK_LOAD_REG back to its standard
 672:FreeRTOS/portable/port.c ****              * value. */
 673:FreeRTOS/portable/port.c ****             portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 674:FreeRTOS/portable/port.c ****             portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 675:FreeRTOS/portable/port.c ****             vTaskStepTick( ulCompleteTickPeriods );
 676:FreeRTOS/portable/port.c ****             portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 677:FreeRTOS/portable/port.c **** 
 678:FreeRTOS/portable/port.c ****             /* Exit with interrupts enabled. */
 679:FreeRTOS/portable/port.c ****             __asm volatile ( "cpsie i" ::: "memory" );
 680:FreeRTOS/portable/port.c ****         }
 681:FreeRTOS/portable/port.c ****     }
 682:FreeRTOS/portable/port.c **** 
 683:FreeRTOS/portable/port.c **** #endif /* #if configUSE_TICKLESS_IDLE */
 684:FreeRTOS/portable/port.c **** /*-----------------------------------------------------------*/
 685:FreeRTOS/portable/port.c **** 
 686:FreeRTOS/portable/port.c **** /*
 687:FreeRTOS/portable/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 688:FreeRTOS/portable/port.c ****  * frequency.
 689:FreeRTOS/portable/port.c ****  */
 690:FreeRTOS/portable/port.c **** __attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
 691:FreeRTOS/portable/port.c **** {
 692:FreeRTOS/portable/port.c ****     /* Calculate the constants required to configure the tick interrupt. */
 693:FreeRTOS/portable/port.c ****     #if ( configUSE_TICKLESS_IDLE == 1 )
 694:FreeRTOS/portable/port.c ****         {
 695:FreeRTOS/portable/port.c ****             ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 696:FreeRTOS/portable/port.c ****             xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 697:FreeRTOS/portable/port.c ****             ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSY
 698:FreeRTOS/portable/port.c ****         }
 699:FreeRTOS/portable/port.c ****     #endif /* configUSE_TICKLESS_IDLE */
 700:FreeRTOS/portable/port.c **** 
 701:FreeRTOS/portable/port.c ****     /* Stop and clear the SysTick. */
 702:FreeRTOS/portable/port.c ****     portNVIC_SYSTICK_CTRL_REG = 0UL;
 703:FreeRTOS/portable/port.c ****     portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 704:FreeRTOS/portable/port.c **** 
 705:FreeRTOS/portable/port.c ****     /* Configure SysTick to interrupt at the requested rate. */
 706:FreeRTOS/portable/port.c ****     portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 707:FreeRTOS/portable/port.c ****     portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SY
 708:FreeRTOS/portable/port.c **** }
 709:FreeRTOS/portable/port.c **** /*-----------------------------------------------------------*/
 710:FreeRTOS/portable/port.c **** 
 711:FreeRTOS/portable/port.c **** /* This is a naked function. */
 712:FreeRTOS/portable/port.c **** static void vPortEnableVFP( void )
 713:FreeRTOS/portable/port.c **** {
 163              		.loc 1 713 1 is_stmt 1 view -0
 164              		.cfi_startproc
 165              		@ Naked Function: prologue and epilogue provided by programmer.
 166              		@ args = 0, pretend = 0, frame = 0
 167              		@ frame_needed = 0, uses_anonymous_args = 0
 714:FreeRTOS/portable/port.c ****     __asm volatile
 168              		.loc 1 714 5 view .LVU27
 169              		.syntax unified
 170              	@ 714 "FreeRTOS/portable/port.c" 1
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 20


 171 0000 DFF80C00 			ldr.w r0, =0xE000ED88		
 172 0004 0168     		ldr r1, [r0]				
 173              									
 174 0006 41F47001 		orr r1, r1, #( 0xf << 20 )	
 175 000a 0160     		str r1, [r0]				
 176 000c 7047     		bx r14						
 177 000e 000088ED 		.ltorg						
 177      00E0
 178              	
 179              	@ 0 "" 2
 715:FreeRTOS/portable/port.c ****     (
 716:FreeRTOS/portable/port.c ****         "	ldr.w r0, =0xE000ED88		\n"/* The FPU enable bits are in the CPACR. */
 717:FreeRTOS/portable/port.c ****         "	ldr r1, [r0]				\n"
 718:FreeRTOS/portable/port.c ****         "								\n"
 719:FreeRTOS/portable/port.c ****         "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
 720:FreeRTOS/portable/port.c ****         "	str r1, [r0]				\n"
 721:FreeRTOS/portable/port.c ****         "	bx r14						\n"
 722:FreeRTOS/portable/port.c ****         "	.ltorg						\n"
 723:FreeRTOS/portable/port.c ****     );
 724:FreeRTOS/portable/port.c **** }
 180              		.loc 1 724 1 is_stmt 0 view .LVU28
 181              		.thumb
 182              		.syntax unified
 183              		.cfi_endproc
 184              	.LFE17:
 186              		.section	.text.pxPortInitialiseStack,"ax",%progbits
 187              		.align	1
 188              		.global	pxPortInitialiseStack
 189              		.syntax unified
 190              		.thumb
 191              		.thumb_func
 192              		.fpu fpv4-sp-d16
 194              	pxPortInitialiseStack:
 195              	.LVL2:
 196              	.LFB5:
 192:FreeRTOS/portable/port.c ****     /* Simulate the stack frame as it would be created by a context switch
 197              		.loc 1 192 1 is_stmt 1 view -0
 198              		.cfi_startproc
 199              		@ args = 0, pretend = 0, frame = 0
 200              		@ frame_needed = 0, uses_anonymous_args = 0
 201              		@ link register save eliminated.
 198:FreeRTOS/portable/port.c **** 
 202              		.loc 1 198 5 view .LVU30
 200:FreeRTOS/portable/port.c ****     pxTopOfStack--;
 203              		.loc 1 200 5 view .LVU31
 200:FreeRTOS/portable/port.c ****     pxTopOfStack--;
 204              		.loc 1 200 19 is_stmt 0 view .LVU32
 205 0000 4FF08073 		mov	r3, #16777216
 206 0004 40F8043C 		str	r3, [r0, #-4]
 201:FreeRTOS/portable/port.c ****     *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 207              		.loc 1 201 5 is_stmt 1 view .LVU33
 208              	.LVL3:
 202:FreeRTOS/portable/port.c ****     pxTopOfStack--;
 209              		.loc 1 202 5 view .LVU34
 202:FreeRTOS/portable/port.c ****     pxTopOfStack--;
 210              		.loc 1 202 48 is_stmt 0 view .LVU35
 211 0008 21F00101 		bic	r1, r1, #1
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 21


 212              	.LVL4:
 202:FreeRTOS/portable/port.c ****     pxTopOfStack--;
 213              		.loc 1 202 19 view .LVU36
 214 000c 40F8081C 		str	r1, [r0, #-8]
 203:FreeRTOS/portable/port.c ****     *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 215              		.loc 1 203 5 is_stmt 1 view .LVU37
 216              	.LVL5:
 204:FreeRTOS/portable/port.c **** 
 217              		.loc 1 204 5 view .LVU38
 204:FreeRTOS/portable/port.c **** 
 218              		.loc 1 204 21 is_stmt 0 view .LVU39
 219 0010 054B     		ldr	r3, .L11
 204:FreeRTOS/portable/port.c **** 
 220              		.loc 1 204 19 view .LVU40
 221 0012 40F80C3C 		str	r3, [r0, #-12]
 207:FreeRTOS/portable/port.c ****     *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 222              		.loc 1 207 5 is_stmt 1 view .LVU41
 223              	.LVL6:
 208:FreeRTOS/portable/port.c **** 
 224              		.loc 1 208 5 view .LVU42
 208:FreeRTOS/portable/port.c **** 
 225              		.loc 1 208 19 is_stmt 0 view .LVU43
 226 0016 40F8202C 		str	r2, [r0, #-32]
 212:FreeRTOS/portable/port.c ****     *pxTopOfStack = portINITIAL_EXC_RETURN;
 227              		.loc 1 212 5 is_stmt 1 view .LVU44
 228              	.LVL7:
 213:FreeRTOS/portable/port.c **** 
 229              		.loc 1 213 5 view .LVU45
 213:FreeRTOS/portable/port.c **** 
 230              		.loc 1 213 19 is_stmt 0 view .LVU46
 231 001a 6FF00203 		mvn	r3, #2
 232 001e 40F8243C 		str	r3, [r0, #-36]
 215:FreeRTOS/portable/port.c **** 
 233              		.loc 1 215 5 is_stmt 1 view .LVU47
 234              	.LVL8:
 217:FreeRTOS/portable/port.c **** }
 235              		.loc 1 217 5 view .LVU48
 218:FreeRTOS/portable/port.c **** /*-----------------------------------------------------------*/
 236              		.loc 1 218 1 is_stmt 0 view .LVU49
 237 0022 4438     		subs	r0, r0, #68
 238              	.LVL9:
 218:FreeRTOS/portable/port.c **** /*-----------------------------------------------------------*/
 239              		.loc 1 218 1 view .LVU50
 240 0024 7047     		bx	lr
 241              	.L12:
 242 0026 00BF     		.align	2
 243              	.L11:
 244 0028 00000000 		.word	prvTaskExitError
 245              		.cfi_endproc
 246              	.LFE5:
 248              		.section	.text.SVC_Handler,"ax",%progbits
 249              		.align	1
 250              		.global	SVC_Handler
 251              		.syntax unified
 252              		.thumb
 253              		.thumb_func
 254              		.fpu fpv4-sp-d16
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 22


 256              	SVC_Handler:
 257              	.LFB7:
 248:FreeRTOS/portable/port.c ****     __asm volatile (
 258              		.loc 1 248 1 is_stmt 1 view -0
 259              		.cfi_startproc
 260              		@ Naked Function: prologue and epilogue provided by programmer.
 261              		@ args = 0, pretend = 0, frame = 0
 262              		@ frame_needed = 0, uses_anonymous_args = 0
 249:FreeRTOS/portable/port.c ****         "	ldr	r3, pxCurrentTCBConst2		\n"/* Restore the context. */
 263              		.loc 1 249 5 view .LVU52
 264              		.syntax unified
 265              	@ 249 "FreeRTOS/portable/port.c" 1
 266 0000 074B     			ldr	r3, pxCurrentTCBConst2		
 267 0002 1968     		ldr r1, [r3]					
 268 0004 0868     		ldr r0, [r1]					
 269 0006 B0E8F04F 		ldmia r0!, {r4-r11, r14}		
 270 000a 80F30988 		msr psp, r0						
 271 000e BFF36F8F 		isb								
 272 0012 4FF00000 		mov r0, #0 						
 273 0016 80F31188 		msr	basepri, r0					
 274 001a 7047     		bx r14							
 275              										
 276 001c AFF30080 		.align 4						
 277 0020 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 278              	
 279              	@ 0 "" 2
 263:FreeRTOS/portable/port.c **** /*-----------------------------------------------------------*/
 280              		.loc 1 263 1 is_stmt 0 view .LVU53
 281              		.thumb
 282              		.syntax unified
 283              		.cfi_endproc
 284              	.LFE7:
 286              		.section	.text.vPortEndScheduler,"ax",%progbits
 287              		.align	1
 288              		.global	vPortEndScheduler
 289              		.syntax unified
 290              		.thumb
 291              		.thumb_func
 292              		.fpu fpv4-sp-d16
 294              	vPortEndScheduler:
 295              	.LFB10:
 403:FreeRTOS/portable/port.c ****     /* Not implemented in ports where there is nothing to return to.
 296              		.loc 1 403 1 is_stmt 1 view -0
 297              		.cfi_startproc
 298              		@ args = 0, pretend = 0, frame = 0
 299              		@ frame_needed = 0, uses_anonymous_args = 0
 300              		@ link register save eliminated.
 406:FreeRTOS/portable/port.c **** }
 301              		.loc 1 406 5 view .LVU55
 302 0000 074B     		ldr	r3, .L17
 303 0002 1B68     		ldr	r3, [r3]
 304 0004 B3F57A7F 		cmp	r3, #1000
 305 0008 08D0     		beq	.L14
 406:FreeRTOS/portable/port.c **** }
 306              		.loc 1 406 5 view .LVU56
 307              	.LBB35:
 308              	.LBI35:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 23


 194:FreeRTOS/portable/portmacro.h ****     {
 309              		.loc 2 194 34 view .LVU57
 310              	.LBB36:
 196:FreeRTOS/portable/portmacro.h **** 
 311              		.loc 2 196 9 view .LVU58
 312              		.loc 2 198 9 view .LVU59
 313              		.syntax unified
 314              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 315 000a 4FF05003 			mov r3, #80												
 316 000e 83F31188 		msr basepri, r3											
 317 0012 BFF36F8F 		isb														
 318 0016 BFF34F8F 		dsb														
 319              	
 320              	@ 0 "" 2
 321              	.LVL10:
 322              		.thumb
 323              		.syntax unified
 324              	.L16:
 325              		.loc 2 198 9 is_stmt 0 view .LVU60
 326              	.LBE36:
 327              	.LBE35:
 406:FreeRTOS/portable/port.c **** }
 328              		.loc 1 406 5 is_stmt 1 discriminator 1 view .LVU61
 406:FreeRTOS/portable/port.c **** }
 329              		.loc 1 406 5 discriminator 1 view .LVU62
 406:FreeRTOS/portable/port.c **** }
 330              		.loc 1 406 5 discriminator 1 view .LVU63
 331 001a FEE7     		b	.L16
 332              	.L14:
 407:FreeRTOS/portable/port.c **** /*-----------------------------------------------------------*/
 333              		.loc 1 407 1 is_stmt 0 view .LVU64
 334 001c 7047     		bx	lr
 335              	.L18:
 336 001e 00BF     		.align	2
 337              	.L17:
 338 0020 00000000 		.word	.LANCHOR0
 339              		.cfi_endproc
 340              	.LFE10:
 342              		.section	.text.vPortEnterCritical,"ax",%progbits
 343              		.align	1
 344              		.global	vPortEnterCritical
 345              		.syntax unified
 346              		.thumb
 347              		.thumb_func
 348              		.fpu fpv4-sp-d16
 350              	vPortEnterCritical:
 351              	.LFB11:
 411:FreeRTOS/portable/port.c ****     portDISABLE_INTERRUPTS();
 352              		.loc 1 411 1 is_stmt 1 view -0
 353              		.cfi_startproc
 354              		@ args = 0, pretend = 0, frame = 0
 355              		@ frame_needed = 0, uses_anonymous_args = 0
 356              		@ link register save eliminated.
 412:FreeRTOS/portable/port.c ****     uxCriticalNesting++;
 357              		.loc 1 412 5 view .LVU66
 358              	.LBB37:
 359              	.LBI37:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 24


 194:FreeRTOS/portable/portmacro.h ****     {
 360              		.loc 2 194 34 view .LVU67
 361              	.LBB38:
 196:FreeRTOS/portable/portmacro.h **** 
 362              		.loc 2 196 9 view .LVU68
 363              		.loc 2 198 9 view .LVU69
 364              		.syntax unified
 365              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 366 0000 4FF05003 			mov r3, #80												
 367 0004 83F31188 		msr basepri, r3											
 368 0008 BFF36F8F 		isb														
 369 000c BFF34F8F 		dsb														
 370              	
 371              	@ 0 "" 2
 372              		.thumb
 373              		.syntax unified
 374              	.LBE38:
 375              	.LBE37:
 413:FreeRTOS/portable/port.c **** 
 376              		.loc 1 413 5 view .LVU70
 413:FreeRTOS/portable/port.c **** 
 377              		.loc 1 413 22 is_stmt 0 view .LVU71
 378 0010 0A4A     		ldr	r2, .L23
 379 0012 1368     		ldr	r3, [r2]
 380 0014 0133     		adds	r3, r3, #1
 381 0016 1360     		str	r3, [r2]
 420:FreeRTOS/portable/port.c ****     {
 382              		.loc 1 420 5 is_stmt 1 view .LVU72
 420:FreeRTOS/portable/port.c ****     {
 383              		.loc 1 420 7 is_stmt 0 view .LVU73
 384 0018 012B     		cmp	r3, #1
 385 001a 00D0     		beq	.L22
 386              	.L19:
 424:FreeRTOS/portable/port.c **** /*-----------------------------------------------------------*/
 387              		.loc 1 424 1 view .LVU74
 388 001c 7047     		bx	lr
 389              	.L22:
 422:FreeRTOS/portable/port.c ****     }
 390              		.loc 1 422 9 is_stmt 1 view .LVU75
 391 001e 084B     		ldr	r3, .L23+4
 392 0020 1B68     		ldr	r3, [r3]
 393 0022 13F0FF0F 		tst	r3, #255
 394 0026 F9D0     		beq	.L19
 422:FreeRTOS/portable/port.c ****     }
 395              		.loc 1 422 9 view .LVU76
 396              	.LBB39:
 397              	.LBI39:
 194:FreeRTOS/portable/portmacro.h ****     {
 398              		.loc 2 194 34 view .LVU77
 399              	.LBB40:
 196:FreeRTOS/portable/portmacro.h **** 
 400              		.loc 2 196 9 view .LVU78
 401              		.loc 2 198 9 view .LVU79
 402              		.syntax unified
 403              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 404 0028 4FF05003 			mov r3, #80												
 405 002c 83F31188 		msr basepri, r3											
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 25


 406 0030 BFF36F8F 		isb														
 407 0034 BFF34F8F 		dsb														
 408              	
 409              	@ 0 "" 2
 410              	.LVL11:
 411              		.thumb
 412              		.syntax unified
 413              	.L21:
 414              		.loc 2 198 9 is_stmt 0 view .LVU80
 415              	.LBE40:
 416              	.LBE39:
 422:FreeRTOS/portable/port.c ****     }
 417              		.loc 1 422 9 is_stmt 1 discriminator 1 view .LVU81
 422:FreeRTOS/portable/port.c ****     }
 418              		.loc 1 422 9 discriminator 1 view .LVU82
 422:FreeRTOS/portable/port.c ****     }
 419              		.loc 1 422 9 discriminator 1 view .LVU83
 420 0038 FEE7     		b	.L21
 421              	.L24:
 422 003a 00BF     		.align	2
 423              	.L23:
 424 003c 00000000 		.word	.LANCHOR0
 425 0040 04ED00E0 		.word	-536810236
 426              		.cfi_endproc
 427              	.LFE11:
 429              		.section	.text.vPortExitCritical,"ax",%progbits
 430              		.align	1
 431              		.global	vPortExitCritical
 432              		.syntax unified
 433              		.thumb
 434              		.thumb_func
 435              		.fpu fpv4-sp-d16
 437              	vPortExitCritical:
 438              	.LFB12:
 428:FreeRTOS/portable/port.c ****     configASSERT( uxCriticalNesting );
 439              		.loc 1 428 1 view -0
 440              		.cfi_startproc
 441              		@ args = 0, pretend = 0, frame = 0
 442              		@ frame_needed = 0, uses_anonymous_args = 0
 443              		@ link register save eliminated.
 429:FreeRTOS/portable/port.c ****     uxCriticalNesting--;
 444              		.loc 1 429 5 view .LVU85
 445 0000 094B     		ldr	r3, .L29
 446 0002 1B68     		ldr	r3, [r3]
 447 0004 43B9     		cbnz	r3, .L26
 429:FreeRTOS/portable/port.c ****     uxCriticalNesting--;
 448              		.loc 1 429 5 view .LVU86
 449              	.LBB41:
 450              	.LBI41:
 194:FreeRTOS/portable/portmacro.h ****     {
 451              		.loc 2 194 34 view .LVU87
 452              	.LBB42:
 196:FreeRTOS/portable/portmacro.h **** 
 453              		.loc 2 196 9 view .LVU88
 454              		.loc 2 198 9 view .LVU89
 455              		.syntax unified
 456              	@ 198 "FreeRTOS/portable/portmacro.h" 1
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 26


 457 0006 4FF05003 			mov r3, #80												
 458 000a 83F31188 		msr basepri, r3											
 459 000e BFF36F8F 		isb														
 460 0012 BFF34F8F 		dsb														
 461              	
 462              	@ 0 "" 2
 463              	.LVL12:
 464              		.thumb
 465              		.syntax unified
 466              	.L27:
 467              		.loc 2 198 9 is_stmt 0 view .LVU90
 468              	.LBE42:
 469              	.LBE41:
 429:FreeRTOS/portable/port.c ****     uxCriticalNesting--;
 470              		.loc 1 429 5 is_stmt 1 discriminator 1 view .LVU91
 429:FreeRTOS/portable/port.c ****     uxCriticalNesting--;
 471              		.loc 1 429 5 discriminator 1 view .LVU92
 429:FreeRTOS/portable/port.c ****     uxCriticalNesting--;
 472              		.loc 1 429 5 discriminator 1 view .LVU93
 473 0016 FEE7     		b	.L27
 474              	.L26:
 429:FreeRTOS/portable/port.c ****     uxCriticalNesting--;
 475              		.loc 1 429 38 discriminator 2 view .LVU94
 430:FreeRTOS/portable/port.c **** 
 476              		.loc 1 430 5 discriminator 2 view .LVU95
 430:FreeRTOS/portable/port.c **** 
 477              		.loc 1 430 22 is_stmt 0 discriminator 2 view .LVU96
 478 0018 013B     		subs	r3, r3, #1
 479 001a 034A     		ldr	r2, .L29
 480 001c 1360     		str	r3, [r2]
 432:FreeRTOS/portable/port.c ****     {
 481              		.loc 1 432 5 is_stmt 1 discriminator 2 view .LVU97
 432:FreeRTOS/portable/port.c ****     {
 482              		.loc 1 432 7 is_stmt 0 discriminator 2 view .LVU98
 483 001e 0BB9     		cbnz	r3, .L25
 434:FreeRTOS/portable/port.c ****     }
 484              		.loc 1 434 9 is_stmt 1 view .LVU99
 485              	.LVL13:
 486              	.LBB43:
 487              	.LBI43:
 199:FreeRTOS/portable/portmacro.h ****         (
 200:FreeRTOS/portable/portmacro.h ****             "	mov %0, %1												\n"\
 201:FreeRTOS/portable/portmacro.h ****             "	msr basepri, %0											\n"\
 202:FreeRTOS/portable/portmacro.h ****             "	isb														\n"\
 203:FreeRTOS/portable/portmacro.h ****             "	dsb														\n"\
 204:FreeRTOS/portable/portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 205:FreeRTOS/portable/portmacro.h ****         );
 206:FreeRTOS/portable/portmacro.h ****     }
 207:FreeRTOS/portable/portmacro.h **** 
 208:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
 209:FreeRTOS/portable/portmacro.h **** 
 210:FreeRTOS/portable/portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 211:FreeRTOS/portable/portmacro.h ****     {
 212:FreeRTOS/portable/portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 213:FreeRTOS/portable/portmacro.h **** 
 214:FreeRTOS/portable/portmacro.h ****         __asm volatile
 215:FreeRTOS/portable/portmacro.h ****         (
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 27


 216:FreeRTOS/portable/portmacro.h ****             "	mrs %0, basepri											\n"\
 217:FreeRTOS/portable/portmacro.h ****             "	mov %1, %2												\n"\
 218:FreeRTOS/portable/portmacro.h ****             "	msr basepri, %1											\n"\
 219:FreeRTOS/portable/portmacro.h ****             "	isb														\n"\
 220:FreeRTOS/portable/portmacro.h ****             "	dsb														\n"\
 221:FreeRTOS/portable/portmacro.h ****             : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT
 222:FreeRTOS/portable/portmacro.h ****         );
 223:FreeRTOS/portable/portmacro.h **** 
 224:FreeRTOS/portable/portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
 225:FreeRTOS/portable/portmacro.h ****          * warnings. */
 226:FreeRTOS/portable/portmacro.h ****         return ulOriginalBASEPRI;
 227:FreeRTOS/portable/portmacro.h ****     }
 228:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
 229:FreeRTOS/portable/portmacro.h **** 
 230:FreeRTOS/portable/portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 488              		.loc 2 230 34 view .LVU100
 489              	.LBB44:
 231:FreeRTOS/portable/portmacro.h ****     {
 232:FreeRTOS/portable/portmacro.h ****         __asm volatile
 490              		.loc 2 232 9 view .LVU101
 491              		.syntax unified
 492              	@ 232 "FreeRTOS/portable/portmacro.h" 1
 493 0020 83F31188 			msr basepri, r3	
 494              	@ 0 "" 2
 495              	.LVL14:
 496              		.thumb
 497              		.syntax unified
 498              	.L25:
 499              		.loc 2 232 9 is_stmt 0 view .LVU102
 500              	.LBE44:
 501              	.LBE43:
 436:FreeRTOS/portable/port.c **** /*-----------------------------------------------------------*/
 502              		.loc 1 436 1 view .LVU103
 503 0024 7047     		bx	lr
 504              	.L30:
 505 0026 00BF     		.align	2
 506              	.L29:
 507 0028 00000000 		.word	.LANCHOR0
 508              		.cfi_endproc
 509              	.LFE12:
 511              		.section	.text.PendSV_Handler,"ax",%progbits
 512              		.align	1
 513              		.global	PendSV_Handler
 514              		.syntax unified
 515              		.thumb
 516              		.thumb_func
 517              		.fpu fpv4-sp-d16
 519              	PendSV_Handler:
 520              	.LFB13:
 440:FreeRTOS/portable/port.c ****     /* This is a naked function. */
 521              		.loc 1 440 1 is_stmt 1 view -0
 522              		.cfi_startproc
 523              		@ Naked Function: prologue and epilogue provided by programmer.
 524              		@ args = 0, pretend = 0, frame = 0
 525              		@ frame_needed = 0, uses_anonymous_args = 0
 443:FreeRTOS/portable/port.c ****     (
 526              		.loc 1 443 5 view .LVU105
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 28


 527              		.syntax unified
 528              	@ 443 "FreeRTOS/portable/port.c" 1
 529 0000 EFF30980 			mrs r0, psp							
 530 0004 BFF36F8F 		isb									
 531              											
 532 0008 154B     		ldr	r3, pxCurrentTCBConst			
 533 000a 1A68     		ldr	r2, [r3]						
 534              											
 535 000c 1EF0100F 		tst r14, #0x10						
 536 0010 08BF     		it eq								
 537 0012 20ED108A 		vstmdbeq r0!, {s16-s31}				
 538              											
 539 0016 20E9F04F 		stmdb r0!, {r4-r11, r14}			
 540 001a 1060     		str r0, [r2]						
 541              											
 542 001c 2DE90900 		stmdb sp!, {r0, r3}					
 543 0020 4FF05000 		mov r0, #80 							
 544 0024 80F31188 		msr basepri, r0						
 545 0028 BFF34F8F 		dsb									
 546 002c BFF36F8F 		isb									
 547 0030 FFF7FEFF 		bl vTaskSwitchContext				
 548 0034 4FF00000 		mov r0, #0							
 549 0038 80F31188 		msr basepri, r0						
 550 003c 09BC     		ldmia sp!, {r0, r3}					
 551              											
 552 003e 1968     		ldr r1, [r3]						
 553 0040 0868     		ldr r0, [r1]						
 554              											
 555 0042 B0E8F04F 		ldmia r0!, {r4-r11, r14}			
 556              											
 557 0046 1EF0100F 		tst r14, #0x10						
 558 004a 08BF     		it eq								
 559 004c B0EC108A 		vldmiaeq r0!, {s16-s31}				
 560              											
 561 0050 80F30988 		msr psp, r0							
 562 0054 BFF36F8F 		isb									
 563              											
 564              											
 565 0058 7047     		bx r14								
 566              											
 567 005a 00BFAFF3 		.align 4							
 567      0080
 568 0060 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 569              	
 570              	@ 0 "" 2
 493:FreeRTOS/portable/port.c **** /*-----------------------------------------------------------*/
 571              		.loc 1 493 1 is_stmt 0 view .LVU106
 572              		.thumb
 573              		.syntax unified
 574              		.cfi_endproc
 575              	.LFE13:
 577              		.section	.text.SysTick_Handler,"ax",%progbits
 578              		.align	1
 579              		.global	SysTick_Handler
 580              		.syntax unified
 581              		.thumb
 582              		.thumb_func
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 29


 583              		.fpu fpv4-sp-d16
 585              	SysTick_Handler:
 586              	.LFB14:
 497:FreeRTOS/portable/port.c ****     /* The SysTick runs at the lowest interrupt priority, so when this interrupt
 587              		.loc 1 497 1 is_stmt 1 view -0
 588              		.cfi_startproc
 589              		@ args = 0, pretend = 0, frame = 0
 590              		@ frame_needed = 0, uses_anonymous_args = 0
 591 0000 08B5     		push	{r3, lr}
 592              	.LCFI2:
 593              		.cfi_def_cfa_offset 8
 594              		.cfi_offset 3, -8
 595              		.cfi_offset 14, -4
 502:FreeRTOS/portable/port.c ****     {
 596              		.loc 1 502 5 view .LVU108
 597              	.LBB45:
 598              	.LBI45:
 194:FreeRTOS/portable/portmacro.h ****     {
 599              		.loc 2 194 34 view .LVU109
 600              	.LBB46:
 196:FreeRTOS/portable/portmacro.h **** 
 601              		.loc 2 196 9 view .LVU110
 198:FreeRTOS/portable/portmacro.h ****         (
 602              		.loc 2 198 9 view .LVU111
 603              		.syntax unified
 604              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 605 0002 4FF05003 			mov r3, #80												
 606 0006 83F31188 		msr basepri, r3											
 607 000a BFF36F8F 		isb														
 608 000e BFF34F8F 		dsb														
 609              	
 610              	@ 0 "" 2
 611              		.thumb
 612              		.syntax unified
 613              	.LBE46:
 614              	.LBE45:
 505:FreeRTOS/portable/port.c ****         {
 615              		.loc 1 505 9 view .LVU112
 505:FreeRTOS/portable/port.c ****         {
 616              		.loc 1 505 13 is_stmt 0 view .LVU113
 617 0012 FFF7FEFF 		bl	xTaskIncrementTick
 618              	.LVL15:
 505:FreeRTOS/portable/port.c ****         {
 619              		.loc 1 505 11 view .LVU114
 620 0016 18B1     		cbz	r0, .L33
 509:FreeRTOS/portable/port.c ****         }
 621              		.loc 1 509 13 is_stmt 1 view .LVU115
 509:FreeRTOS/portable/port.c ****         }
 622              		.loc 1 509 35 is_stmt 0 view .LVU116
 623 0018 034B     		ldr	r3, .L35
 624 001a 4FF08052 		mov	r2, #268435456
 625 001e 1A60     		str	r2, [r3]
 626              	.L33:
 512:FreeRTOS/portable/port.c **** }
 627              		.loc 1 512 5 is_stmt 1 view .LVU117
 628              	.LVL16:
 629              	.LBB47:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 30


 630              	.LBI47:
 230:FreeRTOS/portable/portmacro.h ****     {
 631              		.loc 2 230 34 view .LVU118
 632              	.LBB48:
 633              		.loc 2 232 9 view .LVU119
 634 0020 0023     		movs	r3, #0
 635              		.syntax unified
 636              	@ 232 "FreeRTOS/portable/portmacro.h" 1
 637 0022 83F31188 			msr basepri, r3	
 638              	@ 0 "" 2
 639              	.LVL17:
 640              		.loc 2 232 9 is_stmt 0 view .LVU120
 641              		.thumb
 642              		.syntax unified
 643              	.LBE48:
 644              	.LBE47:
 513:FreeRTOS/portable/port.c **** /*-----------------------------------------------------------*/
 645              		.loc 1 513 1 view .LVU121
 646 0026 08BD     		pop	{r3, pc}
 647              	.L36:
 648              		.align	2
 649              	.L35:
 650 0028 04ED00E0 		.word	-536810236
 651              		.cfi_endproc
 652              	.LFE14:
 654              		.section	.text.vPortSuppressTicksAndSleep,"ax",%progbits
 655              		.align	1
 656              		.weak	vPortSuppressTicksAndSleep
 657              		.syntax unified
 658              		.thumb
 659              		.thumb_func
 660              		.fpu fpv4-sp-d16
 662              	vPortSuppressTicksAndSleep:
 663              	.LVL18:
 664              	.LFB15:
 519:FreeRTOS/portable/port.c ****         uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
 665              		.loc 1 519 5 is_stmt 1 view -0
 666              		.cfi_startproc
 667              		@ args = 0, pretend = 0, frame = 0
 668              		@ frame_needed = 0, uses_anonymous_args = 0
 519:FreeRTOS/portable/port.c ****         uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
 669              		.loc 1 519 5 is_stmt 0 view .LVU123
 670 0000 70B5     		push	{r4, r5, r6, lr}
 671              	.LCFI3:
 672              		.cfi_def_cfa_offset 16
 673              		.cfi_offset 4, -16
 674              		.cfi_offset 5, -12
 675              		.cfi_offset 6, -8
 676              		.cfi_offset 14, -4
 520:FreeRTOS/portable/port.c ****         TickType_t xModifiableIdleTime;
 677              		.loc 1 520 9 is_stmt 1 view .LVU124
 521:FreeRTOS/portable/port.c **** 
 678              		.loc 1 521 9 view .LVU125
 524:FreeRTOS/portable/port.c ****         {
 679              		.loc 1 524 9 view .LVU126
 524:FreeRTOS/portable/port.c ****         {
 680              		.loc 1 524 31 is_stmt 0 view .LVU127
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 31


 681 0002 404B     		ldr	r3, .L48
 682 0004 1D68     		ldr	r5, [r3]
 524:FreeRTOS/portable/port.c ****         {
 683              		.loc 1 524 11 view .LVU128
 684 0006 8542     		cmp	r5, r0
 685 0008 00D3     		bcc	.L38
 686 000a 0546     		mov	r5, r0
 687              	.L38:
 688              	.LVL19:
 533:FreeRTOS/portable/port.c **** 
 689              		.loc 1 533 9 is_stmt 1 view .LVU129
 533:FreeRTOS/portable/port.c **** 
 690              		.loc 1 533 35 is_stmt 0 view .LVU130
 691 000c 3E4A     		ldr	r2, .L48+4
 692 000e 1368     		ldr	r3, [r2]
 693 0010 23F00103 		bic	r3, r3, #1
 694 0014 1360     		str	r3, [r2]
 538:FreeRTOS/portable/port.c **** 
 695              		.loc 1 538 9 is_stmt 1 view .LVU131
 538:FreeRTOS/portable/port.c **** 
 696              		.loc 1 538 25 is_stmt 0 view .LVU132
 697 0016 3D4B     		ldr	r3, .L48+8
 698 0018 1B68     		ldr	r3, [r3]
 538:FreeRTOS/portable/port.c **** 
 699              		.loc 1 538 110 view .LVU133
 700 001a 6E1E     		subs	r6, r5, #1
 538:FreeRTOS/portable/port.c **** 
 701              		.loc 1 538 88 view .LVU134
 702 001c 3C4A     		ldr	r2, .L48+12
 703 001e 1468     		ldr	r4, [r2]
 538:FreeRTOS/portable/port.c **** 
 704              		.loc 1 538 23 view .LVU135
 705 0020 04FB0634 		mla	r4, r4, r6, r3
 706              	.LVL20:
 540:FreeRTOS/portable/port.c ****         {
 707              		.loc 1 540 9 is_stmt 1 view .LVU136
 540:FreeRTOS/portable/port.c ****         {
 708              		.loc 1 540 27 is_stmt 0 view .LVU137
 709 0024 3B4B     		ldr	r3, .L48+16
 710 0026 1B68     		ldr	r3, [r3]
 540:FreeRTOS/portable/port.c ****         {
 711              		.loc 1 540 11 view .LVU138
 712 0028 A342     		cmp	r3, r4
 713 002a 00D2     		bcs	.L39
 542:FreeRTOS/portable/port.c ****         }
 714              		.loc 1 542 13 is_stmt 1 view .LVU139
 542:FreeRTOS/portable/port.c ****         }
 715              		.loc 1 542 27 is_stmt 0 view .LVU140
 716 002c E41A     		subs	r4, r4, r3
 717              	.LVL21:
 718              	.L39:
 547:FreeRTOS/portable/port.c ****         __asm volatile ( "dsb" );
 719              		.loc 1 547 9 is_stmt 1 view .LVU141
 720              		.syntax unified
 721              	@ 547 "FreeRTOS/portable/port.c" 1
 722 002e 72B6     		cpsid i
 723              	@ 0 "" 2
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 32


 548:FreeRTOS/portable/port.c ****         __asm volatile ( "isb" );
 724              		.loc 1 548 9 view .LVU142
 725              	@ 548 "FreeRTOS/portable/port.c" 1
 726 0030 BFF34F8F 		dsb
 727              	@ 0 "" 2
 549:FreeRTOS/portable/port.c **** 
 728              		.loc 1 549 9 view .LVU143
 729              	@ 549 "FreeRTOS/portable/port.c" 1
 730 0034 BFF36F8F 		isb
 731              	@ 0 "" 2
 553:FreeRTOS/portable/port.c ****         {
 732              		.loc 1 553 9 view .LVU144
 553:FreeRTOS/portable/port.c ****         {
 733              		.loc 1 553 13 is_stmt 0 view .LVU145
 734              		.thumb
 735              		.syntax unified
 736 0038 FFF7FEFF 		bl	eTaskConfirmSleepModeStatus
 737              	.LVL22:
 553:FreeRTOS/portable/port.c ****         {
 738              		.loc 1 553 11 view .LVU146
 739 003c 70B9     		cbnz	r0, .L40
 557:FreeRTOS/portable/port.c **** 
 740              		.loc 1 557 13 is_stmt 1 view .LVU147
 557:FreeRTOS/portable/port.c **** 
 741              		.loc 1 557 41 is_stmt 0 view .LVU148
 742 003e 334B     		ldr	r3, .L48+8
 743 0040 1B68     		ldr	r3, [r3]
 557:FreeRTOS/portable/port.c **** 
 744              		.loc 1 557 39 view .LVU149
 745 0042 354A     		ldr	r2, .L48+20
 746 0044 1360     		str	r3, [r2]
 560:FreeRTOS/portable/port.c **** 
 747              		.loc 1 560 13 is_stmt 1 view .LVU150
 560:FreeRTOS/portable/port.c **** 
 748              		.loc 1 560 39 is_stmt 0 view .LVU151
 749 0046 3049     		ldr	r1, .L48+4
 750 0048 0B68     		ldr	r3, [r1]
 751 004a 43F00103 		orr	r3, r3, #1
 752 004e 0B60     		str	r3, [r1]
 564:FreeRTOS/portable/port.c **** 
 753              		.loc 1 564 13 is_stmt 1 view .LVU152
 564:FreeRTOS/portable/port.c **** 
 754              		.loc 1 564 65 is_stmt 0 view .LVU153
 755 0050 2F4B     		ldr	r3, .L48+12
 756 0052 1B68     		ldr	r3, [r3]
 757 0054 013B     		subs	r3, r3, #1
 564:FreeRTOS/portable/port.c **** 
 758              		.loc 1 564 39 view .LVU154
 759 0056 1360     		str	r3, [r2]
 568:FreeRTOS/portable/port.c ****         }
 760              		.loc 1 568 13 is_stmt 1 view .LVU155
 761              		.syntax unified
 762              	@ 568 "FreeRTOS/portable/port.c" 1
 763 0058 62B6     		cpsie i
 764              	@ 0 "" 2
 765              	.LVL23:
 766              		.thumb
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 33


 767              		.syntax unified
 768              	.L37:
 681:FreeRTOS/portable/port.c **** 
 769              		.loc 1 681 5 is_stmt 0 view .LVU156
 770 005a 70BD     		pop	{r4, r5, r6, pc}
 771              	.LVL24:
 772              	.L40:
 573:FreeRTOS/portable/port.c **** 
 773              		.loc 1 573 13 is_stmt 1 view .LVU157
 573:FreeRTOS/portable/port.c **** 
 774              		.loc 1 573 39 is_stmt 0 view .LVU158
 775 005c 2E4B     		ldr	r3, .L48+20
 776 005e 1C60     		str	r4, [r3]
 577:FreeRTOS/portable/port.c **** 
 777              		.loc 1 577 13 is_stmt 1 view .LVU159
 577:FreeRTOS/portable/port.c **** 
 778              		.loc 1 577 48 is_stmt 0 view .LVU160
 779 0060 0433     		adds	r3, r3, #4
 780 0062 0022     		movs	r2, #0
 781 0064 1A60     		str	r2, [r3]
 580:FreeRTOS/portable/port.c **** 
 782              		.loc 1 580 13 is_stmt 1 view .LVU161
 580:FreeRTOS/portable/port.c **** 
 783              		.loc 1 580 39 is_stmt 0 view .LVU162
 784 0066 284A     		ldr	r2, .L48+4
 785 0068 1368     		ldr	r3, [r2]
 786 006a 43F00103 		orr	r3, r3, #1
 787 006e 1360     		str	r3, [r2]
 587:FreeRTOS/portable/port.c ****             configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 788              		.loc 1 587 13 is_stmt 1 view .LVU163
 789              	.LVL25:
 588:FreeRTOS/portable/port.c **** 
 790              		.loc 1 588 62 view .LVU164
 590:FreeRTOS/portable/port.c ****             {
 791              		.loc 1 590 13 view .LVU165
 590:FreeRTOS/portable/port.c ****             {
 792              		.loc 1 590 15 is_stmt 0 view .LVU166
 793 0070 25B1     		cbz	r5, .L42
 592:FreeRTOS/portable/port.c ****                 __asm volatile ( "wfi" );
 794              		.loc 1 592 17 is_stmt 1 view .LVU167
 795              		.syntax unified
 796              	@ 592 "FreeRTOS/portable/port.c" 1
 797 0072 BFF34F8F 		dsb
 798              	@ 0 "" 2
 593:FreeRTOS/portable/port.c ****                 __asm volatile ( "isb" );
 799              		.loc 1 593 17 view .LVU168
 800              	@ 593 "FreeRTOS/portable/port.c" 1
 801 0076 30BF     		wfi
 802              	@ 0 "" 2
 594:FreeRTOS/portable/port.c ****             }
 803              		.loc 1 594 17 view .LVU169
 804              	@ 594 "FreeRTOS/portable/port.c" 1
 805 0078 BFF36F8F 		isb
 806              	@ 0 "" 2
 807              		.thumb
 808              		.syntax unified
 809              	.L42:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 34


 597:FreeRTOS/portable/port.c **** 
 810              		.loc 1 597 61 view .LVU170
 602:FreeRTOS/portable/port.c ****             __asm volatile ( "dsb" );
 811              		.loc 1 602 13 view .LVU171
 812              		.syntax unified
 813              	@ 602 "FreeRTOS/portable/port.c" 1
 814 007c 62B6     		cpsie i
 815              	@ 0 "" 2
 603:FreeRTOS/portable/port.c ****             __asm volatile ( "isb" );
 816              		.loc 1 603 13 view .LVU172
 817              	@ 603 "FreeRTOS/portable/port.c" 1
 818 007e BFF34F8F 		dsb
 819              	@ 0 "" 2
 604:FreeRTOS/portable/port.c **** 
 820              		.loc 1 604 13 view .LVU173
 821              	@ 604 "FreeRTOS/portable/port.c" 1
 822 0082 BFF36F8F 		isb
 823              	@ 0 "" 2
 610:FreeRTOS/portable/port.c ****             __asm volatile ( "dsb" );
 824              		.loc 1 610 13 view .LVU174
 825              	@ 610 "FreeRTOS/portable/port.c" 1
 826 0086 72B6     		cpsid i
 827              	@ 0 "" 2
 611:FreeRTOS/portable/port.c ****             __asm volatile ( "isb" );
 828              		.loc 1 611 13 view .LVU175
 829              	@ 611 "FreeRTOS/portable/port.c" 1
 830 0088 BFF34F8F 		dsb
 831              	@ 0 "" 2
 612:FreeRTOS/portable/port.c **** 
 832              		.loc 1 612 13 view .LVU176
 833              	@ 612 "FreeRTOS/portable/port.c" 1
 834 008c BFF36F8F 		isb
 835              	@ 0 "" 2
 621:FreeRTOS/portable/port.c **** 
 836              		.loc 1 621 13 view .LVU177
 621:FreeRTOS/portable/port.c **** 
 837              		.loc 1 621 39 is_stmt 0 view .LVU178
 838              		.thumb
 839              		.syntax unified
 840 0090 1D4B     		ldr	r3, .L48+4
 841 0092 0622     		movs	r2, #6
 842 0094 1A60     		str	r2, [r3]
 628:FreeRTOS/portable/port.c ****             {
 843              		.loc 1 628 13 is_stmt 1 view .LVU179
 628:FreeRTOS/portable/port.c ****             {
 844              		.loc 1 628 19 is_stmt 0 view .LVU180
 845 0096 1B68     		ldr	r3, [r3]
 628:FreeRTOS/portable/port.c ****             {
 846              		.loc 1 628 15 view .LVU181
 847 0098 13F4803F 		tst	r3, #65536
 848 009c 21D0     		beq	.L43
 849              	.LBB49:
 630:FreeRTOS/portable/port.c **** 
 850              		.loc 1 630 17 is_stmt 1 view .LVU182
 636:FreeRTOS/portable/port.c **** 
 851              		.loc 1 636 17 view .LVU183
 636:FreeRTOS/portable/port.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 35


 852              		.loc 1 636 75 is_stmt 0 view .LVU184
 853 009e 1C4B     		ldr	r3, .L48+12
 854 00a0 1A68     		ldr	r2, [r3]
 636:FreeRTOS/portable/port.c **** 
 855              		.loc 1 636 95 view .LVU185
 856 00a2 1A4B     		ldr	r3, .L48+8
 857 00a4 1B68     		ldr	r3, [r3]
 636:FreeRTOS/portable/port.c **** 
 858              		.loc 1 636 93 view .LVU186
 859 00a6 1C1B     		subs	r4, r3, r4
 860              	.LVL26:
 636:FreeRTOS/portable/port.c **** 
 861              		.loc 1 636 75 view .LVU187
 862 00a8 1444     		add	r4, r4, r2
 636:FreeRTOS/portable/port.c **** 
 863              		.loc 1 636 39 view .LVU188
 864 00aa 013C     		subs	r4, r4, #1
 865              	.LVL27:
 641:FreeRTOS/portable/port.c ****                 {
 866              		.loc 1 641 17 is_stmt 1 view .LVU189
 641:FreeRTOS/portable/port.c ****                 {
 867              		.loc 1 641 45 is_stmt 0 view .LVU190
 868 00ac 194B     		ldr	r3, .L48+16
 869 00ae 1B68     		ldr	r3, [r3]
 641:FreeRTOS/portable/port.c ****                 {
 870              		.loc 1 641 19 view .LVU191
 871 00b0 A342     		cmp	r3, r4
 872 00b2 01D8     		bhi	.L44
 641:FreeRTOS/portable/port.c ****                 {
 873              		.loc 1 641 76 discriminator 1 view .LVU192
 874 00b4 A242     		cmp	r2, r4
 875 00b6 00D2     		bcs	.L45
 876              	.L44:
 643:FreeRTOS/portable/port.c ****                 }
 877              		.loc 1 643 21 is_stmt 1 view .LVU193
 643:FreeRTOS/portable/port.c ****                 }
 878              		.loc 1 643 43 is_stmt 0 view .LVU194
 879 00b8 541E     		subs	r4, r2, #1
 880              	.LVL28:
 881              	.L45:
 646:FreeRTOS/portable/port.c **** 
 882              		.loc 1 646 17 is_stmt 1 view .LVU195
 646:FreeRTOS/portable/port.c **** 
 883              		.loc 1 646 43 is_stmt 0 view .LVU196
 884 00ba 174B     		ldr	r3, .L48+20
 885 00bc 1C60     		str	r4, [r3]
 651:FreeRTOS/portable/port.c ****             }
 886              		.loc 1 651 17 is_stmt 1 view .LVU197
 887              	.LVL29:
 888              	.L46:
 651:FreeRTOS/portable/port.c ****             }
 889              		.loc 1 651 17 is_stmt 0 view .LVU198
 890              	.LBE49:
 673:FreeRTOS/portable/port.c ****             portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 891              		.loc 1 673 13 is_stmt 1 view .LVU199
 673:FreeRTOS/portable/port.c ****             portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 892              		.loc 1 673 48 is_stmt 0 view .LVU200
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 36


 893 00be 134B     		ldr	r3, .L48+8
 894 00c0 0022     		movs	r2, #0
 895 00c2 1A60     		str	r2, [r3]
 674:FreeRTOS/portable/port.c ****             vTaskStepTick( ulCompleteTickPeriods );
 896              		.loc 1 674 13 is_stmt 1 view .LVU201
 674:FreeRTOS/portable/port.c ****             vTaskStepTick( ulCompleteTickPeriods );
 897              		.loc 1 674 39 is_stmt 0 view .LVU202
 898 00c4 104A     		ldr	r2, .L48+4
 899 00c6 1368     		ldr	r3, [r2]
 900 00c8 43F00103 		orr	r3, r3, #1
 901 00cc 1360     		str	r3, [r2]
 675:FreeRTOS/portable/port.c ****             portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 902              		.loc 1 675 13 is_stmt 1 view .LVU203
 903 00ce 3046     		mov	r0, r6
 904 00d0 FFF7FEFF 		bl	vTaskStepTick
 905              	.LVL30:
 676:FreeRTOS/portable/port.c **** 
 906              		.loc 1 676 13 view .LVU204
 676:FreeRTOS/portable/port.c **** 
 907              		.loc 1 676 65 is_stmt 0 view .LVU205
 908 00d4 0E4B     		ldr	r3, .L48+12
 909 00d6 1B68     		ldr	r3, [r3]
 910 00d8 013B     		subs	r3, r3, #1
 676:FreeRTOS/portable/port.c **** 
 911              		.loc 1 676 39 view .LVU206
 912 00da 0F4A     		ldr	r2, .L48+20
 913 00dc 1360     		str	r3, [r2]
 679:FreeRTOS/portable/port.c ****         }
 914              		.loc 1 679 13 is_stmt 1 view .LVU207
 915              		.syntax unified
 916              	@ 679 "FreeRTOS/portable/port.c" 1
 917 00de 62B6     		cpsie i
 918              	@ 0 "" 2
 681:FreeRTOS/portable/port.c **** 
 919              		.loc 1 681 5 is_stmt 0 view .LVU208
 920              		.thumb
 921              		.syntax unified
 922 00e0 BBE7     		b	.L37
 923              	.LVL31:
 924              	.L43:
 659:FreeRTOS/portable/port.c **** 
 925              		.loc 1 659 17 is_stmt 1 view .LVU209
 659:FreeRTOS/portable/port.c **** 
 926              		.loc 1 659 68 is_stmt 0 view .LVU210
 927 00e2 0B4B     		ldr	r3, .L48+12
 928 00e4 1A68     		ldr	r2, [r3]
 929 00e6 05FB02F5 		mul	r5, r5, r2
 930              	.LVL32:
 659:FreeRTOS/portable/port.c **** 
 931              		.loc 1 659 98 view .LVU211
 932 00ea 084B     		ldr	r3, .L48+8
 933 00ec 1B68     		ldr	r3, [r3]
 659:FreeRTOS/portable/port.c **** 
 934              		.loc 1 659 46 view .LVU212
 935 00ee EE1A     		subs	r6, r5, r3
 936              	.LVL33:
 663:FreeRTOS/portable/port.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 37


 937              		.loc 1 663 17 is_stmt 1 view .LVU213
 663:FreeRTOS/portable/port.c **** 
 938              		.loc 1 663 39 is_stmt 0 view .LVU214
 939 00f0 B6FBF2F6 		udiv	r6, r6, r2
 940              	.LVL34:
 667:FreeRTOS/portable/port.c ****             }
 941              		.loc 1 667 17 is_stmt 1 view .LVU215
 667:FreeRTOS/portable/port.c ****             }
 942              		.loc 1 667 79 is_stmt 0 view .LVU216
 943 00f4 06FB0222 		mla	r2, r6, r2, r2
 667:FreeRTOS/portable/port.c ****             }
 944              		.loc 1 667 107 view .LVU217
 945 00f8 5D1B     		subs	r5, r3, r5
 946              	.LVL35:
 667:FreeRTOS/portable/port.c ****             }
 947              		.loc 1 667 107 view .LVU218
 948 00fa 1544     		add	r5, r5, r2
 667:FreeRTOS/portable/port.c ****             }
 949              		.loc 1 667 43 view .LVU219
 950 00fc 064B     		ldr	r3, .L48+20
 951 00fe 1D60     		str	r5, [r3]
 952 0100 DDE7     		b	.L46
 953              	.L49:
 954 0102 00BF     		.align	2
 955              	.L48:
 956 0104 00000000 		.word	.LANCHOR1
 957 0108 10E000E0 		.word	-536813552
 958 010c 18E000E0 		.word	-536813544
 959 0110 00000000 		.word	.LANCHOR2
 960 0114 00000000 		.word	.LANCHOR3
 961 0118 14E000E0 		.word	-536813548
 962              		.cfi_endproc
 963              	.LFE15:
 965              		.section	.text.vPortSetupTimerInterrupt,"ax",%progbits
 966              		.align	1
 967              		.weak	vPortSetupTimerInterrupt
 968              		.syntax unified
 969              		.thumb
 970              		.thumb_func
 971              		.fpu fpv4-sp-d16
 973              	vPortSetupTimerInterrupt:
 974              	.LFB16:
 691:FreeRTOS/portable/port.c ****     /* Calculate the constants required to configure the tick interrupt. */
 975              		.loc 1 691 1 is_stmt 1 view -0
 976              		.cfi_startproc
 977              		@ args = 0, pretend = 0, frame = 0
 978              		@ frame_needed = 0, uses_anonymous_args = 0
 979              		@ link register save eliminated.
 980 0000 10B4     		push	{r4}
 981              	.LCFI4:
 982              		.cfi_def_cfa_offset 4
 983              		.cfi_offset 4, -4
 695:FreeRTOS/portable/port.c ****             xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 984              		.loc 1 695 13 view .LVU221
 695:FreeRTOS/portable/port.c ****             xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 985              		.loc 1 695 64 is_stmt 0 view .LVU222
 986 0002 114B     		ldr	r3, .L52
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 38


 987 0004 1A68     		ldr	r2, [r3]
 988 0006 1148     		ldr	r0, .L52+4
 989 0008 A0FB0212 		umull	r1, r2, r0, r2
 990 000c 9209     		lsrs	r2, r2, #6
 695:FreeRTOS/portable/port.c ****             xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 991              		.loc 1 695 37 view .LVU223
 992 000e 1049     		ldr	r1, .L52+8
 993 0010 0A60     		str	r2, [r1]
 696:FreeRTOS/portable/port.c ****             ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSY
 994              		.loc 1 696 13 is_stmt 1 view .LVU224
 696:FreeRTOS/portable/port.c ****             ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSY
 995              		.loc 1 696 69 is_stmt 0 view .LVU225
 996 0012 6FF07F41 		mvn	r1, #-16777216
 997 0016 B1FBF2F2 		udiv	r2, r1, r2
 696:FreeRTOS/portable/port.c ****             ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSY
 998              		.loc 1 696 45 view .LVU226
 999 001a 0E49     		ldr	r1, .L52+12
 1000 001c 0A60     		str	r2, [r1]
 697:FreeRTOS/portable/port.c ****         }
 1001              		.loc 1 697 13 is_stmt 1 view .LVU227
 697:FreeRTOS/portable/port.c ****         }
 1002              		.loc 1 697 40 is_stmt 0 view .LVU228
 1003 001e 0E4A     		ldr	r2, .L52+16
 1004 0020 2D21     		movs	r1, #45
 1005 0022 1160     		str	r1, [r2]
 702:FreeRTOS/portable/port.c ****     portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 1006              		.loc 1 702 5 is_stmt 1 view .LVU229
 702:FreeRTOS/portable/port.c ****     portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 1007              		.loc 1 702 31 is_stmt 0 view .LVU230
 1008 0024 0D4A     		ldr	r2, .L52+20
 1009 0026 0021     		movs	r1, #0
 1010 0028 1160     		str	r1, [r2]
 703:FreeRTOS/portable/port.c **** 
 1011              		.loc 1 703 5 is_stmt 1 view .LVU231
 703:FreeRTOS/portable/port.c **** 
 1012              		.loc 1 703 40 is_stmt 0 view .LVU232
 1013 002a 0D4C     		ldr	r4, .L52+24
 1014 002c 2160     		str	r1, [r4]
 706:FreeRTOS/portable/port.c ****     portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SY
 1015              		.loc 1 706 5 is_stmt 1 view .LVU233
 706:FreeRTOS/portable/port.c ****     portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SY
 1016              		.loc 1 706 58 is_stmt 0 view .LVU234
 1017 002e 1B68     		ldr	r3, [r3]
 1018 0030 A0FB0313 		umull	r1, r3, r0, r3
 1019 0034 9B09     		lsrs	r3, r3, #6
 706:FreeRTOS/portable/port.c ****     portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SY
 1020              		.loc 1 706 81 view .LVU235
 1021 0036 013B     		subs	r3, r3, #1
 706:FreeRTOS/portable/port.c ****     portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SY
 1022              		.loc 1 706 31 view .LVU236
 1023 0038 0A49     		ldr	r1, .L52+28
 1024 003a 0B60     		str	r3, [r1]
 707:FreeRTOS/portable/port.c **** }
 1025              		.loc 1 707 5 is_stmt 1 view .LVU237
 707:FreeRTOS/portable/port.c **** }
 1026              		.loc 1 707 31 is_stmt 0 view .LVU238
 1027 003c 0723     		movs	r3, #7
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 39


 1028 003e 1360     		str	r3, [r2]
 708:FreeRTOS/portable/port.c **** /*-----------------------------------------------------------*/
 1029              		.loc 1 708 1 view .LVU239
 1030 0040 5DF8044B 		ldr	r4, [sp], #4
 1031              	.LCFI5:
 1032              		.cfi_restore 4
 1033              		.cfi_def_cfa_offset 0
 1034 0044 7047     		bx	lr
 1035              	.L53:
 1036 0046 00BF     		.align	2
 1037              	.L52:
 1038 0048 00000000 		.word	SystemCoreClock
 1039 004c D34D6210 		.word	274877907
 1040 0050 00000000 		.word	.LANCHOR2
 1041 0054 00000000 		.word	.LANCHOR1
 1042 0058 00000000 		.word	.LANCHOR3
 1043 005c 10E000E0 		.word	-536813552
 1044 0060 18E000E0 		.word	-536813544
 1045 0064 14E000E0 		.word	-536813548
 1046              		.cfi_endproc
 1047              	.LFE16:
 1049              		.section	.text.xPortStartScheduler,"ax",%progbits
 1050              		.align	1
 1051              		.global	xPortStartScheduler
 1052              		.syntax unified
 1053              		.thumb
 1054              		.thumb_func
 1055              		.fpu fpv4-sp-d16
 1057              	xPortStartScheduler:
 1058              	.LFB9:
 294:FreeRTOS/portable/port.c ****     /* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 1059              		.loc 1 294 1 is_stmt 1 view -0
 1060              		.cfi_startproc
 1061              		@ args = 0, pretend = 0, frame = 8
 1062              		@ frame_needed = 0, uses_anonymous_args = 0
 297:FreeRTOS/portable/port.c **** 
 1063              		.loc 1 297 5 view .LVU241
 297:FreeRTOS/portable/port.c **** 
 1064              		.loc 1 297 57 view .LVU242
 302:FreeRTOS/portable/port.c ****     configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 1065              		.loc 1 302 5 view .LVU243
 1066 0000 3A4B     		ldr	r3, .L68
 1067 0002 1A68     		ldr	r2, [r3]
 1068 0004 3A4B     		ldr	r3, .L68+4
 1069 0006 9A42     		cmp	r2, r3
 1070 0008 29D0     		beq	.L65
 302:FreeRTOS/portable/port.c ****     configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 1071              		.loc 1 302 55 discriminator 2 view .LVU244
 303:FreeRTOS/portable/port.c **** 
 1072              		.loc 1 303 5 discriminator 2 view .LVU245
 1073 000a 384B     		ldr	r3, .L68
 1074 000c 1A68     		ldr	r2, [r3]
 1075 000e 394B     		ldr	r3, .L68+8
 1076 0010 9A42     		cmp	r2, r3
 1077 0012 2DD0     		beq	.L66
 294:FreeRTOS/portable/port.c ****     /* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 1078              		.loc 1 294 1 is_stmt 0 discriminator 2 view .LVU246
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 40


 1079 0014 10B5     		push	{r4, lr}
 1080              	.LCFI6:
 1081              		.cfi_def_cfa_offset 8
 1082              		.cfi_offset 4, -8
 1083              		.cfi_offset 14, -4
 1084 0016 82B0     		sub	sp, sp, #8
 1085              	.LCFI7:
 1086              		.cfi_def_cfa_offset 16
 303:FreeRTOS/portable/port.c **** 
 1087              		.loc 1 303 55 is_stmt 1 discriminator 2 view .LVU247
 1088              	.LBB50:
 307:FreeRTOS/portable/port.c ****             volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( 
 1089              		.loc 1 307 13 discriminator 2 view .LVU248
 308:FreeRTOS/portable/port.c ****             volatile uint8_t ucMaxPriorityValue;
 1090              		.loc 1 308 13 discriminator 2 view .LVU249
 1091              	.LVL36:
 309:FreeRTOS/portable/port.c **** 
 1092              		.loc 1 309 13 discriminator 2 view .LVU250
 317:FreeRTOS/portable/port.c **** 
 1093              		.loc 1 317 13 discriminator 2 view .LVU251
 317:FreeRTOS/portable/port.c **** 
 1094              		.loc 1 317 34 is_stmt 0 discriminator 2 view .LVU252
 1095 0018 374B     		ldr	r3, .L68+12
 1096 001a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1097 001c D2B2     		uxtb	r2, r2
 317:FreeRTOS/portable/port.c **** 
 1098              		.loc 1 317 32 discriminator 2 view .LVU253
 1099 001e 0192     		str	r2, [sp, #4]
 321:FreeRTOS/portable/port.c **** 
 1100              		.loc 1 321 13 is_stmt 1 discriminator 2 view .LVU254
 321:FreeRTOS/portable/port.c **** 
 1101              		.loc 1 321 43 is_stmt 0 discriminator 2 view .LVU255
 1102 0020 FF22     		movs	r2, #255
 1103 0022 1A70     		strb	r2, [r3]
 324:FreeRTOS/portable/port.c **** 
 1104              		.loc 1 324 13 is_stmt 1 discriminator 2 view .LVU256
 324:FreeRTOS/portable/port.c **** 
 1105              		.loc 1 324 34 is_stmt 0 discriminator 2 view .LVU257
 1106 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1107 0026 DBB2     		uxtb	r3, r3
 324:FreeRTOS/portable/port.c **** 
 1108              		.loc 1 324 32 discriminator 2 view .LVU258
 1109 0028 8DF80330 		strb	r3, [sp, #3]
 327:FreeRTOS/portable/port.c **** 
 1110              		.loc 1 327 13 is_stmt 1 discriminator 2 view .LVU259
 327:FreeRTOS/portable/port.c **** 
 1111              		.loc 1 327 73 is_stmt 0 discriminator 2 view .LVU260
 1112 002c 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 1113 0030 03F05003 		and	r3, r3, #80
 327:FreeRTOS/portable/port.c **** 
 1114              		.loc 1 327 34 discriminator 2 view .LVU261
 1115 0034 314A     		ldr	r2, .L68+16
 1116 0036 1370     		strb	r3, [r2]
 331:FreeRTOS/portable/port.c **** 
 1117              		.loc 1 331 13 is_stmt 1 discriminator 2 view .LVU262
 331:FreeRTOS/portable/port.c **** 
 1118              		.loc 1 331 32 is_stmt 0 discriminator 2 view .LVU263
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 41


 1119 0038 314B     		ldr	r3, .L68+20
 1120 003a 0722     		movs	r2, #7
 1121 003c 1A60     		str	r2, [r3]
 333:FreeRTOS/portable/port.c ****             {
 1122              		.loc 1 333 13 is_stmt 1 discriminator 2 view .LVU264
 1123              	.L59:
 333:FreeRTOS/portable/port.c ****             {
 1124              		.loc 1 333 18 view .LVU265
 333:FreeRTOS/portable/port.c ****             {
 1125              		.loc 1 333 41 is_stmt 0 view .LVU266
 1126 003e 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 333:FreeRTOS/portable/port.c ****             {
 1127              		.loc 1 333 18 view .LVU267
 1128 0042 13F0800F 		tst	r3, #128
 1129 0046 1CD0     		beq	.L67
 335:FreeRTOS/portable/port.c ****                 ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 1130              		.loc 1 335 17 is_stmt 1 view .LVU268
 335:FreeRTOS/portable/port.c ****                 ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 1131              		.loc 1 335 35 is_stmt 0 view .LVU269
 1132 0048 2D4A     		ldr	r2, .L68+20
 1133 004a 1368     		ldr	r3, [r2]
 1134 004c 013B     		subs	r3, r3, #1
 1135 004e 1360     		str	r3, [r2]
 336:FreeRTOS/portable/port.c ****             }
 1136              		.loc 1 336 17 is_stmt 1 view .LVU270
 336:FreeRTOS/portable/port.c ****             }
 1137              		.loc 1 336 36 is_stmt 0 view .LVU271
 1138 0050 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 1139 0054 5B00     		lsls	r3, r3, #1
 1140 0056 DBB2     		uxtb	r3, r3
 1141 0058 8DF80330 		strb	r3, [sp, #3]
 1142 005c EFE7     		b	.L59
 1143              	.LVL37:
 1144              	.L65:
 1145              	.LCFI8:
 1146              		.cfi_def_cfa_offset 0
 1147              		.cfi_restore 4
 1148              		.cfi_restore 14
 336:FreeRTOS/portable/port.c ****             }
 1149              		.loc 1 336 36 view .LVU272
 1150              	.LBE50:
 302:FreeRTOS/portable/port.c ****     configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 1151              		.loc 1 302 5 is_stmt 1 view .LVU273
 1152              	.LBB53:
 1153              	.LBI53:
 194:FreeRTOS/portable/portmacro.h ****     {
 1154              		.loc 2 194 34 view .LVU274
 1155              	.LBB54:
 196:FreeRTOS/portable/portmacro.h **** 
 1156              		.loc 2 196 9 view .LVU275
 198:FreeRTOS/portable/portmacro.h ****         (
 1157              		.loc 2 198 9 view .LVU276
 1158              		.syntax unified
 1159              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 1160 005e 4FF05003 			mov r3, #80												
 1161 0062 83F31188 		msr basepri, r3											
 1162 0066 BFF36F8F 		isb														
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 42


 1163 006a BFF34F8F 		dsb														
 1164              	
 1165              	@ 0 "" 2
 1166              	.LVL38:
 1167              		.thumb
 1168              		.syntax unified
 1169              	.L56:
 198:FreeRTOS/portable/portmacro.h ****         (
 1170              		.loc 2 198 9 is_stmt 0 view .LVU277
 1171              	.LBE54:
 1172              	.LBE53:
 302:FreeRTOS/portable/port.c ****     configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 1173              		.loc 1 302 5 is_stmt 1 discriminator 2 view .LVU278
 302:FreeRTOS/portable/port.c ****     configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 1174              		.loc 1 302 5 discriminator 2 view .LVU279
 302:FreeRTOS/portable/port.c ****     configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 1175              		.loc 1 302 5 discriminator 2 view .LVU280
 1176 006e FEE7     		b	.L56
 1177              	.L66:
 303:FreeRTOS/portable/port.c **** 
 1178              		.loc 1 303 5 view .LVU281
 1179              	.LBB55:
 1180              	.LBI55:
 194:FreeRTOS/portable/portmacro.h ****     {
 1181              		.loc 2 194 34 view .LVU282
 1182              	.LBB56:
 196:FreeRTOS/portable/portmacro.h **** 
 1183              		.loc 2 196 9 view .LVU283
 198:FreeRTOS/portable/portmacro.h ****         (
 1184              		.loc 2 198 9 view .LVU284
 1185              		.syntax unified
 1186              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 1187 0070 4FF05003 			mov r3, #80												
 1188 0074 83F31188 		msr basepri, r3											
 1189 0078 BFF36F8F 		isb														
 1190 007c BFF34F8F 		dsb														
 1191              	
 1192              	@ 0 "" 2
 1193              	.LVL39:
 1194              		.thumb
 1195              		.syntax unified
 1196              	.L58:
 198:FreeRTOS/portable/portmacro.h ****         (
 1197              		.loc 2 198 9 is_stmt 0 view .LVU285
 1198              	.LBE56:
 1199              	.LBE55:
 303:FreeRTOS/portable/port.c **** 
 1200              		.loc 1 303 5 is_stmt 1 discriminator 3 view .LVU286
 303:FreeRTOS/portable/port.c **** 
 1201              		.loc 1 303 5 discriminator 3 view .LVU287
 303:FreeRTOS/portable/port.c **** 
 1202              		.loc 1 303 5 discriminator 3 view .LVU288
 1203 0080 FEE7     		b	.L58
 1204              	.LVL40:
 1205              	.L67:
 1206              	.LCFI9:
 1207              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 43


 1208              		.cfi_offset 4, -8
 1209              		.cfi_offset 14, -4
 1210              	.LBB57:
 353:FreeRTOS/portable/port.c ****                 }
 1211              		.loc 1 353 21 view .LVU289
 1212 0082 1F4B     		ldr	r3, .L68+20
 1213 0084 1B68     		ldr	r3, [r3]
 1214 0086 032B     		cmp	r3, #3
 1215 0088 08D0     		beq	.L61
 353:FreeRTOS/portable/port.c ****                 }
 1216              		.loc 1 353 21 view .LVU290
 1217              	.LBB51:
 1218              	.LBI51:
 194:FreeRTOS/portable/portmacro.h ****     {
 1219              		.loc 2 194 34 view .LVU291
 1220              	.LBB52:
 196:FreeRTOS/portable/portmacro.h **** 
 1221              		.loc 2 196 9 view .LVU292
 198:FreeRTOS/portable/portmacro.h ****         (
 1222              		.loc 2 198 9 view .LVU293
 1223              		.syntax unified
 1224              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 1225 008a 4FF05003 			mov r3, #80												
 1226 008e 83F31188 		msr basepri, r3											
 1227 0092 BFF36F8F 		isb														
 1228 0096 BFF34F8F 		dsb														
 1229              	
 1230              	@ 0 "" 2
 1231              	.LVL41:
 1232              		.thumb
 1233              		.syntax unified
 1234              	.L62:
 198:FreeRTOS/portable/portmacro.h ****         (
 1235              		.loc 2 198 9 is_stmt 0 view .LVU294
 1236              	.LBE52:
 1237              	.LBE51:
 353:FreeRTOS/portable/port.c ****                 }
 1238              		.loc 1 353 21 is_stmt 1 discriminator 4 view .LVU295
 353:FreeRTOS/portable/port.c ****                 }
 1239              		.loc 1 353 21 discriminator 4 view .LVU296
 353:FreeRTOS/portable/port.c ****                 }
 1240              		.loc 1 353 21 discriminator 4 view .LVU297
 1241 009a FEE7     		b	.L62
 1242              	.L61:
 353:FreeRTOS/portable/port.c ****                 }
 1243              		.loc 1 353 102 discriminator 2 view .LVU298
 359:FreeRTOS/portable/port.c ****             ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 1244              		.loc 1 359 13 discriminator 2 view .LVU299
 359:FreeRTOS/portable/port.c ****             ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 1245              		.loc 1 359 32 is_stmt 0 discriminator 2 view .LVU300
 1246 009c 1B02     		lsls	r3, r3, #8
 360:FreeRTOS/portable/port.c **** 
 1247              		.loc 1 360 13 is_stmt 1 discriminator 2 view .LVU301
 360:FreeRTOS/portable/port.c **** 
 1248              		.loc 1 360 32 is_stmt 0 discriminator 2 view .LVU302
 1249 009e 03F4E063 		and	r3, r3, #1792
 1250 00a2 174A     		ldr	r2, .L68+20
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 44


 1251 00a4 1360     		str	r3, [r2]
 364:FreeRTOS/portable/port.c ****         }
 1252              		.loc 1 364 13 is_stmt 1 discriminator 2 view .LVU303
 364:FreeRTOS/portable/port.c ****         }
 1253              		.loc 1 364 43 is_stmt 0 discriminator 2 view .LVU304
 1254 00a6 019B     		ldr	r3, [sp, #4]
 1255 00a8 DBB2     		uxtb	r3, r3
 1256 00aa 134A     		ldr	r2, .L68+12
 1257 00ac 1370     		strb	r3, [r2]
 1258              	.LBE57:
 369:FreeRTOS/portable/port.c ****     portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 1259              		.loc 1 369 5 is_stmt 1 discriminator 2 view .LVU305
 369:FreeRTOS/portable/port.c ****     portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 1260              		.loc 1 369 24 is_stmt 0 discriminator 2 view .LVU306
 1261 00ae 154B     		ldr	r3, .L68+24
 1262 00b0 1A68     		ldr	r2, [r3]
 1263 00b2 42F47002 		orr	r2, r2, #15728640
 1264 00b6 1A60     		str	r2, [r3]
 370:FreeRTOS/portable/port.c **** 
 1265              		.loc 1 370 5 is_stmt 1 discriminator 2 view .LVU307
 370:FreeRTOS/portable/port.c **** 
 1266              		.loc 1 370 24 is_stmt 0 discriminator 2 view .LVU308
 1267 00b8 1A68     		ldr	r2, [r3]
 1268 00ba 42F07042 		orr	r2, r2, #-268435456
 1269 00be 1A60     		str	r2, [r3]
 374:FreeRTOS/portable/port.c **** 
 1270              		.loc 1 374 5 is_stmt 1 discriminator 2 view .LVU309
 1271 00c0 FFF7FEFF 		bl	vPortSetupTimerInterrupt
 1272              	.LVL42:
 377:FreeRTOS/portable/port.c **** 
 1273              		.loc 1 377 5 discriminator 2 view .LVU310
 377:FreeRTOS/portable/port.c **** 
 1274              		.loc 1 377 23 is_stmt 0 discriminator 2 view .LVU311
 1275 00c4 0024     		movs	r4, #0
 1276 00c6 104B     		ldr	r3, .L68+28
 1277 00c8 1C60     		str	r4, [r3]
 380:FreeRTOS/portable/port.c **** 
 1278              		.loc 1 380 5 is_stmt 1 discriminator 2 view .LVU312
 1279 00ca FFF7FEFF 		bl	vPortEnableVFP
 1280              	.LVL43:
 383:FreeRTOS/portable/port.c **** 
 1281              		.loc 1 383 5 discriminator 2 view .LVU313
 383:FreeRTOS/portable/port.c **** 
 1282              		.loc 1 383 20 is_stmt 0 discriminator 2 view .LVU314
 1283 00ce 0F4A     		ldr	r2, .L68+32
 1284 00d0 1368     		ldr	r3, [r2]
 1285 00d2 43F04043 		orr	r3, r3, #-1073741824
 1286 00d6 1360     		str	r3, [r2]
 386:FreeRTOS/portable/port.c **** 
 1287              		.loc 1 386 5 is_stmt 1 discriminator 2 view .LVU315
 1288 00d8 FFF7FEFF 		bl	prvPortStartFirstTask
 1289              	.LVL44:
 394:FreeRTOS/portable/port.c ****     prvTaskExitError();
 1290              		.loc 1 394 5 discriminator 2 view .LVU316
 1291 00dc FFF7FEFF 		bl	vTaskSwitchContext
 1292              	.LVL45:
 395:FreeRTOS/portable/port.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 45


 1293              		.loc 1 395 5 discriminator 2 view .LVU317
 1294 00e0 FFF7FEFF 		bl	prvTaskExitError
 1295              	.LVL46:
 398:FreeRTOS/portable/port.c **** }
 1296              		.loc 1 398 5 discriminator 2 view .LVU318
 399:FreeRTOS/portable/port.c **** /*-----------------------------------------------------------*/
 1297              		.loc 1 399 1 is_stmt 0 discriminator 2 view .LVU319
 1298 00e4 2046     		mov	r0, r4
 1299 00e6 02B0     		add	sp, sp, #8
 1300              	.LCFI10:
 1301              		.cfi_def_cfa_offset 8
 1302              		@ sp needed
 1303 00e8 10BD     		pop	{r4, pc}
 1304              	.L69:
 1305 00ea 00BF     		.align	2
 1306              	.L68:
 1307 00ec 00ED00E0 		.word	-536810240
 1308 00f0 71C20F41 		.word	1091551857
 1309 00f4 70C20F41 		.word	1091551856
 1310 00f8 00E400E0 		.word	-536812544
 1311 00fc 00000000 		.word	.LANCHOR4
 1312 0100 00000000 		.word	.LANCHOR5
 1313 0104 20ED00E0 		.word	-536810208
 1314 0108 00000000 		.word	.LANCHOR0
 1315 010c 34EF00E0 		.word	-536809676
 1316              		.cfi_endproc
 1317              	.LFE9:
 1319              		.section	.text.vPortValidateInterruptPriority,"ax",%progbits
 1320              		.align	1
 1321              		.global	vPortValidateInterruptPriority
 1322              		.syntax unified
 1323              		.thumb
 1324              		.thumb_func
 1325              		.fpu fpv4-sp-d16
 1327              	vPortValidateInterruptPriority:
 1328              	.LFB18:
 725:FreeRTOS/portable/port.c **** /*-----------------------------------------------------------*/
 726:FreeRTOS/portable/port.c **** 
 727:FreeRTOS/portable/port.c **** #if ( configASSERT_DEFINED == 1 )
 728:FreeRTOS/portable/port.c **** 
 729:FreeRTOS/portable/port.c ****     void vPortValidateInterruptPriority( void )
 730:FreeRTOS/portable/port.c ****     {
 1329              		.loc 1 730 5 is_stmt 1 view -0
 1330              		.cfi_startproc
 1331              		@ args = 0, pretend = 0, frame = 0
 1332              		@ frame_needed = 0, uses_anonymous_args = 0
 1333              		@ link register save eliminated.
 731:FreeRTOS/portable/port.c ****         uint32_t ulCurrentInterrupt;
 1334              		.loc 1 731 9 view .LVU321
 732:FreeRTOS/portable/port.c ****         uint8_t ucCurrentPriority;
 1335              		.loc 1 732 9 view .LVU322
 733:FreeRTOS/portable/port.c **** 
 734:FreeRTOS/portable/port.c ****         /* Obtain the number of the currently executing interrupt. */
 735:FreeRTOS/portable/port.c ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 1336              		.loc 1 735 9 view .LVU323
 1337              		.syntax unified
 1338              	@ 735 "FreeRTOS/portable/port.c" 1
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 46


 1339 0000 EFF30583 		mrs r3, ipsr
 1340              	@ 0 "" 2
 1341              	.LVL47:
 736:FreeRTOS/portable/port.c **** 
 737:FreeRTOS/portable/port.c ****         /* Is the interrupt number a user defined interrupt? */
 738:FreeRTOS/portable/port.c ****         if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 1342              		.loc 1 738 9 view .LVU324
 1343              		.loc 1 738 11 is_stmt 0 view .LVU325
 1344              		.thumb
 1345              		.syntax unified
 1346 0004 0F2B     		cmp	r3, #15
 1347 0006 0FD9     		bls	.L71
 739:FreeRTOS/portable/port.c ****         {
 740:FreeRTOS/portable/port.c ****             /* Look up the interrupt's priority. */
 741:FreeRTOS/portable/port.c ****             ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 1348              		.loc 1 741 13 is_stmt 1 view .LVU326
 1349              		.loc 1 741 61 is_stmt 0 view .LVU327
 1350 0008 104A     		ldr	r2, .L75
 1351              		.loc 1 741 31 view .LVU328
 1352 000a 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1353              	.LVL48:
 1354              		.loc 1 741 31 view .LVU329
 1355 000c DBB2     		uxtb	r3, r3
 1356              	.LVL49:
 742:FreeRTOS/portable/port.c **** 
 743:FreeRTOS/portable/port.c ****             /* The following assertion will fail if a service routine (ISR) for
 744:FreeRTOS/portable/port.c ****              * an interrupt that has been assigned a priority above
 745:FreeRTOS/portable/port.c ****              * configMAX_SYSCALL_INTERRUPT_PRIORITY calls an ISR safe FreeRTOS API
 746:FreeRTOS/portable/port.c ****              * function.  ISR safe FreeRTOS API functions must *only* be called
 747:FreeRTOS/portable/port.c ****              * from interrupts that have been assigned a priority at or below
 748:FreeRTOS/portable/port.c ****              * configMAX_SYSCALL_INTERRUPT_PRIORITY.
 749:FreeRTOS/portable/port.c ****              *
 750:FreeRTOS/portable/port.c ****              * Numerically low interrupt priority numbers represent logically high
 751:FreeRTOS/portable/port.c ****              * interrupt priorities, therefore the priority of the interrupt must
 752:FreeRTOS/portable/port.c ****              * be set to a value equal to or numerically *higher* than
 753:FreeRTOS/portable/port.c ****              * configMAX_SYSCALL_INTERRUPT_PRIORITY.
 754:FreeRTOS/portable/port.c ****              *
 755:FreeRTOS/portable/port.c ****              * Interrupts that	use the FreeRTOS API must not be left at their
 756:FreeRTOS/portable/port.c ****              * default priority of	zero as that is the highest possible priority,
 757:FreeRTOS/portable/port.c ****              * which is guaranteed to be above configMAX_SYSCALL_INTERRUPT_PRIORITY,
 758:FreeRTOS/portable/port.c ****              * and	therefore also guaranteed to be invalid.
 759:FreeRTOS/portable/port.c ****              *
 760:FreeRTOS/portable/port.c ****              * FreeRTOS maintains separate thread and ISR API functions to ensure
 761:FreeRTOS/portable/port.c ****              * interrupt entry is as fast and simple as possible.
 762:FreeRTOS/portable/port.c ****              *
 763:FreeRTOS/portable/port.c ****              * The following links provide detailed information:
 764:FreeRTOS/portable/port.c ****              * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
 765:FreeRTOS/portable/port.c ****              * https://www.FreeRTOS.org/FAQHelp.html */
 766:FreeRTOS/portable/port.c ****             configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 1357              		.loc 1 766 13 is_stmt 1 view .LVU330
 1358 000e 104A     		ldr	r2, .L75+4
 1359 0010 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1360 0012 9A42     		cmp	r2, r3
 1361 0014 08D9     		bls	.L71
 1362              		.loc 1 766 13 view .LVU331
 1363              	.LBB58:
 1364              	.LBI58:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 47


 194:FreeRTOS/portable/portmacro.h ****     {
 1365              		.loc 2 194 34 view .LVU332
 1366              	.LBB59:
 196:FreeRTOS/portable/portmacro.h **** 
 1367              		.loc 2 196 9 view .LVU333
 198:FreeRTOS/portable/portmacro.h ****         (
 1368              		.loc 2 198 9 view .LVU334
 1369              		.syntax unified
 1370              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 1371 0016 4FF05003 			mov r3, #80												
 1372 001a 83F31188 		msr basepri, r3											
 1373 001e BFF36F8F 		isb														
 1374 0022 BFF34F8F 		dsb														
 1375              	
 1376              	@ 0 "" 2
 1377              	.LVL50:
 1378              		.thumb
 1379              		.syntax unified
 1380              	.L72:
 198:FreeRTOS/portable/portmacro.h ****         (
 1381              		.loc 2 198 9 is_stmt 0 view .LVU335
 1382              	.LBE59:
 1383              	.LBE58:
 1384              		.loc 1 766 13 is_stmt 1 discriminator 1 view .LVU336
 1385              		.loc 1 766 13 discriminator 1 view .LVU337
 1386              		.loc 1 766 13 discriminator 1 view .LVU338
 1387 0026 FEE7     		b	.L72
 1388              	.L71:
 1389              		.loc 1 766 70 discriminator 2 view .LVU339
 767:FreeRTOS/portable/port.c ****         }
 768:FreeRTOS/portable/port.c **** 
 769:FreeRTOS/portable/port.c ****         /* Priority grouping:  The interrupt controller (NVIC) allows the bits
 770:FreeRTOS/portable/port.c ****          * that define each interrupt's priority to be split between bits that
 771:FreeRTOS/portable/port.c ****          * define the interrupt's pre-emption priority bits and bits that define
 772:FreeRTOS/portable/port.c ****          * the interrupt's sub-priority.  For simplicity all bits must be defined
 773:FreeRTOS/portable/port.c ****          * to be pre-emption priority bits.  The following assertion will fail if
 774:FreeRTOS/portable/port.c ****          * this is not the case (if some bits represent a sub-priority).
 775:FreeRTOS/portable/port.c ****          *
 776:FreeRTOS/portable/port.c ****          * If the application only uses CMSIS libraries for interrupt
 777:FreeRTOS/portable/port.c ****          * configuration then the correct setting can be achieved on all Cortex-M
 778:FreeRTOS/portable/port.c ****          * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
 779:FreeRTOS/portable/port.c ****          * scheduler.  Note however that some vendor specific peripheral libraries
 780:FreeRTOS/portable/port.c ****          * assume a non-zero priority group setting, in which cases using a value
 781:FreeRTOS/portable/port.c ****          * of zero will result in unpredictable behaviour. */
 782:FreeRTOS/portable/port.c ****         configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 1390              		.loc 1 782 9 discriminator 2 view .LVU340
 1391 0028 0A4B     		ldr	r3, .L75+8
 1392 002a 1B68     		ldr	r3, [r3]
 1393 002c 03F4E063 		and	r3, r3, #1792
 1394 0030 094A     		ldr	r2, .L75+12
 1395 0032 1268     		ldr	r2, [r2]
 1396 0034 9342     		cmp	r3, r2
 1397 0036 08D9     		bls	.L70
 1398              		.loc 1 782 9 view .LVU341
 1399              	.LBB60:
 1400              	.LBI60:
 194:FreeRTOS/portable/portmacro.h ****     {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 48


 1401              		.loc 2 194 34 view .LVU342
 1402              	.LBB61:
 196:FreeRTOS/portable/portmacro.h **** 
 1403              		.loc 2 196 9 view .LVU343
 198:FreeRTOS/portable/portmacro.h ****         (
 1404              		.loc 2 198 9 view .LVU344
 1405              		.syntax unified
 1406              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 1407 0038 4FF05003 			mov r3, #80												
 1408 003c 83F31188 		msr basepri, r3											
 1409 0040 BFF36F8F 		isb														
 1410 0044 BFF34F8F 		dsb														
 1411              	
 1412              	@ 0 "" 2
 1413              	.LVL51:
 1414              		.thumb
 1415              		.syntax unified
 1416              	.L74:
 198:FreeRTOS/portable/portmacro.h ****         (
 1417              		.loc 2 198 9 is_stmt 0 view .LVU345
 1418              	.LBE61:
 1419              	.LBE60:
 1420              		.loc 1 782 9 is_stmt 1 discriminator 2 view .LVU346
 1421              		.loc 1 782 9 discriminator 2 view .LVU347
 1422              		.loc 1 782 9 discriminator 2 view .LVU348
 1423 0048 FEE7     		b	.L74
 1424              	.L70:
 783:FreeRTOS/portable/port.c ****     }
 1425              		.loc 1 783 5 is_stmt 0 view .LVU349
 1426 004a 7047     		bx	lr
 1427              	.L76:
 1428              		.align	2
 1429              	.L75:
 1430 004c F0E300E0 		.word	-536812560
 1431 0050 00000000 		.word	.LANCHOR4
 1432 0054 0CED00E0 		.word	-536810228
 1433 0058 00000000 		.word	.LANCHOR5
 1434              		.cfi_endproc
 1435              	.LFE18:
 1437              		.section	.bss.ucMaxSysCallPriority,"aw",%nobits
 1438              		.set	.LANCHOR4,. + 0
 1441              	ucMaxSysCallPriority:
 1442 0000 00       		.space	1
 1443              		.section	.bss.ulMaxPRIGROUPValue,"aw",%nobits
 1444              		.align	2
 1445              		.set	.LANCHOR5,. + 0
 1448              	ulMaxPRIGROUPValue:
 1449 0000 00000000 		.space	4
 1450              		.section	.bss.ulStoppedTimerCompensation,"aw",%nobits
 1451              		.align	2
 1452              		.set	.LANCHOR3,. + 0
 1455              	ulStoppedTimerCompensation:
 1456 0000 00000000 		.space	4
 1457              		.section	.bss.ulTimerCountsForOneTick,"aw",%nobits
 1458              		.align	2
 1459              		.set	.LANCHOR2,. + 0
 1462              	ulTimerCountsForOneTick:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 49


 1463 0000 00000000 		.space	4
 1464              		.section	.bss.xMaximumPossibleSuppressedTicks,"aw",%nobits
 1465              		.align	2
 1466              		.set	.LANCHOR1,. + 0
 1469              	xMaximumPossibleSuppressedTicks:
 1470 0000 00000000 		.space	4
 1471              		.section	.data.uxCriticalNesting,"aw"
 1472              		.align	2
 1473              		.set	.LANCHOR0,. + 0
 1476              	uxCriticalNesting:
 1477 0000 AAAAAAAA 		.word	-1431655766
 1478              		.text
 1479              	.Letext0:
 1480              		.file 3 "c:\\work\\arm\\xpack-arm-none-eabi-gcc-9.2.1-1.1\\arm-none-eabi\\include\\machine\\_defau
 1481              		.file 4 "c:\\work\\arm\\xpack-arm-none-eabi-gcc-9.2.1-1.1\\arm-none-eabi\\include\\sys\\_stdint.h"
 1482              		.file 5 "FreeRTOS/include/projdefs.h"
 1483              		.file 6 "Core/Inc/FreeRTOSConfig.h"
 1484              		.file 7 "FreeRTOS/include/task.h"
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 50


DEFINED SYMBOLS
                            *ABS*:0000000000000000 port.c
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:18     .text.prvTaskExitError:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:25     .text.prvTaskExitError:0000000000000000 prvTaskExitError
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:112    .text.prvTaskExitError:000000000000003c $d
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:117    .text.prvPortStartFirstTask:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:123    .text.prvPortStartFirstTask:0000000000000000 prvPortStartFirstTask
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:145    .text.prvPortStartFirstTask:0000000000000022 $d
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:145    .text.prvPortStartFirstTask:0000000000000024 $d
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:155    .text.vPortEnableVFP:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:161    .text.vPortEnableVFP:0000000000000000 vPortEnableVFP
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:177    .text.vPortEnableVFP:000000000000000e $d
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:177    .text.vPortEnableVFP:0000000000000010 $d
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:187    .text.pxPortInitialiseStack:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:194    .text.pxPortInitialiseStack:0000000000000000 pxPortInitialiseStack
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:244    .text.pxPortInitialiseStack:0000000000000028 $d
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:249    .text.SVC_Handler:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:256    .text.SVC_Handler:0000000000000000 SVC_Handler
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:277    .text.SVC_Handler:0000000000000020 pxCurrentTCBConst2
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:277    .text.SVC_Handler:0000000000000020 $d
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:287    .text.vPortEndScheduler:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:294    .text.vPortEndScheduler:0000000000000000 vPortEndScheduler
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:338    .text.vPortEndScheduler:0000000000000020 $d
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:343    .text.vPortEnterCritical:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:350    .text.vPortEnterCritical:0000000000000000 vPortEnterCritical
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:424    .text.vPortEnterCritical:000000000000003c $d
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:430    .text.vPortExitCritical:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:437    .text.vPortExitCritical:0000000000000000 vPortExitCritical
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:507    .text.vPortExitCritical:0000000000000028 $d
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:512    .text.PendSV_Handler:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:519    .text.PendSV_Handler:0000000000000000 PendSV_Handler
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:568    .text.PendSV_Handler:0000000000000060 pxCurrentTCBConst
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:568    .text.PendSV_Handler:0000000000000060 $d
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:578    .text.SysTick_Handler:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:585    .text.SysTick_Handler:0000000000000000 SysTick_Handler
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:650    .text.SysTick_Handler:0000000000000028 $d
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:655    .text.vPortSuppressTicksAndSleep:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:662    .text.vPortSuppressTicksAndSleep:0000000000000000 vPortSuppressTicksAndSleep
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:956    .text.vPortSuppressTicksAndSleep:0000000000000104 $d
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:966    .text.vPortSetupTimerInterrupt:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:973    .text.vPortSetupTimerInterrupt:0000000000000000 vPortSetupTimerInterrupt
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:1038   .text.vPortSetupTimerInterrupt:0000000000000048 $d
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:1050   .text.xPortStartScheduler:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:1057   .text.xPortStartScheduler:0000000000000000 xPortStartScheduler
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:1307   .text.xPortStartScheduler:00000000000000ec $d
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:1320   .text.vPortValidateInterruptPriority:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:1327   .text.vPortValidateInterruptPriority:0000000000000000 vPortValidateInterruptPriority
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:1430   .text.vPortValidateInterruptPriority:000000000000004c $d
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:1441   .bss.ucMaxSysCallPriority:0000000000000000 ucMaxSysCallPriority
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:1442   .bss.ucMaxSysCallPriority:0000000000000000 $d
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:1444   .bss.ulMaxPRIGROUPValue:0000000000000000 $d
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:1448   .bss.ulMaxPRIGROUPValue:0000000000000000 ulMaxPRIGROUPValue
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:1451   .bss.ulStoppedTimerCompensation:0000000000000000 $d
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:1455   .bss.ulStoppedTimerCompensation:0000000000000000 ulStoppedTimerCompensation
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:1458   .bss.ulTimerCountsForOneTick:0000000000000000 $d
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:1462   .bss.ulTimerCountsForOneTick:0000000000000000 ulTimerCountsForOneTick
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:1465   .bss.xMaximumPossibleSuppressedTicks:0000000000000000 $d
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccloeAA9.s 			page 51


C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:1469   .bss.xMaximumPossibleSuppressedTicks:0000000000000000 xMaximumPossibleSuppressedTicks
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:1472   .data.uxCriticalNesting:0000000000000000 $d
C:\Users\worker\AppData\Local\Temp\ccloeAA9.s:1476   .data.uxCriticalNesting:0000000000000000 uxCriticalNesting

UNDEFINED SYMBOLS
pxCurrentTCB
vTaskSwitchContext
xTaskIncrementTick
eTaskConfirmSleepModeStatus
vTaskStepTick
SystemCoreClock
