ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"event_groups.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvTestWaitCondition,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	prvTestWaitCondition:
  26              	.LVL0:
  27              	.LFB15:
  28              		.file 1 "FreeRTOS/event_groups.c"
   1:FreeRTOS/event_groups.c **** /*
   2:FreeRTOS/event_groups.c ****  * FreeRTOS Kernel V10.4.6
   3:FreeRTOS/event_groups.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/event_groups.c ****  *
   5:FreeRTOS/event_groups.c ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS/event_groups.c ****  *
   7:FreeRTOS/event_groups.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS/event_groups.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS/event_groups.c ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS/event_groups.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS/event_groups.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS/event_groups.c ****  * subject to the following conditions:
  13:FreeRTOS/event_groups.c ****  *
  14:FreeRTOS/event_groups.c ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS/event_groups.c ****  * copies or substantial portions of the Software.
  16:FreeRTOS/event_groups.c ****  *
  17:FreeRTOS/event_groups.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS/event_groups.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS/event_groups.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS/event_groups.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS/event_groups.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS/event_groups.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS/event_groups.c ****  *
  24:FreeRTOS/event_groups.c ****  * https://www.FreeRTOS.org
  25:FreeRTOS/event_groups.c ****  * https://github.com/FreeRTOS
  26:FreeRTOS/event_groups.c ****  *
  27:FreeRTOS/event_groups.c ****  */
  28:FreeRTOS/event_groups.c **** 
  29:FreeRTOS/event_groups.c **** /* Standard includes. */
  30:FreeRTOS/event_groups.c **** #include <stdlib.h>
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 2


  31:FreeRTOS/event_groups.c **** 
  32:FreeRTOS/event_groups.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:FreeRTOS/event_groups.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  34:FreeRTOS/event_groups.c ****  * task.h is included from an application file. */
  35:FreeRTOS/event_groups.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:FreeRTOS/event_groups.c **** 
  37:FreeRTOS/event_groups.c **** /* FreeRTOS includes. */
  38:FreeRTOS/event_groups.c **** #include "FreeRTOS.h"
  39:FreeRTOS/event_groups.c **** #include "task.h"
  40:FreeRTOS/event_groups.c **** #include "timers.h"
  41:FreeRTOS/event_groups.c **** #include "event_groups.h"
  42:FreeRTOS/event_groups.c **** 
  43:FreeRTOS/event_groups.c **** /* Lint e961, e750 and e9021 are suppressed as a MISRA exception justified
  44:FreeRTOS/event_groups.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:FreeRTOS/event_groups.c ****  * for the header files above, but not in this file, in order to generate the
  46:FreeRTOS/event_groups.c ****  * correct privileged Vs unprivileged linkage and placement. */
  47:FreeRTOS/event_groups.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021 See comment above. */
  48:FreeRTOS/event_groups.c **** 
  49:FreeRTOS/event_groups.c **** /* The following bit fields convey control information in a task's event list
  50:FreeRTOS/event_groups.c ****  * item value.  It is important they don't clash with the
  51:FreeRTOS/event_groups.c ****  * taskEVENT_LIST_ITEM_VALUE_IN_USE definition. */
  52:FreeRTOS/event_groups.c **** #if configUSE_16_BIT_TICKS == 1
  53:FreeRTOS/event_groups.c ****     #define eventCLEAR_EVENTS_ON_EXIT_BIT    0x0100U
  54:FreeRTOS/event_groups.c ****     #define eventUNBLOCKED_DUE_TO_BIT_SET    0x0200U
  55:FreeRTOS/event_groups.c ****     #define eventWAIT_FOR_ALL_BITS           0x0400U
  56:FreeRTOS/event_groups.c ****     #define eventEVENT_BITS_CONTROL_BYTES    0xff00U
  57:FreeRTOS/event_groups.c **** #else
  58:FreeRTOS/event_groups.c ****     #define eventCLEAR_EVENTS_ON_EXIT_BIT    0x01000000UL
  59:FreeRTOS/event_groups.c ****     #define eventUNBLOCKED_DUE_TO_BIT_SET    0x02000000UL
  60:FreeRTOS/event_groups.c ****     #define eventWAIT_FOR_ALL_BITS           0x04000000UL
  61:FreeRTOS/event_groups.c ****     #define eventEVENT_BITS_CONTROL_BYTES    0xff000000UL
  62:FreeRTOS/event_groups.c **** #endif
  63:FreeRTOS/event_groups.c **** 
  64:FreeRTOS/event_groups.c **** typedef struct EventGroupDef_t
  65:FreeRTOS/event_groups.c **** {
  66:FreeRTOS/event_groups.c ****     EventBits_t uxEventBits;
  67:FreeRTOS/event_groups.c ****     List_t xTasksWaitingForBits; /*< List of tasks waiting for a bit to be set. */
  68:FreeRTOS/event_groups.c **** 
  69:FreeRTOS/event_groups.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
  70:FreeRTOS/event_groups.c ****         UBaseType_t uxEventGroupNumber;
  71:FreeRTOS/event_groups.c ****     #endif
  72:FreeRTOS/event_groups.c **** 
  73:FreeRTOS/event_groups.c ****     #if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
  74:FreeRTOS/event_groups.c ****         uint8_t ucStaticallyAllocated; /*< Set to pdTRUE if the event group is statically allocated
  75:FreeRTOS/event_groups.c ****     #endif
  76:FreeRTOS/event_groups.c **** } EventGroup_t;
  77:FreeRTOS/event_groups.c **** 
  78:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
  79:FreeRTOS/event_groups.c **** 
  80:FreeRTOS/event_groups.c **** /*
  81:FreeRTOS/event_groups.c ****  * Test the bits set in uxCurrentEventBits to see if the wait condition is met.
  82:FreeRTOS/event_groups.c ****  * The wait condition is defined by xWaitForAllBits.  If xWaitForAllBits is
  83:FreeRTOS/event_groups.c ****  * pdTRUE then the wait condition is met if all the bits set in uxBitsToWaitFor
  84:FreeRTOS/event_groups.c ****  * are also set in uxCurrentEventBits.  If xWaitForAllBits is pdFALSE then the
  85:FreeRTOS/event_groups.c ****  * wait condition is met if any of the bits set in uxBitsToWait for are also set
  86:FreeRTOS/event_groups.c ****  * in uxCurrentEventBits.
  87:FreeRTOS/event_groups.c ****  */
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 3


  88:FreeRTOS/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
  89:FreeRTOS/event_groups.c ****                                         const EventBits_t uxBitsToWaitFor,
  90:FreeRTOS/event_groups.c ****                                         const BaseType_t xWaitForAllBits ) PRIVILEGED_FUNCTION;
  91:FreeRTOS/event_groups.c **** 
  92:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
  93:FreeRTOS/event_groups.c **** 
  94:FreeRTOS/event_groups.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
  95:FreeRTOS/event_groups.c **** 
  96:FreeRTOS/event_groups.c ****     EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t * pxEventGroupBuffer )
  97:FreeRTOS/event_groups.c ****     {
  98:FreeRTOS/event_groups.c ****         EventGroup_t * pxEventBits;
  99:FreeRTOS/event_groups.c **** 
 100:FreeRTOS/event_groups.c ****         /* A StaticEventGroup_t object must be provided. */
 101:FreeRTOS/event_groups.c ****         configASSERT( pxEventGroupBuffer );
 102:FreeRTOS/event_groups.c **** 
 103:FreeRTOS/event_groups.c ****         #if ( configASSERT_DEFINED == 1 )
 104:FreeRTOS/event_groups.c ****             {
 105:FreeRTOS/event_groups.c ****                 /* Sanity check that the size of the structure used to declare a
 106:FreeRTOS/event_groups.c ****                  * variable of type StaticEventGroup_t equals the size of the real
 107:FreeRTOS/event_groups.c ****                  * event group structure. */
 108:FreeRTOS/event_groups.c ****                 volatile size_t xSize = sizeof( StaticEventGroup_t );
 109:FreeRTOS/event_groups.c ****                 configASSERT( xSize == sizeof( EventGroup_t ) );
 110:FreeRTOS/event_groups.c ****             } /*lint !e529 xSize is referenced if configASSERT() is defined. */
 111:FreeRTOS/event_groups.c ****         #endif /* configASSERT_DEFINED */
 112:FreeRTOS/event_groups.c **** 
 113:FreeRTOS/event_groups.c ****         /* The user has provided a statically allocated event group - use it. */
 114:FreeRTOS/event_groups.c ****         pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and S
 115:FreeRTOS/event_groups.c **** 
 116:FreeRTOS/event_groups.c ****         if( pxEventBits != NULL )
 117:FreeRTOS/event_groups.c ****         {
 118:FreeRTOS/event_groups.c ****             pxEventBits->uxEventBits = 0;
 119:FreeRTOS/event_groups.c ****             vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 120:FreeRTOS/event_groups.c **** 
 121:FreeRTOS/event_groups.c ****             #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 122:FreeRTOS/event_groups.c ****                 {
 123:FreeRTOS/event_groups.c ****                     /* Both static and dynamic allocation can be used, so note that
 124:FreeRTOS/event_groups.c ****                      * this event group was created statically in case the event group
 125:FreeRTOS/event_groups.c ****                      * is later deleted. */
 126:FreeRTOS/event_groups.c ****                     pxEventBits->ucStaticallyAllocated = pdTRUE;
 127:FreeRTOS/event_groups.c ****                 }
 128:FreeRTOS/event_groups.c ****             #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 129:FreeRTOS/event_groups.c **** 
 130:FreeRTOS/event_groups.c ****             traceEVENT_GROUP_CREATE( pxEventBits );
 131:FreeRTOS/event_groups.c ****         }
 132:FreeRTOS/event_groups.c ****         else
 133:FreeRTOS/event_groups.c ****         {
 134:FreeRTOS/event_groups.c ****             /* xEventGroupCreateStatic should only ever be called with
 135:FreeRTOS/event_groups.c ****              * pxEventGroupBuffer pointing to a pre-allocated (compile time
 136:FreeRTOS/event_groups.c ****              * allocated) StaticEventGroup_t variable. */
 137:FreeRTOS/event_groups.c ****             traceEVENT_GROUP_CREATE_FAILED();
 138:FreeRTOS/event_groups.c ****         }
 139:FreeRTOS/event_groups.c **** 
 140:FreeRTOS/event_groups.c ****         return pxEventBits;
 141:FreeRTOS/event_groups.c ****     }
 142:FreeRTOS/event_groups.c **** 
 143:FreeRTOS/event_groups.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 144:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 4


 145:FreeRTOS/event_groups.c **** 
 146:FreeRTOS/event_groups.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 147:FreeRTOS/event_groups.c **** 
 148:FreeRTOS/event_groups.c ****     EventGroupHandle_t xEventGroupCreate( void )
 149:FreeRTOS/event_groups.c ****     {
 150:FreeRTOS/event_groups.c ****         EventGroup_t * pxEventBits;
 151:FreeRTOS/event_groups.c **** 
 152:FreeRTOS/event_groups.c ****         /* Allocate the event group.  Justification for MISRA deviation as
 153:FreeRTOS/event_groups.c ****          * follows:  pvPortMalloc() always ensures returned memory blocks are
 154:FreeRTOS/event_groups.c ****          * aligned per the requirements of the MCU stack.  In this case
 155:FreeRTOS/event_groups.c ****          * pvPortMalloc() must return a pointer that is guaranteed to meet the
 156:FreeRTOS/event_groups.c ****          * alignment requirements of the EventGroup_t structure - which (if you
 157:FreeRTOS/event_groups.c ****          * follow it through) is the alignment requirements of the TickType_t type
 158:FreeRTOS/event_groups.c ****          * (EventBits_t being of TickType_t itself).  Therefore, whenever the
 159:FreeRTOS/event_groups.c ****          * stack alignment requirements are greater than or equal to the
 160:FreeRTOS/event_groups.c ****          * TickType_t alignment requirements the cast is safe.  In other cases,
 161:FreeRTOS/event_groups.c ****          * where the natural word size of the architecture is less than
 162:FreeRTOS/event_groups.c ****          * sizeof( TickType_t ), the TickType_t variables will be accessed in two
 163:FreeRTOS/event_groups.c ****          * or more reads operations, and the alignment requirements is only that
 164:FreeRTOS/event_groups.c ****          * of each individual read. */
 165:FreeRTOS/event_groups.c ****         pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e90
 166:FreeRTOS/event_groups.c **** 
 167:FreeRTOS/event_groups.c ****         if( pxEventBits != NULL )
 168:FreeRTOS/event_groups.c ****         {
 169:FreeRTOS/event_groups.c ****             pxEventBits->uxEventBits = 0;
 170:FreeRTOS/event_groups.c ****             vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 171:FreeRTOS/event_groups.c **** 
 172:FreeRTOS/event_groups.c ****             #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 173:FreeRTOS/event_groups.c ****                 {
 174:FreeRTOS/event_groups.c ****                     /* Both static and dynamic allocation can be used, so note this
 175:FreeRTOS/event_groups.c ****                      * event group was allocated statically in case the event group is
 176:FreeRTOS/event_groups.c ****                      * later deleted. */
 177:FreeRTOS/event_groups.c ****                     pxEventBits->ucStaticallyAllocated = pdFALSE;
 178:FreeRTOS/event_groups.c ****                 }
 179:FreeRTOS/event_groups.c ****             #endif /* configSUPPORT_STATIC_ALLOCATION */
 180:FreeRTOS/event_groups.c **** 
 181:FreeRTOS/event_groups.c ****             traceEVENT_GROUP_CREATE( pxEventBits );
 182:FreeRTOS/event_groups.c ****         }
 183:FreeRTOS/event_groups.c ****         else
 184:FreeRTOS/event_groups.c ****         {
 185:FreeRTOS/event_groups.c ****             traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracin
 186:FreeRTOS/event_groups.c ****         }
 187:FreeRTOS/event_groups.c **** 
 188:FreeRTOS/event_groups.c ****         return pxEventBits;
 189:FreeRTOS/event_groups.c ****     }
 190:FreeRTOS/event_groups.c **** 
 191:FreeRTOS/event_groups.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 192:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 193:FreeRTOS/event_groups.c **** 
 194:FreeRTOS/event_groups.c **** EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup,
 195:FreeRTOS/event_groups.c ****                              const EventBits_t uxBitsToSet,
 196:FreeRTOS/event_groups.c ****                              const EventBits_t uxBitsToWaitFor,
 197:FreeRTOS/event_groups.c ****                              TickType_t xTicksToWait )
 198:FreeRTOS/event_groups.c **** {
 199:FreeRTOS/event_groups.c ****     EventBits_t uxOriginalBitValue, uxReturn;
 200:FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 201:FreeRTOS/event_groups.c ****     BaseType_t xAlreadyYielded;
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 5


 202:FreeRTOS/event_groups.c ****     BaseType_t xTimeoutOccurred = pdFALSE;
 203:FreeRTOS/event_groups.c **** 
 204:FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 205:FreeRTOS/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 206:FreeRTOS/event_groups.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 207:FreeRTOS/event_groups.c ****         {
 208:FreeRTOS/event_groups.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
 209:FreeRTOS/event_groups.c ****         }
 210:FreeRTOS/event_groups.c ****     #endif
 211:FreeRTOS/event_groups.c **** 
 212:FreeRTOS/event_groups.c ****     vTaskSuspendAll();
 213:FreeRTOS/event_groups.c ****     {
 214:FreeRTOS/event_groups.c ****         uxOriginalBitValue = pxEventBits->uxEventBits;
 215:FreeRTOS/event_groups.c **** 
 216:FreeRTOS/event_groups.c ****         ( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 217:FreeRTOS/event_groups.c **** 
 218:FreeRTOS/event_groups.c ****         if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 219:FreeRTOS/event_groups.c ****         {
 220:FreeRTOS/event_groups.c ****             /* All the rendezvous bits are now set - no need to block. */
 221:FreeRTOS/event_groups.c ****             uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 222:FreeRTOS/event_groups.c **** 
 223:FreeRTOS/event_groups.c ****             /* Rendezvous always clear the bits.  They will have been cleared
 224:FreeRTOS/event_groups.c ****              * already unless this is the only task in the rendezvous. */
 225:FreeRTOS/event_groups.c ****             pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 226:FreeRTOS/event_groups.c **** 
 227:FreeRTOS/event_groups.c ****             xTicksToWait = 0;
 228:FreeRTOS/event_groups.c ****         }
 229:FreeRTOS/event_groups.c ****         else
 230:FreeRTOS/event_groups.c ****         {
 231:FreeRTOS/event_groups.c ****             if( xTicksToWait != ( TickType_t ) 0 )
 232:FreeRTOS/event_groups.c ****             {
 233:FreeRTOS/event_groups.c ****                 traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
 234:FreeRTOS/event_groups.c **** 
 235:FreeRTOS/event_groups.c ****                 /* Store the bits that the calling task is waiting for in the
 236:FreeRTOS/event_groups.c ****                  * task's event list item so the kernel knows when a match is
 237:FreeRTOS/event_groups.c ****                  * found.  Then enter the blocked state. */
 238:FreeRTOS/event_groups.c ****                 vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToW
 239:FreeRTOS/event_groups.c **** 
 240:FreeRTOS/event_groups.c ****                 /* This assignment is obsolete as uxReturn will get set after
 241:FreeRTOS/event_groups.c ****                  * the task unblocks, but some compilers mistakenly generate a
 242:FreeRTOS/event_groups.c ****                  * warning about uxReturn being returned without being set if the
 243:FreeRTOS/event_groups.c ****                  * assignment is omitted. */
 244:FreeRTOS/event_groups.c ****                 uxReturn = 0;
 245:FreeRTOS/event_groups.c ****             }
 246:FreeRTOS/event_groups.c ****             else
 247:FreeRTOS/event_groups.c ****             {
 248:FreeRTOS/event_groups.c ****                 /* The rendezvous bits were not set, but no block time was
 249:FreeRTOS/event_groups.c ****                  * specified - just return the current event bit value. */
 250:FreeRTOS/event_groups.c ****                 uxReturn = pxEventBits->uxEventBits;
 251:FreeRTOS/event_groups.c ****                 xTimeoutOccurred = pdTRUE;
 252:FreeRTOS/event_groups.c ****             }
 253:FreeRTOS/event_groups.c ****         }
 254:FreeRTOS/event_groups.c ****     }
 255:FreeRTOS/event_groups.c ****     xAlreadyYielded = xTaskResumeAll();
 256:FreeRTOS/event_groups.c **** 
 257:FreeRTOS/event_groups.c ****     if( xTicksToWait != ( TickType_t ) 0 )
 258:FreeRTOS/event_groups.c ****     {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 6


 259:FreeRTOS/event_groups.c ****         if( xAlreadyYielded == pdFALSE )
 260:FreeRTOS/event_groups.c ****         {
 261:FreeRTOS/event_groups.c ****             portYIELD_WITHIN_API();
 262:FreeRTOS/event_groups.c ****         }
 263:FreeRTOS/event_groups.c ****         else
 264:FreeRTOS/event_groups.c ****         {
 265:FreeRTOS/event_groups.c ****             mtCOVERAGE_TEST_MARKER();
 266:FreeRTOS/event_groups.c ****         }
 267:FreeRTOS/event_groups.c **** 
 268:FreeRTOS/event_groups.c ****         /* The task blocked to wait for its required bits to be set - at this
 269:FreeRTOS/event_groups.c ****          * point either the required bits were set or the block time expired.  If
 270:FreeRTOS/event_groups.c ****          * the required bits were set they will have been stored in the task's
 271:FreeRTOS/event_groups.c ****          * event list item, and they should now be retrieved then cleared. */
 272:FreeRTOS/event_groups.c ****         uxReturn = uxTaskResetEventItemValue();
 273:FreeRTOS/event_groups.c **** 
 274:FreeRTOS/event_groups.c ****         if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 275:FreeRTOS/event_groups.c ****         {
 276:FreeRTOS/event_groups.c ****             /* The task timed out, just return the current event bit value. */
 277:FreeRTOS/event_groups.c ****             taskENTER_CRITICAL();
 278:FreeRTOS/event_groups.c ****             {
 279:FreeRTOS/event_groups.c ****                 uxReturn = pxEventBits->uxEventBits;
 280:FreeRTOS/event_groups.c **** 
 281:FreeRTOS/event_groups.c ****                 /* Although the task got here because it timed out before the
 282:FreeRTOS/event_groups.c ****                  * bits it was waiting for were set, it is possible that since it
 283:FreeRTOS/event_groups.c ****                  * unblocked another task has set the bits.  If this is the case
 284:FreeRTOS/event_groups.c ****                  * then it needs to clear the bits before exiting. */
 285:FreeRTOS/event_groups.c ****                 if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 286:FreeRTOS/event_groups.c ****                 {
 287:FreeRTOS/event_groups.c ****                     pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 288:FreeRTOS/event_groups.c ****                 }
 289:FreeRTOS/event_groups.c ****                 else
 290:FreeRTOS/event_groups.c ****                 {
 291:FreeRTOS/event_groups.c ****                     mtCOVERAGE_TEST_MARKER();
 292:FreeRTOS/event_groups.c ****                 }
 293:FreeRTOS/event_groups.c ****             }
 294:FreeRTOS/event_groups.c ****             taskEXIT_CRITICAL();
 295:FreeRTOS/event_groups.c **** 
 296:FreeRTOS/event_groups.c ****             xTimeoutOccurred = pdTRUE;
 297:FreeRTOS/event_groups.c ****         }
 298:FreeRTOS/event_groups.c ****         else
 299:FreeRTOS/event_groups.c ****         {
 300:FreeRTOS/event_groups.c ****             /* The task unblocked because the bits were set. */
 301:FreeRTOS/event_groups.c ****         }
 302:FreeRTOS/event_groups.c **** 
 303:FreeRTOS/event_groups.c ****         /* Control bits might be set as the task had blocked should not be
 304:FreeRTOS/event_groups.c ****          * returned. */
 305:FreeRTOS/event_groups.c ****         uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 306:FreeRTOS/event_groups.c ****     }
 307:FreeRTOS/event_groups.c **** 
 308:FreeRTOS/event_groups.c ****     traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
 309:FreeRTOS/event_groups.c **** 
 310:FreeRTOS/event_groups.c ****     /* Prevent compiler warnings when trace macros are not used. */
 311:FreeRTOS/event_groups.c ****     ( void ) xTimeoutOccurred;
 312:FreeRTOS/event_groups.c **** 
 313:FreeRTOS/event_groups.c ****     return uxReturn;
 314:FreeRTOS/event_groups.c **** }
 315:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 7


 316:FreeRTOS/event_groups.c **** 
 317:FreeRTOS/event_groups.c **** EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
 318:FreeRTOS/event_groups.c ****                                  const EventBits_t uxBitsToWaitFor,
 319:FreeRTOS/event_groups.c ****                                  const BaseType_t xClearOnExit,
 320:FreeRTOS/event_groups.c ****                                  const BaseType_t xWaitForAllBits,
 321:FreeRTOS/event_groups.c ****                                  TickType_t xTicksToWait )
 322:FreeRTOS/event_groups.c **** {
 323:FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 324:FreeRTOS/event_groups.c ****     EventBits_t uxReturn, uxControlBits = 0;
 325:FreeRTOS/event_groups.c ****     BaseType_t xWaitConditionMet, xAlreadyYielded;
 326:FreeRTOS/event_groups.c ****     BaseType_t xTimeoutOccurred = pdFALSE;
 327:FreeRTOS/event_groups.c **** 
 328:FreeRTOS/event_groups.c ****     /* Check the user is not attempting to wait on the bits used by the kernel
 329:FreeRTOS/event_groups.c ****      * itself, and that at least one bit is being requested. */
 330:FreeRTOS/event_groups.c ****     configASSERT( xEventGroup );
 331:FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 332:FreeRTOS/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 333:FreeRTOS/event_groups.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 334:FreeRTOS/event_groups.c ****         {
 335:FreeRTOS/event_groups.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
 336:FreeRTOS/event_groups.c ****         }
 337:FreeRTOS/event_groups.c ****     #endif
 338:FreeRTOS/event_groups.c **** 
 339:FreeRTOS/event_groups.c ****     vTaskSuspendAll();
 340:FreeRTOS/event_groups.c ****     {
 341:FreeRTOS/event_groups.c ****         const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 342:FreeRTOS/event_groups.c **** 
 343:FreeRTOS/event_groups.c ****         /* Check to see if the wait condition is already met or not. */
 344:FreeRTOS/event_groups.c ****         xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllB
 345:FreeRTOS/event_groups.c **** 
 346:FreeRTOS/event_groups.c ****         if( xWaitConditionMet != pdFALSE )
 347:FreeRTOS/event_groups.c ****         {
 348:FreeRTOS/event_groups.c ****             /* The wait condition has already been met so there is no need to
 349:FreeRTOS/event_groups.c ****              * block. */
 350:FreeRTOS/event_groups.c ****             uxReturn = uxCurrentEventBits;
 351:FreeRTOS/event_groups.c ****             xTicksToWait = ( TickType_t ) 0;
 352:FreeRTOS/event_groups.c **** 
 353:FreeRTOS/event_groups.c ****             /* Clear the wait bits if requested to do so. */
 354:FreeRTOS/event_groups.c ****             if( xClearOnExit != pdFALSE )
 355:FreeRTOS/event_groups.c ****             {
 356:FreeRTOS/event_groups.c ****                 pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 357:FreeRTOS/event_groups.c ****             }
 358:FreeRTOS/event_groups.c ****             else
 359:FreeRTOS/event_groups.c ****             {
 360:FreeRTOS/event_groups.c ****                 mtCOVERAGE_TEST_MARKER();
 361:FreeRTOS/event_groups.c ****             }
 362:FreeRTOS/event_groups.c ****         }
 363:FreeRTOS/event_groups.c ****         else if( xTicksToWait == ( TickType_t ) 0 )
 364:FreeRTOS/event_groups.c ****         {
 365:FreeRTOS/event_groups.c ****             /* The wait condition has not been met, but no block time was
 366:FreeRTOS/event_groups.c ****              * specified, so just return the current value. */
 367:FreeRTOS/event_groups.c ****             uxReturn = uxCurrentEventBits;
 368:FreeRTOS/event_groups.c ****             xTimeoutOccurred = pdTRUE;
 369:FreeRTOS/event_groups.c ****         }
 370:FreeRTOS/event_groups.c ****         else
 371:FreeRTOS/event_groups.c ****         {
 372:FreeRTOS/event_groups.c ****             /* The task is going to block to wait for its required bits to be
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 8


 373:FreeRTOS/event_groups.c ****              * set.  uxControlBits are used to remember the specified behaviour of
 374:FreeRTOS/event_groups.c ****              * this call to xEventGroupWaitBits() - for use when the event bits
 375:FreeRTOS/event_groups.c ****              * unblock the task. */
 376:FreeRTOS/event_groups.c ****             if( xClearOnExit != pdFALSE )
 377:FreeRTOS/event_groups.c ****             {
 378:FreeRTOS/event_groups.c ****                 uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 379:FreeRTOS/event_groups.c ****             }
 380:FreeRTOS/event_groups.c ****             else
 381:FreeRTOS/event_groups.c ****             {
 382:FreeRTOS/event_groups.c ****                 mtCOVERAGE_TEST_MARKER();
 383:FreeRTOS/event_groups.c ****             }
 384:FreeRTOS/event_groups.c **** 
 385:FreeRTOS/event_groups.c ****             if( xWaitForAllBits != pdFALSE )
 386:FreeRTOS/event_groups.c ****             {
 387:FreeRTOS/event_groups.c ****                 uxControlBits |= eventWAIT_FOR_ALL_BITS;
 388:FreeRTOS/event_groups.c ****             }
 389:FreeRTOS/event_groups.c ****             else
 390:FreeRTOS/event_groups.c ****             {
 391:FreeRTOS/event_groups.c ****                 mtCOVERAGE_TEST_MARKER();
 392:FreeRTOS/event_groups.c ****             }
 393:FreeRTOS/event_groups.c **** 
 394:FreeRTOS/event_groups.c ****             /* Store the bits that the calling task is waiting for in the
 395:FreeRTOS/event_groups.c ****              * task's event list item so the kernel knows when a match is
 396:FreeRTOS/event_groups.c ****              * found.  Then enter the blocked state. */
 397:FreeRTOS/event_groups.c ****             vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitF
 398:FreeRTOS/event_groups.c **** 
 399:FreeRTOS/event_groups.c ****             /* This is obsolete as it will get set after the task unblocks, but
 400:FreeRTOS/event_groups.c ****              * some compilers mistakenly generate a warning about the variable
 401:FreeRTOS/event_groups.c ****              * being returned without being set if it is not done. */
 402:FreeRTOS/event_groups.c ****             uxReturn = 0;
 403:FreeRTOS/event_groups.c **** 
 404:FreeRTOS/event_groups.c ****             traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
 405:FreeRTOS/event_groups.c ****         }
 406:FreeRTOS/event_groups.c ****     }
 407:FreeRTOS/event_groups.c ****     xAlreadyYielded = xTaskResumeAll();
 408:FreeRTOS/event_groups.c **** 
 409:FreeRTOS/event_groups.c ****     if( xTicksToWait != ( TickType_t ) 0 )
 410:FreeRTOS/event_groups.c ****     {
 411:FreeRTOS/event_groups.c ****         if( xAlreadyYielded == pdFALSE )
 412:FreeRTOS/event_groups.c ****         {
 413:FreeRTOS/event_groups.c ****             portYIELD_WITHIN_API();
 414:FreeRTOS/event_groups.c ****         }
 415:FreeRTOS/event_groups.c ****         else
 416:FreeRTOS/event_groups.c ****         {
 417:FreeRTOS/event_groups.c ****             mtCOVERAGE_TEST_MARKER();
 418:FreeRTOS/event_groups.c ****         }
 419:FreeRTOS/event_groups.c **** 
 420:FreeRTOS/event_groups.c ****         /* The task blocked to wait for its required bits to be set - at this
 421:FreeRTOS/event_groups.c ****          * point either the required bits were set or the block time expired.  If
 422:FreeRTOS/event_groups.c ****          * the required bits were set they will have been stored in the task's
 423:FreeRTOS/event_groups.c ****          * event list item, and they should now be retrieved then cleared. */
 424:FreeRTOS/event_groups.c ****         uxReturn = uxTaskResetEventItemValue();
 425:FreeRTOS/event_groups.c **** 
 426:FreeRTOS/event_groups.c ****         if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 427:FreeRTOS/event_groups.c ****         {
 428:FreeRTOS/event_groups.c ****             taskENTER_CRITICAL();
 429:FreeRTOS/event_groups.c ****             {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 9


 430:FreeRTOS/event_groups.c ****                 /* The task timed out, just return the current event bit value. */
 431:FreeRTOS/event_groups.c ****                 uxReturn = pxEventBits->uxEventBits;
 432:FreeRTOS/event_groups.c **** 
 433:FreeRTOS/event_groups.c ****                 /* It is possible that the event bits were updated between this
 434:FreeRTOS/event_groups.c ****                  * task leaving the Blocked state and running again. */
 435:FreeRTOS/event_groups.c ****                 if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 436:FreeRTOS/event_groups.c ****                 {
 437:FreeRTOS/event_groups.c ****                     if( xClearOnExit != pdFALSE )
 438:FreeRTOS/event_groups.c ****                     {
 439:FreeRTOS/event_groups.c ****                         pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 440:FreeRTOS/event_groups.c ****                     }
 441:FreeRTOS/event_groups.c ****                     else
 442:FreeRTOS/event_groups.c ****                     {
 443:FreeRTOS/event_groups.c ****                         mtCOVERAGE_TEST_MARKER();
 444:FreeRTOS/event_groups.c ****                     }
 445:FreeRTOS/event_groups.c ****                 }
 446:FreeRTOS/event_groups.c ****                 else
 447:FreeRTOS/event_groups.c ****                 {
 448:FreeRTOS/event_groups.c ****                     mtCOVERAGE_TEST_MARKER();
 449:FreeRTOS/event_groups.c ****                 }
 450:FreeRTOS/event_groups.c **** 
 451:FreeRTOS/event_groups.c ****                 xTimeoutOccurred = pdTRUE;
 452:FreeRTOS/event_groups.c ****             }
 453:FreeRTOS/event_groups.c ****             taskEXIT_CRITICAL();
 454:FreeRTOS/event_groups.c ****         }
 455:FreeRTOS/event_groups.c ****         else
 456:FreeRTOS/event_groups.c ****         {
 457:FreeRTOS/event_groups.c ****             /* The task unblocked because the bits were set. */
 458:FreeRTOS/event_groups.c ****         }
 459:FreeRTOS/event_groups.c **** 
 460:FreeRTOS/event_groups.c ****         /* The task blocked so control bits may have been set. */
 461:FreeRTOS/event_groups.c ****         uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 462:FreeRTOS/event_groups.c ****     }
 463:FreeRTOS/event_groups.c **** 
 464:FreeRTOS/event_groups.c ****     traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
 465:FreeRTOS/event_groups.c **** 
 466:FreeRTOS/event_groups.c ****     /* Prevent compiler warnings when trace macros are not used. */
 467:FreeRTOS/event_groups.c ****     ( void ) xTimeoutOccurred;
 468:FreeRTOS/event_groups.c **** 
 469:FreeRTOS/event_groups.c ****     return uxReturn;
 470:FreeRTOS/event_groups.c **** }
 471:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 472:FreeRTOS/event_groups.c **** 
 473:FreeRTOS/event_groups.c **** EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
 474:FreeRTOS/event_groups.c ****                                   const EventBits_t uxBitsToClear )
 475:FreeRTOS/event_groups.c **** {
 476:FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 477:FreeRTOS/event_groups.c ****     EventBits_t uxReturn;
 478:FreeRTOS/event_groups.c **** 
 479:FreeRTOS/event_groups.c ****     /* Check the user is not attempting to clear the bits used by the kernel
 480:FreeRTOS/event_groups.c ****      * itself. */
 481:FreeRTOS/event_groups.c ****     configASSERT( xEventGroup );
 482:FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 483:FreeRTOS/event_groups.c **** 
 484:FreeRTOS/event_groups.c ****     taskENTER_CRITICAL();
 485:FreeRTOS/event_groups.c ****     {
 486:FreeRTOS/event_groups.c ****         traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 10


 487:FreeRTOS/event_groups.c **** 
 488:FreeRTOS/event_groups.c ****         /* The value returned is the event group value prior to the bits being
 489:FreeRTOS/event_groups.c ****          * cleared. */
 490:FreeRTOS/event_groups.c ****         uxReturn = pxEventBits->uxEventBits;
 491:FreeRTOS/event_groups.c **** 
 492:FreeRTOS/event_groups.c ****         /* Clear the bits. */
 493:FreeRTOS/event_groups.c ****         pxEventBits->uxEventBits &= ~uxBitsToClear;
 494:FreeRTOS/event_groups.c ****     }
 495:FreeRTOS/event_groups.c ****     taskEXIT_CRITICAL();
 496:FreeRTOS/event_groups.c **** 
 497:FreeRTOS/event_groups.c ****     return uxReturn;
 498:FreeRTOS/event_groups.c **** }
 499:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 500:FreeRTOS/event_groups.c **** 
 501:FreeRTOS/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
 502:FreeRTOS/event_groups.c **** 
 503:FreeRTOS/event_groups.c ****     BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup,
 504:FreeRTOS/event_groups.c ****                                             const EventBits_t uxBitsToClear )
 505:FreeRTOS/event_groups.c ****     {
 506:FreeRTOS/event_groups.c ****         BaseType_t xReturn;
 507:FreeRTOS/event_groups.c **** 
 508:FreeRTOS/event_groups.c ****         traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
 509:FreeRTOS/event_groups.c ****         xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGro
 510:FreeRTOS/event_groups.c **** 
 511:FreeRTOS/event_groups.c ****         return xReturn;
 512:FreeRTOS/event_groups.c ****     }
 513:FreeRTOS/event_groups.c **** 
 514:FreeRTOS/event_groups.c **** #endif /* if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( co
 515:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 516:FreeRTOS/event_groups.c **** 
 517:FreeRTOS/event_groups.c **** EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
 518:FreeRTOS/event_groups.c **** {
 519:FreeRTOS/event_groups.c ****     UBaseType_t uxSavedInterruptStatus;
 520:FreeRTOS/event_groups.c ****     EventGroup_t const * const pxEventBits = xEventGroup;
 521:FreeRTOS/event_groups.c ****     EventBits_t uxReturn;
 522:FreeRTOS/event_groups.c **** 
 523:FreeRTOS/event_groups.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 524:FreeRTOS/event_groups.c ****     {
 525:FreeRTOS/event_groups.c ****         uxReturn = pxEventBits->uxEventBits;
 526:FreeRTOS/event_groups.c ****     }
 527:FreeRTOS/event_groups.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 528:FreeRTOS/event_groups.c **** 
 529:FreeRTOS/event_groups.c ****     return uxReturn;
 530:FreeRTOS/event_groups.c **** } /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to co
 531:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 532:FreeRTOS/event_groups.c **** 
 533:FreeRTOS/event_groups.c **** EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
 534:FreeRTOS/event_groups.c ****                                 const EventBits_t uxBitsToSet )
 535:FreeRTOS/event_groups.c **** {
 536:FreeRTOS/event_groups.c ****     ListItem_t * pxListItem, * pxNext;
 537:FreeRTOS/event_groups.c ****     ListItem_t const * pxListEnd;
 538:FreeRTOS/event_groups.c ****     List_t const * pxList;
 539:FreeRTOS/event_groups.c ****     EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 540:FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 541:FreeRTOS/event_groups.c ****     BaseType_t xMatchFound = pdFALSE;
 542:FreeRTOS/event_groups.c **** 
 543:FreeRTOS/event_groups.c ****     /* Check the user is not attempting to set the bits used by the kernel
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 11


 544:FreeRTOS/event_groups.c ****      * itself. */
 545:FreeRTOS/event_groups.c ****     configASSERT( xEventGroup );
 546:FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 547:FreeRTOS/event_groups.c **** 
 548:FreeRTOS/event_groups.c ****     pxList = &( pxEventBits->xTasksWaitingForBits );
 549:FreeRTOS/event_groups.c ****     pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is 
 550:FreeRTOS/event_groups.c ****     vTaskSuspendAll();
 551:FreeRTOS/event_groups.c ****     {
 552:FreeRTOS/event_groups.c ****         traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
 553:FreeRTOS/event_groups.c **** 
 554:FreeRTOS/event_groups.c ****         pxListItem = listGET_HEAD_ENTRY( pxList );
 555:FreeRTOS/event_groups.c **** 
 556:FreeRTOS/event_groups.c ****         /* Set the bits. */
 557:FreeRTOS/event_groups.c ****         pxEventBits->uxEventBits |= uxBitsToSet;
 558:FreeRTOS/event_groups.c **** 
 559:FreeRTOS/event_groups.c ****         /* See if the new bit value should unblock any tasks. */
 560:FreeRTOS/event_groups.c ****         while( pxListItem != pxListEnd )
 561:FreeRTOS/event_groups.c ****         {
 562:FreeRTOS/event_groups.c ****             pxNext = listGET_NEXT( pxListItem );
 563:FreeRTOS/event_groups.c ****             uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 564:FreeRTOS/event_groups.c ****             xMatchFound = pdFALSE;
 565:FreeRTOS/event_groups.c **** 
 566:FreeRTOS/event_groups.c ****             /* Split the bits waited for from the control bits. */
 567:FreeRTOS/event_groups.c ****             uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 568:FreeRTOS/event_groups.c ****             uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 569:FreeRTOS/event_groups.c **** 
 570:FreeRTOS/event_groups.c ****             if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 571:FreeRTOS/event_groups.c ****             {
 572:FreeRTOS/event_groups.c ****                 /* Just looking for single bit being set. */
 573:FreeRTOS/event_groups.c ****                 if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 574:FreeRTOS/event_groups.c ****                 {
 575:FreeRTOS/event_groups.c ****                     xMatchFound = pdTRUE;
 576:FreeRTOS/event_groups.c ****                 }
 577:FreeRTOS/event_groups.c ****                 else
 578:FreeRTOS/event_groups.c ****                 {
 579:FreeRTOS/event_groups.c ****                     mtCOVERAGE_TEST_MARKER();
 580:FreeRTOS/event_groups.c ****                 }
 581:FreeRTOS/event_groups.c ****             }
 582:FreeRTOS/event_groups.c ****             else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 583:FreeRTOS/event_groups.c ****             {
 584:FreeRTOS/event_groups.c ****                 /* All bits are set. */
 585:FreeRTOS/event_groups.c ****                 xMatchFound = pdTRUE;
 586:FreeRTOS/event_groups.c ****             }
 587:FreeRTOS/event_groups.c ****             else
 588:FreeRTOS/event_groups.c ****             {
 589:FreeRTOS/event_groups.c ****                 /* Need all bits to be set, but not all the bits were set. */
 590:FreeRTOS/event_groups.c ****             }
 591:FreeRTOS/event_groups.c **** 
 592:FreeRTOS/event_groups.c ****             if( xMatchFound != pdFALSE )
 593:FreeRTOS/event_groups.c ****             {
 594:FreeRTOS/event_groups.c ****                 /* The bits match.  Should the bits be cleared on exit? */
 595:FreeRTOS/event_groups.c ****                 if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 596:FreeRTOS/event_groups.c ****                 {
 597:FreeRTOS/event_groups.c ****                     uxBitsToClear |= uxBitsWaitedFor;
 598:FreeRTOS/event_groups.c ****                 }
 599:FreeRTOS/event_groups.c ****                 else
 600:FreeRTOS/event_groups.c ****                 {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 12


 601:FreeRTOS/event_groups.c ****                     mtCOVERAGE_TEST_MARKER();
 602:FreeRTOS/event_groups.c ****                 }
 603:FreeRTOS/event_groups.c **** 
 604:FreeRTOS/event_groups.c ****                 /* Store the actual event flag value in the task's event list
 605:FreeRTOS/event_groups.c ****                  * item before removing the task from the event list.  The
 606:FreeRTOS/event_groups.c ****                  * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
 607:FreeRTOS/event_groups.c ****                  * that is was unblocked due to its required bits matching, rather
 608:FreeRTOS/event_groups.c ****                  * than because it timed out. */
 609:FreeRTOS/event_groups.c ****                 vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBL
 610:FreeRTOS/event_groups.c ****             }
 611:FreeRTOS/event_groups.c **** 
 612:FreeRTOS/event_groups.c ****             /* Move onto the next list item.  Note pxListItem->pxNext is not
 613:FreeRTOS/event_groups.c ****              * used here as the list item may have been removed from the event list
 614:FreeRTOS/event_groups.c ****              * and inserted into the ready/pending reading list. */
 615:FreeRTOS/event_groups.c ****             pxListItem = pxNext;
 616:FreeRTOS/event_groups.c ****         }
 617:FreeRTOS/event_groups.c **** 
 618:FreeRTOS/event_groups.c ****         /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
 619:FreeRTOS/event_groups.c ****          * bit was set in the control word. */
 620:FreeRTOS/event_groups.c ****         pxEventBits->uxEventBits &= ~uxBitsToClear;
 621:FreeRTOS/event_groups.c ****     }
 622:FreeRTOS/event_groups.c ****     ( void ) xTaskResumeAll();
 623:FreeRTOS/event_groups.c **** 
 624:FreeRTOS/event_groups.c ****     return pxEventBits->uxEventBits;
 625:FreeRTOS/event_groups.c **** }
 626:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 627:FreeRTOS/event_groups.c **** 
 628:FreeRTOS/event_groups.c **** void vEventGroupDelete( EventGroupHandle_t xEventGroup )
 629:FreeRTOS/event_groups.c **** {
 630:FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 631:FreeRTOS/event_groups.c ****     const List_t * pxTasksWaitingForBits;
 632:FreeRTOS/event_groups.c **** 
 633:FreeRTOS/event_groups.c ****     configASSERT( pxEventBits );
 634:FreeRTOS/event_groups.c **** 
 635:FreeRTOS/event_groups.c ****     pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 636:FreeRTOS/event_groups.c **** 
 637:FreeRTOS/event_groups.c ****     vTaskSuspendAll();
 638:FreeRTOS/event_groups.c ****     {
 639:FreeRTOS/event_groups.c ****         traceEVENT_GROUP_DELETE( xEventGroup );
 640:FreeRTOS/event_groups.c **** 
 641:FreeRTOS/event_groups.c ****         while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 642:FreeRTOS/event_groups.c ****         {
 643:FreeRTOS/event_groups.c ****             /* Unblock the task, returning 0 as the event list is being deleted
 644:FreeRTOS/event_groups.c ****              * and cannot therefore have any bits set. */
 645:FreeRTOS/event_groups.c ****             configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTas
 646:FreeRTOS/event_groups.c ****             vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCK
 647:FreeRTOS/event_groups.c ****         }
 648:FreeRTOS/event_groups.c **** 
 649:FreeRTOS/event_groups.c ****         #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 )
 650:FreeRTOS/event_groups.c ****             {
 651:FreeRTOS/event_groups.c ****                 /* The event group can only have been allocated dynamically - free
 652:FreeRTOS/event_groups.c ****                  * it again. */
 653:FreeRTOS/event_groups.c ****                 vPortFree( pxEventBits );
 654:FreeRTOS/event_groups.c ****             }
 655:FreeRTOS/event_groups.c ****         #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1
 656:FreeRTOS/event_groups.c ****             {
 657:FreeRTOS/event_groups.c ****                 /* The event group could have been allocated statically or
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 13


 658:FreeRTOS/event_groups.c ****                  * dynamically, so check before attempting to free the memory. */
 659:FreeRTOS/event_groups.c ****                 if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 660:FreeRTOS/event_groups.c ****                 {
 661:FreeRTOS/event_groups.c ****                     vPortFree( pxEventBits );
 662:FreeRTOS/event_groups.c ****                 }
 663:FreeRTOS/event_groups.c ****                 else
 664:FreeRTOS/event_groups.c ****                 {
 665:FreeRTOS/event_groups.c ****                     mtCOVERAGE_TEST_MARKER();
 666:FreeRTOS/event_groups.c ****                 }
 667:FreeRTOS/event_groups.c ****             }
 668:FreeRTOS/event_groups.c ****         #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 669:FreeRTOS/event_groups.c ****     }
 670:FreeRTOS/event_groups.c ****     ( void ) xTaskResumeAll();
 671:FreeRTOS/event_groups.c **** }
 672:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 673:FreeRTOS/event_groups.c **** 
 674:FreeRTOS/event_groups.c **** /* For internal use only - execute a 'set bits' command that was pended from
 675:FreeRTOS/event_groups.c ****  * an interrupt. */
 676:FreeRTOS/event_groups.c **** void vEventGroupSetBitsCallback( void * pvEventGroup,
 677:FreeRTOS/event_groups.c ****                                  const uint32_t ulBitsToSet )
 678:FreeRTOS/event_groups.c **** {
 679:FreeRTOS/event_groups.c ****     ( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't a
 680:FreeRTOS/event_groups.c **** }
 681:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 682:FreeRTOS/event_groups.c **** 
 683:FreeRTOS/event_groups.c **** /* For internal use only - execute a 'clear bits' command that was pended from
 684:FreeRTOS/event_groups.c ****  * an interrupt. */
 685:FreeRTOS/event_groups.c **** void vEventGroupClearBitsCallback( void * pvEventGroup,
 686:FreeRTOS/event_groups.c ****                                    const uint32_t ulBitsToClear )
 687:FreeRTOS/event_groups.c **** {
 688:FreeRTOS/event_groups.c ****     ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can
 689:FreeRTOS/event_groups.c **** }
 690:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 691:FreeRTOS/event_groups.c **** 
 692:FreeRTOS/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
 693:FreeRTOS/event_groups.c ****                                         const EventBits_t uxBitsToWaitFor,
 694:FreeRTOS/event_groups.c ****                                         const BaseType_t xWaitForAllBits )
 695:FreeRTOS/event_groups.c **** {
  29              		.loc 1 695 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 696:FreeRTOS/event_groups.c ****     BaseType_t xWaitConditionMet = pdFALSE;
  34              		.loc 1 696 5 view .LVU1
 697:FreeRTOS/event_groups.c **** 
 698:FreeRTOS/event_groups.c ****     if( xWaitForAllBits == pdFALSE )
  35              		.loc 1 698 5 view .LVU2
  36              		.loc 1 698 7 is_stmt 0 view .LVU3
  37 0000 1AB9     		cbnz	r2, .L2
 699:FreeRTOS/event_groups.c ****     {
 700:FreeRTOS/event_groups.c ****         /* Task only has to wait for one bit within uxBitsToWaitFor to be
 701:FreeRTOS/event_groups.c ****          * set.  Is one already set? */
 702:FreeRTOS/event_groups.c ****         if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
  38              		.loc 1 702 9 is_stmt 1 view .LVU4
  39              		.loc 1 702 11 is_stmt 0 view .LVU5
  40 0002 0842     		tst	r0, r1
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 14


  41 0004 06D1     		bne	.L4
 696:FreeRTOS/event_groups.c **** 
  42              		.loc 1 696 16 view .LVU6
  43 0006 1046     		mov	r0, r2
  44              	.LVL1:
 696:FreeRTOS/event_groups.c **** 
  45              		.loc 1 696 16 view .LVU7
  46 0008 7047     		bx	lr
  47              	.LVL2:
  48              	.L2:
 703:FreeRTOS/event_groups.c ****         {
 704:FreeRTOS/event_groups.c ****             xWaitConditionMet = pdTRUE;
 705:FreeRTOS/event_groups.c ****         }
 706:FreeRTOS/event_groups.c ****         else
 707:FreeRTOS/event_groups.c ****         {
 708:FreeRTOS/event_groups.c ****             mtCOVERAGE_TEST_MARKER();
 709:FreeRTOS/event_groups.c ****         }
 710:FreeRTOS/event_groups.c ****     }
 711:FreeRTOS/event_groups.c ****     else
 712:FreeRTOS/event_groups.c ****     {
 713:FreeRTOS/event_groups.c ****         /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
 714:FreeRTOS/event_groups.c ****          * Are they set already? */
 715:FreeRTOS/event_groups.c ****         if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
  49              		.loc 1 715 9 is_stmt 1 view .LVU8
  50              		.loc 1 715 11 is_stmt 0 view .LVU9
  51 000a 31EA0003 		bics	r3, r1, r0
  52 000e 03D0     		beq	.L5
 696:FreeRTOS/event_groups.c **** 
  53              		.loc 1 696 16 view .LVU10
  54 0010 0020     		movs	r0, #0
  55              	.LVL3:
 696:FreeRTOS/event_groups.c **** 
  56              		.loc 1 696 16 view .LVU11
  57 0012 7047     		bx	lr
  58              	.LVL4:
  59              	.L4:
 704:FreeRTOS/event_groups.c ****         }
  60              		.loc 1 704 31 view .LVU12
  61 0014 0120     		movs	r0, #1
  62              	.LVL5:
 704:FreeRTOS/event_groups.c ****         }
  63              		.loc 1 704 31 view .LVU13
  64 0016 7047     		bx	lr
  65              	.LVL6:
  66              	.L5:
 716:FreeRTOS/event_groups.c ****         {
 717:FreeRTOS/event_groups.c ****             xWaitConditionMet = pdTRUE;
  67              		.loc 1 717 31 view .LVU14
  68 0018 0120     		movs	r0, #1
  69              	.LVL7:
 718:FreeRTOS/event_groups.c ****         }
 719:FreeRTOS/event_groups.c ****         else
 720:FreeRTOS/event_groups.c ****         {
 721:FreeRTOS/event_groups.c ****             mtCOVERAGE_TEST_MARKER();
  70              		.loc 1 721 37 is_stmt 1 view .LVU15
 722:FreeRTOS/event_groups.c ****         }
 723:FreeRTOS/event_groups.c ****     }
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 15


 724:FreeRTOS/event_groups.c **** 
 725:FreeRTOS/event_groups.c ****     return xWaitConditionMet;
  71              		.loc 1 725 5 view .LVU16
 726:FreeRTOS/event_groups.c **** }
  72              		.loc 1 726 1 is_stmt 0 view .LVU17
  73 001a 7047     		bx	lr
  74              		.cfi_endproc
  75              	.LFE15:
  77              		.section	.text.xEventGroupCreateStatic,"ax",%progbits
  78              		.align	1
  79              		.global	xEventGroupCreateStatic
  80              		.syntax unified
  81              		.thumb
  82              		.thumb_func
  83              		.fpu fpv4-sp-d16
  85              	xEventGroupCreateStatic:
  86              	.LVL8:
  87              	.LFB5:
  97:FreeRTOS/event_groups.c ****         EventGroup_t * pxEventBits;
  88              		.loc 1 97 5 is_stmt 1 view -0
  89              		.cfi_startproc
  90              		@ args = 0, pretend = 0, frame = 8
  91              		@ frame_needed = 0, uses_anonymous_args = 0
  98:FreeRTOS/event_groups.c **** 
  92              		.loc 1 98 9 view .LVU19
 101:FreeRTOS/event_groups.c **** 
  93              		.loc 1 101 9 view .LVU20
  94 0000 80B1     		cbz	r0, .L13
  97:FreeRTOS/event_groups.c ****         EventGroup_t * pxEventBits;
  95              		.loc 1 97 5 is_stmt 0 discriminator 2 view .LVU21
  96 0002 10B5     		push	{r4, lr}
  97              	.LCFI0:
  98              		.cfi_def_cfa_offset 8
  99              		.cfi_offset 4, -8
 100              		.cfi_offset 14, -4
 101 0004 82B0     		sub	sp, sp, #8
 102              	.LCFI1:
 103              		.cfi_def_cfa_offset 16
 104 0006 0446     		mov	r4, r0
 101:FreeRTOS/event_groups.c **** 
 105              		.loc 1 101 43 is_stmt 1 discriminator 2 view .LVU22
 106              	.LBB38:
 108:FreeRTOS/event_groups.c ****                 configASSERT( xSize == sizeof( EventGroup_t ) );
 107              		.loc 1 108 17 discriminator 2 view .LVU23
 108:FreeRTOS/event_groups.c ****                 configASSERT( xSize == sizeof( EventGroup_t ) );
 108              		.loc 1 108 33 is_stmt 0 discriminator 2 view .LVU24
 109 0008 2023     		movs	r3, #32
 110 000a 0193     		str	r3, [sp, #4]
 109:FreeRTOS/event_groups.c ****             } /*lint !e529 xSize is referenced if configASSERT() is defined. */
 111              		.loc 1 109 17 is_stmt 1 discriminator 2 view .LVU25
 112 000c 019B     		ldr	r3, [sp, #4]
 113 000e 202B     		cmp	r3, #32
 114 0010 11D0     		beq	.L9
 109:FreeRTOS/event_groups.c ****             } /*lint !e529 xSize is referenced if configASSERT() is defined. */
 115              		.loc 1 109 17 view .LVU26
 116              	.LBB39:
 117              	.LBI39:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 16


 118              		.file 2 "FreeRTOS/portable/portmacro.h"
   1:FreeRTOS/portable/portmacro.h **** /*
   2:FreeRTOS/portable/portmacro.h ****  * FreeRTOS Kernel V10.4.6
   3:FreeRTOS/portable/portmacro.h ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/portable/portmacro.h ****  *
   5:FreeRTOS/portable/portmacro.h ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS/portable/portmacro.h ****  *
   7:FreeRTOS/portable/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS/portable/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS/portable/portmacro.h ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS/portable/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS/portable/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS/portable/portmacro.h ****  * subject to the following conditions:
  13:FreeRTOS/portable/portmacro.h ****  *
  14:FreeRTOS/portable/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS/portable/portmacro.h ****  * copies or substantial portions of the Software.
  16:FreeRTOS/portable/portmacro.h ****  *
  17:FreeRTOS/portable/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS/portable/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS/portable/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS/portable/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS/portable/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS/portable/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS/portable/portmacro.h ****  *
  24:FreeRTOS/portable/portmacro.h ****  * https://www.FreeRTOS.org
  25:FreeRTOS/portable/portmacro.h ****  * https://github.com/FreeRTOS
  26:FreeRTOS/portable/portmacro.h ****  *
  27:FreeRTOS/portable/portmacro.h ****  */
  28:FreeRTOS/portable/portmacro.h **** 
  29:FreeRTOS/portable/portmacro.h **** 
  30:FreeRTOS/portable/portmacro.h **** #ifndef PORTMACRO_H
  31:FreeRTOS/portable/portmacro.h ****     #define PORTMACRO_H
  32:FreeRTOS/portable/portmacro.h **** 
  33:FreeRTOS/portable/portmacro.h ****     #ifdef __cplusplus
  34:FreeRTOS/portable/portmacro.h ****         extern "C" {
  35:FreeRTOS/portable/portmacro.h ****     #endif
  36:FreeRTOS/portable/portmacro.h **** 
  37:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------
  38:FreeRTOS/portable/portmacro.h ****  * Port specific definitions.
  39:FreeRTOS/portable/portmacro.h ****  *
  40:FreeRTOS/portable/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  41:FreeRTOS/portable/portmacro.h ****  * given hardware and compiler.
  42:FreeRTOS/portable/portmacro.h ****  *
  43:FreeRTOS/portable/portmacro.h ****  * These settings should not be altered.
  44:FreeRTOS/portable/portmacro.h ****  *-----------------------------------------------------------
  45:FreeRTOS/portable/portmacro.h ****  */
  46:FreeRTOS/portable/portmacro.h **** 
  47:FreeRTOS/portable/portmacro.h **** /* Type definitions. */
  48:FreeRTOS/portable/portmacro.h ****     #define portCHAR          char
  49:FreeRTOS/portable/portmacro.h ****     #define portFLOAT         float
  50:FreeRTOS/portable/portmacro.h ****     #define portDOUBLE        double
  51:FreeRTOS/portable/portmacro.h ****     #define portLONG          long
  52:FreeRTOS/portable/portmacro.h ****     #define portSHORT         short
  53:FreeRTOS/portable/portmacro.h ****     #define portSTACK_TYPE    uint32_t
  54:FreeRTOS/portable/portmacro.h ****     #define portBASE_TYPE     long
  55:FreeRTOS/portable/portmacro.h **** 
  56:FreeRTOS/portable/portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 17


  57:FreeRTOS/portable/portmacro.h ****     typedef long             BaseType_t;
  58:FreeRTOS/portable/portmacro.h ****     typedef unsigned long    UBaseType_t;
  59:FreeRTOS/portable/portmacro.h **** 
  60:FreeRTOS/portable/portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  61:FreeRTOS/portable/portmacro.h ****         typedef uint16_t     TickType_t;
  62:FreeRTOS/portable/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  63:FreeRTOS/portable/portmacro.h ****     #else
  64:FreeRTOS/portable/portmacro.h ****         typedef uint32_t     TickType_t;
  65:FreeRTOS/portable/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  66:FreeRTOS/portable/portmacro.h **** 
  67:FreeRTOS/portable/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  68:FreeRTOS/portable/portmacro.h ****  * not need to be guarded with a critical section. */
  69:FreeRTOS/portable/portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  70:FreeRTOS/portable/portmacro.h ****     #endif
  71:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
  72:FreeRTOS/portable/portmacro.h **** 
  73:FreeRTOS/portable/portmacro.h **** /* Architecture specifics. */
  74:FreeRTOS/portable/portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  75:FreeRTOS/portable/portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  76:FreeRTOS/portable/portmacro.h ****     #define portBYTE_ALIGNMENT    8
  77:FreeRTOS/portable/portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  78:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
  79:FreeRTOS/portable/portmacro.h **** 
  80:FreeRTOS/portable/portmacro.h **** /* Scheduler utilities. */
  81:FreeRTOS/portable/portmacro.h ****     #define portYIELD()                                 \
  82:FreeRTOS/portable/portmacro.h ****     {                                                   \
  83:FreeRTOS/portable/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  84:FreeRTOS/portable/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  85:FreeRTOS/portable/portmacro.h ****                                                         \
  86:FreeRTOS/portable/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  87:FreeRTOS/portable/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  88:FreeRTOS/portable/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  89:FreeRTOS/portable/portmacro.h ****         __asm volatile ( "isb" );                                  \
  90:FreeRTOS/portable/portmacro.h ****     }
  91:FreeRTOS/portable/portmacro.h **** 
  92:FreeRTOS/portable/portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  93:FreeRTOS/portable/portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  94:FreeRTOS/portable/portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    do { if( xSwitchRequired != pdFALSE ) portY
  95:FreeRTOS/portable/portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  96:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
  97:FreeRTOS/portable/portmacro.h **** 
  98:FreeRTOS/portable/portmacro.h **** /* Critical section management. */
  99:FreeRTOS/portable/portmacro.h ****     extern void vPortEnterCritical( void );
 100:FreeRTOS/portable/portmacro.h ****     extern void vPortExitCritical( void );
 101:FreeRTOS/portable/portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 102:FreeRTOS/portable/portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 103:FreeRTOS/portable/portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 104:FreeRTOS/portable/portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 105:FreeRTOS/portable/portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 106:FreeRTOS/portable/portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 107:FreeRTOS/portable/portmacro.h **** 
 108:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
 109:FreeRTOS/portable/portmacro.h **** 
 110:FreeRTOS/portable/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 111:FreeRTOS/portable/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 112:FreeRTOS/portable/portmacro.h ****  * (which build with all the ports) will build. */
 113:FreeRTOS/portable/portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 18


 114:FreeRTOS/portable/portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 115:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
 116:FreeRTOS/portable/portmacro.h **** 
 117:FreeRTOS/portable/portmacro.h **** /* Tickless idle/low power functionality. */
 118:FreeRTOS/portable/portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 119:FreeRTOS/portable/portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 120:FreeRTOS/portable/portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 121:FreeRTOS/portable/portmacro.h ****     #endif
 122:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
 123:FreeRTOS/portable/portmacro.h **** 
 124:FreeRTOS/portable/portmacro.h **** /* Architecture specific optimisations. */
 125:FreeRTOS/portable/portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 126:FreeRTOS/portable/portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 127:FreeRTOS/portable/portmacro.h ****     #endif
 128:FreeRTOS/portable/portmacro.h **** 
 129:FreeRTOS/portable/portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 130:FreeRTOS/portable/portmacro.h **** 
 131:FreeRTOS/portable/portmacro.h **** /* Generic helper function. */
 132:FreeRTOS/portable/portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 133:FreeRTOS/portable/portmacro.h ****         {
 134:FreeRTOS/portable/portmacro.h ****             uint8_t ucReturn;
 135:FreeRTOS/portable/portmacro.h **** 
 136:FreeRTOS/portable/portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 137:FreeRTOS/portable/portmacro.h **** 
 138:FreeRTOS/portable/portmacro.h ****             return ucReturn;
 139:FreeRTOS/portable/portmacro.h ****         }
 140:FreeRTOS/portable/portmacro.h **** 
 141:FreeRTOS/portable/portmacro.h **** /* Check the configuration. */
 142:FreeRTOS/portable/portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 143:FreeRTOS/portable/portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 144:FreeRTOS/portable/portmacro.h ****         #endif
 145:FreeRTOS/portable/portmacro.h **** 
 146:FreeRTOS/portable/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 147:FreeRTOS/portable/portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 148:FreeRTOS/portable/portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 149:FreeRTOS/portable/portmacro.h **** 
 150:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
 151:FreeRTOS/portable/portmacro.h **** 
 152:FreeRTOS/portable/portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 153:FreeRTOS/portable/portmacro.h **** 
 154:FreeRTOS/portable/portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 155:FreeRTOS/portable/portmacro.h **** 
 156:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
 157:FreeRTOS/portable/portmacro.h **** 
 158:FreeRTOS/portable/portmacro.h ****     #ifdef configASSERT
 159:FreeRTOS/portable/portmacro.h ****         void vPortValidateInterruptPriority( void );
 160:FreeRTOS/portable/portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 161:FreeRTOS/portable/portmacro.h ****     #endif
 162:FreeRTOS/portable/portmacro.h **** 
 163:FreeRTOS/portable/portmacro.h **** /* portNOP() is not required by this port. */
 164:FreeRTOS/portable/portmacro.h ****     #define portNOP()
 165:FreeRTOS/portable/portmacro.h **** 
 166:FreeRTOS/portable/portmacro.h ****     #define portINLINE              __inline
 167:FreeRTOS/portable/portmacro.h **** 
 168:FreeRTOS/portable/portmacro.h ****     #ifndef portFORCE_INLINE
 169:FreeRTOS/portable/portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 170:FreeRTOS/portable/portmacro.h ****     #endif
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 19


 171:FreeRTOS/portable/portmacro.h **** 
 172:FreeRTOS/portable/portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 173:FreeRTOS/portable/portmacro.h ****     {
 174:FreeRTOS/portable/portmacro.h ****         uint32_t ulCurrentInterrupt;
 175:FreeRTOS/portable/portmacro.h ****         BaseType_t xReturn;
 176:FreeRTOS/portable/portmacro.h **** 
 177:FreeRTOS/portable/portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 178:FreeRTOS/portable/portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 179:FreeRTOS/portable/portmacro.h **** 
 180:FreeRTOS/portable/portmacro.h ****         if( ulCurrentInterrupt == 0 )
 181:FreeRTOS/portable/portmacro.h ****         {
 182:FreeRTOS/portable/portmacro.h ****             xReturn = pdFALSE;
 183:FreeRTOS/portable/portmacro.h ****         }
 184:FreeRTOS/portable/portmacro.h ****         else
 185:FreeRTOS/portable/portmacro.h ****         {
 186:FreeRTOS/portable/portmacro.h ****             xReturn = pdTRUE;
 187:FreeRTOS/portable/portmacro.h ****         }
 188:FreeRTOS/portable/portmacro.h **** 
 189:FreeRTOS/portable/portmacro.h ****         return xReturn;
 190:FreeRTOS/portable/portmacro.h ****     }
 191:FreeRTOS/portable/portmacro.h **** 
 192:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
 193:FreeRTOS/portable/portmacro.h **** 
 194:FreeRTOS/portable/portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 119              		.loc 2 194 34 view .LVU27
 120              	.LBB40:
 195:FreeRTOS/portable/portmacro.h ****     {
 196:FreeRTOS/portable/portmacro.h ****         uint32_t ulNewBASEPRI;
 121              		.loc 2 196 9 view .LVU28
 197:FreeRTOS/portable/portmacro.h **** 
 198:FreeRTOS/portable/portmacro.h ****         __asm volatile
 122              		.loc 2 198 9 view .LVU29
 123              		.syntax unified
 124              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 125 0012 4FF05003 			mov r3, #80												
 126 0016 83F31188 		msr basepri, r3											
 127 001a BFF36F8F 		isb														
 128 001e BFF34F8F 		dsb														
 129              	
 130              	@ 0 "" 2
 131              	.LVL9:
 132              		.thumb
 133              		.syntax unified
 134              	.L10:
 135              		.loc 2 198 9 is_stmt 0 view .LVU30
 136              	.LBE40:
 137              	.LBE39:
 109:FreeRTOS/event_groups.c ****             } /*lint !e529 xSize is referenced if configASSERT() is defined. */
 138              		.loc 1 109 17 is_stmt 1 discriminator 2 view .LVU31
 109:FreeRTOS/event_groups.c ****             } /*lint !e529 xSize is referenced if configASSERT() is defined. */
 139              		.loc 1 109 17 discriminator 2 view .LVU32
 109:FreeRTOS/event_groups.c ****             } /*lint !e529 xSize is referenced if configASSERT() is defined. */
 140              		.loc 1 109 17 discriminator 2 view .LVU33
 141 0022 FEE7     		b	.L10
 142              	.L13:
 143              	.LCFI2:
 144              		.cfi_def_cfa_offset 0
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 20


 145              		.cfi_restore 4
 146              		.cfi_restore 14
 109:FreeRTOS/event_groups.c ****             } /*lint !e529 xSize is referenced if configASSERT() is defined. */
 147              		.loc 1 109 17 is_stmt 0 discriminator 2 view .LVU34
 148              	.LBE38:
 101:FreeRTOS/event_groups.c **** 
 149              		.loc 1 101 9 is_stmt 1 view .LVU35
 150              	.LBB41:
 151              	.LBI41:
 194:FreeRTOS/portable/portmacro.h ****     {
 152              		.loc 2 194 34 view .LVU36
 153              	.LBB42:
 196:FreeRTOS/portable/portmacro.h **** 
 154              		.loc 2 196 9 view .LVU37
 155              		.loc 2 198 9 view .LVU38
 156              		.syntax unified
 157              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 158 0024 4FF05003 			mov r3, #80												
 159 0028 83F31188 		msr basepri, r3											
 160 002c BFF36F8F 		isb														
 161 0030 BFF34F8F 		dsb														
 162              	
 163              	@ 0 "" 2
 164              	.LVL10:
 165              		.thumb
 166              		.syntax unified
 167              	.L8:
 168              		.loc 2 198 9 is_stmt 0 view .LVU39
 169              	.LBE42:
 170              	.LBE41:
 101:FreeRTOS/event_groups.c **** 
 171              		.loc 1 101 9 is_stmt 1 discriminator 1 view .LVU40
 101:FreeRTOS/event_groups.c **** 
 172              		.loc 1 101 9 discriminator 1 view .LVU41
 101:FreeRTOS/event_groups.c **** 
 173              		.loc 1 101 9 discriminator 1 view .LVU42
 174 0034 FEE7     		b	.L8
 175              	.L9:
 176              	.LCFI3:
 177              		.cfi_def_cfa_offset 16
 178              		.cfi_offset 4, -8
 179              		.cfi_offset 14, -4
 180              	.LBB43:
 109:FreeRTOS/event_groups.c ****             } /*lint !e529 xSize is referenced if configASSERT() is defined. */
 181              		.loc 1 109 64 view .LVU43
 182              	.LBE43:
 114:FreeRTOS/event_groups.c **** 
 183              		.loc 1 114 9 view .LVU44
 184              	.LVL11:
 116:FreeRTOS/event_groups.c ****         {
 185              		.loc 1 116 9 view .LVU45
 118:FreeRTOS/event_groups.c ****             vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 186              		.loc 1 118 13 view .LVU46
 118:FreeRTOS/event_groups.c ****             vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 187              		.loc 1 118 38 is_stmt 0 view .LVU47
 188 0036 0023     		movs	r3, #0
 189 0038 40F8043B 		str	r3, [r0], #4
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 21


 190              	.LVL12:
 119:FreeRTOS/event_groups.c **** 
 191              		.loc 1 119 13 is_stmt 1 view .LVU48
 192 003c FFF7FEFF 		bl	vListInitialise
 193              	.LVL13:
 126:FreeRTOS/event_groups.c ****                 }
 194              		.loc 1 126 21 view .LVU49
 126:FreeRTOS/event_groups.c ****                 }
 195              		.loc 1 126 56 is_stmt 0 view .LVU50
 196 0040 0123     		movs	r3, #1
 197 0042 2377     		strb	r3, [r4, #28]
 130:FreeRTOS/event_groups.c ****         }
 198              		.loc 1 130 51 is_stmt 1 view .LVU51
 137:FreeRTOS/event_groups.c ****         }
 199              		.loc 1 137 45 view .LVU52
 140:FreeRTOS/event_groups.c ****     }
 200              		.loc 1 140 9 view .LVU53
 141:FreeRTOS/event_groups.c **** 
 201              		.loc 1 141 5 is_stmt 0 view .LVU54
 202 0044 2046     		mov	r0, r4
 203 0046 02B0     		add	sp, sp, #8
 204              	.LCFI4:
 205              		.cfi_def_cfa_offset 8
 206              		@ sp needed
 207 0048 10BD     		pop	{r4, pc}
 141:FreeRTOS/event_groups.c **** 
 208              		.loc 1 141 5 view .LVU55
 209              		.cfi_endproc
 210              	.LFE5:
 212              		.section	.text.xEventGroupCreate,"ax",%progbits
 213              		.align	1
 214              		.global	xEventGroupCreate
 215              		.syntax unified
 216              		.thumb
 217              		.thumb_func
 218              		.fpu fpv4-sp-d16
 220              	xEventGroupCreate:
 221              	.LFB6:
 149:FreeRTOS/event_groups.c ****         EventGroup_t * pxEventBits;
 222              		.loc 1 149 5 is_stmt 1 view -0
 223              		.cfi_startproc
 224              		@ args = 0, pretend = 0, frame = 0
 225              		@ frame_needed = 0, uses_anonymous_args = 0
 226 0000 38B5     		push	{r3, r4, r5, lr}
 227              	.LCFI5:
 228              		.cfi_def_cfa_offset 16
 229              		.cfi_offset 3, -16
 230              		.cfi_offset 4, -12
 231              		.cfi_offset 5, -8
 232              		.cfi_offset 14, -4
 150:FreeRTOS/event_groups.c **** 
 233              		.loc 1 150 9 view .LVU57
 165:FreeRTOS/event_groups.c **** 
 234              		.loc 1 165 9 view .LVU58
 165:FreeRTOS/event_groups.c **** 
 235              		.loc 1 165 42 is_stmt 0 view .LVU59
 236 0002 2020     		movs	r0, #32
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 22


 237 0004 FFF7FEFF 		bl	pvPortMalloc
 238              	.LVL14:
 167:FreeRTOS/event_groups.c ****         {
 239              		.loc 1 167 9 is_stmt 1 view .LVU60
 167:FreeRTOS/event_groups.c ****         {
 240              		.loc 1 167 11 is_stmt 0 view .LVU61
 241 0008 0446     		mov	r4, r0
 242 000a 28B1     		cbz	r0, .L14
 169:FreeRTOS/event_groups.c ****             vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 243              		.loc 1 169 13 is_stmt 1 view .LVU62
 169:FreeRTOS/event_groups.c ****             vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 244              		.loc 1 169 38 is_stmt 0 view .LVU63
 245 000c 0025     		movs	r5, #0
 246 000e 40F8045B 		str	r5, [r0], #4
 247              	.LVL15:
 170:FreeRTOS/event_groups.c **** 
 248              		.loc 1 170 13 is_stmt 1 view .LVU64
 249 0012 FFF7FEFF 		bl	vListInitialise
 250              	.LVL16:
 177:FreeRTOS/event_groups.c ****                 }
 251              		.loc 1 177 21 view .LVU65
 177:FreeRTOS/event_groups.c ****                 }
 252              		.loc 1 177 56 is_stmt 0 view .LVU66
 253 0016 2577     		strb	r5, [r4, #28]
 181:FreeRTOS/event_groups.c ****         }
 254              		.loc 1 181 51 is_stmt 1 view .LVU67
 185:FreeRTOS/event_groups.c ****         }
 255              		.loc 1 185 45 view .LVU68
 188:FreeRTOS/event_groups.c ****     }
 256              		.loc 1 188 9 view .LVU69
 257              	.L14:
 189:FreeRTOS/event_groups.c **** 
 258              		.loc 1 189 5 is_stmt 0 view .LVU70
 259 0018 2046     		mov	r0, r4
 260 001a 38BD     		pop	{r3, r4, r5, pc}
 189:FreeRTOS/event_groups.c **** 
 261              		.loc 1 189 5 view .LVU71
 262              		.cfi_endproc
 263              	.LFE6:
 265              		.section	.text.xEventGroupWaitBits,"ax",%progbits
 266              		.align	1
 267              		.global	xEventGroupWaitBits
 268              		.syntax unified
 269              		.thumb
 270              		.thumb_func
 271              		.fpu fpv4-sp-d16
 273              	xEventGroupWaitBits:
 274              	.LVL17:
 275              	.LFB8:
 322:FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 276              		.loc 1 322 1 is_stmt 1 view -0
 277              		.cfi_startproc
 278              		@ args = 4, pretend = 0, frame = 0
 279              		@ frame_needed = 0, uses_anonymous_args = 0
 322:FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 280              		.loc 1 322 1 is_stmt 0 view .LVU73
 281 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 23


 282              	.LCFI6:
 283              		.cfi_def_cfa_offset 32
 284              		.cfi_offset 4, -32
 285              		.cfi_offset 5, -28
 286              		.cfi_offset 6, -24
 287              		.cfi_offset 7, -20
 288              		.cfi_offset 8, -16
 289              		.cfi_offset 9, -12
 290              		.cfi_offset 10, -8
 291              		.cfi_offset 14, -4
 292 0004 DDF820A0 		ldr	r10, [sp, #32]
 323:FreeRTOS/event_groups.c ****     EventBits_t uxReturn, uxControlBits = 0;
 293              		.loc 1 323 5 is_stmt 1 view .LVU74
 294              	.LVL18:
 324:FreeRTOS/event_groups.c ****     BaseType_t xWaitConditionMet, xAlreadyYielded;
 295              		.loc 1 324 5 view .LVU75
 325:FreeRTOS/event_groups.c ****     BaseType_t xTimeoutOccurred = pdFALSE;
 296              		.loc 1 325 5 view .LVU76
 326:FreeRTOS/event_groups.c **** 
 297              		.loc 1 326 5 view .LVU77
 330:FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 298              		.loc 1 330 5 view .LVU78
 299 0008 78B1     		cbz	r0, .L37
 300 000a 0D46     		mov	r5, r1
 301 000c 1746     		mov	r7, r2
 302 000e 9846     		mov	r8, r3
 303 0010 0646     		mov	r6, r0
 330:FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 304              		.loc 1 330 32 discriminator 2 view .LVU79
 331:FreeRTOS/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 305              		.loc 1 331 5 discriminator 2 view .LVU80
 306 0012 11F07F49 		ands	r9, r1, #-16777216
 307 0016 11D0     		beq	.L20
 331:FreeRTOS/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 308              		.loc 1 331 5 view .LVU81
 309              	.LBB44:
 310              	.LBI44:
 194:FreeRTOS/portable/portmacro.h ****     {
 311              		.loc 2 194 34 view .LVU82
 312              	.LBB45:
 196:FreeRTOS/portable/portmacro.h **** 
 313              		.loc 2 196 9 view .LVU83
 314              		.loc 2 198 9 view .LVU84
 315              		.syntax unified
 316              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 317 0018 4FF05003 			mov r3, #80												
 318 001c 83F31188 		msr basepri, r3											
 319 0020 BFF36F8F 		isb														
 320 0024 BFF34F8F 		dsb														
 321              	
 322              	@ 0 "" 2
 323              	.LVL19:
 324              		.thumb
 325              		.syntax unified
 326              	.L21:
 327              		.loc 2 198 9 is_stmt 0 view .LVU85
 328              	.LBE45:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 24


 329              	.LBE44:
 331:FreeRTOS/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 330              		.loc 1 331 5 is_stmt 1 discriminator 2 view .LVU86
 331:FreeRTOS/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 331              		.loc 1 331 5 discriminator 2 view .LVU87
 331:FreeRTOS/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 332              		.loc 1 331 5 discriminator 2 view .LVU88
 333 0028 FEE7     		b	.L21
 334              	.LVL20:
 335              	.L37:
 330:FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 336              		.loc 1 330 5 view .LVU89
 337              	.LBB46:
 338              	.LBI46:
 194:FreeRTOS/portable/portmacro.h ****     {
 339              		.loc 2 194 34 view .LVU90
 340              	.LBB47:
 196:FreeRTOS/portable/portmacro.h **** 
 341              		.loc 2 196 9 view .LVU91
 342              		.loc 2 198 9 view .LVU92
 343              		.syntax unified
 344              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 345 002a 4FF05003 			mov r3, #80												
 346 002e 83F31188 		msr basepri, r3											
 347 0032 BFF36F8F 		isb														
 348 0036 BFF34F8F 		dsb														
 349              	
 350              	@ 0 "" 2
 351              	.LVL21:
 352              		.thumb
 353              		.syntax unified
 354              	.L19:
 355              		.loc 2 198 9 is_stmt 0 view .LVU93
 356              	.LBE47:
 357              	.LBE46:
 330:FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 358              		.loc 1 330 5 is_stmt 1 discriminator 1 view .LVU94
 330:FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 359              		.loc 1 330 5 discriminator 1 view .LVU95
 330:FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 360              		.loc 1 330 5 discriminator 1 view .LVU96
 361 003a FEE7     		b	.L19
 362              	.LVL22:
 363              	.L20:
 331:FreeRTOS/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 364              		.loc 1 331 77 discriminator 2 view .LVU97
 332:FreeRTOS/event_groups.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 365              		.loc 1 332 5 discriminator 2 view .LVU98
 366 003c 41B9     		cbnz	r1, .L22
 332:FreeRTOS/event_groups.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 367              		.loc 1 332 5 view .LVU99
 368              	.LBB48:
 369              	.LBI48:
 194:FreeRTOS/portable/portmacro.h ****     {
 370              		.loc 2 194 34 view .LVU100
 371              	.LBB49:
 196:FreeRTOS/portable/portmacro.h **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 25


 372              		.loc 2 196 9 view .LVU101
 373              		.loc 2 198 9 view .LVU102
 374              		.syntax unified
 375              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 376 003e 4FF05003 			mov r3, #80												
 377 0042 83F31188 		msr basepri, r3											
 378 0046 BFF36F8F 		isb														
 379 004a BFF34F8F 		dsb														
 380              	
 381              	@ 0 "" 2
 382              	.LVL23:
 383              		.thumb
 384              		.syntax unified
 385              	.L23:
 386              		.loc 2 198 9 is_stmt 0 view .LVU103
 387              	.LBE49:
 388              	.LBE48:
 332:FreeRTOS/event_groups.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 389              		.loc 1 332 5 is_stmt 1 discriminator 3 view .LVU104
 332:FreeRTOS/event_groups.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 390              		.loc 1 332 5 discriminator 3 view .LVU105
 332:FreeRTOS/event_groups.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 391              		.loc 1 332 5 discriminator 3 view .LVU106
 392 004e FEE7     		b	.L23
 393              	.LVL24:
 394              	.L22:
 332:FreeRTOS/event_groups.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 395              		.loc 1 332 41 discriminator 2 view .LVU107
 335:FreeRTOS/event_groups.c ****         }
 396              		.loc 1 335 13 discriminator 2 view .LVU108
 397 0050 FFF7FEFF 		bl	xTaskGetSchedulerState
 398              	.LVL25:
 335:FreeRTOS/event_groups.c ****         }
 399              		.loc 1 335 13 is_stmt 0 discriminator 2 view .LVU109
 400 0054 58B9     		cbnz	r0, .L24
 401 0056 BAF1000F 		cmp	r10, #0
 402 005a 08D0     		beq	.L24
 335:FreeRTOS/event_groups.c ****         }
 403              		.loc 1 335 13 is_stmt 1 view .LVU110
 404              	.LBB50:
 405              	.LBI50:
 194:FreeRTOS/portable/portmacro.h ****     {
 406              		.loc 2 194 34 view .LVU111
 407              	.LBB51:
 196:FreeRTOS/portable/portmacro.h **** 
 408              		.loc 2 196 9 view .LVU112
 409              		.loc 2 198 9 view .LVU113
 410              		.syntax unified
 411              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 412 005c 4FF05003 			mov r3, #80												
 413 0060 83F31188 		msr basepri, r3											
 414 0064 BFF36F8F 		isb														
 415 0068 BFF34F8F 		dsb														
 416              	
 417              	@ 0 "" 2
 418              	.LVL26:
 419              		.thumb
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 26


 420              		.syntax unified
 421              	.L25:
 422              		.loc 2 198 9 is_stmt 0 view .LVU114
 423              	.LBE51:
 424              	.LBE50:
 335:FreeRTOS/event_groups.c ****         }
 425              		.loc 1 335 13 is_stmt 1 discriminator 4 view .LVU115
 335:FreeRTOS/event_groups.c ****         }
 426              		.loc 1 335 13 discriminator 4 view .LVU116
 335:FreeRTOS/event_groups.c ****         }
 427              		.loc 1 335 13 discriminator 4 view .LVU117
 428 006c FEE7     		b	.L25
 429              	.L24:
 335:FreeRTOS/event_groups.c ****         }
 430              		.loc 1 335 114 discriminator 8 view .LVU118
 339:FreeRTOS/event_groups.c ****     {
 431              		.loc 1 339 5 discriminator 8 view .LVU119
 432 006e FFF7FEFF 		bl	vTaskSuspendAll
 433              	.LVL27:
 434              	.LBB52:
 341:FreeRTOS/event_groups.c **** 
 435              		.loc 1 341 9 discriminator 8 view .LVU120
 341:FreeRTOS/event_groups.c **** 
 436              		.loc 1 341 27 is_stmt 0 discriminator 8 view .LVU121
 437 0072 3468     		ldr	r4, [r6]
 438              	.LVL28:
 344:FreeRTOS/event_groups.c **** 
 439              		.loc 1 344 9 is_stmt 1 discriminator 8 view .LVU122
 344:FreeRTOS/event_groups.c **** 
 440              		.loc 1 344 29 is_stmt 0 discriminator 8 view .LVU123
 441 0074 4246     		mov	r2, r8
 442 0076 2946     		mov	r1, r5
 443 0078 2046     		mov	r0, r4
 444 007a FFF7FEFF 		bl	prvTestWaitCondition
 445              	.LVL29:
 346:FreeRTOS/event_groups.c ****         {
 446              		.loc 1 346 9 is_stmt 1 discriminator 8 view .LVU124
 346:FreeRTOS/event_groups.c ****         {
 447              		.loc 1 346 11 is_stmt 0 discriminator 8 view .LVU125
 448 007e E0B1     		cbz	r0, .L26
 350:FreeRTOS/event_groups.c ****             xTicksToWait = ( TickType_t ) 0;
 449              		.loc 1 350 13 is_stmt 1 view .LVU126
 450              	.LVL30:
 351:FreeRTOS/event_groups.c **** 
 451              		.loc 1 351 13 view .LVU127
 354:FreeRTOS/event_groups.c ****             {
 452              		.loc 1 354 13 view .LVU128
 354:FreeRTOS/event_groups.c ****             {
 453              		.loc 1 354 15 is_stmt 0 view .LVU129
 454 0080 17B1     		cbz	r7, .L27
 356:FreeRTOS/event_groups.c ****             }
 455              		.loc 1 356 17 is_stmt 1 view .LVU130
 356:FreeRTOS/event_groups.c ****             }
 456              		.loc 1 356 42 is_stmt 0 view .LVU131
 457 0082 24EA0503 		bic	r3, r4, r5
 458 0086 3360     		str	r3, [r6]
 459              	.LVL31:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 27


 460              	.L27:
 404:FreeRTOS/event_groups.c ****         }
 461              		.loc 1 404 77 is_stmt 1 view .LVU132
 462              	.LBE52:
 407:FreeRTOS/event_groups.c **** 
 463              		.loc 1 407 5 view .LVU133
 407:FreeRTOS/event_groups.c **** 
 464              		.loc 1 407 23 is_stmt 0 view .LVU134
 465 0088 FFF7FEFF 		bl	xTaskResumeAll
 466              	.LVL32:
 409:FreeRTOS/event_groups.c ****     {
 467              		.loc 1 409 5 is_stmt 1 view .LVU135
 409:FreeRTOS/event_groups.c ****     {
 468              		.loc 1 409 7 is_stmt 0 view .LVU136
 469 008c B9F1000F 		cmp	r9, #0
 470 0090 10D0     		beq	.L17
 411:FreeRTOS/event_groups.c ****         {
 471              		.loc 1 411 9 is_stmt 1 view .LVU137
 411:FreeRTOS/event_groups.c ****         {
 472              		.loc 1 411 11 is_stmt 0 view .LVU138
 473 0092 38B9     		cbnz	r0, .L31
 413:FreeRTOS/event_groups.c ****         }
 474              		.loc 1 413 13 is_stmt 1 view .LVU139
 475 0094 1C4B     		ldr	r3, .L39
 476 0096 4FF08052 		mov	r2, #268435456
 477 009a 1A60     		str	r2, [r3]
 413:FreeRTOS/event_groups.c ****         }
 478              		.loc 1 413 13 view .LVU140
 479              		.syntax unified
 480              	@ 413 "FreeRTOS/event_groups.c" 1
 481 009c BFF34F8F 		dsb
 482              	@ 0 "" 2
 413:FreeRTOS/event_groups.c ****         }
 483              		.loc 1 413 13 view .LVU141
 484              	@ 413 "FreeRTOS/event_groups.c" 1
 485 00a0 BFF36F8F 		isb
 486              	@ 0 "" 2
 413:FreeRTOS/event_groups.c ****         }
 487              		.loc 1 413 35 view .LVU142
 488              		.thumb
 489              		.syntax unified
 490              	.L31:
 417:FreeRTOS/event_groups.c ****         }
 491              		.loc 1 417 37 view .LVU143
 424:FreeRTOS/event_groups.c **** 
 492              		.loc 1 424 9 view .LVU144
 424:FreeRTOS/event_groups.c **** 
 493              		.loc 1 424 20 is_stmt 0 view .LVU145
 494 00a4 FFF7FEFF 		bl	uxTaskResetEventItemValue
 495              	.LVL33:
 424:FreeRTOS/event_groups.c **** 
 496              		.loc 1 424 20 view .LVU146
 497 00a8 0446     		mov	r4, r0
 498              	.LVL34:
 426:FreeRTOS/event_groups.c ****         {
 499              		.loc 1 426 9 is_stmt 1 view .LVU147
 426:FreeRTOS/event_groups.c ****         {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 28


 500              		.loc 1 426 11 is_stmt 0 view .LVU148
 501 00aa 10F0007F 		tst	r0, #33554432
 502 00ae 1BD0     		beq	.L38
 503              	.LVL35:
 504              	.L32:
 458:FreeRTOS/event_groups.c **** 
 505              		.loc 1 458 9 is_stmt 1 view .LVU149
 461:FreeRTOS/event_groups.c ****     }
 506              		.loc 1 461 9 view .LVU150
 461:FreeRTOS/event_groups.c ****     }
 507              		.loc 1 461 18 is_stmt 0 view .LVU151
 508 00b0 24F07F44 		bic	r4, r4, #-16777216
 509              	.LVL36:
 464:FreeRTOS/event_groups.c **** 
 510              		.loc 1 464 5 is_stmt 1 view .LVU152
 467:FreeRTOS/event_groups.c **** 
 511              		.loc 1 467 5 view .LVU153
 469:FreeRTOS/event_groups.c **** }
 512              		.loc 1 469 5 view .LVU154
 513              	.L17:
 470:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 514              		.loc 1 470 1 is_stmt 0 view .LVU155
 515 00b4 2046     		mov	r0, r4
 516 00b6 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 517              	.LVL37:
 518              	.L26:
 519              	.LBB53:
 363:FreeRTOS/event_groups.c ****         {
 520              		.loc 1 363 14 is_stmt 1 view .LVU156
 363:FreeRTOS/event_groups.c ****         {
 521              		.loc 1 363 16 is_stmt 0 view .LVU157
 522 00ba BAF1000F 		cmp	r10, #0
 523 00be 11D0     		beq	.L34
 376:FreeRTOS/event_groups.c ****             {
 524              		.loc 1 376 13 is_stmt 1 view .LVU158
 376:FreeRTOS/event_groups.c ****             {
 525              		.loc 1 376 15 is_stmt 0 view .LVU159
 526 00c0 6FB9     		cbnz	r7, .L35
 527              	.LBE53:
 324:FreeRTOS/event_groups.c ****     BaseType_t xWaitConditionMet, xAlreadyYielded;
 528              		.loc 1 324 27 view .LVU160
 529 00c2 4946     		mov	r1, r9
 530              	.L28:
 531              	.LVL38:
 532              	.LBB54:
 382:FreeRTOS/event_groups.c ****             }
 533              		.loc 1 382 41 is_stmt 1 view .LVU161
 385:FreeRTOS/event_groups.c ****             {
 534              		.loc 1 385 13 view .LVU162
 385:FreeRTOS/event_groups.c ****             {
 535              		.loc 1 385 15 is_stmt 0 view .LVU163
 536 00c4 B8F1000F 		cmp	r8, #0
 537 00c8 01D0     		beq	.L29
 387:FreeRTOS/event_groups.c ****             }
 538              		.loc 1 387 17 is_stmt 1 view .LVU164
 387:FreeRTOS/event_groups.c ****             }
 539              		.loc 1 387 31 is_stmt 0 view .LVU165
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 29


 540 00ca 41F08061 		orr	r1, r1, #67108864
 541              	.LVL39:
 542              	.L29:
 391:FreeRTOS/event_groups.c ****             }
 543              		.loc 1 391 41 is_stmt 1 view .LVU166
 397:FreeRTOS/event_groups.c **** 
 544              		.loc 1 397 13 view .LVU167
 545 00ce 5246     		mov	r2, r10
 546 00d0 2943     		orrs	r1, r1, r5
 547              	.LVL40:
 397:FreeRTOS/event_groups.c **** 
 548              		.loc 1 397 13 is_stmt 0 view .LVU168
 549 00d2 301D     		adds	r0, r6, #4
 550              	.LVL41:
 397:FreeRTOS/event_groups.c **** 
 551              		.loc 1 397 13 view .LVU169
 552 00d4 FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 553              	.LVL42:
 402:FreeRTOS/event_groups.c **** 
 554              		.loc 1 402 13 is_stmt 1 view .LVU170
 402:FreeRTOS/event_groups.c **** 
 555              		.loc 1 402 22 is_stmt 0 view .LVU171
 556 00d8 4C46     		mov	r4, r9
 557              	.LVL43:
 397:FreeRTOS/event_groups.c **** 
 558              		.loc 1 397 13 view .LVU172
 559 00da D146     		mov	r9, r10
 560 00dc D4E7     		b	.L27
 561              	.LVL44:
 562              	.L35:
 378:FreeRTOS/event_groups.c ****             }
 563              		.loc 1 378 31 view .LVU173
 564 00de 4FF08071 		mov	r1, #16777216
 565 00e2 EFE7     		b	.L28
 566              	.L34:
 567 00e4 D146     		mov	r9, r10
 568 00e6 CFE7     		b	.L27
 569              	.LVL45:
 570              	.L38:
 378:FreeRTOS/event_groups.c ****             }
 571              		.loc 1 378 31 view .LVU174
 572              	.LBE54:
 428:FreeRTOS/event_groups.c ****             {
 573              		.loc 1 428 13 is_stmt 1 view .LVU175
 574 00e8 FFF7FEFF 		bl	vPortEnterCritical
 575              	.LVL46:
 431:FreeRTOS/event_groups.c **** 
 576              		.loc 1 431 17 view .LVU176
 431:FreeRTOS/event_groups.c **** 
 577              		.loc 1 431 26 is_stmt 0 view .LVU177
 578 00ec 3468     		ldr	r4, [r6]
 579              	.LVL47:
 435:FreeRTOS/event_groups.c ****                 {
 580              		.loc 1 435 17 is_stmt 1 view .LVU178
 435:FreeRTOS/event_groups.c ****                 {
 581              		.loc 1 435 21 is_stmt 0 view .LVU179
 582 00ee 4246     		mov	r2, r8
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 30


 583 00f0 2946     		mov	r1, r5
 584 00f2 2046     		mov	r0, r4
 585 00f4 FFF7FEFF 		bl	prvTestWaitCondition
 586              	.LVL48:
 435:FreeRTOS/event_groups.c ****                 {
 587              		.loc 1 435 19 view .LVU180
 588 00f8 18B1     		cbz	r0, .L33
 437:FreeRTOS/event_groups.c ****                     {
 589              		.loc 1 437 21 is_stmt 1 view .LVU181
 437:FreeRTOS/event_groups.c ****                     {
 590              		.loc 1 437 23 is_stmt 0 view .LVU182
 591 00fa 17B1     		cbz	r7, .L33
 439:FreeRTOS/event_groups.c ****                     }
 592              		.loc 1 439 25 is_stmt 1 view .LVU183
 439:FreeRTOS/event_groups.c ****                     }
 593              		.loc 1 439 50 is_stmt 0 view .LVU184
 594 00fc 24EA0505 		bic	r5, r4, r5
 595              	.LVL49:
 439:FreeRTOS/event_groups.c ****                     }
 596              		.loc 1 439 50 view .LVU185
 597 0100 3560     		str	r5, [r6]
 598              	.L33:
 448:FreeRTOS/event_groups.c ****                 }
 599              		.loc 1 448 45 is_stmt 1 view .LVU186
 451:FreeRTOS/event_groups.c ****             }
 600              		.loc 1 451 17 view .LVU187
 601              	.LVL50:
 453:FreeRTOS/event_groups.c ****         }
 602              		.loc 1 453 13 view .LVU188
 603 0102 FFF7FEFF 		bl	vPortExitCritical
 604              	.LVL51:
 605 0106 D3E7     		b	.L32
 606              	.L40:
 607              		.align	2
 608              	.L39:
 609 0108 04ED00E0 		.word	-536810236
 610              		.cfi_endproc
 611              	.LFE8:
 613              		.section	.text.xEventGroupClearBits,"ax",%progbits
 614              		.align	1
 615              		.global	xEventGroupClearBits
 616              		.syntax unified
 617              		.thumb
 618              		.thumb_func
 619              		.fpu fpv4-sp-d16
 621              	xEventGroupClearBits:
 622              	.LVL52:
 623              	.LFB9:
 475:FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 624              		.loc 1 475 1 view -0
 625              		.cfi_startproc
 626              		@ args = 0, pretend = 0, frame = 0
 627              		@ frame_needed = 0, uses_anonymous_args = 0
 476:FreeRTOS/event_groups.c ****     EventBits_t uxReturn;
 628              		.loc 1 476 5 view .LVU190
 477:FreeRTOS/event_groups.c **** 
 629              		.loc 1 477 5 view .LVU191
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 31


 481:FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 630              		.loc 1 481 5 view .LVU192
 631 0000 70B1     		cbz	r0, .L48
 475:FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 632              		.loc 1 475 1 is_stmt 0 discriminator 2 view .LVU193
 633 0002 70B5     		push	{r4, r5, r6, lr}
 634              	.LCFI7:
 635              		.cfi_def_cfa_offset 16
 636              		.cfi_offset 4, -16
 637              		.cfi_offset 5, -12
 638              		.cfi_offset 6, -8
 639              		.cfi_offset 14, -4
 640 0004 0C46     		mov	r4, r1
 641 0006 0646     		mov	r6, r0
 481:FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 642              		.loc 1 481 32 is_stmt 1 discriminator 2 view .LVU194
 482:FreeRTOS/event_groups.c **** 
 643              		.loc 1 482 5 discriminator 2 view .LVU195
 644 0008 11F07F4F 		tst	r1, #-16777216
 645 000c 11D0     		beq	.L44
 482:FreeRTOS/event_groups.c **** 
 646              		.loc 1 482 5 view .LVU196
 647              	.LBB55:
 648              	.LBI55:
 194:FreeRTOS/portable/portmacro.h ****     {
 649              		.loc 2 194 34 view .LVU197
 650              	.LBB56:
 196:FreeRTOS/portable/portmacro.h **** 
 651              		.loc 2 196 9 view .LVU198
 652              		.loc 2 198 9 view .LVU199
 653              		.syntax unified
 654              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 655 000e 4FF05003 			mov r3, #80												
 656 0012 83F31188 		msr basepri, r3											
 657 0016 BFF36F8F 		isb														
 658 001a BFF34F8F 		dsb														
 659              	
 660              	@ 0 "" 2
 661              	.LVL53:
 662              		.thumb
 663              		.syntax unified
 664              	.L45:
 665              		.loc 2 198 9 is_stmt 0 view .LVU200
 666              	.LBE56:
 667              	.LBE55:
 482:FreeRTOS/event_groups.c **** 
 668              		.loc 1 482 5 is_stmt 1 discriminator 2 view .LVU201
 482:FreeRTOS/event_groups.c **** 
 669              		.loc 1 482 5 discriminator 2 view .LVU202
 482:FreeRTOS/event_groups.c **** 
 670              		.loc 1 482 5 discriminator 2 view .LVU203
 671 001e FEE7     		b	.L45
 672              	.L48:
 673              	.LCFI8:
 674              		.cfi_def_cfa_offset 0
 675              		.cfi_restore 4
 676              		.cfi_restore 5
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 32


 677              		.cfi_restore 6
 678              		.cfi_restore 14
 481:FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 679              		.loc 1 481 5 view .LVU204
 680              	.LBB57:
 681              	.LBI57:
 194:FreeRTOS/portable/portmacro.h ****     {
 682              		.loc 2 194 34 view .LVU205
 683              	.LBB58:
 196:FreeRTOS/portable/portmacro.h **** 
 684              		.loc 2 196 9 view .LVU206
 685              		.loc 2 198 9 view .LVU207
 686              		.syntax unified
 687              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 688 0020 4FF05003 			mov r3, #80												
 689 0024 83F31188 		msr basepri, r3											
 690 0028 BFF36F8F 		isb														
 691 002c BFF34F8F 		dsb														
 692              	
 693              	@ 0 "" 2
 694              	.LVL54:
 695              		.thumb
 696              		.syntax unified
 697              	.L43:
 698              		.loc 2 198 9 is_stmt 0 view .LVU208
 699              	.LBE58:
 700              	.LBE57:
 481:FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 701              		.loc 1 481 5 is_stmt 1 discriminator 1 view .LVU209
 481:FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 702              		.loc 1 481 5 discriminator 1 view .LVU210
 481:FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 703              		.loc 1 481 5 discriminator 1 view .LVU211
 704 0030 FEE7     		b	.L43
 705              	.L44:
 706              	.LCFI9:
 707              		.cfi_def_cfa_offset 16
 708              		.cfi_offset 4, -16
 709              		.cfi_offset 5, -12
 710              		.cfi_offset 6, -8
 711              		.cfi_offset 14, -4
 482:FreeRTOS/event_groups.c **** 
 712              		.loc 1 482 75 discriminator 2 view .LVU212
 484:FreeRTOS/event_groups.c ****     {
 713              		.loc 1 484 5 discriminator 2 view .LVU213
 714 0032 FFF7FEFF 		bl	vPortEnterCritical
 715              	.LVL55:
 486:FreeRTOS/event_groups.c **** 
 716              		.loc 1 486 66 discriminator 2 view .LVU214
 490:FreeRTOS/event_groups.c **** 
 717              		.loc 1 490 9 discriminator 2 view .LVU215
 490:FreeRTOS/event_groups.c **** 
 718              		.loc 1 490 18 is_stmt 0 discriminator 2 view .LVU216
 719 0036 3568     		ldr	r5, [r6]
 720              	.LVL56:
 493:FreeRTOS/event_groups.c ****     }
 721              		.loc 1 493 9 is_stmt 1 discriminator 2 view .LVU217
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 33


 493:FreeRTOS/event_groups.c ****     }
 722              		.loc 1 493 34 is_stmt 0 discriminator 2 view .LVU218
 723 0038 25EA0404 		bic	r4, r5, r4
 724              	.LVL57:
 493:FreeRTOS/event_groups.c ****     }
 725              		.loc 1 493 34 discriminator 2 view .LVU219
 726 003c 3460     		str	r4, [r6]
 495:FreeRTOS/event_groups.c **** 
 727              		.loc 1 495 5 is_stmt 1 discriminator 2 view .LVU220
 728 003e FFF7FEFF 		bl	vPortExitCritical
 729              	.LVL58:
 497:FreeRTOS/event_groups.c **** }
 730              		.loc 1 497 5 discriminator 2 view .LVU221
 498:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 731              		.loc 1 498 1 is_stmt 0 discriminator 2 view .LVU222
 732 0042 2846     		mov	r0, r5
 733 0044 70BD     		pop	{r4, r5, r6, pc}
 498:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 734              		.loc 1 498 1 discriminator 2 view .LVU223
 735              		.cfi_endproc
 736              	.LFE9:
 738              		.section	.text.xEventGroupGetBitsFromISR,"ax",%progbits
 739              		.align	1
 740              		.global	xEventGroupGetBitsFromISR
 741              		.syntax unified
 742              		.thumb
 743              		.thumb_func
 744              		.fpu fpv4-sp-d16
 746              	xEventGroupGetBitsFromISR:
 747              	.LVL59:
 748              	.LFB10:
 518:FreeRTOS/event_groups.c ****     UBaseType_t uxSavedInterruptStatus;
 749              		.loc 1 518 1 is_stmt 1 view -0
 750              		.cfi_startproc
 751              		@ args = 0, pretend = 0, frame = 0
 752              		@ frame_needed = 0, uses_anonymous_args = 0
 753              		@ link register save eliminated.
 519:FreeRTOS/event_groups.c ****     EventGroup_t const * const pxEventBits = xEventGroup;
 754              		.loc 1 519 5 view .LVU225
 520:FreeRTOS/event_groups.c ****     EventBits_t uxReturn;
 755              		.loc 1 520 5 view .LVU226
 521:FreeRTOS/event_groups.c **** 
 756              		.loc 1 521 5 view .LVU227
 523:FreeRTOS/event_groups.c ****     {
 757              		.loc 1 523 5 view .LVU228
 758              	.LBB59:
 759              	.LBI59:
 199:FreeRTOS/portable/portmacro.h ****         (
 200:FreeRTOS/portable/portmacro.h ****             "	mov %0, %1												\n"\
 201:FreeRTOS/portable/portmacro.h ****             "	msr basepri, %0											\n"\
 202:FreeRTOS/portable/portmacro.h ****             "	isb														\n"\
 203:FreeRTOS/portable/portmacro.h ****             "	dsb														\n"\
 204:FreeRTOS/portable/portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 205:FreeRTOS/portable/portmacro.h ****         );
 206:FreeRTOS/portable/portmacro.h ****     }
 207:FreeRTOS/portable/portmacro.h **** 
 208:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 34


 209:FreeRTOS/portable/portmacro.h **** 
 210:FreeRTOS/portable/portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 760              		.loc 2 210 38 view .LVU229
 761              	.LBB60:
 211:FreeRTOS/portable/portmacro.h ****     {
 212:FreeRTOS/portable/portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 762              		.loc 2 212 9 view .LVU230
 213:FreeRTOS/portable/portmacro.h **** 
 214:FreeRTOS/portable/portmacro.h ****         __asm volatile
 763              		.loc 2 214 9 view .LVU231
 764              		.syntax unified
 765              	@ 214 "FreeRTOS/portable/portmacro.h" 1
 766 0000 EFF31183 			mrs r3, basepri											
 767 0004 4FF05002 		mov r2, #80												
 768 0008 82F31188 		msr basepri, r2											
 769 000c BFF36F8F 		isb														
 770 0010 BFF34F8F 		dsb														
 771              	
 772              	@ 0 "" 2
 773              	.LVL60:
 215:FreeRTOS/portable/portmacro.h ****         (
 216:FreeRTOS/portable/portmacro.h ****             "	mrs %0, basepri											\n"\
 217:FreeRTOS/portable/portmacro.h ****             "	mov %1, %2												\n"\
 218:FreeRTOS/portable/portmacro.h ****             "	msr basepri, %1											\n"\
 219:FreeRTOS/portable/portmacro.h ****             "	isb														\n"\
 220:FreeRTOS/portable/portmacro.h ****             "	dsb														\n"\
 221:FreeRTOS/portable/portmacro.h ****             : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT
 222:FreeRTOS/portable/portmacro.h ****         );
 223:FreeRTOS/portable/portmacro.h **** 
 224:FreeRTOS/portable/portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
 225:FreeRTOS/portable/portmacro.h ****          * warnings. */
 226:FreeRTOS/portable/portmacro.h ****         return ulOriginalBASEPRI;
 774              		.loc 2 226 9 view .LVU232
 775              		.loc 2 226 9 is_stmt 0 view .LVU233
 776              		.thumb
 777              		.syntax unified
 778              	.LBE60:
 779              	.LBE59:
 525:FreeRTOS/event_groups.c ****     }
 780              		.loc 1 525 9 is_stmt 1 view .LVU234
 525:FreeRTOS/event_groups.c ****     }
 781              		.loc 1 525 18 is_stmt 0 view .LVU235
 782 0014 0068     		ldr	r0, [r0]
 783              	.LVL61:
 527:FreeRTOS/event_groups.c **** 
 784              		.loc 1 527 5 is_stmt 1 view .LVU236
 785              	.LBB61:
 786              	.LBI61:
 227:FreeRTOS/portable/portmacro.h ****     }
 228:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
 229:FreeRTOS/portable/portmacro.h **** 
 230:FreeRTOS/portable/portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 787              		.loc 2 230 34 view .LVU237
 788              	.LBB62:
 231:FreeRTOS/portable/portmacro.h ****     {
 232:FreeRTOS/portable/portmacro.h ****         __asm volatile
 789              		.loc 2 232 9 view .LVU238
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 35


 790              		.syntax unified
 791              	@ 232 "FreeRTOS/portable/portmacro.h" 1
 792 0016 83F31188 			msr basepri, r3	
 793              	@ 0 "" 2
 794              	.LVL62:
 795              		.loc 2 232 9 is_stmt 0 view .LVU239
 796              		.thumb
 797              		.syntax unified
 798              	.LBE62:
 799              	.LBE61:
 529:FreeRTOS/event_groups.c **** } /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to co
 800              		.loc 1 529 5 is_stmt 1 view .LVU240
 530:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 801              		.loc 1 530 1 is_stmt 0 view .LVU241
 802 001a 7047     		bx	lr
 803              		.cfi_endproc
 804              	.LFE10:
 806              		.section	.text.xEventGroupSetBits,"ax",%progbits
 807              		.align	1
 808              		.global	xEventGroupSetBits
 809              		.syntax unified
 810              		.thumb
 811              		.thumb_func
 812              		.fpu fpv4-sp-d16
 814              	xEventGroupSetBits:
 815              	.LVL63:
 816              	.LFB11:
 535:FreeRTOS/event_groups.c ****     ListItem_t * pxListItem, * pxNext;
 817              		.loc 1 535 1 is_stmt 1 view -0
 818              		.cfi_startproc
 819              		@ args = 0, pretend = 0, frame = 0
 820              		@ frame_needed = 0, uses_anonymous_args = 0
 535:FreeRTOS/event_groups.c ****     ListItem_t * pxListItem, * pxNext;
 821              		.loc 1 535 1 is_stmt 0 view .LVU243
 822 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 823              	.LCFI10:
 824              		.cfi_def_cfa_offset 24
 825              		.cfi_offset 3, -24
 826              		.cfi_offset 4, -20
 827              		.cfi_offset 5, -16
 828              		.cfi_offset 6, -12
 829              		.cfi_offset 7, -8
 830              		.cfi_offset 14, -4
 536:FreeRTOS/event_groups.c ****     ListItem_t const * pxListEnd;
 831              		.loc 1 536 5 is_stmt 1 view .LVU244
 537:FreeRTOS/event_groups.c ****     List_t const * pxList;
 832              		.loc 1 537 5 view .LVU245
 538:FreeRTOS/event_groups.c ****     EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 833              		.loc 1 538 5 view .LVU246
 539:FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 834              		.loc 1 539 5 view .LVU247
 835              	.LVL64:
 540:FreeRTOS/event_groups.c ****     BaseType_t xMatchFound = pdFALSE;
 836              		.loc 1 540 5 view .LVU248
 541:FreeRTOS/event_groups.c **** 
 837              		.loc 1 541 5 view .LVU249
 545:FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 36


 838              		.loc 1 545 5 view .LVU250
 839 0002 68B1     		cbz	r0, .L62
 840 0004 0D46     		mov	r5, r1
 841 0006 0446     		mov	r4, r0
 545:FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 842              		.loc 1 545 32 discriminator 2 view .LVU251
 546:FreeRTOS/event_groups.c **** 
 843              		.loc 1 546 5 discriminator 2 view .LVU252
 844 0008 11F07F46 		ands	r6, r1, #-16777216
 845 000c 11D0     		beq	.L53
 546:FreeRTOS/event_groups.c **** 
 846              		.loc 1 546 5 view .LVU253
 847              	.LBB63:
 848              	.LBI63:
 194:FreeRTOS/portable/portmacro.h ****     {
 849              		.loc 2 194 34 view .LVU254
 850              	.LBB64:
 196:FreeRTOS/portable/portmacro.h **** 
 851              		.loc 2 196 9 view .LVU255
 198:FreeRTOS/portable/portmacro.h ****         (
 852              		.loc 2 198 9 view .LVU256
 853              		.syntax unified
 854              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 855 000e 4FF05003 			mov r3, #80												
 856 0012 83F31188 		msr basepri, r3											
 857 0016 BFF36F8F 		isb														
 858 001a BFF34F8F 		dsb														
 859              	
 860              	@ 0 "" 2
 861              	.LVL65:
 862              		.thumb
 863              		.syntax unified
 864              	.L54:
 198:FreeRTOS/portable/portmacro.h ****         (
 865              		.loc 2 198 9 is_stmt 0 view .LVU257
 866              	.LBE64:
 867              	.LBE63:
 546:FreeRTOS/event_groups.c **** 
 868              		.loc 1 546 5 is_stmt 1 discriminator 2 view .LVU258
 546:FreeRTOS/event_groups.c **** 
 869              		.loc 1 546 5 discriminator 2 view .LVU259
 546:FreeRTOS/event_groups.c **** 
 870              		.loc 1 546 5 discriminator 2 view .LVU260
 871 001e FEE7     		b	.L54
 872              	.L62:
 545:FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 873              		.loc 1 545 5 view .LVU261
 874              	.LBB65:
 875              	.LBI65:
 194:FreeRTOS/portable/portmacro.h ****     {
 876              		.loc 2 194 34 view .LVU262
 877              	.LBB66:
 196:FreeRTOS/portable/portmacro.h **** 
 878              		.loc 2 196 9 view .LVU263
 198:FreeRTOS/portable/portmacro.h ****         (
 879              		.loc 2 198 9 view .LVU264
 880              		.syntax unified
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 37


 881              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 882 0020 4FF05003 			mov r3, #80												
 883 0024 83F31188 		msr basepri, r3											
 884 0028 BFF36F8F 		isb														
 885 002c BFF34F8F 		dsb														
 886              	
 887              	@ 0 "" 2
 888              	.LVL66:
 889              		.thumb
 890              		.syntax unified
 891              	.L52:
 198:FreeRTOS/portable/portmacro.h ****         (
 892              		.loc 2 198 9 is_stmt 0 view .LVU265
 893              	.LBE66:
 894              	.LBE65:
 545:FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 895              		.loc 1 545 5 is_stmt 1 discriminator 1 view .LVU266
 545:FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 896              		.loc 1 545 5 discriminator 1 view .LVU267
 545:FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 897              		.loc 1 545 5 discriminator 1 view .LVU268
 898 0030 FEE7     		b	.L52
 899              	.L53:
 546:FreeRTOS/event_groups.c **** 
 900              		.loc 1 546 73 discriminator 2 view .LVU269
 548:FreeRTOS/event_groups.c ****     pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is 
 901              		.loc 1 548 5 discriminator 2 view .LVU270
 902              	.LVL67:
 549:FreeRTOS/event_groups.c ****     vTaskSuspendAll();
 903              		.loc 1 549 5 discriminator 2 view .LVU271
 549:FreeRTOS/event_groups.c ****     vTaskSuspendAll();
 904              		.loc 1 549 15 is_stmt 0 discriminator 2 view .LVU272
 905 0032 00F10C07 		add	r7, r0, #12
 906              	.LVL68:
 550:FreeRTOS/event_groups.c ****     {
 907              		.loc 1 550 5 is_stmt 1 discriminator 2 view .LVU273
 908 0036 FFF7FEFF 		bl	vTaskSuspendAll
 909              	.LVL69:
 552:FreeRTOS/event_groups.c **** 
 910              		.loc 1 552 62 discriminator 2 view .LVU274
 554:FreeRTOS/event_groups.c **** 
 911              		.loc 1 554 9 discriminator 2 view .LVU275
 554:FreeRTOS/event_groups.c **** 
 912              		.loc 1 554 20 is_stmt 0 discriminator 2 view .LVU276
 913 003a 2069     		ldr	r0, [r4, #16]
 914              	.LVL70:
 557:FreeRTOS/event_groups.c **** 
 915              		.loc 1 557 9 is_stmt 1 discriminator 2 view .LVU277
 557:FreeRTOS/event_groups.c **** 
 916              		.loc 1 557 34 is_stmt 0 discriminator 2 view .LVU278
 917 003c 2368     		ldr	r3, [r4]
 918 003e 2B43     		orrs	r3, r3, r5
 919 0040 2360     		str	r3, [r4]
 560:FreeRTOS/event_groups.c ****         {
 920              		.loc 1 560 9 is_stmt 1 discriminator 2 view .LVU279
 560:FreeRTOS/event_groups.c ****         {
 921              		.loc 1 560 14 is_stmt 0 discriminator 2 view .LVU280
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 38


 922 0042 0AE0     		b	.L55
 923              	.LVL71:
 924              	.L56:
 582:FreeRTOS/event_groups.c ****             {
 925              		.loc 1 582 18 is_stmt 1 view .LVU281
 582:FreeRTOS/event_groups.c ****             {
 926              		.loc 1 582 53 is_stmt 0 view .LVU282
 927 0044 2168     		ldr	r1, [r4]
 582:FreeRTOS/event_groups.c ****             {
 928              		.loc 1 582 20 view .LVU283
 929 0046 33EA0101 		bics	r1, r3, r1
 930 004a 05D1     		bne	.L58
 582:FreeRTOS/event_groups.c ****             {
 931              		.loc 1 582 20 view .LVU284
 932 004c 11E0     		b	.L57
 933              	.LVL72:
 934              	.L59:
 601:FreeRTOS/event_groups.c ****                 }
 935              		.loc 1 601 45 is_stmt 1 view .LVU285
 609:FreeRTOS/event_groups.c ****             }
 936              		.loc 1 609 17 view .LVU286
 609:FreeRTOS/event_groups.c ****             }
 937              		.loc 1 609 75 is_stmt 0 view .LVU287
 938 004e 2168     		ldr	r1, [r4]
 609:FreeRTOS/event_groups.c ****             }
 939              		.loc 1 609 17 view .LVU288
 940 0050 41F00071 		orr	r1, r1, #33554432
 941 0054 FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
 942              	.LVL73:
 943              	.L58:
 535:FreeRTOS/event_groups.c ****     ListItem_t * pxListItem, * pxNext;
 944              		.loc 1 535 1 view .LVU289
 945 0058 2846     		mov	r0, r5
 946              	.LVL74:
 947              	.L55:
 560:FreeRTOS/event_groups.c ****         {
 948              		.loc 1 560 14 is_stmt 1 view .LVU290
 949 005a B842     		cmp	r0, r7
 950 005c 0ED0     		beq	.L63
 562:FreeRTOS/event_groups.c ****             uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 951              		.loc 1 562 13 view .LVU291
 562:FreeRTOS/event_groups.c ****             uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 952              		.loc 1 562 20 is_stmt 0 view .LVU292
 953 005e 4568     		ldr	r5, [r0, #4]
 954              	.LVL75:
 563:FreeRTOS/event_groups.c ****             xMatchFound = pdFALSE;
 955              		.loc 1 563 13 is_stmt 1 view .LVU293
 563:FreeRTOS/event_groups.c ****             xMatchFound = pdFALSE;
 956              		.loc 1 563 29 is_stmt 0 view .LVU294
 957 0060 0268     		ldr	r2, [r0]
 958              	.LVL76:
 564:FreeRTOS/event_groups.c **** 
 959              		.loc 1 564 13 is_stmt 1 view .LVU295
 567:FreeRTOS/event_groups.c ****             uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 960              		.loc 1 567 13 view .LVU296
 568:FreeRTOS/event_groups.c **** 
 961              		.loc 1 568 13 view .LVU297
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 39


 568:FreeRTOS/event_groups.c **** 
 962              		.loc 1 568 29 is_stmt 0 view .LVU298
 963 0062 22F07F43 		bic	r3, r2, #-16777216
 964              	.LVL77:
 570:FreeRTOS/event_groups.c ****             {
 965              		.loc 1 570 13 is_stmt 1 view .LVU299
 570:FreeRTOS/event_groups.c ****             {
 966              		.loc 1 570 15 is_stmt 0 view .LVU300
 967 0066 12F0806F 		tst	r2, #67108864
 968 006a EBD1     		bne	.L56
 573:FreeRTOS/event_groups.c ****                 {
 969              		.loc 1 573 17 is_stmt 1 view .LVU301
 573:FreeRTOS/event_groups.c ****                 {
 970              		.loc 1 573 52 is_stmt 0 view .LVU302
 971 006c 2168     		ldr	r1, [r4]
 573:FreeRTOS/event_groups.c ****                 {
 972              		.loc 1 573 19 view .LVU303
 973 006e 1942     		tst	r1, r3
 974 0070 F2D0     		beq	.L58
 975              	.L57:
 976              	.LVL78:
 595:FreeRTOS/event_groups.c ****                 {
 977              		.loc 1 595 17 is_stmt 1 view .LVU304
 595:FreeRTOS/event_groups.c ****                 {
 978              		.loc 1 595 19 is_stmt 0 view .LVU305
 979 0072 12F0807F 		tst	r2, #16777216
 980 0076 EAD0     		beq	.L59
 597:FreeRTOS/event_groups.c ****                 }
 981              		.loc 1 597 21 is_stmt 1 view .LVU306
 597:FreeRTOS/event_groups.c ****                 }
 982              		.loc 1 597 35 is_stmt 0 view .LVU307
 983 0078 1E43     		orrs	r6, r6, r3
 984              	.LVL79:
 597:FreeRTOS/event_groups.c ****                 }
 985              		.loc 1 597 35 view .LVU308
 986 007a E8E7     		b	.L59
 987              	.LVL80:
 988              	.L63:
 620:FreeRTOS/event_groups.c ****     }
 989              		.loc 1 620 9 is_stmt 1 view .LVU309
 620:FreeRTOS/event_groups.c ****     }
 990              		.loc 1 620 34 is_stmt 0 view .LVU310
 991 007c 2368     		ldr	r3, [r4]
 992 007e 23EA0603 		bic	r3, r3, r6
 993 0082 2360     		str	r3, [r4]
 622:FreeRTOS/event_groups.c **** 
 994              		.loc 1 622 5 is_stmt 1 view .LVU311
 622:FreeRTOS/event_groups.c **** 
 995              		.loc 1 622 14 is_stmt 0 view .LVU312
 996 0084 FFF7FEFF 		bl	xTaskResumeAll
 997              	.LVL81:
 624:FreeRTOS/event_groups.c **** }
 998              		.loc 1 624 5 is_stmt 1 view .LVU313
 625:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 999              		.loc 1 625 1 is_stmt 0 view .LVU314
 1000 0088 2068     		ldr	r0, [r4]
 1001 008a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 40


 625:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 1002              		.loc 1 625 1 view .LVU315
 1003              		.cfi_endproc
 1004              	.LFE11:
 1006              		.section	.text.xEventGroupSync,"ax",%progbits
 1007              		.align	1
 1008              		.global	xEventGroupSync
 1009              		.syntax unified
 1010              		.thumb
 1011              		.thumb_func
 1012              		.fpu fpv4-sp-d16
 1014              	xEventGroupSync:
 1015              	.LVL82:
 1016              	.LFB7:
 198:FreeRTOS/event_groups.c ****     EventBits_t uxOriginalBitValue, uxReturn;
 1017              		.loc 1 198 1 is_stmt 1 view -0
 1018              		.cfi_startproc
 1019              		@ args = 0, pretend = 0, frame = 0
 1020              		@ frame_needed = 0, uses_anonymous_args = 0
 198:FreeRTOS/event_groups.c ****     EventBits_t uxOriginalBitValue, uxReturn;
 1021              		.loc 1 198 1 is_stmt 0 view .LVU317
 1022 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1023              	.LCFI11:
 1024              		.cfi_def_cfa_offset 32
 1025              		.cfi_offset 3, -32
 1026              		.cfi_offset 4, -28
 1027              		.cfi_offset 5, -24
 1028              		.cfi_offset 6, -20
 1029              		.cfi_offset 7, -16
 1030              		.cfi_offset 8, -12
 1031              		.cfi_offset 9, -8
 1032              		.cfi_offset 14, -4
 199:FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 1033              		.loc 1 199 5 is_stmt 1 view .LVU318
 200:FreeRTOS/event_groups.c ****     BaseType_t xAlreadyYielded;
 1034              		.loc 1 200 5 view .LVU319
 1035              	.LVL83:
 201:FreeRTOS/event_groups.c ****     BaseType_t xTimeoutOccurred = pdFALSE;
 1036              		.loc 1 201 5 view .LVU320
 202:FreeRTOS/event_groups.c **** 
 1037              		.loc 1 202 5 view .LVU321
 204:FreeRTOS/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 1038              		.loc 1 204 5 view .LVU322
 1039 0004 12F07F48 		ands	r8, r2, #-16777216
 1040 0008 08D0     		beq	.L65
 204:FreeRTOS/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 1041              		.loc 1 204 5 view .LVU323
 1042              	.LBB67:
 1043              	.LBI67:
 194:FreeRTOS/portable/portmacro.h ****     {
 1044              		.loc 2 194 34 view .LVU324
 1045              	.LBB68:
 196:FreeRTOS/portable/portmacro.h **** 
 1046              		.loc 2 196 9 view .LVU325
 198:FreeRTOS/portable/portmacro.h ****         (
 1047              		.loc 2 198 9 view .LVU326
 1048              		.syntax unified
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 41


 1049              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 1050 000a 4FF05003 			mov r3, #80												
 1051 000e 83F31188 		msr basepri, r3											
 1052 0012 BFF36F8F 		isb														
 1053 0016 BFF34F8F 		dsb														
 1054              	
 1055              	@ 0 "" 2
 1056              	.LVL84:
 1057              		.thumb
 1058              		.syntax unified
 1059              	.L66:
 198:FreeRTOS/portable/portmacro.h ****         (
 1060              		.loc 2 198 9 is_stmt 0 view .LVU327
 1061              	.LBE68:
 1062              	.LBE67:
 204:FreeRTOS/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 1063              		.loc 1 204 5 is_stmt 1 discriminator 1 view .LVU328
 204:FreeRTOS/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 1064              		.loc 1 204 5 discriminator 1 view .LVU329
 204:FreeRTOS/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 1065              		.loc 1 204 5 discriminator 1 view .LVU330
 1066 001a FEE7     		b	.L66
 1067              	.LVL85:
 1068              	.L65:
 204:FreeRTOS/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 1069              		.loc 1 204 5 is_stmt 0 discriminator 1 view .LVU331
 1070 001c 0646     		mov	r6, r0
 1071 001e 0C46     		mov	r4, r1
 1072 0020 1546     		mov	r5, r2
 1073 0022 1F46     		mov	r7, r3
 204:FreeRTOS/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 1074              		.loc 1 204 77 is_stmt 1 discriminator 2 view .LVU332
 205:FreeRTOS/event_groups.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1075              		.loc 1 205 5 discriminator 2 view .LVU333
 1076 0024 42B9     		cbnz	r2, .L67
 205:FreeRTOS/event_groups.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1077              		.loc 1 205 5 view .LVU334
 1078              	.LBB69:
 1079              	.LBI69:
 194:FreeRTOS/portable/portmacro.h ****     {
 1080              		.loc 2 194 34 view .LVU335
 1081              	.LBB70:
 196:FreeRTOS/portable/portmacro.h **** 
 1082              		.loc 2 196 9 view .LVU336
 198:FreeRTOS/portable/portmacro.h ****         (
 1083              		.loc 2 198 9 view .LVU337
 1084              		.syntax unified
 1085              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 1086 0026 4FF05003 			mov r3, #80												
 1087 002a 83F31188 		msr basepri, r3											
 1088 002e BFF36F8F 		isb														
 1089 0032 BFF34F8F 		dsb														
 1090              	
 1091              	@ 0 "" 2
 1092              	.LVL86:
 1093              		.thumb
 1094              		.syntax unified
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 42


 1095              	.L68:
 198:FreeRTOS/portable/portmacro.h ****         (
 1096              		.loc 2 198 9 is_stmt 0 view .LVU338
 1097              	.LBE70:
 1098              	.LBE69:
 205:FreeRTOS/event_groups.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1099              		.loc 1 205 5 is_stmt 1 discriminator 2 view .LVU339
 205:FreeRTOS/event_groups.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1100              		.loc 1 205 5 discriminator 2 view .LVU340
 205:FreeRTOS/event_groups.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1101              		.loc 1 205 5 discriminator 2 view .LVU341
 1102 0036 FEE7     		b	.L68
 1103              	.LVL87:
 1104              	.L67:
 205:FreeRTOS/event_groups.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1105              		.loc 1 205 41 discriminator 2 view .LVU342
 208:FreeRTOS/event_groups.c ****         }
 1106              		.loc 1 208 13 discriminator 2 view .LVU343
 1107 0038 FFF7FEFF 		bl	xTaskGetSchedulerState
 1108              	.LVL88:
 208:FreeRTOS/event_groups.c ****         }
 1109              		.loc 1 208 13 is_stmt 0 discriminator 2 view .LVU344
 1110 003c 48B9     		cbnz	r0, .L69
 1111 003e 47B1     		cbz	r7, .L69
 208:FreeRTOS/event_groups.c ****         }
 1112              		.loc 1 208 13 is_stmt 1 view .LVU345
 1113              	.LBB71:
 1114              	.LBI71:
 194:FreeRTOS/portable/portmacro.h ****     {
 1115              		.loc 2 194 34 view .LVU346
 1116              	.LBB72:
 196:FreeRTOS/portable/portmacro.h **** 
 1117              		.loc 2 196 9 view .LVU347
 198:FreeRTOS/portable/portmacro.h ****         (
 1118              		.loc 2 198 9 view .LVU348
 1119              		.syntax unified
 1120              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 1121 0040 4FF05003 			mov r3, #80												
 1122 0044 83F31188 		msr basepri, r3											
 1123 0048 BFF36F8F 		isb														
 1124 004c BFF34F8F 		dsb														
 1125              	
 1126              	@ 0 "" 2
 1127              	.LVL89:
 1128              		.thumb
 1129              		.syntax unified
 1130              	.L70:
 198:FreeRTOS/portable/portmacro.h ****         (
 1131              		.loc 2 198 9 is_stmt 0 view .LVU349
 1132              	.LBE72:
 1133              	.LBE71:
 208:FreeRTOS/event_groups.c ****         }
 1134              		.loc 1 208 13 is_stmt 1 discriminator 3 view .LVU350
 208:FreeRTOS/event_groups.c ****         }
 1135              		.loc 1 208 13 discriminator 3 view .LVU351
 208:FreeRTOS/event_groups.c ****         }
 1136              		.loc 1 208 13 discriminator 3 view .LVU352
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 43


 1137 0050 FEE7     		b	.L70
 1138              	.L69:
 208:FreeRTOS/event_groups.c ****         }
 1139              		.loc 1 208 114 discriminator 8 view .LVU353
 212:FreeRTOS/event_groups.c ****     {
 1140              		.loc 1 212 5 discriminator 8 view .LVU354
 1141 0052 FFF7FEFF 		bl	vTaskSuspendAll
 1142              	.LVL90:
 214:FreeRTOS/event_groups.c **** 
 1143              		.loc 1 214 9 discriminator 8 view .LVU355
 214:FreeRTOS/event_groups.c **** 
 1144              		.loc 1 214 28 is_stmt 0 discriminator 8 view .LVU356
 1145 0056 D6F80090 		ldr	r9, [r6]
 1146              	.LVL91:
 216:FreeRTOS/event_groups.c **** 
 1147              		.loc 1 216 9 is_stmt 1 discriminator 8 view .LVU357
 216:FreeRTOS/event_groups.c **** 
 1148              		.loc 1 216 18 is_stmt 0 discriminator 8 view .LVU358
 1149 005a 2146     		mov	r1, r4
 1150 005c 3046     		mov	r0, r6
 1151 005e FFF7FEFF 		bl	xEventGroupSetBits
 1152              	.LVL92:
 218:FreeRTOS/event_groups.c ****         {
 1153              		.loc 1 218 9 is_stmt 1 discriminator 8 view .LVU359
 218:FreeRTOS/event_groups.c ****         {
 1154              		.loc 1 218 36 is_stmt 0 discriminator 8 view .LVU360
 1155 0062 49EA0404 		orr	r4, r9, r4
 1156              	.LVL93:
 218:FreeRTOS/event_groups.c ****         {
 1157              		.loc 1 218 11 discriminator 8 view .LVU361
 1158 0066 35EA0403 		bics	r3, r5, r4
 1159 006a 18D0     		beq	.L79
 231:FreeRTOS/event_groups.c ****             {
 1160              		.loc 1 231 13 is_stmt 1 view .LVU362
 231:FreeRTOS/event_groups.c ****             {
 1161              		.loc 1 231 15 is_stmt 0 view .LVU363
 1162 006c EFB9     		cbnz	r7, .L80
 250:FreeRTOS/event_groups.c ****                 xTimeoutOccurred = pdTRUE;
 1163              		.loc 1 250 17 is_stmt 1 view .LVU364
 250:FreeRTOS/event_groups.c ****                 xTimeoutOccurred = pdTRUE;
 1164              		.loc 1 250 26 is_stmt 0 view .LVU365
 1165 006e 3468     		ldr	r4, [r6]
 1166              	.LVL94:
 251:FreeRTOS/event_groups.c ****             }
 1167              		.loc 1 251 17 is_stmt 1 view .LVU366
 1168              	.L72:
 255:FreeRTOS/event_groups.c **** 
 1169              		.loc 1 255 5 view .LVU367
 255:FreeRTOS/event_groups.c **** 
 1170              		.loc 1 255 23 is_stmt 0 view .LVU368
 1171 0070 FFF7FEFF 		bl	xTaskResumeAll
 1172              	.LVL95:
 257:FreeRTOS/event_groups.c ****     {
 1173              		.loc 1 257 5 is_stmt 1 view .LVU369
 257:FreeRTOS/event_groups.c ****     {
 1174              		.loc 1 257 7 is_stmt 0 view .LVU370
 1175 0074 87B1     		cbz	r7, .L64
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 44


 259:FreeRTOS/event_groups.c ****         {
 1176              		.loc 1 259 9 is_stmt 1 view .LVU371
 259:FreeRTOS/event_groups.c ****         {
 1177              		.loc 1 259 11 is_stmt 0 view .LVU372
 1178 0076 38B9     		cbnz	r0, .L75
 261:FreeRTOS/event_groups.c ****         }
 1179              		.loc 1 261 13 is_stmt 1 view .LVU373
 1180 0078 164B     		ldr	r3, .L83
 1181 007a 4FF08052 		mov	r2, #268435456
 1182 007e 1A60     		str	r2, [r3]
 261:FreeRTOS/event_groups.c ****         }
 1183              		.loc 1 261 13 view .LVU374
 1184              		.syntax unified
 1185              	@ 261 "FreeRTOS/event_groups.c" 1
 1186 0080 BFF34F8F 		dsb
 1187              	@ 0 "" 2
 261:FreeRTOS/event_groups.c ****         }
 1188              		.loc 1 261 13 view .LVU375
 1189              	@ 261 "FreeRTOS/event_groups.c" 1
 1190 0084 BFF36F8F 		isb
 1191              	@ 0 "" 2
 261:FreeRTOS/event_groups.c ****         }
 1192              		.loc 1 261 35 view .LVU376
 1193              		.thumb
 1194              		.syntax unified
 1195              	.L75:
 265:FreeRTOS/event_groups.c ****         }
 1196              		.loc 1 265 37 view .LVU377
 272:FreeRTOS/event_groups.c **** 
 1197              		.loc 1 272 9 view .LVU378
 272:FreeRTOS/event_groups.c **** 
 1198              		.loc 1 272 20 is_stmt 0 view .LVU379
 1199 0088 FFF7FEFF 		bl	uxTaskResetEventItemValue
 1200              	.LVL96:
 272:FreeRTOS/event_groups.c **** 
 1201              		.loc 1 272 20 view .LVU380
 1202 008c 0446     		mov	r4, r0
 1203              	.LVL97:
 274:FreeRTOS/event_groups.c ****         {
 1204              		.loc 1 274 9 is_stmt 1 view .LVU381
 274:FreeRTOS/event_groups.c ****         {
 1205              		.loc 1 274 11 is_stmt 0 view .LVU382
 1206 008e 10F0007F 		tst	r0, #33554432
 1207 0092 12D0     		beq	.L81
 1208              	.LVL98:
 1209              	.L76:
 301:FreeRTOS/event_groups.c **** 
 1210              		.loc 1 301 9 is_stmt 1 view .LVU383
 305:FreeRTOS/event_groups.c ****     }
 1211              		.loc 1 305 9 view .LVU384
 305:FreeRTOS/event_groups.c ****     }
 1212              		.loc 1 305 18 is_stmt 0 view .LVU385
 1213 0094 24F07F44 		bic	r4, r4, #-16777216
 1214              	.LVL99:
 308:FreeRTOS/event_groups.c **** 
 1215              		.loc 1 308 5 is_stmt 1 view .LVU386
 311:FreeRTOS/event_groups.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 45


 1216              		.loc 1 311 5 view .LVU387
 313:FreeRTOS/event_groups.c **** }
 1217              		.loc 1 313 5 view .LVU388
 1218              	.L64:
 314:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 1219              		.loc 1 314 1 is_stmt 0 view .LVU389
 1220 0098 2046     		mov	r0, r4
 1221 009a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1222              	.LVL100:
 1223              	.L79:
 221:FreeRTOS/event_groups.c **** 
 1224              		.loc 1 221 13 is_stmt 1 view .LVU390
 225:FreeRTOS/event_groups.c **** 
 1225              		.loc 1 225 13 view .LVU391
 225:FreeRTOS/event_groups.c **** 
 1226              		.loc 1 225 38 is_stmt 0 view .LVU392
 1227 009e 3368     		ldr	r3, [r6]
 1228 00a0 23EA0503 		bic	r3, r3, r5
 1229 00a4 3360     		str	r3, [r6]
 227:FreeRTOS/event_groups.c ****         }
 1230              		.loc 1 227 13 is_stmt 1 view .LVU393
 1231              	.LVL101:
 227:FreeRTOS/event_groups.c ****         }
 1232              		.loc 1 227 26 is_stmt 0 view .LVU394
 1233 00a6 4746     		mov	r7, r8
 1234 00a8 E2E7     		b	.L72
 1235              	.LVL102:
 1236              	.L80:
 233:FreeRTOS/event_groups.c **** 
 1237              		.loc 1 233 89 is_stmt 1 view .LVU395
 238:FreeRTOS/event_groups.c **** 
 1238              		.loc 1 238 17 view .LVU396
 1239 00aa 3A46     		mov	r2, r7
 1240 00ac 45F0A061 		orr	r1, r5, #83886080
 1241 00b0 301D     		adds	r0, r6, #4
 1242 00b2 FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 1243              	.LVL103:
 244:FreeRTOS/event_groups.c ****             }
 1244              		.loc 1 244 17 view .LVU397
 244:FreeRTOS/event_groups.c ****             }
 1245              		.loc 1 244 26 is_stmt 0 view .LVU398
 1246 00b6 4446     		mov	r4, r8
 1247 00b8 DAE7     		b	.L72
 1248              	.LVL104:
 1249              	.L81:
 277:FreeRTOS/event_groups.c ****             {
 1250              		.loc 1 277 13 is_stmt 1 view .LVU399
 1251 00ba FFF7FEFF 		bl	vPortEnterCritical
 1252              	.LVL105:
 279:FreeRTOS/event_groups.c **** 
 1253              		.loc 1 279 17 view .LVU400
 279:FreeRTOS/event_groups.c **** 
 1254              		.loc 1 279 26 is_stmt 0 view .LVU401
 1255 00be 3468     		ldr	r4, [r6]
 1256              	.LVL106:
 285:FreeRTOS/event_groups.c ****                 {
 1257              		.loc 1 285 17 is_stmt 1 view .LVU402
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 46


 285:FreeRTOS/event_groups.c ****                 {
 1258              		.loc 1 285 19 is_stmt 0 view .LVU403
 1259 00c0 35EA0403 		bics	r3, r5, r4
 1260 00c4 02D0     		beq	.L82
 1261              	.LVL107:
 1262              	.L77:
 291:FreeRTOS/event_groups.c ****                 }
 1263              		.loc 1 291 45 is_stmt 1 view .LVU404
 294:FreeRTOS/event_groups.c **** 
 1264              		.loc 1 294 13 view .LVU405
 1265 00c6 FFF7FEFF 		bl	vPortExitCritical
 1266              	.LVL108:
 296:FreeRTOS/event_groups.c ****         }
 1267              		.loc 1 296 13 view .LVU406
 296:FreeRTOS/event_groups.c ****         }
 1268              		.loc 1 296 13 is_stmt 0 view .LVU407
 1269 00ca E3E7     		b	.L76
 1270              	.LVL109:
 1271              	.L82:
 287:FreeRTOS/event_groups.c ****                 }
 1272              		.loc 1 287 21 is_stmt 1 view .LVU408
 287:FreeRTOS/event_groups.c ****                 }
 1273              		.loc 1 287 46 is_stmt 0 view .LVU409
 1274 00cc 24EA0505 		bic	r5, r4, r5
 1275              	.LVL110:
 287:FreeRTOS/event_groups.c ****                 }
 1276              		.loc 1 287 46 view .LVU410
 1277 00d0 3560     		str	r5, [r6]
 1278 00d2 F8E7     		b	.L77
 1279              	.L84:
 1280              		.align	2
 1281              	.L83:
 1282 00d4 04ED00E0 		.word	-536810236
 1283              		.cfi_endproc
 1284              	.LFE7:
 1286              		.section	.text.vEventGroupDelete,"ax",%progbits
 1287              		.align	1
 1288              		.global	vEventGroupDelete
 1289              		.syntax unified
 1290              		.thumb
 1291              		.thumb_func
 1292              		.fpu fpv4-sp-d16
 1294              	vEventGroupDelete:
 1295              	.LVL111:
 1296              	.LFB12:
 629:FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 1297              		.loc 1 629 1 is_stmt 1 view -0
 1298              		.cfi_startproc
 1299              		@ args = 0, pretend = 0, frame = 0
 1300              		@ frame_needed = 0, uses_anonymous_args = 0
 630:FreeRTOS/event_groups.c ****     const List_t * pxTasksWaitingForBits;
 1301              		.loc 1 630 5 view .LVU412
 631:FreeRTOS/event_groups.c **** 
 1302              		.loc 1 631 5 view .LVU413
 633:FreeRTOS/event_groups.c **** 
 1303              		.loc 1 633 5 view .LVU414
 1304 0000 78B1     		cbz	r0, .L95
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 47


 629:FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 1305              		.loc 1 629 1 is_stmt 0 discriminator 2 view .LVU415
 1306 0002 10B5     		push	{r4, lr}
 1307              	.LCFI12:
 1308              		.cfi_def_cfa_offset 8
 1309              		.cfi_offset 4, -8
 1310              		.cfi_offset 14, -4
 1311 0004 0446     		mov	r4, r0
 633:FreeRTOS/event_groups.c **** 
 1312              		.loc 1 633 32 is_stmt 1 discriminator 2 view .LVU416
 635:FreeRTOS/event_groups.c **** 
 1313              		.loc 1 635 5 discriminator 2 view .LVU417
 1314              	.LVL112:
 637:FreeRTOS/event_groups.c ****     {
 1315              		.loc 1 637 5 discriminator 2 view .LVU418
 1316 0006 FFF7FEFF 		bl	vTaskSuspendAll
 1317              	.LVL113:
 639:FreeRTOS/event_groups.c **** 
 1318              		.loc 1 639 47 discriminator 2 view .LVU419
 641:FreeRTOS/event_groups.c ****         {
 1319              		.loc 1 641 9 discriminator 2 view .LVU420
 1320              	.L88:
 641:FreeRTOS/event_groups.c ****         {
 1321              		.loc 1 641 14 view .LVU421
 641:FreeRTOS/event_groups.c ****         {
 1322              		.loc 1 641 16 is_stmt 0 view .LVU422
 1323 000a 6368     		ldr	r3, [r4, #4]
 641:FreeRTOS/event_groups.c ****         {
 1324              		.loc 1 641 14 view .LVU423
 1325 000c DBB1     		cbz	r3, .L96
 645:FreeRTOS/event_groups.c ****             vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCK
 1326              		.loc 1 645 13 is_stmt 1 view .LVU424
 1327 000e 2069     		ldr	r0, [r4, #16]
 1328 0010 04F10C03 		add	r3, r4, #12
 1329 0014 9842     		cmp	r0, r3
 1330 0016 0DD0     		beq	.L97
 645:FreeRTOS/event_groups.c ****             vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCK
 1331              		.loc 1 645 130 discriminator 2 view .LVU425
 646:FreeRTOS/event_groups.c ****         }
 1332              		.loc 1 646 13 discriminator 2 view .LVU426
 1333 0018 4FF00071 		mov	r1, #33554432
 1334 001c FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
 1335              	.LVL114:
 1336 0020 F3E7     		b	.L88
 1337              	.LVL115:
 1338              	.L95:
 1339              	.LCFI13:
 1340              		.cfi_def_cfa_offset 0
 1341              		.cfi_restore 4
 1342              		.cfi_restore 14
 633:FreeRTOS/event_groups.c **** 
 1343              		.loc 1 633 5 view .LVU427
 1344              	.LBB73:
 1345              	.LBI73:
 194:FreeRTOS/portable/portmacro.h ****     {
 1346              		.loc 2 194 34 view .LVU428
 1347              	.LBB74:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 48


 196:FreeRTOS/portable/portmacro.h **** 
 1348              		.loc 2 196 9 view .LVU429
 198:FreeRTOS/portable/portmacro.h ****         (
 1349              		.loc 2 198 9 view .LVU430
 1350              		.syntax unified
 1351              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 1352 0022 4FF05003 			mov r3, #80												
 1353 0026 83F31188 		msr basepri, r3											
 1354 002a BFF36F8F 		isb														
 1355 002e BFF34F8F 		dsb														
 1356              	
 1357              	@ 0 "" 2
 1358              	.LVL116:
 1359              		.thumb
 1360              		.syntax unified
 1361              	.L87:
 198:FreeRTOS/portable/portmacro.h ****         (
 1362              		.loc 2 198 9 is_stmt 0 view .LVU431
 1363              	.LBE74:
 1364              	.LBE73:
 633:FreeRTOS/event_groups.c **** 
 1365              		.loc 1 633 5 is_stmt 1 discriminator 1 view .LVU432
 633:FreeRTOS/event_groups.c **** 
 1366              		.loc 1 633 5 discriminator 1 view .LVU433
 633:FreeRTOS/event_groups.c **** 
 1367              		.loc 1 633 5 discriminator 1 view .LVU434
 1368 0032 FEE7     		b	.L87
 1369              	.LVL117:
 1370              	.L97:
 1371              	.LCFI14:
 1372              		.cfi_def_cfa_offset 8
 1373              		.cfi_offset 4, -8
 1374              		.cfi_offset 14, -4
 645:FreeRTOS/event_groups.c ****             vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCK
 1375              		.loc 1 645 13 view .LVU435
 1376              	.LBB75:
 1377              	.LBI75:
 194:FreeRTOS/portable/portmacro.h ****     {
 1378              		.loc 2 194 34 view .LVU436
 1379              	.LBB76:
 196:FreeRTOS/portable/portmacro.h **** 
 1380              		.loc 2 196 9 view .LVU437
 198:FreeRTOS/portable/portmacro.h ****         (
 1381              		.loc 2 198 9 view .LVU438
 1382              		.syntax unified
 1383              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 1384 0034 4FF05003 			mov r3, #80												
 1385 0038 83F31188 		msr basepri, r3											
 1386 003c BFF36F8F 		isb														
 1387 0040 BFF34F8F 		dsb														
 1388              	
 1389              	@ 0 "" 2
 1390              	.LVL118:
 1391              		.thumb
 1392              		.syntax unified
 1393              	.L90:
 198:FreeRTOS/portable/portmacro.h ****         (
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 49


 1394              		.loc 2 198 9 is_stmt 0 view .LVU439
 1395              	.LBE76:
 1396              	.LBE75:
 645:FreeRTOS/event_groups.c ****             vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCK
 1397              		.loc 1 645 13 is_stmt 1 discriminator 2 view .LVU440
 645:FreeRTOS/event_groups.c ****             vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCK
 1398              		.loc 1 645 13 discriminator 2 view .LVU441
 645:FreeRTOS/event_groups.c ****             vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCK
 1399              		.loc 1 645 13 discriminator 2 view .LVU442
 1400 0044 FEE7     		b	.L90
 1401              	.L96:
 659:FreeRTOS/event_groups.c ****                 {
 1402              		.loc 1 659 17 view .LVU443
 659:FreeRTOS/event_groups.c ****                 {
 1403              		.loc 1 659 32 is_stmt 0 view .LVU444
 1404 0046 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 659:FreeRTOS/event_groups.c ****                 {
 1405              		.loc 1 659 19 view .LVU445
 1406 0048 13B1     		cbz	r3, .L98
 1407              	.L92:
 665:FreeRTOS/event_groups.c ****                 }
 1408              		.loc 1 665 45 is_stmt 1 view .LVU446
 670:FreeRTOS/event_groups.c **** }
 1409              		.loc 1 670 5 view .LVU447
 670:FreeRTOS/event_groups.c **** }
 1410              		.loc 1 670 14 is_stmt 0 view .LVU448
 1411 004a FFF7FEFF 		bl	xTaskResumeAll
 1412              	.LVL119:
 671:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 1413              		.loc 1 671 1 view .LVU449
 1414 004e 10BD     		pop	{r4, pc}
 1415              	.LVL120:
 1416              	.L98:
 661:FreeRTOS/event_groups.c ****                 }
 1417              		.loc 1 661 21 is_stmt 1 view .LVU450
 1418 0050 2046     		mov	r0, r4
 1419 0052 FFF7FEFF 		bl	vPortFree
 1420              	.LVL121:
 1421 0056 F8E7     		b	.L92
 1422              		.cfi_endproc
 1423              	.LFE12:
 1425              		.section	.text.vEventGroupSetBitsCallback,"ax",%progbits
 1426              		.align	1
 1427              		.global	vEventGroupSetBitsCallback
 1428              		.syntax unified
 1429              		.thumb
 1430              		.thumb_func
 1431              		.fpu fpv4-sp-d16
 1433              	vEventGroupSetBitsCallback:
 1434              	.LVL122:
 1435              	.LFB13:
 678:FreeRTOS/event_groups.c ****     ( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't a
 1436              		.loc 1 678 1 view -0
 1437              		.cfi_startproc
 1438              		@ args = 0, pretend = 0, frame = 0
 1439              		@ frame_needed = 0, uses_anonymous_args = 0
 678:FreeRTOS/event_groups.c ****     ( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't a
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 50


 1440              		.loc 1 678 1 is_stmt 0 view .LVU452
 1441 0000 08B5     		push	{r3, lr}
 1442              	.LCFI15:
 1443              		.cfi_def_cfa_offset 8
 1444              		.cfi_offset 3, -8
 1445              		.cfi_offset 14, -4
 679:FreeRTOS/event_groups.c **** }
 1446              		.loc 1 679 5 is_stmt 1 view .LVU453
 679:FreeRTOS/event_groups.c **** }
 1447              		.loc 1 679 14 is_stmt 0 view .LVU454
 1448 0002 FFF7FEFF 		bl	xEventGroupSetBits
 1449              	.LVL123:
 680:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 1450              		.loc 1 680 1 view .LVU455
 1451 0006 08BD     		pop	{r3, pc}
 1452              		.cfi_endproc
 1453              	.LFE13:
 1455              		.section	.text.vEventGroupClearBitsCallback,"ax",%progbits
 1456              		.align	1
 1457              		.global	vEventGroupClearBitsCallback
 1458              		.syntax unified
 1459              		.thumb
 1460              		.thumb_func
 1461              		.fpu fpv4-sp-d16
 1463              	vEventGroupClearBitsCallback:
 1464              	.LVL124:
 1465              	.LFB14:
 687:FreeRTOS/event_groups.c ****     ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can
 1466              		.loc 1 687 1 is_stmt 1 view -0
 1467              		.cfi_startproc
 1468              		@ args = 0, pretend = 0, frame = 0
 1469              		@ frame_needed = 0, uses_anonymous_args = 0
 687:FreeRTOS/event_groups.c ****     ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can
 1470              		.loc 1 687 1 is_stmt 0 view .LVU457
 1471 0000 08B5     		push	{r3, lr}
 1472              	.LCFI16:
 1473              		.cfi_def_cfa_offset 8
 1474              		.cfi_offset 3, -8
 1475              		.cfi_offset 14, -4
 688:FreeRTOS/event_groups.c **** }
 1476              		.loc 1 688 5 is_stmt 1 view .LVU458
 688:FreeRTOS/event_groups.c **** }
 1477              		.loc 1 688 14 is_stmt 0 view .LVU459
 1478 0002 FFF7FEFF 		bl	xEventGroupClearBits
 1479              	.LVL125:
 689:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 1480              		.loc 1 689 1 view .LVU460
 1481 0006 08BD     		pop	{r3, pc}
 1482              		.cfi_endproc
 1483              	.LFE14:
 1485              		.section	.text.uxEventGroupGetNumber,"ax",%progbits
 1486              		.align	1
 1487              		.global	uxEventGroupGetNumber
 1488              		.syntax unified
 1489              		.thumb
 1490              		.thumb_func
 1491              		.fpu fpv4-sp-d16
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 51


 1493              	uxEventGroupGetNumber:
 1494              	.LVL126:
 1495              	.LFB16:
 727:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 728:FreeRTOS/event_groups.c **** 
 729:FreeRTOS/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
 730:FreeRTOS/event_groups.c **** 
 731:FreeRTOS/event_groups.c ****     BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup,
 732:FreeRTOS/event_groups.c ****                                           const EventBits_t uxBitsToSet,
 733:FreeRTOS/event_groups.c ****                                           BaseType_t * pxHigherPriorityTaskWoken )
 734:FreeRTOS/event_groups.c ****     {
 735:FreeRTOS/event_groups.c ****         BaseType_t xReturn;
 736:FreeRTOS/event_groups.c **** 
 737:FreeRTOS/event_groups.c ****         traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
 738:FreeRTOS/event_groups.c ****         xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup
 739:FreeRTOS/event_groups.c **** 
 740:FreeRTOS/event_groups.c ****         return xReturn;
 741:FreeRTOS/event_groups.c ****     }
 742:FreeRTOS/event_groups.c **** 
 743:FreeRTOS/event_groups.c **** #endif /* if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( co
 744:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 745:FreeRTOS/event_groups.c **** 
 746:FreeRTOS/event_groups.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 747:FreeRTOS/event_groups.c **** 
 748:FreeRTOS/event_groups.c ****     UBaseType_t uxEventGroupGetNumber( void * xEventGroup )
 749:FreeRTOS/event_groups.c ****     {
 1496              		.loc 1 749 5 is_stmt 1 view -0
 1497              		.cfi_startproc
 1498              		@ args = 0, pretend = 0, frame = 0
 1499              		@ frame_needed = 0, uses_anonymous_args = 0
 1500              		@ link register save eliminated.
 750:FreeRTOS/event_groups.c ****         UBaseType_t xReturn;
 1501              		.loc 1 750 9 view .LVU462
 751:FreeRTOS/event_groups.c ****         EventGroup_t const * pxEventBits = ( EventGroup_t * ) xEventGroup; /*lint !e9087 !e9079 Eve
 1502              		.loc 1 751 9 view .LVU463
 752:FreeRTOS/event_groups.c **** 
 753:FreeRTOS/event_groups.c ****         if( xEventGroup == NULL )
 1503              		.loc 1 753 9 view .LVU464
 1504              		.loc 1 753 11 is_stmt 0 view .LVU465
 1505 0000 08B1     		cbz	r0, .L105
 754:FreeRTOS/event_groups.c ****         {
 755:FreeRTOS/event_groups.c ****             xReturn = 0;
 756:FreeRTOS/event_groups.c ****         }
 757:FreeRTOS/event_groups.c ****         else
 758:FreeRTOS/event_groups.c ****         {
 759:FreeRTOS/event_groups.c ****             xReturn = pxEventBits->uxEventGroupNumber;
 1506              		.loc 1 759 13 is_stmt 1 view .LVU466
 1507              		.loc 1 759 21 is_stmt 0 view .LVU467
 1508 0002 8069     		ldr	r0, [r0, #24]
 1509              	.LVL127:
 1510              		.loc 1 759 21 view .LVU468
 1511 0004 7047     		bx	lr
 1512              	.LVL128:
 1513              	.L105:
 755:FreeRTOS/event_groups.c ****         }
 1514              		.loc 1 755 21 view .LVU469
 1515 0006 0020     		movs	r0, #0
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 52


 1516              	.LVL129:
 760:FreeRTOS/event_groups.c ****         }
 761:FreeRTOS/event_groups.c **** 
 762:FreeRTOS/event_groups.c ****         return xReturn;
 1517              		.loc 1 762 9 is_stmt 1 view .LVU470
 763:FreeRTOS/event_groups.c ****     }
 1518              		.loc 1 763 5 is_stmt 0 view .LVU471
 1519 0008 7047     		bx	lr
 1520              		.cfi_endproc
 1521              	.LFE16:
 1523              		.section	.text.vEventGroupSetNumber,"ax",%progbits
 1524              		.align	1
 1525              		.global	vEventGroupSetNumber
 1526              		.syntax unified
 1527              		.thumb
 1528              		.thumb_func
 1529              		.fpu fpv4-sp-d16
 1531              	vEventGroupSetNumber:
 1532              	.LVL130:
 1533              	.LFB17:
 764:FreeRTOS/event_groups.c **** 
 765:FreeRTOS/event_groups.c **** #endif /* configUSE_TRACE_FACILITY */
 766:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 767:FreeRTOS/event_groups.c **** 
 768:FreeRTOS/event_groups.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 769:FreeRTOS/event_groups.c **** 
 770:FreeRTOS/event_groups.c ****     void vEventGroupSetNumber( void * xEventGroup,
 771:FreeRTOS/event_groups.c ****                                UBaseType_t uxEventGroupNumber )
 772:FreeRTOS/event_groups.c ****     {
 1534              		.loc 1 772 5 is_stmt 1 view -0
 1535              		.cfi_startproc
 1536              		@ args = 0, pretend = 0, frame = 0
 1537              		@ frame_needed = 0, uses_anonymous_args = 0
 1538              		@ link register save eliminated.
 773:FreeRTOS/event_groups.c ****         ( ( EventGroup_t * ) xEventGroup )->uxEventGroupNumber = uxEventGroupNumber; /*lint !e9087 
 1539              		.loc 1 773 9 view .LVU473
 1540              		.loc 1 773 64 is_stmt 0 view .LVU474
 1541 0000 8161     		str	r1, [r0, #24]
 774:FreeRTOS/event_groups.c ****     }
 1542              		.loc 1 774 5 view .LVU475
 1543 0002 7047     		bx	lr
 1544              		.cfi_endproc
 1545              	.LFE17:
 1547              		.text
 1548              	.Letext0:
 1549              		.file 3 "c:\\work\\arm\\xpack-arm-none-eabi-gcc-9.2.1-1.1\\lib\\gcc\\arm-none-eabi\\9.2.1\\include
 1550              		.file 4 "c:\\work\\arm\\xpack-arm-none-eabi-gcc-9.2.1-1.1\\arm-none-eabi\\include\\machine\\_defau
 1551              		.file 5 "c:\\work\\arm\\xpack-arm-none-eabi-gcc-9.2.1-1.1\\arm-none-eabi\\include\\sys\\lock.h"
 1552              		.file 6 "c:\\work\\arm\\xpack-arm-none-eabi-gcc-9.2.1-1.1\\arm-none-eabi\\include\\sys\\_types.h"
 1553              		.file 7 "c:\\work\\arm\\xpack-arm-none-eabi-gcc-9.2.1-1.1\\arm-none-eabi\\include\\sys\\reent.h"
 1554              		.file 8 "c:\\work\\arm\\xpack-arm-none-eabi-gcc-9.2.1-1.1\\arm-none-eabi\\include\\stdlib.h"
 1555              		.file 9 "c:\\work\\arm\\xpack-arm-none-eabi-gcc-9.2.1-1.1\\arm-none-eabi\\include\\sys\\_stdint.h"
 1556              		.file 10 "Core/Inc/FreeRTOSConfig.h"
 1557              		.file 11 "FreeRTOS/include/FreeRTOS.h"
 1558              		.file 12 "FreeRTOS/include/list.h"
 1559              		.file 13 "FreeRTOS/include/event_groups.h"
 1560              		.file 14 "FreeRTOS/include/task.h"
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 53


 1561              		.file 15 "FreeRTOS/include/portable.h"
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s 			page 54


DEFINED SYMBOLS
                            *ABS*:0000000000000000 event_groups.c
C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s:18     .text.prvTestWaitCondition:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s:25     .text.prvTestWaitCondition:0000000000000000 prvTestWaitCondition
C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s:78     .text.xEventGroupCreateStatic:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s:85     .text.xEventGroupCreateStatic:0000000000000000 xEventGroupCreateStatic
C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s:213    .text.xEventGroupCreate:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s:220    .text.xEventGroupCreate:0000000000000000 xEventGroupCreate
C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s:266    .text.xEventGroupWaitBits:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s:273    .text.xEventGroupWaitBits:0000000000000000 xEventGroupWaitBits
C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s:609    .text.xEventGroupWaitBits:0000000000000108 $d
C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s:614    .text.xEventGroupClearBits:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s:621    .text.xEventGroupClearBits:0000000000000000 xEventGroupClearBits
C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s:739    .text.xEventGroupGetBitsFromISR:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s:746    .text.xEventGroupGetBitsFromISR:0000000000000000 xEventGroupGetBitsFromISR
C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s:807    .text.xEventGroupSetBits:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s:814    .text.xEventGroupSetBits:0000000000000000 xEventGroupSetBits
C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s:1007   .text.xEventGroupSync:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s:1014   .text.xEventGroupSync:0000000000000000 xEventGroupSync
C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s:1282   .text.xEventGroupSync:00000000000000d4 $d
C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s:1287   .text.vEventGroupDelete:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s:1294   .text.vEventGroupDelete:0000000000000000 vEventGroupDelete
C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s:1426   .text.vEventGroupSetBitsCallback:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s:1433   .text.vEventGroupSetBitsCallback:0000000000000000 vEventGroupSetBitsCallback
C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s:1456   .text.vEventGroupClearBitsCallback:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s:1463   .text.vEventGroupClearBitsCallback:0000000000000000 vEventGroupClearBitsCallback
C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s:1486   .text.uxEventGroupGetNumber:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s:1493   .text.uxEventGroupGetNumber:0000000000000000 uxEventGroupGetNumber
C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s:1524   .text.vEventGroupSetNumber:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccBsBEHU.s:1531   .text.vEventGroupSetNumber:0000000000000000 vEventGroupSetNumber

UNDEFINED SYMBOLS
vListInitialise
pvPortMalloc
xTaskGetSchedulerState
vTaskSuspendAll
xTaskResumeAll
uxTaskResetEventItemValue
vTaskPlaceOnUnorderedEventList
vPortEnterCritical
vPortExitCritical
vTaskRemoveFromUnorderedEventList
vPortFree
