ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"queue.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvGetDisinheritPriorityAfterTimeout,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	prvGetDisinheritPriorityAfterTimeout:
  26              	.LVL0:
  27              	.LFB33:
  28              		.file 1 "FreeRTOS/queue.c"
   1:FreeRTOS/queue.c **** /*
   2:FreeRTOS/queue.c ****  * FreeRTOS Kernel V10.4.6
   3:FreeRTOS/queue.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/queue.c ****  *
   5:FreeRTOS/queue.c ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS/queue.c ****  *
   7:FreeRTOS/queue.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS/queue.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS/queue.c ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS/queue.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS/queue.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS/queue.c ****  * subject to the following conditions:
  13:FreeRTOS/queue.c ****  *
  14:FreeRTOS/queue.c ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS/queue.c ****  * copies or substantial portions of the Software.
  16:FreeRTOS/queue.c ****  *
  17:FreeRTOS/queue.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS/queue.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS/queue.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS/queue.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS/queue.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS/queue.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS/queue.c ****  *
  24:FreeRTOS/queue.c ****  * https://www.FreeRTOS.org
  25:FreeRTOS/queue.c ****  * https://github.com/FreeRTOS
  26:FreeRTOS/queue.c ****  *
  27:FreeRTOS/queue.c ****  */
  28:FreeRTOS/queue.c **** 
  29:FreeRTOS/queue.c **** #include <stdlib.h>
  30:FreeRTOS/queue.c **** #include <string.h>
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 2


  31:FreeRTOS/queue.c **** 
  32:FreeRTOS/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:FreeRTOS/queue.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  34:FreeRTOS/queue.c ****  * task.h is included from an application file. */
  35:FreeRTOS/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:FreeRTOS/queue.c **** 
  37:FreeRTOS/queue.c **** #include "FreeRTOS.h"
  38:FreeRTOS/queue.c **** #include "task.h"
  39:FreeRTOS/queue.c **** #include "queue.h"
  40:FreeRTOS/queue.c **** 
  41:FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  42:FreeRTOS/queue.c ****     #include "croutine.h"
  43:FreeRTOS/queue.c **** #endif
  44:FreeRTOS/queue.c **** 
  45:FreeRTOS/queue.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  46:FreeRTOS/queue.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  47:FreeRTOS/queue.c ****  * for the header files above, but not in this file, in order to generate the
  48:FreeRTOS/queue.c ****  * correct privileged Vs unprivileged linkage and placement. */
  49:FreeRTOS/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  50:FreeRTOS/queue.c **** 
  51:FreeRTOS/queue.c **** 
  52:FreeRTOS/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  53:FreeRTOS/queue.c **** #define queueUNLOCKED             ( ( int8_t ) -1 )
  54:FreeRTOS/queue.c **** #define queueLOCKED_UNMODIFIED    ( ( int8_t ) 0 )
  55:FreeRTOS/queue.c **** #define queueINT8_MAX             ( ( int8_t ) 127 )
  56:FreeRTOS/queue.c **** 
  57:FreeRTOS/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  58:FreeRTOS/queue.c ****  * pcTail members are used as pointers into the queue storage area.  When the
  59:FreeRTOS/queue.c ****  * Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
  60:FreeRTOS/queue.c ****  * not necessary, and the pcHead pointer is set to NULL to indicate that the
  61:FreeRTOS/queue.c ****  * structure instead holds a pointer to the mutex holder (if any).  Map alternative
  62:FreeRTOS/queue.c ****  * names to the pcHead and structure member to ensure the readability of the code
  63:FreeRTOS/queue.c ****  * is maintained.  The QueuePointers_t and SemaphoreData_t types are used to form
  64:FreeRTOS/queue.c ****  * a union as their usage is mutually exclusive dependent on what the queue is
  65:FreeRTOS/queue.c ****  * being used for. */
  66:FreeRTOS/queue.c **** #define uxQueueType               pcHead
  67:FreeRTOS/queue.c **** #define queueQUEUE_IS_MUTEX       NULL
  68:FreeRTOS/queue.c **** 
  69:FreeRTOS/queue.c **** typedef struct QueuePointers
  70:FreeRTOS/queue.c **** {
  71:FreeRTOS/queue.c ****     int8_t * pcTail;     /*< Points to the byte at the end of the queue storage area.  Once more by
  72:FreeRTOS/queue.c ****     int8_t * pcReadFrom; /*< Points to the last place that a queued item was read from when the str
  73:FreeRTOS/queue.c **** } QueuePointers_t;
  74:FreeRTOS/queue.c **** 
  75:FreeRTOS/queue.c **** typedef struct SemaphoreData
  76:FreeRTOS/queue.c **** {
  77:FreeRTOS/queue.c ****     TaskHandle_t xMutexHolder;        /*< The handle of the task that holds the mutex. */
  78:FreeRTOS/queue.c ****     UBaseType_t uxRecursiveCallCount; /*< Maintains a count of the number of times a recursive mute
  79:FreeRTOS/queue.c **** } SemaphoreData_t;
  80:FreeRTOS/queue.c **** 
  81:FreeRTOS/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
  82:FreeRTOS/queue.c ****  * zero. */
  83:FreeRTOS/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH    ( ( UBaseType_t ) 0 )
  84:FreeRTOS/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME          ( ( TickType_t ) 0U )
  85:FreeRTOS/queue.c **** 
  86:FreeRTOS/queue.c **** #if ( configUSE_PREEMPTION == 0 )
  87:FreeRTOS/queue.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 3


  88:FreeRTOS/queue.c **** /* If the cooperative scheduler is being used then a yield should not be
  89:FreeRTOS/queue.c ****  * performed just because a higher priority task has been woken. */
  90:FreeRTOS/queue.c ****     #define queueYIELD_IF_USING_PREEMPTION()
  91:FreeRTOS/queue.c **** #else
  92:FreeRTOS/queue.c ****     #define queueYIELD_IF_USING_PREEMPTION()    portYIELD_WITHIN_API()
  93:FreeRTOS/queue.c **** #endif
  94:FreeRTOS/queue.c **** 
  95:FreeRTOS/queue.c **** /*
  96:FreeRTOS/queue.c ****  * Definition of the queue used by the scheduler.
  97:FreeRTOS/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
  98:FreeRTOS/queue.c ****  * rationale: https://www.FreeRTOS.org/Embedded-RTOS-Queues.html
  99:FreeRTOS/queue.c ****  */
 100:FreeRTOS/queue.c **** typedef struct QueueDefinition /* The old naming convention is used to prevent breaking kernel awar
 101:FreeRTOS/queue.c **** {
 102:FreeRTOS/queue.c ****     int8_t * pcHead;           /*< Points to the beginning of the queue storage area. */
 103:FreeRTOS/queue.c ****     int8_t * pcWriteTo;        /*< Points to the free next place in the storage area. */
 104:FreeRTOS/queue.c **** 
 105:FreeRTOS/queue.c ****     union
 106:FreeRTOS/queue.c ****     {
 107:FreeRTOS/queue.c ****         QueuePointers_t xQueue;     /*< Data required exclusively when this structure is used as a 
 108:FreeRTOS/queue.c ****         SemaphoreData_t xSemaphore; /*< Data required exclusively when this structure is used as a 
 109:FreeRTOS/queue.c ****     } u;
 110:FreeRTOS/queue.c **** 
 111:FreeRTOS/queue.c ****     List_t xTasksWaitingToSend;             /*< List of tasks that are blocked waiting to post onto
 112:FreeRTOS/queue.c ****     List_t xTasksWaitingToReceive;          /*< List of tasks that are blocked waiting to read from
 113:FreeRTOS/queue.c **** 
 114:FreeRTOS/queue.c ****     volatile UBaseType_t uxMessagesWaiting; /*< The number of items currently in the queue. */
 115:FreeRTOS/queue.c ****     UBaseType_t uxLength;                   /*< The length of the queue defined as the number of it
 116:FreeRTOS/queue.c ****     UBaseType_t uxItemSize;                 /*< The size of each items that the queue will hold. */
 117:FreeRTOS/queue.c **** 
 118:FreeRTOS/queue.c ****     volatile int8_t cRxLock;                /*< Stores the number of items received from the queue 
 119:FreeRTOS/queue.c ****     volatile int8_t cTxLock;                /*< Stores the number of items transmitted to the queue
 120:FreeRTOS/queue.c **** 
 121:FreeRTOS/queue.c ****     #if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 122:FreeRTOS/queue.c ****         uint8_t ucStaticallyAllocated; /*< Set to pdTRUE if the memory used by the queue was static
 123:FreeRTOS/queue.c ****     #endif
 124:FreeRTOS/queue.c **** 
 125:FreeRTOS/queue.c ****     #if ( configUSE_QUEUE_SETS == 1 )
 126:FreeRTOS/queue.c ****         struct QueueDefinition * pxQueueSetContainer;
 127:FreeRTOS/queue.c ****     #endif
 128:FreeRTOS/queue.c **** 
 129:FreeRTOS/queue.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 130:FreeRTOS/queue.c ****         UBaseType_t uxQueueNumber;
 131:FreeRTOS/queue.c ****         uint8_t ucQueueType;
 132:FreeRTOS/queue.c ****     #endif
 133:FreeRTOS/queue.c **** } xQUEUE;
 134:FreeRTOS/queue.c **** 
 135:FreeRTOS/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 136:FreeRTOS/queue.c ****  * name below to enable the use of older kernel aware debuggers. */
 137:FreeRTOS/queue.c **** typedef xQUEUE Queue_t;
 138:FreeRTOS/queue.c **** 
 139:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 140:FreeRTOS/queue.c **** 
 141:FreeRTOS/queue.c **** /*
 142:FreeRTOS/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 143:FreeRTOS/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 144:FreeRTOS/queue.c ****  */
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 4


 145:FreeRTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 146:FreeRTOS/queue.c **** 
 147:FreeRTOS/queue.c **** /* The type stored within the queue registry array.  This allows a name
 148:FreeRTOS/queue.c ****  * to be assigned to each queue making kernel aware debugging a little
 149:FreeRTOS/queue.c ****  * more user friendly. */
 150:FreeRTOS/queue.c ****     typedef struct QUEUE_REGISTRY_ITEM
 151:FreeRTOS/queue.c ****     {
 152:FreeRTOS/queue.c ****         const char * pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and s
 153:FreeRTOS/queue.c ****         QueueHandle_t xHandle;
 154:FreeRTOS/queue.c ****     } xQueueRegistryItem;
 155:FreeRTOS/queue.c **** 
 156:FreeRTOS/queue.c **** /* The old xQueueRegistryItem name is maintained above then typedefed to the
 157:FreeRTOS/queue.c ****  * new xQueueRegistryItem name below to enable the use of older kernel aware
 158:FreeRTOS/queue.c ****  * debuggers. */
 159:FreeRTOS/queue.c ****     typedef xQueueRegistryItem QueueRegistryItem_t;
 160:FreeRTOS/queue.c **** 
 161:FreeRTOS/queue.c **** /* The queue registry is simply an array of QueueRegistryItem_t structures.
 162:FreeRTOS/queue.c ****  * The pcQueueName member of a structure being NULL is indicative of the
 163:FreeRTOS/queue.c ****  * array position being vacant. */
 164:FreeRTOS/queue.c ****     PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 165:FreeRTOS/queue.c **** 
 166:FreeRTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 167:FreeRTOS/queue.c **** 
 168:FreeRTOS/queue.c **** /*
 169:FreeRTOS/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 170:FreeRTOS/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 171:FreeRTOS/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 172:FreeRTOS/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 173:FreeRTOS/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 174:FreeRTOS/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 175:FreeRTOS/queue.c ****  */
 176:FreeRTOS/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 177:FreeRTOS/queue.c **** 
 178:FreeRTOS/queue.c **** /*
 179:FreeRTOS/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 180:FreeRTOS/queue.c ****  *
 181:FreeRTOS/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 182:FreeRTOS/queue.c ****  */
 183:FreeRTOS/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue ) PRIVILEGED_FUNCTION;
 184:FreeRTOS/queue.c **** 
 185:FreeRTOS/queue.c **** /*
 186:FreeRTOS/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 187:FreeRTOS/queue.c ****  *
 188:FreeRTOS/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 189:FreeRTOS/queue.c ****  */
 190:FreeRTOS/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t * pxQueue ) PRIVILEGED_FUNCTION;
 191:FreeRTOS/queue.c **** 
 192:FreeRTOS/queue.c **** /*
 193:FreeRTOS/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 194:FreeRTOS/queue.c ****  * back of the queue.
 195:FreeRTOS/queue.c ****  */
 196:FreeRTOS/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
 197:FreeRTOS/queue.c ****                                       const void * pvItemToQueue,
 198:FreeRTOS/queue.c ****                                       const BaseType_t xPosition ) PRIVILEGED_FUNCTION;
 199:FreeRTOS/queue.c **** 
 200:FreeRTOS/queue.c **** /*
 201:FreeRTOS/queue.c ****  * Copies an item out of a queue.
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 5


 202:FreeRTOS/queue.c ****  */
 203:FreeRTOS/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue,
 204:FreeRTOS/queue.c ****                                   void * const pvBuffer ) PRIVILEGED_FUNCTION;
 205:FreeRTOS/queue.c **** 
 206:FreeRTOS/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 207:FreeRTOS/queue.c **** 
 208:FreeRTOS/queue.c **** /*
 209:FreeRTOS/queue.c ****  * Checks to see if a queue is a member of a queue set, and if so, notifies
 210:FreeRTOS/queue.c ****  * the queue set that the queue contains data.
 211:FreeRTOS/queue.c ****  */
 212:FreeRTOS/queue.c ****     static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue ) PRIVILEGED_FUNCTI
 213:FreeRTOS/queue.c **** #endif
 214:FreeRTOS/queue.c **** 
 215:FreeRTOS/queue.c **** /*
 216:FreeRTOS/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 217:FreeRTOS/queue.c ****  * dynamically to fill in the structure's members.
 218:FreeRTOS/queue.c ****  */
 219:FreeRTOS/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
 220:FreeRTOS/queue.c ****                                    const UBaseType_t uxItemSize,
 221:FreeRTOS/queue.c ****                                    uint8_t * pucQueueStorage,
 222:FreeRTOS/queue.c ****                                    const uint8_t ucQueueType,
 223:FreeRTOS/queue.c ****                                    Queue_t * pxNewQueue ) PRIVILEGED_FUNCTION;
 224:FreeRTOS/queue.c **** 
 225:FreeRTOS/queue.c **** /*
 226:FreeRTOS/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 227:FreeRTOS/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 228:FreeRTOS/queue.c ****  * as a mutex.
 229:FreeRTOS/queue.c ****  */
 230:FreeRTOS/queue.c **** #if ( configUSE_MUTEXES == 1 )
 231:FreeRTOS/queue.c ****     static void prvInitialiseMutex( Queue_t * pxNewQueue ) PRIVILEGED_FUNCTION;
 232:FreeRTOS/queue.c **** #endif
 233:FreeRTOS/queue.c **** 
 234:FreeRTOS/queue.c **** #if ( configUSE_MUTEXES == 1 )
 235:FreeRTOS/queue.c **** 
 236:FreeRTOS/queue.c **** /*
 237:FreeRTOS/queue.c ****  * If a task waiting for a mutex causes the mutex holder to inherit a
 238:FreeRTOS/queue.c ****  * priority, but the waiting task times out, then the holder should
 239:FreeRTOS/queue.c ****  * disinherit the priority - but only down to the highest priority of any
 240:FreeRTOS/queue.c ****  * other tasks that are waiting for the same mutex.  This function returns
 241:FreeRTOS/queue.c ****  * that priority.
 242:FreeRTOS/queue.c ****  */
 243:FreeRTOS/queue.c ****     static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue ) PRIVIL
 244:FreeRTOS/queue.c **** #endif
 245:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 246:FreeRTOS/queue.c **** 
 247:FreeRTOS/queue.c **** /*
 248:FreeRTOS/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 249:FreeRTOS/queue.c ****  * accessing the queue event lists.
 250:FreeRTOS/queue.c ****  */
 251:FreeRTOS/queue.c **** #define prvLockQueue( pxQueue )                            \
 252:FreeRTOS/queue.c ****     taskENTER_CRITICAL();                                  \
 253:FreeRTOS/queue.c ****     {                                                      \
 254:FreeRTOS/queue.c ****         if( ( pxQueue )->cRxLock == queueUNLOCKED )        \
 255:FreeRTOS/queue.c ****         {                                                  \
 256:FreeRTOS/queue.c ****             ( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED; \
 257:FreeRTOS/queue.c ****         }                                                  \
 258:FreeRTOS/queue.c ****         if( ( pxQueue )->cTxLock == queueUNLOCKED )        \
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 6


 259:FreeRTOS/queue.c ****         {                                                  \
 260:FreeRTOS/queue.c ****             ( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED; \
 261:FreeRTOS/queue.c ****         }                                                  \
 262:FreeRTOS/queue.c ****     }                                                      \
 263:FreeRTOS/queue.c ****     taskEXIT_CRITICAL()
 264:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 265:FreeRTOS/queue.c **** 
 266:FreeRTOS/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
 267:FreeRTOS/queue.c ****                                BaseType_t xNewQueue )
 268:FreeRTOS/queue.c **** {
 269:FreeRTOS/queue.c ****     BaseType_t xReturn = pdPASS;
 270:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 271:FreeRTOS/queue.c **** 
 272:FreeRTOS/queue.c ****     configASSERT( pxQueue );
 273:FreeRTOS/queue.c **** 
 274:FreeRTOS/queue.c ****     if( ( pxQueue != NULL ) &&
 275:FreeRTOS/queue.c ****         ( pxQueue->uxLength >= 1U ) &&
 276:FreeRTOS/queue.c ****         /* Check for multiplication overflow. */
 277:FreeRTOS/queue.c ****         ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 278:FreeRTOS/queue.c ****     {
 279:FreeRTOS/queue.c ****         taskENTER_CRITICAL();
 280:FreeRTOS/queue.c ****         {
 281:FreeRTOS/queue.c ****             pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize 
 282:FreeRTOS/queue.c ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 283:FreeRTOS/queue.c ****             pxQueue->pcWriteTo = pxQueue->pcHead;
 284:FreeRTOS/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue
 285:FreeRTOS/queue.c ****             pxQueue->cRxLock = queueUNLOCKED;
 286:FreeRTOS/queue.c ****             pxQueue->cTxLock = queueUNLOCKED;
 287:FreeRTOS/queue.c **** 
 288:FreeRTOS/queue.c ****             if( xNewQueue == pdFALSE )
 289:FreeRTOS/queue.c ****             {
 290:FreeRTOS/queue.c ****                 /* If there are tasks blocked waiting to read from the queue, then
 291:FreeRTOS/queue.c ****                  * the tasks will remain blocked as after this function exits the queue
 292:FreeRTOS/queue.c ****                  * will still be empty.  If there are tasks blocked waiting to write to
 293:FreeRTOS/queue.c ****                  * the queue, then one should be unblocked as after this function exits
 294:FreeRTOS/queue.c ****                  * it will be possible to write to it. */
 295:FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 296:FreeRTOS/queue.c ****                 {
 297:FreeRTOS/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 298:FreeRTOS/queue.c ****                     {
 299:FreeRTOS/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
 300:FreeRTOS/queue.c ****                     }
 301:FreeRTOS/queue.c ****                     else
 302:FreeRTOS/queue.c ****                     {
 303:FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
 304:FreeRTOS/queue.c ****                     }
 305:FreeRTOS/queue.c ****                 }
 306:FreeRTOS/queue.c ****                 else
 307:FreeRTOS/queue.c ****                 {
 308:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
 309:FreeRTOS/queue.c ****                 }
 310:FreeRTOS/queue.c ****             }
 311:FreeRTOS/queue.c ****             else
 312:FreeRTOS/queue.c ****             {
 313:FreeRTOS/queue.c ****                 /* Ensure the event queues start in the correct state. */
 314:FreeRTOS/queue.c ****                 vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 315:FreeRTOS/queue.c ****                 vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 7


 316:FreeRTOS/queue.c ****             }
 317:FreeRTOS/queue.c ****         }
 318:FreeRTOS/queue.c ****         taskEXIT_CRITICAL();
 319:FreeRTOS/queue.c ****     }
 320:FreeRTOS/queue.c ****     else
 321:FreeRTOS/queue.c ****     {
 322:FreeRTOS/queue.c ****         xReturn = pdFAIL;
 323:FreeRTOS/queue.c ****     }
 324:FreeRTOS/queue.c **** 
 325:FreeRTOS/queue.c ****     configASSERT( xReturn != pdFAIL );
 326:FreeRTOS/queue.c **** 
 327:FreeRTOS/queue.c ****     /* A value is returned for calling semantic consistency with previous
 328:FreeRTOS/queue.c ****      * versions. */
 329:FreeRTOS/queue.c ****     return xReturn;
 330:FreeRTOS/queue.c **** }
 331:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 332:FreeRTOS/queue.c **** 
 333:FreeRTOS/queue.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 334:FreeRTOS/queue.c **** 
 335:FreeRTOS/queue.c ****     QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
 336:FreeRTOS/queue.c ****                                              const UBaseType_t uxItemSize,
 337:FreeRTOS/queue.c ****                                              uint8_t * pucQueueStorage,
 338:FreeRTOS/queue.c ****                                              StaticQueue_t * pxStaticQueue,
 339:FreeRTOS/queue.c ****                                              const uint8_t ucQueueType )
 340:FreeRTOS/queue.c ****     {
 341:FreeRTOS/queue.c ****         Queue_t * pxNewQueue = NULL;
 342:FreeRTOS/queue.c **** 
 343:FreeRTOS/queue.c ****         /* The StaticQueue_t structure and the queue storage area must be
 344:FreeRTOS/queue.c ****          * supplied. */
 345:FreeRTOS/queue.c ****         configASSERT( pxStaticQueue );
 346:FreeRTOS/queue.c **** 
 347:FreeRTOS/queue.c ****         if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 348:FreeRTOS/queue.c ****             ( pxStaticQueue != NULL ) &&
 349:FreeRTOS/queue.c **** 
 350:FreeRTOS/queue.c ****             /* A queue storage area should be provided if the item size is not 0, and
 351:FreeRTOS/queue.c ****              * should not be provided if the item size is 0. */
 352:FreeRTOS/queue.c ****             ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 353:FreeRTOS/queue.c ****             ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 354:FreeRTOS/queue.c ****         {
 355:FreeRTOS/queue.c ****             #if ( configASSERT_DEFINED == 1 )
 356:FreeRTOS/queue.c ****                 {
 357:FreeRTOS/queue.c ****                     /* Sanity check that the size of the structure used to declare a
 358:FreeRTOS/queue.c ****                      * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 359:FreeRTOS/queue.c ****                      * the real queue and semaphore structures. */
 360:FreeRTOS/queue.c ****                     volatile size_t xSize = sizeof( StaticQueue_t );
 361:FreeRTOS/queue.c **** 
 362:FreeRTOS/queue.c ****                     /* This assertion cannot be branch covered in unit tests */
 363:FreeRTOS/queue.c ****                     configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 364:FreeRTOS/queue.c ****                     ( void ) xSize;                             /* Keeps lint quiet when configASSE
 365:FreeRTOS/queue.c ****                 }
 366:FreeRTOS/queue.c ****             #endif /* configASSERT_DEFINED */
 367:FreeRTOS/queue.c **** 
 368:FreeRTOS/queue.c ****             /* The address of a statically allocated queue was passed in, use it.
 369:FreeRTOS/queue.c ****              * The address of a statically allocated storage area was also passed in
 370:FreeRTOS/queue.c ****              * but is already set. */
 371:FreeRTOS/queue.c ****             pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the
 372:FreeRTOS/queue.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 8


 373:FreeRTOS/queue.c ****             #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 374:FreeRTOS/queue.c ****                 {
 375:FreeRTOS/queue.c ****                     /* Queues can be allocated wither statically or dynamically, so
 376:FreeRTOS/queue.c ****                      * note this queue was allocated statically in case the queue is
 377:FreeRTOS/queue.c ****                      * later deleted. */
 378:FreeRTOS/queue.c ****                     pxNewQueue->ucStaticallyAllocated = pdTRUE;
 379:FreeRTOS/queue.c ****                 }
 380:FreeRTOS/queue.c ****             #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 381:FreeRTOS/queue.c **** 
 382:FreeRTOS/queue.c ****             prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQu
 383:FreeRTOS/queue.c ****         }
 384:FreeRTOS/queue.c ****         else
 385:FreeRTOS/queue.c ****         {
 386:FreeRTOS/queue.c ****             configASSERT( pxNewQueue );
 387:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 388:FreeRTOS/queue.c ****         }
 389:FreeRTOS/queue.c **** 
 390:FreeRTOS/queue.c ****         return pxNewQueue;
 391:FreeRTOS/queue.c ****     }
 392:FreeRTOS/queue.c **** 
 393:FreeRTOS/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 394:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 395:FreeRTOS/queue.c **** 
 396:FreeRTOS/queue.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 397:FreeRTOS/queue.c **** 
 398:FreeRTOS/queue.c ****     QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
 399:FreeRTOS/queue.c ****                                        const UBaseType_t uxItemSize,
 400:FreeRTOS/queue.c ****                                        const uint8_t ucQueueType )
 401:FreeRTOS/queue.c ****     {
 402:FreeRTOS/queue.c ****         Queue_t * pxNewQueue = NULL;
 403:FreeRTOS/queue.c ****         size_t xQueueSizeInBytes;
 404:FreeRTOS/queue.c ****         uint8_t * pucQueueStorage;
 405:FreeRTOS/queue.c **** 
 406:FreeRTOS/queue.c ****         if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 407:FreeRTOS/queue.c ****             /* Check for multiplication overflow. */
 408:FreeRTOS/queue.c ****             ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 409:FreeRTOS/queue.c ****             /* Check for addition overflow. */
 410:FreeRTOS/queue.c ****             ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 411:FreeRTOS/queue.c ****         {
 412:FreeRTOS/queue.c ****             /* Allocate enough space to hold the maximum number of items that
 413:FreeRTOS/queue.c ****              * can be in the queue at any time.  It is valid for uxItemSize to be
 414:FreeRTOS/queue.c ****              * zero in the case the queue is used as a semaphore. */
 415:FreeRTOS/queue.c ****             xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA excep
 416:FreeRTOS/queue.c **** 
 417:FreeRTOS/queue.c ****             /* Allocate the queue and storage area.  Justification for MISRA
 418:FreeRTOS/queue.c ****              * deviation as follows:  pvPortMalloc() always ensures returned memory
 419:FreeRTOS/queue.c ****              * blocks are aligned per the requirements of the MCU stack.  In this case
 420:FreeRTOS/queue.c ****              * pvPortMalloc() must return a pointer that is guaranteed to meet the
 421:FreeRTOS/queue.c ****              * alignment requirements of the Queue_t structure - which in this case
 422:FreeRTOS/queue.c ****              * is an int8_t *.  Therefore, whenever the stack alignment requirements
 423:FreeRTOS/queue.c ****              * are greater than or equal to the pointer to char requirements the cast
 424:FreeRTOS/queue.c ****              * is safe.  In other cases alignment requirements are not strict (one or
 425:FreeRTOS/queue.c ****              * two bytes). */
 426:FreeRTOS/queue.c ****             pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lin
 427:FreeRTOS/queue.c **** 
 428:FreeRTOS/queue.c ****             if( pxNewQueue != NULL )
 429:FreeRTOS/queue.c ****             {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 9


 430:FreeRTOS/queue.c ****                 /* Jump past the queue structure to find the location of the queue
 431:FreeRTOS/queue.c ****                  * storage area. */
 432:FreeRTOS/queue.c ****                 pucQueueStorage = ( uint8_t * ) pxNewQueue;
 433:FreeRTOS/queue.c ****                 pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on c
 434:FreeRTOS/queue.c **** 
 435:FreeRTOS/queue.c ****                 #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 436:FreeRTOS/queue.c ****                     {
 437:FreeRTOS/queue.c ****                         /* Queues can be created either statically or dynamically, so
 438:FreeRTOS/queue.c ****                          * note this task was created dynamically in case it is later
 439:FreeRTOS/queue.c ****                          * deleted. */
 440:FreeRTOS/queue.c ****                         pxNewQueue->ucStaticallyAllocated = pdFALSE;
 441:FreeRTOS/queue.c ****                     }
 442:FreeRTOS/queue.c ****                 #endif /* configSUPPORT_STATIC_ALLOCATION */
 443:FreeRTOS/queue.c **** 
 444:FreeRTOS/queue.c ****                 prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxN
 445:FreeRTOS/queue.c ****             }
 446:FreeRTOS/queue.c ****             else
 447:FreeRTOS/queue.c ****             {
 448:FreeRTOS/queue.c ****                 traceQUEUE_CREATE_FAILED( ucQueueType );
 449:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
 450:FreeRTOS/queue.c ****             }
 451:FreeRTOS/queue.c ****         }
 452:FreeRTOS/queue.c ****         else
 453:FreeRTOS/queue.c ****         {
 454:FreeRTOS/queue.c ****             configASSERT( pxNewQueue );
 455:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 456:FreeRTOS/queue.c ****         }
 457:FreeRTOS/queue.c **** 
 458:FreeRTOS/queue.c ****         return pxNewQueue;
 459:FreeRTOS/queue.c ****     }
 460:FreeRTOS/queue.c **** 
 461:FreeRTOS/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 462:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 463:FreeRTOS/queue.c **** 
 464:FreeRTOS/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
 465:FreeRTOS/queue.c ****                                    const UBaseType_t uxItemSize,
 466:FreeRTOS/queue.c ****                                    uint8_t * pucQueueStorage,
 467:FreeRTOS/queue.c ****                                    const uint8_t ucQueueType,
 468:FreeRTOS/queue.c ****                                    Queue_t * pxNewQueue )
 469:FreeRTOS/queue.c **** {
 470:FreeRTOS/queue.c ****     /* Remove compiler warnings about unused parameters should
 471:FreeRTOS/queue.c ****      * configUSE_TRACE_FACILITY not be set to 1. */
 472:FreeRTOS/queue.c ****     ( void ) ucQueueType;
 473:FreeRTOS/queue.c **** 
 474:FreeRTOS/queue.c ****     if( uxItemSize == ( UBaseType_t ) 0 )
 475:FreeRTOS/queue.c ****     {
 476:FreeRTOS/queue.c ****         /* No RAM was allocated for the queue storage area, but PC head cannot
 477:FreeRTOS/queue.c ****          * be set to NULL because NULL is used as a key to say the queue is used as
 478:FreeRTOS/queue.c ****          * a mutex.  Therefore just set pcHead to point to the queue as a benign
 479:FreeRTOS/queue.c ****          * value that is known to be within the memory map. */
 480:FreeRTOS/queue.c ****         pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 481:FreeRTOS/queue.c ****     }
 482:FreeRTOS/queue.c ****     else
 483:FreeRTOS/queue.c ****     {
 484:FreeRTOS/queue.c ****         /* Set the head to the start of the queue storage area. */
 485:FreeRTOS/queue.c ****         pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 486:FreeRTOS/queue.c ****     }
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 10


 487:FreeRTOS/queue.c **** 
 488:FreeRTOS/queue.c ****     /* Initialise the queue members as described where the queue type is
 489:FreeRTOS/queue.c ****      * defined. */
 490:FreeRTOS/queue.c ****     pxNewQueue->uxLength = uxQueueLength;
 491:FreeRTOS/queue.c ****     pxNewQueue->uxItemSize = uxItemSize;
 492:FreeRTOS/queue.c ****     ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 493:FreeRTOS/queue.c **** 
 494:FreeRTOS/queue.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 495:FreeRTOS/queue.c ****         {
 496:FreeRTOS/queue.c ****             pxNewQueue->ucQueueType = ucQueueType;
 497:FreeRTOS/queue.c ****         }
 498:FreeRTOS/queue.c ****     #endif /* configUSE_TRACE_FACILITY */
 499:FreeRTOS/queue.c **** 
 500:FreeRTOS/queue.c ****     #if ( configUSE_QUEUE_SETS == 1 )
 501:FreeRTOS/queue.c ****         {
 502:FreeRTOS/queue.c ****             pxNewQueue->pxQueueSetContainer = NULL;
 503:FreeRTOS/queue.c ****         }
 504:FreeRTOS/queue.c ****     #endif /* configUSE_QUEUE_SETS */
 505:FreeRTOS/queue.c **** 
 506:FreeRTOS/queue.c ****     traceQUEUE_CREATE( pxNewQueue );
 507:FreeRTOS/queue.c **** }
 508:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 509:FreeRTOS/queue.c **** 
 510:FreeRTOS/queue.c **** #if ( configUSE_MUTEXES == 1 )
 511:FreeRTOS/queue.c **** 
 512:FreeRTOS/queue.c ****     static void prvInitialiseMutex( Queue_t * pxNewQueue )
 513:FreeRTOS/queue.c ****     {
 514:FreeRTOS/queue.c ****         if( pxNewQueue != NULL )
 515:FreeRTOS/queue.c ****         {
 516:FreeRTOS/queue.c ****             /* The queue create function will set all the queue structure members
 517:FreeRTOS/queue.c ****             * correctly for a generic queue, but this function is creating a
 518:FreeRTOS/queue.c ****             * mutex.  Overwrite those members that need to be set differently -
 519:FreeRTOS/queue.c ****             * in particular the information required for priority inheritance. */
 520:FreeRTOS/queue.c ****             pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 521:FreeRTOS/queue.c ****             pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 522:FreeRTOS/queue.c **** 
 523:FreeRTOS/queue.c ****             /* In case this is a recursive mutex. */
 524:FreeRTOS/queue.c ****             pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 525:FreeRTOS/queue.c **** 
 526:FreeRTOS/queue.c ****             traceCREATE_MUTEX( pxNewQueue );
 527:FreeRTOS/queue.c **** 
 528:FreeRTOS/queue.c ****             /* Start with the semaphore in the expected state. */
 529:FreeRTOS/queue.c ****             ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 530:FreeRTOS/queue.c ****         }
 531:FreeRTOS/queue.c ****         else
 532:FreeRTOS/queue.c ****         {
 533:FreeRTOS/queue.c ****             traceCREATE_MUTEX_FAILED();
 534:FreeRTOS/queue.c ****         }
 535:FreeRTOS/queue.c ****     }
 536:FreeRTOS/queue.c **** 
 537:FreeRTOS/queue.c **** #endif /* configUSE_MUTEXES */
 538:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 539:FreeRTOS/queue.c **** 
 540:FreeRTOS/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 541:FreeRTOS/queue.c **** 
 542:FreeRTOS/queue.c ****     QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 543:FreeRTOS/queue.c ****     {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 11


 544:FreeRTOS/queue.c ****         QueueHandle_t xNewQueue;
 545:FreeRTOS/queue.c ****         const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 546:FreeRTOS/queue.c **** 
 547:FreeRTOS/queue.c ****         xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 548:FreeRTOS/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 549:FreeRTOS/queue.c **** 
 550:FreeRTOS/queue.c ****         return xNewQueue;
 551:FreeRTOS/queue.c ****     }
 552:FreeRTOS/queue.c **** 
 553:FreeRTOS/queue.c **** #endif /* configUSE_MUTEXES */
 554:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 555:FreeRTOS/queue.c **** 
 556:FreeRTOS/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 557:FreeRTOS/queue.c **** 
 558:FreeRTOS/queue.c ****     QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType,
 559:FreeRTOS/queue.c ****                                            StaticQueue_t * pxStaticQueue )
 560:FreeRTOS/queue.c ****     {
 561:FreeRTOS/queue.c ****         QueueHandle_t xNewQueue;
 562:FreeRTOS/queue.c ****         const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 563:FreeRTOS/queue.c **** 
 564:FreeRTOS/queue.c ****         /* Prevent compiler warnings about unused parameters if
 565:FreeRTOS/queue.c ****          * configUSE_TRACE_FACILITY does not equal 1. */
 566:FreeRTOS/queue.c ****         ( void ) ucQueueType;
 567:FreeRTOS/queue.c **** 
 568:FreeRTOS/queue.c ****         xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQ
 569:FreeRTOS/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 570:FreeRTOS/queue.c **** 
 571:FreeRTOS/queue.c ****         return xNewQueue;
 572:FreeRTOS/queue.c ****     }
 573:FreeRTOS/queue.c **** 
 574:FreeRTOS/queue.c **** #endif /* configUSE_MUTEXES */
 575:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 576:FreeRTOS/queue.c **** 
 577:FreeRTOS/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 578:FreeRTOS/queue.c **** 
 579:FreeRTOS/queue.c ****     TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 580:FreeRTOS/queue.c ****     {
 581:FreeRTOS/queue.c ****         TaskHandle_t pxReturn;
 582:FreeRTOS/queue.c ****         Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 583:FreeRTOS/queue.c **** 
 584:FreeRTOS/queue.c ****         configASSERT( xSemaphore );
 585:FreeRTOS/queue.c **** 
 586:FreeRTOS/queue.c ****         /* This function is called by xSemaphoreGetMutexHolder(), and should not
 587:FreeRTOS/queue.c ****          * be called directly.  Note:  This is a good way of determining if the
 588:FreeRTOS/queue.c ****          * calling task is the mutex holder, but not a good way of determining the
 589:FreeRTOS/queue.c ****          * identity of the mutex holder, as the holder may change between the
 590:FreeRTOS/queue.c ****          * following critical section exiting and the function returning. */
 591:FreeRTOS/queue.c ****         taskENTER_CRITICAL();
 592:FreeRTOS/queue.c ****         {
 593:FreeRTOS/queue.c ****             if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 594:FreeRTOS/queue.c ****             {
 595:FreeRTOS/queue.c ****                 pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 596:FreeRTOS/queue.c ****             }
 597:FreeRTOS/queue.c ****             else
 598:FreeRTOS/queue.c ****             {
 599:FreeRTOS/queue.c ****                 pxReturn = NULL;
 600:FreeRTOS/queue.c ****             }
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 12


 601:FreeRTOS/queue.c ****         }
 602:FreeRTOS/queue.c ****         taskEXIT_CRITICAL();
 603:FreeRTOS/queue.c **** 
 604:FreeRTOS/queue.c ****         return pxReturn;
 605:FreeRTOS/queue.c ****     } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 606:FreeRTOS/queue.c **** 
 607:FreeRTOS/queue.c **** #endif /* if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) ) */
 608:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 609:FreeRTOS/queue.c **** 
 610:FreeRTOS/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 611:FreeRTOS/queue.c **** 
 612:FreeRTOS/queue.c ****     TaskHandle_t xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore )
 613:FreeRTOS/queue.c ****     {
 614:FreeRTOS/queue.c ****         TaskHandle_t pxReturn;
 615:FreeRTOS/queue.c **** 
 616:FreeRTOS/queue.c ****         configASSERT( xSemaphore );
 617:FreeRTOS/queue.c **** 
 618:FreeRTOS/queue.c ****         /* Mutexes cannot be used in interrupt service routines, so the mutex
 619:FreeRTOS/queue.c ****          * holder should not change in an ISR, and therefore a critical section is
 620:FreeRTOS/queue.c ****          * not required here. */
 621:FreeRTOS/queue.c ****         if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 622:FreeRTOS/queue.c ****         {
 623:FreeRTOS/queue.c ****             pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
 624:FreeRTOS/queue.c ****         }
 625:FreeRTOS/queue.c ****         else
 626:FreeRTOS/queue.c ****         {
 627:FreeRTOS/queue.c ****             pxReturn = NULL;
 628:FreeRTOS/queue.c ****         }
 629:FreeRTOS/queue.c **** 
 630:FreeRTOS/queue.c ****         return pxReturn;
 631:FreeRTOS/queue.c ****     } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 632:FreeRTOS/queue.c **** 
 633:FreeRTOS/queue.c **** #endif /* if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) ) */
 634:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 635:FreeRTOS/queue.c **** 
 636:FreeRTOS/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 637:FreeRTOS/queue.c **** 
 638:FreeRTOS/queue.c ****     BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 639:FreeRTOS/queue.c ****     {
 640:FreeRTOS/queue.c ****         BaseType_t xReturn;
 641:FreeRTOS/queue.c ****         Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 642:FreeRTOS/queue.c **** 
 643:FreeRTOS/queue.c ****         configASSERT( pxMutex );
 644:FreeRTOS/queue.c **** 
 645:FreeRTOS/queue.c ****         /* If this is the task that holds the mutex then xMutexHolder will not
 646:FreeRTOS/queue.c ****          * change outside of this task.  If this task does not hold the mutex then
 647:FreeRTOS/queue.c ****          * pxMutexHolder can never coincidentally equal the tasks handle, and as
 648:FreeRTOS/queue.c ****          * this is the only condition we are interested in it does not matter if
 649:FreeRTOS/queue.c ****          * pxMutexHolder is accessed simultaneously by another task.  Therefore no
 650:FreeRTOS/queue.c ****          * mutual exclusion is required to test the pxMutexHolder variable. */
 651:FreeRTOS/queue.c ****         if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 652:FreeRTOS/queue.c ****         {
 653:FreeRTOS/queue.c ****             traceGIVE_MUTEX_RECURSIVE( pxMutex );
 654:FreeRTOS/queue.c **** 
 655:FreeRTOS/queue.c ****             /* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
 656:FreeRTOS/queue.c ****              * the task handle, therefore no underflow check is required.  Also,
 657:FreeRTOS/queue.c ****              * uxRecursiveCallCount is only modified by the mutex holder, and as
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 13


 658:FreeRTOS/queue.c ****              * there can only be one, no mutual exclusion is required to modify the
 659:FreeRTOS/queue.c ****              * uxRecursiveCallCount member. */
 660:FreeRTOS/queue.c ****             ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 661:FreeRTOS/queue.c **** 
 662:FreeRTOS/queue.c ****             /* Has the recursive call count unwound to 0? */
 663:FreeRTOS/queue.c ****             if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 664:FreeRTOS/queue.c ****             {
 665:FreeRTOS/queue.c ****                 /* Return the mutex.  This will automatically unblock any other
 666:FreeRTOS/queue.c ****                  * task that might be waiting to access the mutex. */
 667:FreeRTOS/queue.c ****                 ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO
 668:FreeRTOS/queue.c ****             }
 669:FreeRTOS/queue.c ****             else
 670:FreeRTOS/queue.c ****             {
 671:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
 672:FreeRTOS/queue.c ****             }
 673:FreeRTOS/queue.c **** 
 674:FreeRTOS/queue.c ****             xReturn = pdPASS;
 675:FreeRTOS/queue.c ****         }
 676:FreeRTOS/queue.c ****         else
 677:FreeRTOS/queue.c ****         {
 678:FreeRTOS/queue.c ****             /* The mutex cannot be given because the calling task is not the
 679:FreeRTOS/queue.c ****              * holder. */
 680:FreeRTOS/queue.c ****             xReturn = pdFAIL;
 681:FreeRTOS/queue.c **** 
 682:FreeRTOS/queue.c ****             traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 683:FreeRTOS/queue.c ****         }
 684:FreeRTOS/queue.c **** 
 685:FreeRTOS/queue.c ****         return xReturn;
 686:FreeRTOS/queue.c ****     }
 687:FreeRTOS/queue.c **** 
 688:FreeRTOS/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 689:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 690:FreeRTOS/queue.c **** 
 691:FreeRTOS/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 692:FreeRTOS/queue.c **** 
 693:FreeRTOS/queue.c ****     BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex,
 694:FreeRTOS/queue.c ****                                          TickType_t xTicksToWait )
 695:FreeRTOS/queue.c ****     {
 696:FreeRTOS/queue.c ****         BaseType_t xReturn;
 697:FreeRTOS/queue.c ****         Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 698:FreeRTOS/queue.c **** 
 699:FreeRTOS/queue.c ****         configASSERT( pxMutex );
 700:FreeRTOS/queue.c **** 
 701:FreeRTOS/queue.c ****         /* Comments regarding mutual exclusion as per those within
 702:FreeRTOS/queue.c ****          * xQueueGiveMutexRecursive(). */
 703:FreeRTOS/queue.c **** 
 704:FreeRTOS/queue.c ****         traceTAKE_MUTEX_RECURSIVE( pxMutex );
 705:FreeRTOS/queue.c **** 
 706:FreeRTOS/queue.c ****         if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 707:FreeRTOS/queue.c ****         {
 708:FreeRTOS/queue.c ****             ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 709:FreeRTOS/queue.c ****             xReturn = pdPASS;
 710:FreeRTOS/queue.c ****         }
 711:FreeRTOS/queue.c ****         else
 712:FreeRTOS/queue.c ****         {
 713:FreeRTOS/queue.c ****             xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 714:FreeRTOS/queue.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 14


 715:FreeRTOS/queue.c ****             /* pdPASS will only be returned if the mutex was successfully
 716:FreeRTOS/queue.c ****              * obtained.  The calling task may have entered the Blocked state
 717:FreeRTOS/queue.c ****              * before reaching here. */
 718:FreeRTOS/queue.c ****             if( xReturn != pdFAIL )
 719:FreeRTOS/queue.c ****             {
 720:FreeRTOS/queue.c ****                 ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 721:FreeRTOS/queue.c ****             }
 722:FreeRTOS/queue.c ****             else
 723:FreeRTOS/queue.c ****             {
 724:FreeRTOS/queue.c ****                 traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 725:FreeRTOS/queue.c ****             }
 726:FreeRTOS/queue.c ****         }
 727:FreeRTOS/queue.c **** 
 728:FreeRTOS/queue.c ****         return xReturn;
 729:FreeRTOS/queue.c ****     }
 730:FreeRTOS/queue.c **** 
 731:FreeRTOS/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 732:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 733:FreeRTOS/queue.c **** 
 734:FreeRTOS/queue.c **** #if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 735:FreeRTOS/queue.c **** 
 736:FreeRTOS/queue.c ****     QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount,
 737:FreeRTOS/queue.c ****                                                        const UBaseType_t uxInitialCount,
 738:FreeRTOS/queue.c ****                                                        StaticQueue_t * pxStaticQueue )
 739:FreeRTOS/queue.c ****     {
 740:FreeRTOS/queue.c ****         QueueHandle_t xHandle = NULL;
 741:FreeRTOS/queue.c **** 
 742:FreeRTOS/queue.c ****         if( ( uxMaxCount != 0 ) &&
 743:FreeRTOS/queue.c ****             ( uxInitialCount <= uxMaxCount ) )
 744:FreeRTOS/queue.c ****         {
 745:FreeRTOS/queue.c ****             xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL
 746:FreeRTOS/queue.c **** 
 747:FreeRTOS/queue.c ****             if( xHandle != NULL )
 748:FreeRTOS/queue.c ****             {
 749:FreeRTOS/queue.c ****                 ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 750:FreeRTOS/queue.c **** 
 751:FreeRTOS/queue.c ****                 traceCREATE_COUNTING_SEMAPHORE();
 752:FreeRTOS/queue.c ****             }
 753:FreeRTOS/queue.c ****             else
 754:FreeRTOS/queue.c ****             {
 755:FreeRTOS/queue.c ****                 traceCREATE_COUNTING_SEMAPHORE_FAILED();
 756:FreeRTOS/queue.c ****             }
 757:FreeRTOS/queue.c ****         }
 758:FreeRTOS/queue.c ****         else
 759:FreeRTOS/queue.c ****         {
 760:FreeRTOS/queue.c ****             configASSERT( xHandle );
 761:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 762:FreeRTOS/queue.c ****         }
 763:FreeRTOS/queue.c **** 
 764:FreeRTOS/queue.c ****         return xHandle;
 765:FreeRTOS/queue.c ****     }
 766:FreeRTOS/queue.c **** 
 767:FreeRTOS/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 768:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 769:FreeRTOS/queue.c **** 
 770:FreeRTOS/queue.c **** #if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 771:FreeRTOS/queue.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 15


 772:FreeRTOS/queue.c ****     QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
 773:FreeRTOS/queue.c ****                                                  const UBaseType_t uxInitialCount )
 774:FreeRTOS/queue.c ****     {
 775:FreeRTOS/queue.c ****         QueueHandle_t xHandle = NULL;
 776:FreeRTOS/queue.c **** 
 777:FreeRTOS/queue.c ****         if( ( uxMaxCount != 0 ) &&
 778:FreeRTOS/queue.c ****             ( uxInitialCount <= uxMaxCount ) )
 779:FreeRTOS/queue.c ****         {
 780:FreeRTOS/queue.c ****             xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE
 781:FreeRTOS/queue.c **** 
 782:FreeRTOS/queue.c ****             if( xHandle != NULL )
 783:FreeRTOS/queue.c ****             {
 784:FreeRTOS/queue.c ****                 ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 785:FreeRTOS/queue.c **** 
 786:FreeRTOS/queue.c ****                 traceCREATE_COUNTING_SEMAPHORE();
 787:FreeRTOS/queue.c ****             }
 788:FreeRTOS/queue.c ****             else
 789:FreeRTOS/queue.c ****             {
 790:FreeRTOS/queue.c ****                 traceCREATE_COUNTING_SEMAPHORE_FAILED();
 791:FreeRTOS/queue.c ****             }
 792:FreeRTOS/queue.c ****         }
 793:FreeRTOS/queue.c ****         else
 794:FreeRTOS/queue.c ****         {
 795:FreeRTOS/queue.c ****             configASSERT( xHandle );
 796:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 797:FreeRTOS/queue.c ****         }
 798:FreeRTOS/queue.c **** 
 799:FreeRTOS/queue.c ****         return xHandle;
 800:FreeRTOS/queue.c ****     }
 801:FreeRTOS/queue.c **** 
 802:FreeRTOS/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 803:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 804:FreeRTOS/queue.c **** 
 805:FreeRTOS/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
 806:FreeRTOS/queue.c ****                               const void * const pvItemToQueue,
 807:FreeRTOS/queue.c ****                               TickType_t xTicksToWait,
 808:FreeRTOS/queue.c ****                               const BaseType_t xCopyPosition )
 809:FreeRTOS/queue.c **** {
 810:FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 811:FreeRTOS/queue.c ****     TimeOut_t xTimeOut;
 812:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 813:FreeRTOS/queue.c **** 
 814:FreeRTOS/queue.c ****     configASSERT( pxQueue );
 815:FreeRTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 816:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 817:FreeRTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 818:FreeRTOS/queue.c ****         {
 819:FreeRTOS/queue.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
 820:FreeRTOS/queue.c ****         }
 821:FreeRTOS/queue.c ****     #endif
 822:FreeRTOS/queue.c **** 
 823:FreeRTOS/queue.c ****     /*lint -save -e904 This function relaxes the coding standard somewhat to
 824:FreeRTOS/queue.c ****      * allow return statements within the function itself.  This is done in the
 825:FreeRTOS/queue.c ****      * interest of execution time efficiency. */
 826:FreeRTOS/queue.c ****     for( ; ; )
 827:FreeRTOS/queue.c ****     {
 828:FreeRTOS/queue.c ****         taskENTER_CRITICAL();
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 16


 829:FreeRTOS/queue.c ****         {
 830:FreeRTOS/queue.c ****             /* Is there room on the queue now?  The running task must be the
 831:FreeRTOS/queue.c ****              * highest priority task wanting to access the queue.  If the head item
 832:FreeRTOS/queue.c ****              * in the queue is to be overwritten then it does not matter if the
 833:FreeRTOS/queue.c ****              * queue is full. */
 834:FreeRTOS/queue.c ****             if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERW
 835:FreeRTOS/queue.c ****             {
 836:FreeRTOS/queue.c ****                 traceQUEUE_SEND( pxQueue );
 837:FreeRTOS/queue.c **** 
 838:FreeRTOS/queue.c ****                 #if ( configUSE_QUEUE_SETS == 1 )
 839:FreeRTOS/queue.c ****                     {
 840:FreeRTOS/queue.c ****                         const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 841:FreeRTOS/queue.c **** 
 842:FreeRTOS/queue.c ****                         xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition 
 843:FreeRTOS/queue.c **** 
 844:FreeRTOS/queue.c ****                         if( pxQueue->pxQueueSetContainer != NULL )
 845:FreeRTOS/queue.c ****                         {
 846:FreeRTOS/queue.c ****                             if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting 
 847:FreeRTOS/queue.c ****                             {
 848:FreeRTOS/queue.c ****                                 /* Do not notify the queue set as an existing item
 849:FreeRTOS/queue.c ****                                  * was overwritten in the queue so the number of items
 850:FreeRTOS/queue.c ****                                  * in the queue has not changed. */
 851:FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
 852:FreeRTOS/queue.c ****                             }
 853:FreeRTOS/queue.c ****                             else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 854:FreeRTOS/queue.c ****                             {
 855:FreeRTOS/queue.c ****                                 /* The queue is a member of a queue set, and posting
 856:FreeRTOS/queue.c ****                                  * to the queue set caused a higher priority task to
 857:FreeRTOS/queue.c ****                                  * unblock. A context switch is required. */
 858:FreeRTOS/queue.c ****                                 queueYIELD_IF_USING_PREEMPTION();
 859:FreeRTOS/queue.c ****                             }
 860:FreeRTOS/queue.c ****                             else
 861:FreeRTOS/queue.c ****                             {
 862:FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
 863:FreeRTOS/queue.c ****                             }
 864:FreeRTOS/queue.c ****                         }
 865:FreeRTOS/queue.c ****                         else
 866:FreeRTOS/queue.c ****                         {
 867:FreeRTOS/queue.c ****                             /* If there was a task waiting for data to arrive on the
 868:FreeRTOS/queue.c ****                              * queue then unblock it now. */
 869:FreeRTOS/queue.c ****                             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALS
 870:FreeRTOS/queue.c ****                             {
 871:FreeRTOS/queue.c ****                                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) 
 872:FreeRTOS/queue.c ****                                 {
 873:FreeRTOS/queue.c ****                                     /* The unblocked task has a priority higher than
 874:FreeRTOS/queue.c ****                                      * our own so yield immediately.  Yes it is ok to
 875:FreeRTOS/queue.c ****                                      * do this from within the critical section - the
 876:FreeRTOS/queue.c ****                                      * kernel takes care of that. */
 877:FreeRTOS/queue.c ****                                     queueYIELD_IF_USING_PREEMPTION();
 878:FreeRTOS/queue.c ****                                 }
 879:FreeRTOS/queue.c ****                                 else
 880:FreeRTOS/queue.c ****                                 {
 881:FreeRTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
 882:FreeRTOS/queue.c ****                                 }
 883:FreeRTOS/queue.c ****                             }
 884:FreeRTOS/queue.c ****                             else if( xYieldRequired != pdFALSE )
 885:FreeRTOS/queue.c ****                             {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 17


 886:FreeRTOS/queue.c ****                                 /* This path is a special case that will only get
 887:FreeRTOS/queue.c ****                                  * executed if the task was holding multiple mutexes
 888:FreeRTOS/queue.c ****                                  * and the mutexes were given back in an order that is
 889:FreeRTOS/queue.c ****                                  * different to that in which they were taken. */
 890:FreeRTOS/queue.c ****                                 queueYIELD_IF_USING_PREEMPTION();
 891:FreeRTOS/queue.c ****                             }
 892:FreeRTOS/queue.c ****                             else
 893:FreeRTOS/queue.c ****                             {
 894:FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
 895:FreeRTOS/queue.c ****                             }
 896:FreeRTOS/queue.c ****                         }
 897:FreeRTOS/queue.c ****                     }
 898:FreeRTOS/queue.c ****                 #else /* configUSE_QUEUE_SETS */
 899:FreeRTOS/queue.c ****                     {
 900:FreeRTOS/queue.c ****                         xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition 
 901:FreeRTOS/queue.c **** 
 902:FreeRTOS/queue.c ****                         /* If there was a task waiting for data to arrive on the
 903:FreeRTOS/queue.c ****                          * queue then unblock it now. */
 904:FreeRTOS/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 905:FreeRTOS/queue.c ****                         {
 906:FreeRTOS/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
 907:FreeRTOS/queue.c ****                             {
 908:FreeRTOS/queue.c ****                                 /* The unblocked task has a priority higher than
 909:FreeRTOS/queue.c ****                                  * our own so yield immediately.  Yes it is ok to do
 910:FreeRTOS/queue.c ****                                  * this from within the critical section - the kernel
 911:FreeRTOS/queue.c ****                                  * takes care of that. */
 912:FreeRTOS/queue.c ****                                 queueYIELD_IF_USING_PREEMPTION();
 913:FreeRTOS/queue.c ****                             }
 914:FreeRTOS/queue.c ****                             else
 915:FreeRTOS/queue.c ****                             {
 916:FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
 917:FreeRTOS/queue.c ****                             }
 918:FreeRTOS/queue.c ****                         }
 919:FreeRTOS/queue.c ****                         else if( xYieldRequired != pdFALSE )
 920:FreeRTOS/queue.c ****                         {
 921:FreeRTOS/queue.c ****                             /* This path is a special case that will only get
 922:FreeRTOS/queue.c ****                              * executed if the task was holding multiple mutexes and
 923:FreeRTOS/queue.c ****                              * the mutexes were given back in an order that is
 924:FreeRTOS/queue.c ****                              * different to that in which they were taken. */
 925:FreeRTOS/queue.c ****                             queueYIELD_IF_USING_PREEMPTION();
 926:FreeRTOS/queue.c ****                         }
 927:FreeRTOS/queue.c ****                         else
 928:FreeRTOS/queue.c ****                         {
 929:FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
 930:FreeRTOS/queue.c ****                         }
 931:FreeRTOS/queue.c ****                     }
 932:FreeRTOS/queue.c ****                 #endif /* configUSE_QUEUE_SETS */
 933:FreeRTOS/queue.c **** 
 934:FreeRTOS/queue.c ****                 taskEXIT_CRITICAL();
 935:FreeRTOS/queue.c ****                 return pdPASS;
 936:FreeRTOS/queue.c ****             }
 937:FreeRTOS/queue.c ****             else
 938:FreeRTOS/queue.c ****             {
 939:FreeRTOS/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
 940:FreeRTOS/queue.c ****                 {
 941:FreeRTOS/queue.c ****                     /* The queue was full and no block time is specified (or
 942:FreeRTOS/queue.c ****                      * the block time has expired) so leave now. */
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 18


 943:FreeRTOS/queue.c ****                     taskEXIT_CRITICAL();
 944:FreeRTOS/queue.c **** 
 945:FreeRTOS/queue.c ****                     /* Return to the original privilege level before exiting
 946:FreeRTOS/queue.c ****                      * the function. */
 947:FreeRTOS/queue.c ****                     traceQUEUE_SEND_FAILED( pxQueue );
 948:FreeRTOS/queue.c ****                     return errQUEUE_FULL;
 949:FreeRTOS/queue.c ****                 }
 950:FreeRTOS/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
 951:FreeRTOS/queue.c ****                 {
 952:FreeRTOS/queue.c ****                     /* The queue was full and a block time was specified so
 953:FreeRTOS/queue.c ****                      * configure the timeout structure. */
 954:FreeRTOS/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
 955:FreeRTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
 956:FreeRTOS/queue.c ****                 }
 957:FreeRTOS/queue.c ****                 else
 958:FreeRTOS/queue.c ****                 {
 959:FreeRTOS/queue.c ****                     /* Entry time was already set. */
 960:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
 961:FreeRTOS/queue.c ****                 }
 962:FreeRTOS/queue.c ****             }
 963:FreeRTOS/queue.c ****         }
 964:FreeRTOS/queue.c ****         taskEXIT_CRITICAL();
 965:FreeRTOS/queue.c **** 
 966:FreeRTOS/queue.c ****         /* Interrupts and other tasks can send to and receive from the queue
 967:FreeRTOS/queue.c ****          * now the critical section has been exited. */
 968:FreeRTOS/queue.c **** 
 969:FreeRTOS/queue.c ****         vTaskSuspendAll();
 970:FreeRTOS/queue.c ****         prvLockQueue( pxQueue );
 971:FreeRTOS/queue.c **** 
 972:FreeRTOS/queue.c ****         /* Update the timeout state to see if it has expired yet. */
 973:FreeRTOS/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 974:FreeRTOS/queue.c ****         {
 975:FreeRTOS/queue.c ****             if( prvIsQueueFull( pxQueue ) != pdFALSE )
 976:FreeRTOS/queue.c ****             {
 977:FreeRTOS/queue.c ****                 traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 978:FreeRTOS/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 979:FreeRTOS/queue.c **** 
 980:FreeRTOS/queue.c ****                 /* Unlocking the queue means queue events can effect the
 981:FreeRTOS/queue.c ****                  * event list. It is possible that interrupts occurring now
 982:FreeRTOS/queue.c ****                  * remove this task from the event list again - but as the
 983:FreeRTOS/queue.c ****                  * scheduler is suspended the task will go onto the pending
 984:FreeRTOS/queue.c ****                  * ready list instead of the actual ready list. */
 985:FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 986:FreeRTOS/queue.c **** 
 987:FreeRTOS/queue.c ****                 /* Resuming the scheduler will move tasks from the pending
 988:FreeRTOS/queue.c ****                  * ready list into the ready list - so it is feasible that this
 989:FreeRTOS/queue.c ****                  * task is already in the ready list before it yields - in which
 990:FreeRTOS/queue.c ****                  * case the yield will not cause a context switch unless there
 991:FreeRTOS/queue.c ****                  * is also a higher priority task in the pending ready list. */
 992:FreeRTOS/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
 993:FreeRTOS/queue.c ****                 {
 994:FreeRTOS/queue.c ****                     portYIELD_WITHIN_API();
 995:FreeRTOS/queue.c ****                 }
 996:FreeRTOS/queue.c ****             }
 997:FreeRTOS/queue.c ****             else
 998:FreeRTOS/queue.c ****             {
 999:FreeRTOS/queue.c ****                 /* Try again. */
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 19


1000:FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
1001:FreeRTOS/queue.c ****                 ( void ) xTaskResumeAll();
1002:FreeRTOS/queue.c ****             }
1003:FreeRTOS/queue.c ****         }
1004:FreeRTOS/queue.c ****         else
1005:FreeRTOS/queue.c ****         {
1006:FreeRTOS/queue.c ****             /* The timeout has expired. */
1007:FreeRTOS/queue.c ****             prvUnlockQueue( pxQueue );
1008:FreeRTOS/queue.c ****             ( void ) xTaskResumeAll();
1009:FreeRTOS/queue.c **** 
1010:FreeRTOS/queue.c ****             traceQUEUE_SEND_FAILED( pxQueue );
1011:FreeRTOS/queue.c ****             return errQUEUE_FULL;
1012:FreeRTOS/queue.c ****         }
1013:FreeRTOS/queue.c ****     } /*lint -restore */
1014:FreeRTOS/queue.c **** }
1015:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1016:FreeRTOS/queue.c **** 
1017:FreeRTOS/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
1018:FreeRTOS/queue.c ****                                      const void * const pvItemToQueue,
1019:FreeRTOS/queue.c ****                                      BaseType_t * const pxHigherPriorityTaskWoken,
1020:FreeRTOS/queue.c ****                                      const BaseType_t xCopyPosition )
1021:FreeRTOS/queue.c **** {
1022:FreeRTOS/queue.c ****     BaseType_t xReturn;
1023:FreeRTOS/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1024:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
1025:FreeRTOS/queue.c **** 
1026:FreeRTOS/queue.c ****     configASSERT( pxQueue );
1027:FreeRTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
1028:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1029:FreeRTOS/queue.c **** 
1030:FreeRTOS/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1031:FreeRTOS/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1032:FreeRTOS/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1033:FreeRTOS/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1034:FreeRTOS/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1035:FreeRTOS/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1036:FreeRTOS/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1037:FreeRTOS/queue.c ****      * assigned a priority above the configured maximum system call priority.
1038:FreeRTOS/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1039:FreeRTOS/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1040:FreeRTOS/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1041:FreeRTOS/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1042:FreeRTOS/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1043:FreeRTOS/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1044:FreeRTOS/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1045:FreeRTOS/queue.c **** 
1046:FreeRTOS/queue.c ****     /* Similar to xQueueGenericSend, except without blocking if there is no room
1047:FreeRTOS/queue.c ****      * in the queue.  Also don't directly wake a task that was blocked on a queue
1048:FreeRTOS/queue.c ****      * read, instead return a flag to say whether a context switch is required or
1049:FreeRTOS/queue.c ****      * not (i.e. has a task with a higher priority than us been woken by this
1050:FreeRTOS/queue.c ****      * post). */
1051:FreeRTOS/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1052:FreeRTOS/queue.c ****     {
1053:FreeRTOS/queue.c ****         if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE
1054:FreeRTOS/queue.c ****         {
1055:FreeRTOS/queue.c ****             const int8_t cTxLock = pxQueue->cTxLock;
1056:FreeRTOS/queue.c ****             const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 20


1057:FreeRTOS/queue.c **** 
1058:FreeRTOS/queue.c ****             traceQUEUE_SEND_FROM_ISR( pxQueue );
1059:FreeRTOS/queue.c **** 
1060:FreeRTOS/queue.c ****             /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
1061:FreeRTOS/queue.c ****              *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
1062:FreeRTOS/queue.c ****              *  in a task disinheriting a priority and prvCopyDataToQueue() can be
1063:FreeRTOS/queue.c ****              *  called here even though the disinherit function does not check if
1064:FreeRTOS/queue.c ****              *  the scheduler is suspended before accessing the ready lists. */
1065:FreeRTOS/queue.c ****             ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1066:FreeRTOS/queue.c **** 
1067:FreeRTOS/queue.c ****             /* The event list is not altered if the queue is locked.  This will
1068:FreeRTOS/queue.c ****              * be done when the queue is unlocked later. */
1069:FreeRTOS/queue.c ****             if( cTxLock == queueUNLOCKED )
1070:FreeRTOS/queue.c ****             {
1071:FreeRTOS/queue.c ****                 #if ( configUSE_QUEUE_SETS == 1 )
1072:FreeRTOS/queue.c ****                     {
1073:FreeRTOS/queue.c ****                         if( pxQueue->pxQueueSetContainer != NULL )
1074:FreeRTOS/queue.c ****                         {
1075:FreeRTOS/queue.c ****                             if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting 
1076:FreeRTOS/queue.c ****                             {
1077:FreeRTOS/queue.c ****                                 /* Do not notify the queue set as an existing item
1078:FreeRTOS/queue.c ****                                  * was overwritten in the queue so the number of items
1079:FreeRTOS/queue.c ****                                  * in the queue has not changed. */
1080:FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1081:FreeRTOS/queue.c ****                             }
1082:FreeRTOS/queue.c ****                             else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
1083:FreeRTOS/queue.c ****                             {
1084:FreeRTOS/queue.c ****                                 /* The queue is a member of a queue set, and posting
1085:FreeRTOS/queue.c ****                                  * to the queue set caused a higher priority task to
1086:FreeRTOS/queue.c ****                                  * unblock.  A context switch is required. */
1087:FreeRTOS/queue.c ****                                 if( pxHigherPriorityTaskWoken != NULL )
1088:FreeRTOS/queue.c ****                                 {
1089:FreeRTOS/queue.c ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
1090:FreeRTOS/queue.c ****                                 }
1091:FreeRTOS/queue.c ****                                 else
1092:FreeRTOS/queue.c ****                                 {
1093:FreeRTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1094:FreeRTOS/queue.c ****                                 }
1095:FreeRTOS/queue.c ****                             }
1096:FreeRTOS/queue.c ****                             else
1097:FreeRTOS/queue.c ****                             {
1098:FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1099:FreeRTOS/queue.c ****                             }
1100:FreeRTOS/queue.c ****                         }
1101:FreeRTOS/queue.c ****                         else
1102:FreeRTOS/queue.c ****                         {
1103:FreeRTOS/queue.c ****                             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALS
1104:FreeRTOS/queue.c ****                             {
1105:FreeRTOS/queue.c ****                                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) 
1106:FreeRTOS/queue.c ****                                 {
1107:FreeRTOS/queue.c ****                                     /* The task waiting has a higher priority so
1108:FreeRTOS/queue.c ****                                      *  record that a context switch is required. */
1109:FreeRTOS/queue.c ****                                     if( pxHigherPriorityTaskWoken != NULL )
1110:FreeRTOS/queue.c ****                                     {
1111:FreeRTOS/queue.c ****                                         *pxHigherPriorityTaskWoken = pdTRUE;
1112:FreeRTOS/queue.c ****                                     }
1113:FreeRTOS/queue.c ****                                     else
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 21


1114:FreeRTOS/queue.c ****                                     {
1115:FreeRTOS/queue.c ****                                         mtCOVERAGE_TEST_MARKER();
1116:FreeRTOS/queue.c ****                                     }
1117:FreeRTOS/queue.c ****                                 }
1118:FreeRTOS/queue.c ****                                 else
1119:FreeRTOS/queue.c ****                                 {
1120:FreeRTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1121:FreeRTOS/queue.c ****                                 }
1122:FreeRTOS/queue.c ****                             }
1123:FreeRTOS/queue.c ****                             else
1124:FreeRTOS/queue.c ****                             {
1125:FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1126:FreeRTOS/queue.c ****                             }
1127:FreeRTOS/queue.c ****                         }
1128:FreeRTOS/queue.c ****                     }
1129:FreeRTOS/queue.c ****                 #else /* configUSE_QUEUE_SETS */
1130:FreeRTOS/queue.c ****                     {
1131:FreeRTOS/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1132:FreeRTOS/queue.c ****                         {
1133:FreeRTOS/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
1134:FreeRTOS/queue.c ****                             {
1135:FreeRTOS/queue.c ****                                 /* The task waiting has a higher priority so record that a
1136:FreeRTOS/queue.c ****                                  * context switch is required. */
1137:FreeRTOS/queue.c ****                                 if( pxHigherPriorityTaskWoken != NULL )
1138:FreeRTOS/queue.c ****                                 {
1139:FreeRTOS/queue.c ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
1140:FreeRTOS/queue.c ****                                 }
1141:FreeRTOS/queue.c ****                                 else
1142:FreeRTOS/queue.c ****                                 {
1143:FreeRTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1144:FreeRTOS/queue.c ****                                 }
1145:FreeRTOS/queue.c ****                             }
1146:FreeRTOS/queue.c ****                             else
1147:FreeRTOS/queue.c ****                             {
1148:FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1149:FreeRTOS/queue.c ****                             }
1150:FreeRTOS/queue.c ****                         }
1151:FreeRTOS/queue.c ****                         else
1152:FreeRTOS/queue.c ****                         {
1153:FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1154:FreeRTOS/queue.c ****                         }
1155:FreeRTOS/queue.c **** 
1156:FreeRTOS/queue.c ****                         /* Not used in this path. */
1157:FreeRTOS/queue.c ****                         ( void ) uxPreviousMessagesWaiting;
1158:FreeRTOS/queue.c ****                     }
1159:FreeRTOS/queue.c ****                 #endif /* configUSE_QUEUE_SETS */
1160:FreeRTOS/queue.c ****             }
1161:FreeRTOS/queue.c ****             else
1162:FreeRTOS/queue.c ****             {
1163:FreeRTOS/queue.c ****                 /* Increment the lock count so the task that unlocks the queue
1164:FreeRTOS/queue.c ****                  * knows that data was posted while it was locked. */
1165:FreeRTOS/queue.c ****                 configASSERT( cTxLock != queueINT8_MAX );
1166:FreeRTOS/queue.c **** 
1167:FreeRTOS/queue.c ****                 pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1168:FreeRTOS/queue.c ****             }
1169:FreeRTOS/queue.c **** 
1170:FreeRTOS/queue.c ****             xReturn = pdPASS;
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 22


1171:FreeRTOS/queue.c ****         }
1172:FreeRTOS/queue.c ****         else
1173:FreeRTOS/queue.c ****         {
1174:FreeRTOS/queue.c ****             traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1175:FreeRTOS/queue.c ****             xReturn = errQUEUE_FULL;
1176:FreeRTOS/queue.c ****         }
1177:FreeRTOS/queue.c ****     }
1178:FreeRTOS/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1179:FreeRTOS/queue.c **** 
1180:FreeRTOS/queue.c ****     return xReturn;
1181:FreeRTOS/queue.c **** }
1182:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1183:FreeRTOS/queue.c **** 
1184:FreeRTOS/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
1185:FreeRTOS/queue.c ****                               BaseType_t * const pxHigherPriorityTaskWoken )
1186:FreeRTOS/queue.c **** {
1187:FreeRTOS/queue.c ****     BaseType_t xReturn;
1188:FreeRTOS/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1189:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
1190:FreeRTOS/queue.c **** 
1191:FreeRTOS/queue.c ****     /* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1192:FreeRTOS/queue.c ****      * item size is 0.  Don't directly wake a task that was blocked on a queue
1193:FreeRTOS/queue.c ****      * read, instead return a flag to say whether a context switch is required or
1194:FreeRTOS/queue.c ****      * not (i.e. has a task with a higher priority than us been woken by this
1195:FreeRTOS/queue.c ****      * post). */
1196:FreeRTOS/queue.c **** 
1197:FreeRTOS/queue.c ****     configASSERT( pxQueue );
1198:FreeRTOS/queue.c **** 
1199:FreeRTOS/queue.c ****     /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1200:FreeRTOS/queue.c ****      * if the item size is not 0. */
1201:FreeRTOS/queue.c ****     configASSERT( pxQueue->uxItemSize == 0 );
1202:FreeRTOS/queue.c **** 
1203:FreeRTOS/queue.c ****     /* Normally a mutex would not be given from an interrupt, especially if
1204:FreeRTOS/queue.c ****      * there is a mutex holder, as priority inheritance makes no sense for an
1205:FreeRTOS/queue.c ****      * interrupts, only tasks. */
1206:FreeRTOS/queue.c ****     configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMu
1207:FreeRTOS/queue.c **** 
1208:FreeRTOS/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1209:FreeRTOS/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1210:FreeRTOS/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1211:FreeRTOS/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1212:FreeRTOS/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1213:FreeRTOS/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1214:FreeRTOS/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1215:FreeRTOS/queue.c ****      * assigned a priority above the configured maximum system call priority.
1216:FreeRTOS/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1217:FreeRTOS/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1218:FreeRTOS/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1219:FreeRTOS/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1220:FreeRTOS/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1221:FreeRTOS/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1222:FreeRTOS/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1223:FreeRTOS/queue.c **** 
1224:FreeRTOS/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1225:FreeRTOS/queue.c ****     {
1226:FreeRTOS/queue.c ****         const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1227:FreeRTOS/queue.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 23


1228:FreeRTOS/queue.c ****         /* When the queue is used to implement a semaphore no data is ever
1229:FreeRTOS/queue.c ****          * moved through the queue but it is still valid to see if the queue 'has
1230:FreeRTOS/queue.c ****          * space'. */
1231:FreeRTOS/queue.c ****         if( uxMessagesWaiting < pxQueue->uxLength )
1232:FreeRTOS/queue.c ****         {
1233:FreeRTOS/queue.c ****             const int8_t cTxLock = pxQueue->cTxLock;
1234:FreeRTOS/queue.c **** 
1235:FreeRTOS/queue.c ****             traceQUEUE_SEND_FROM_ISR( pxQueue );
1236:FreeRTOS/queue.c **** 
1237:FreeRTOS/queue.c ****             /* A task can only have an inherited priority if it is a mutex
1238:FreeRTOS/queue.c ****              * holder - and if there is a mutex holder then the mutex cannot be
1239:FreeRTOS/queue.c ****              * given from an ISR.  As this is the ISR version of the function it
1240:FreeRTOS/queue.c ****              * can be assumed there is no mutex holder and no need to determine if
1241:FreeRTOS/queue.c ****              * priority disinheritance is needed.  Simply increase the count of
1242:FreeRTOS/queue.c ****              * messages (semaphores) available. */
1243:FreeRTOS/queue.c ****             pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1244:FreeRTOS/queue.c **** 
1245:FreeRTOS/queue.c ****             /* The event list is not altered if the queue is locked.  This will
1246:FreeRTOS/queue.c ****              * be done when the queue is unlocked later. */
1247:FreeRTOS/queue.c ****             if( cTxLock == queueUNLOCKED )
1248:FreeRTOS/queue.c ****             {
1249:FreeRTOS/queue.c ****                 #if ( configUSE_QUEUE_SETS == 1 )
1250:FreeRTOS/queue.c ****                     {
1251:FreeRTOS/queue.c ****                         if( pxQueue->pxQueueSetContainer != NULL )
1252:FreeRTOS/queue.c ****                         {
1253:FreeRTOS/queue.c ****                             if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
1254:FreeRTOS/queue.c ****                             {
1255:FreeRTOS/queue.c ****                                 /* The semaphore is a member of a queue set, and
1256:FreeRTOS/queue.c ****                                  * posting to the queue set caused a higher priority
1257:FreeRTOS/queue.c ****                                  * task to unblock.  A context switch is required. */
1258:FreeRTOS/queue.c ****                                 if( pxHigherPriorityTaskWoken != NULL )
1259:FreeRTOS/queue.c ****                                 {
1260:FreeRTOS/queue.c ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
1261:FreeRTOS/queue.c ****                                 }
1262:FreeRTOS/queue.c ****                                 else
1263:FreeRTOS/queue.c ****                                 {
1264:FreeRTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1265:FreeRTOS/queue.c ****                                 }
1266:FreeRTOS/queue.c ****                             }
1267:FreeRTOS/queue.c ****                             else
1268:FreeRTOS/queue.c ****                             {
1269:FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1270:FreeRTOS/queue.c ****                             }
1271:FreeRTOS/queue.c ****                         }
1272:FreeRTOS/queue.c ****                         else
1273:FreeRTOS/queue.c ****                         {
1274:FreeRTOS/queue.c ****                             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALS
1275:FreeRTOS/queue.c ****                             {
1276:FreeRTOS/queue.c ****                                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) 
1277:FreeRTOS/queue.c ****                                 {
1278:FreeRTOS/queue.c ****                                     /* The task waiting has a higher priority so
1279:FreeRTOS/queue.c ****                                      *  record that a context switch is required. */
1280:FreeRTOS/queue.c ****                                     if( pxHigherPriorityTaskWoken != NULL )
1281:FreeRTOS/queue.c ****                                     {
1282:FreeRTOS/queue.c ****                                         *pxHigherPriorityTaskWoken = pdTRUE;
1283:FreeRTOS/queue.c ****                                     }
1284:FreeRTOS/queue.c ****                                     else
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 24


1285:FreeRTOS/queue.c ****                                     {
1286:FreeRTOS/queue.c ****                                         mtCOVERAGE_TEST_MARKER();
1287:FreeRTOS/queue.c ****                                     }
1288:FreeRTOS/queue.c ****                                 }
1289:FreeRTOS/queue.c ****                                 else
1290:FreeRTOS/queue.c ****                                 {
1291:FreeRTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1292:FreeRTOS/queue.c ****                                 }
1293:FreeRTOS/queue.c ****                             }
1294:FreeRTOS/queue.c ****                             else
1295:FreeRTOS/queue.c ****                             {
1296:FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1297:FreeRTOS/queue.c ****                             }
1298:FreeRTOS/queue.c ****                         }
1299:FreeRTOS/queue.c ****                     }
1300:FreeRTOS/queue.c ****                 #else /* configUSE_QUEUE_SETS */
1301:FreeRTOS/queue.c ****                     {
1302:FreeRTOS/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1303:FreeRTOS/queue.c ****                         {
1304:FreeRTOS/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
1305:FreeRTOS/queue.c ****                             {
1306:FreeRTOS/queue.c ****                                 /* The task waiting has a higher priority so record that a
1307:FreeRTOS/queue.c ****                                  * context switch is required. */
1308:FreeRTOS/queue.c ****                                 if( pxHigherPriorityTaskWoken != NULL )
1309:FreeRTOS/queue.c ****                                 {
1310:FreeRTOS/queue.c ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
1311:FreeRTOS/queue.c ****                                 }
1312:FreeRTOS/queue.c ****                                 else
1313:FreeRTOS/queue.c ****                                 {
1314:FreeRTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1315:FreeRTOS/queue.c ****                                 }
1316:FreeRTOS/queue.c ****                             }
1317:FreeRTOS/queue.c ****                             else
1318:FreeRTOS/queue.c ****                             {
1319:FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1320:FreeRTOS/queue.c ****                             }
1321:FreeRTOS/queue.c ****                         }
1322:FreeRTOS/queue.c ****                         else
1323:FreeRTOS/queue.c ****                         {
1324:FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1325:FreeRTOS/queue.c ****                         }
1326:FreeRTOS/queue.c ****                     }
1327:FreeRTOS/queue.c ****                 #endif /* configUSE_QUEUE_SETS */
1328:FreeRTOS/queue.c ****             }
1329:FreeRTOS/queue.c ****             else
1330:FreeRTOS/queue.c ****             {
1331:FreeRTOS/queue.c ****                 /* Increment the lock count so the task that unlocks the queue
1332:FreeRTOS/queue.c ****                  * knows that data was posted while it was locked. */
1333:FreeRTOS/queue.c ****                 configASSERT( cTxLock != queueINT8_MAX );
1334:FreeRTOS/queue.c **** 
1335:FreeRTOS/queue.c ****                 pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1336:FreeRTOS/queue.c ****             }
1337:FreeRTOS/queue.c **** 
1338:FreeRTOS/queue.c ****             xReturn = pdPASS;
1339:FreeRTOS/queue.c ****         }
1340:FreeRTOS/queue.c ****         else
1341:FreeRTOS/queue.c ****         {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 25


1342:FreeRTOS/queue.c ****             traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1343:FreeRTOS/queue.c ****             xReturn = errQUEUE_FULL;
1344:FreeRTOS/queue.c ****         }
1345:FreeRTOS/queue.c ****     }
1346:FreeRTOS/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1347:FreeRTOS/queue.c **** 
1348:FreeRTOS/queue.c ****     return xReturn;
1349:FreeRTOS/queue.c **** }
1350:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1351:FreeRTOS/queue.c **** 
1352:FreeRTOS/queue.c **** BaseType_t xQueueReceive( QueueHandle_t xQueue,
1353:FreeRTOS/queue.c ****                           void * const pvBuffer,
1354:FreeRTOS/queue.c ****                           TickType_t xTicksToWait )
1355:FreeRTOS/queue.c **** {
1356:FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
1357:FreeRTOS/queue.c ****     TimeOut_t xTimeOut;
1358:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
1359:FreeRTOS/queue.c **** 
1360:FreeRTOS/queue.c ****     /* Check the pointer is not NULL. */
1361:FreeRTOS/queue.c ****     configASSERT( ( pxQueue ) );
1362:FreeRTOS/queue.c **** 
1363:FreeRTOS/queue.c ****     /* The buffer into which data is received can only be NULL if the data size
1364:FreeRTOS/queue.c ****      * is zero (so no data is copied into the buffer). */
1365:FreeRTOS/queue.c ****     configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) 
1366:FreeRTOS/queue.c **** 
1367:FreeRTOS/queue.c ****     /* Cannot block if the scheduler is suspended. */
1368:FreeRTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1369:FreeRTOS/queue.c ****         {
1370:FreeRTOS/queue.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
1371:FreeRTOS/queue.c ****         }
1372:FreeRTOS/queue.c ****     #endif
1373:FreeRTOS/queue.c **** 
1374:FreeRTOS/queue.c ****     /*lint -save -e904  This function relaxes the coding standard somewhat to
1375:FreeRTOS/queue.c ****      * allow return statements within the function itself.  This is done in the
1376:FreeRTOS/queue.c ****      * interest of execution time efficiency. */
1377:FreeRTOS/queue.c ****     for( ; ; )
1378:FreeRTOS/queue.c ****     {
1379:FreeRTOS/queue.c ****         taskENTER_CRITICAL();
1380:FreeRTOS/queue.c ****         {
1381:FreeRTOS/queue.c ****             const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1382:FreeRTOS/queue.c **** 
1383:FreeRTOS/queue.c ****             /* Is there data in the queue now?  To be running the calling task
1384:FreeRTOS/queue.c ****              * must be the highest priority task wanting to access the queue. */
1385:FreeRTOS/queue.c ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1386:FreeRTOS/queue.c ****             {
1387:FreeRTOS/queue.c ****                 /* Data available, remove one item. */
1388:FreeRTOS/queue.c ****                 prvCopyDataFromQueue( pxQueue, pvBuffer );
1389:FreeRTOS/queue.c ****                 traceQUEUE_RECEIVE( pxQueue );
1390:FreeRTOS/queue.c ****                 pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1391:FreeRTOS/queue.c **** 
1392:FreeRTOS/queue.c ****                 /* There is now space in the queue, were any tasks waiting to
1393:FreeRTOS/queue.c ****                  * post to the queue?  If so, unblock the highest priority waiting
1394:FreeRTOS/queue.c ****                  * task. */
1395:FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1396:FreeRTOS/queue.c ****                 {
1397:FreeRTOS/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1398:FreeRTOS/queue.c ****                     {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 26


1399:FreeRTOS/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
1400:FreeRTOS/queue.c ****                     }
1401:FreeRTOS/queue.c ****                     else
1402:FreeRTOS/queue.c ****                     {
1403:FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1404:FreeRTOS/queue.c ****                     }
1405:FreeRTOS/queue.c ****                 }
1406:FreeRTOS/queue.c ****                 else
1407:FreeRTOS/queue.c ****                 {
1408:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1409:FreeRTOS/queue.c ****                 }
1410:FreeRTOS/queue.c **** 
1411:FreeRTOS/queue.c ****                 taskEXIT_CRITICAL();
1412:FreeRTOS/queue.c ****                 return pdPASS;
1413:FreeRTOS/queue.c ****             }
1414:FreeRTOS/queue.c ****             else
1415:FreeRTOS/queue.c ****             {
1416:FreeRTOS/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
1417:FreeRTOS/queue.c ****                 {
1418:FreeRTOS/queue.c ****                     /* The queue was empty and no block time is specified (or
1419:FreeRTOS/queue.c ****                      * the block time has expired) so leave now. */
1420:FreeRTOS/queue.c ****                     taskEXIT_CRITICAL();
1421:FreeRTOS/queue.c ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
1422:FreeRTOS/queue.c ****                     return errQUEUE_EMPTY;
1423:FreeRTOS/queue.c ****                 }
1424:FreeRTOS/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
1425:FreeRTOS/queue.c ****                 {
1426:FreeRTOS/queue.c ****                     /* The queue was empty and a block time was specified so
1427:FreeRTOS/queue.c ****                      * configure the timeout structure. */
1428:FreeRTOS/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
1429:FreeRTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
1430:FreeRTOS/queue.c ****                 }
1431:FreeRTOS/queue.c ****                 else
1432:FreeRTOS/queue.c ****                 {
1433:FreeRTOS/queue.c ****                     /* Entry time was already set. */
1434:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1435:FreeRTOS/queue.c ****                 }
1436:FreeRTOS/queue.c ****             }
1437:FreeRTOS/queue.c ****         }
1438:FreeRTOS/queue.c ****         taskEXIT_CRITICAL();
1439:FreeRTOS/queue.c **** 
1440:FreeRTOS/queue.c ****         /* Interrupts and other tasks can send to and receive from the queue
1441:FreeRTOS/queue.c ****          * now the critical section has been exited. */
1442:FreeRTOS/queue.c **** 
1443:FreeRTOS/queue.c ****         vTaskSuspendAll();
1444:FreeRTOS/queue.c ****         prvLockQueue( pxQueue );
1445:FreeRTOS/queue.c **** 
1446:FreeRTOS/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1447:FreeRTOS/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1448:FreeRTOS/queue.c ****         {
1449:FreeRTOS/queue.c ****             /* The timeout has not expired.  If the queue is still empty place
1450:FreeRTOS/queue.c ****              * the task on the list of tasks waiting to receive from the queue. */
1451:FreeRTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1452:FreeRTOS/queue.c ****             {
1453:FreeRTOS/queue.c ****                 traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1454:FreeRTOS/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1455:FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 27


1456:FreeRTOS/queue.c **** 
1457:FreeRTOS/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
1458:FreeRTOS/queue.c ****                 {
1459:FreeRTOS/queue.c ****                     portYIELD_WITHIN_API();
1460:FreeRTOS/queue.c ****                 }
1461:FreeRTOS/queue.c ****                 else
1462:FreeRTOS/queue.c ****                 {
1463:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1464:FreeRTOS/queue.c ****                 }
1465:FreeRTOS/queue.c ****             }
1466:FreeRTOS/queue.c ****             else
1467:FreeRTOS/queue.c ****             {
1468:FreeRTOS/queue.c ****                 /* The queue contains data again.  Loop back to try and read the
1469:FreeRTOS/queue.c ****                  * data. */
1470:FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
1471:FreeRTOS/queue.c ****                 ( void ) xTaskResumeAll();
1472:FreeRTOS/queue.c ****             }
1473:FreeRTOS/queue.c ****         }
1474:FreeRTOS/queue.c ****         else
1475:FreeRTOS/queue.c ****         {
1476:FreeRTOS/queue.c ****             /* Timed out.  If there is no data in the queue exit, otherwise loop
1477:FreeRTOS/queue.c ****              * back and attempt to read the data. */
1478:FreeRTOS/queue.c ****             prvUnlockQueue( pxQueue );
1479:FreeRTOS/queue.c ****             ( void ) xTaskResumeAll();
1480:FreeRTOS/queue.c **** 
1481:FreeRTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1482:FreeRTOS/queue.c ****             {
1483:FreeRTOS/queue.c ****                 traceQUEUE_RECEIVE_FAILED( pxQueue );
1484:FreeRTOS/queue.c ****                 return errQUEUE_EMPTY;
1485:FreeRTOS/queue.c ****             }
1486:FreeRTOS/queue.c ****             else
1487:FreeRTOS/queue.c ****             {
1488:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
1489:FreeRTOS/queue.c ****             }
1490:FreeRTOS/queue.c ****         }
1491:FreeRTOS/queue.c ****     } /*lint -restore */
1492:FreeRTOS/queue.c **** }
1493:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1494:FreeRTOS/queue.c **** 
1495:FreeRTOS/queue.c **** BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
1496:FreeRTOS/queue.c ****                                 TickType_t xTicksToWait )
1497:FreeRTOS/queue.c **** {
1498:FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
1499:FreeRTOS/queue.c ****     TimeOut_t xTimeOut;
1500:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
1501:FreeRTOS/queue.c **** 
1502:FreeRTOS/queue.c ****     #if ( configUSE_MUTEXES == 1 )
1503:FreeRTOS/queue.c ****         BaseType_t xInheritanceOccurred = pdFALSE;
1504:FreeRTOS/queue.c ****     #endif
1505:FreeRTOS/queue.c **** 
1506:FreeRTOS/queue.c ****     /* Check the queue pointer is not NULL. */
1507:FreeRTOS/queue.c ****     configASSERT( ( pxQueue ) );
1508:FreeRTOS/queue.c **** 
1509:FreeRTOS/queue.c ****     /* Check this really is a semaphore, in which case the item size will be
1510:FreeRTOS/queue.c ****      * 0. */
1511:FreeRTOS/queue.c ****     configASSERT( pxQueue->uxItemSize == 0 );
1512:FreeRTOS/queue.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 28


1513:FreeRTOS/queue.c ****     /* Cannot block if the scheduler is suspended. */
1514:FreeRTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1515:FreeRTOS/queue.c ****         {
1516:FreeRTOS/queue.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
1517:FreeRTOS/queue.c ****         }
1518:FreeRTOS/queue.c ****     #endif
1519:FreeRTOS/queue.c **** 
1520:FreeRTOS/queue.c ****     /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
1521:FreeRTOS/queue.c ****      * statements within the function itself.  This is done in the interest
1522:FreeRTOS/queue.c ****      * of execution time efficiency. */
1523:FreeRTOS/queue.c ****     for( ; ; )
1524:FreeRTOS/queue.c ****     {
1525:FreeRTOS/queue.c ****         taskENTER_CRITICAL();
1526:FreeRTOS/queue.c ****         {
1527:FreeRTOS/queue.c ****             /* Semaphores are queues with an item size of 0, and where the
1528:FreeRTOS/queue.c ****              * number of messages in the queue is the semaphore's count value. */
1529:FreeRTOS/queue.c ****             const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1530:FreeRTOS/queue.c **** 
1531:FreeRTOS/queue.c ****             /* Is there data in the queue now?  To be running the calling task
1532:FreeRTOS/queue.c ****              * must be the highest priority task wanting to access the queue. */
1533:FreeRTOS/queue.c ****             if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1534:FreeRTOS/queue.c ****             {
1535:FreeRTOS/queue.c ****                 traceQUEUE_RECEIVE( pxQueue );
1536:FreeRTOS/queue.c **** 
1537:FreeRTOS/queue.c ****                 /* Semaphores are queues with a data size of zero and where the
1538:FreeRTOS/queue.c ****                  * messages waiting is the semaphore's count.  Reduce the count. */
1539:FreeRTOS/queue.c ****                 pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1540:FreeRTOS/queue.c **** 
1541:FreeRTOS/queue.c ****                 #if ( configUSE_MUTEXES == 1 )
1542:FreeRTOS/queue.c ****                     {
1543:FreeRTOS/queue.c ****                         if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1544:FreeRTOS/queue.c ****                         {
1545:FreeRTOS/queue.c ****                             /* Record the information required to implement
1546:FreeRTOS/queue.c ****                              * priority inheritance should it become necessary. */
1547:FreeRTOS/queue.c ****                             pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
1548:FreeRTOS/queue.c ****                         }
1549:FreeRTOS/queue.c ****                         else
1550:FreeRTOS/queue.c ****                         {
1551:FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1552:FreeRTOS/queue.c ****                         }
1553:FreeRTOS/queue.c ****                     }
1554:FreeRTOS/queue.c ****                 #endif /* configUSE_MUTEXES */
1555:FreeRTOS/queue.c **** 
1556:FreeRTOS/queue.c ****                 /* Check to see if other tasks are blocked waiting to give the
1557:FreeRTOS/queue.c ****                  * semaphore, and if so, unblock the highest priority such task. */
1558:FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1559:FreeRTOS/queue.c ****                 {
1560:FreeRTOS/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1561:FreeRTOS/queue.c ****                     {
1562:FreeRTOS/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
1563:FreeRTOS/queue.c ****                     }
1564:FreeRTOS/queue.c ****                     else
1565:FreeRTOS/queue.c ****                     {
1566:FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1567:FreeRTOS/queue.c ****                     }
1568:FreeRTOS/queue.c ****                 }
1569:FreeRTOS/queue.c ****                 else
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 29


1570:FreeRTOS/queue.c ****                 {
1571:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1572:FreeRTOS/queue.c ****                 }
1573:FreeRTOS/queue.c **** 
1574:FreeRTOS/queue.c ****                 taskEXIT_CRITICAL();
1575:FreeRTOS/queue.c ****                 return pdPASS;
1576:FreeRTOS/queue.c ****             }
1577:FreeRTOS/queue.c ****             else
1578:FreeRTOS/queue.c ****             {
1579:FreeRTOS/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
1580:FreeRTOS/queue.c ****                 {
1581:FreeRTOS/queue.c ****                     /* For inheritance to have occurred there must have been an
1582:FreeRTOS/queue.c ****                      * initial timeout, and an adjusted timeout cannot become 0, as
1583:FreeRTOS/queue.c ****                      * if it were 0 the function would have exited. */
1584:FreeRTOS/queue.c ****                     #if ( configUSE_MUTEXES == 1 )
1585:FreeRTOS/queue.c ****                         {
1586:FreeRTOS/queue.c ****                             configASSERT( xInheritanceOccurred == pdFALSE );
1587:FreeRTOS/queue.c ****                         }
1588:FreeRTOS/queue.c ****                     #endif /* configUSE_MUTEXES */
1589:FreeRTOS/queue.c **** 
1590:FreeRTOS/queue.c ****                     /* The semaphore count was 0 and no block time is specified
1591:FreeRTOS/queue.c ****                      * (or the block time has expired) so exit now. */
1592:FreeRTOS/queue.c ****                     taskEXIT_CRITICAL();
1593:FreeRTOS/queue.c ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
1594:FreeRTOS/queue.c ****                     return errQUEUE_EMPTY;
1595:FreeRTOS/queue.c ****                 }
1596:FreeRTOS/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
1597:FreeRTOS/queue.c ****                 {
1598:FreeRTOS/queue.c ****                     /* The semaphore count was 0 and a block time was specified
1599:FreeRTOS/queue.c ****                      * so configure the timeout structure ready to block. */
1600:FreeRTOS/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
1601:FreeRTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
1602:FreeRTOS/queue.c ****                 }
1603:FreeRTOS/queue.c ****                 else
1604:FreeRTOS/queue.c ****                 {
1605:FreeRTOS/queue.c ****                     /* Entry time was already set. */
1606:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1607:FreeRTOS/queue.c ****                 }
1608:FreeRTOS/queue.c ****             }
1609:FreeRTOS/queue.c ****         }
1610:FreeRTOS/queue.c ****         taskEXIT_CRITICAL();
1611:FreeRTOS/queue.c **** 
1612:FreeRTOS/queue.c ****         /* Interrupts and other tasks can give to and take from the semaphore
1613:FreeRTOS/queue.c ****          * now the critical section has been exited. */
1614:FreeRTOS/queue.c **** 
1615:FreeRTOS/queue.c ****         vTaskSuspendAll();
1616:FreeRTOS/queue.c ****         prvLockQueue( pxQueue );
1617:FreeRTOS/queue.c **** 
1618:FreeRTOS/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1619:FreeRTOS/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1620:FreeRTOS/queue.c ****         {
1621:FreeRTOS/queue.c ****             /* A block time is specified and not expired.  If the semaphore
1622:FreeRTOS/queue.c ****              * count is 0 then enter the Blocked state to wait for a semaphore to
1623:FreeRTOS/queue.c ****              * become available.  As semaphores are implemented with queues the
1624:FreeRTOS/queue.c ****              * queue being empty is equivalent to the semaphore count being 0. */
1625:FreeRTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1626:FreeRTOS/queue.c ****             {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 30


1627:FreeRTOS/queue.c ****                 traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1628:FreeRTOS/queue.c **** 
1629:FreeRTOS/queue.c ****                 #if ( configUSE_MUTEXES == 1 )
1630:FreeRTOS/queue.c ****                     {
1631:FreeRTOS/queue.c ****                         if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1632:FreeRTOS/queue.c ****                         {
1633:FreeRTOS/queue.c ****                             taskENTER_CRITICAL();
1634:FreeRTOS/queue.c ****                             {
1635:FreeRTOS/queue.c ****                                 xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.
1636:FreeRTOS/queue.c ****                             }
1637:FreeRTOS/queue.c ****                             taskEXIT_CRITICAL();
1638:FreeRTOS/queue.c ****                         }
1639:FreeRTOS/queue.c ****                         else
1640:FreeRTOS/queue.c ****                         {
1641:FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1642:FreeRTOS/queue.c ****                         }
1643:FreeRTOS/queue.c ****                     }
1644:FreeRTOS/queue.c ****                 #endif /* if ( configUSE_MUTEXES == 1 ) */
1645:FreeRTOS/queue.c **** 
1646:FreeRTOS/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1647:FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
1648:FreeRTOS/queue.c **** 
1649:FreeRTOS/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
1650:FreeRTOS/queue.c ****                 {
1651:FreeRTOS/queue.c ****                     portYIELD_WITHIN_API();
1652:FreeRTOS/queue.c ****                 }
1653:FreeRTOS/queue.c ****                 else
1654:FreeRTOS/queue.c ****                 {
1655:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1656:FreeRTOS/queue.c ****                 }
1657:FreeRTOS/queue.c ****             }
1658:FreeRTOS/queue.c ****             else
1659:FreeRTOS/queue.c ****             {
1660:FreeRTOS/queue.c ****                 /* There was no timeout and the semaphore count was not 0, so
1661:FreeRTOS/queue.c ****                  * attempt to take the semaphore again. */
1662:FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
1663:FreeRTOS/queue.c ****                 ( void ) xTaskResumeAll();
1664:FreeRTOS/queue.c ****             }
1665:FreeRTOS/queue.c ****         }
1666:FreeRTOS/queue.c ****         else
1667:FreeRTOS/queue.c ****         {
1668:FreeRTOS/queue.c ****             /* Timed out. */
1669:FreeRTOS/queue.c ****             prvUnlockQueue( pxQueue );
1670:FreeRTOS/queue.c ****             ( void ) xTaskResumeAll();
1671:FreeRTOS/queue.c **** 
1672:FreeRTOS/queue.c ****             /* If the semaphore count is 0 exit now as the timeout has
1673:FreeRTOS/queue.c ****              * expired.  Otherwise return to attempt to take the semaphore that is
1674:FreeRTOS/queue.c ****              * known to be available.  As semaphores are implemented by queues the
1675:FreeRTOS/queue.c ****              * queue being empty is equivalent to the semaphore count being 0. */
1676:FreeRTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1677:FreeRTOS/queue.c ****             {
1678:FreeRTOS/queue.c ****                 #if ( configUSE_MUTEXES == 1 )
1679:FreeRTOS/queue.c ****                     {
1680:FreeRTOS/queue.c ****                         /* xInheritanceOccurred could only have be set if
1681:FreeRTOS/queue.c ****                          * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
1682:FreeRTOS/queue.c ****                          * test the mutex type again to check it is actually a mutex. */
1683:FreeRTOS/queue.c ****                         if( xInheritanceOccurred != pdFALSE )
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 31


1684:FreeRTOS/queue.c ****                         {
1685:FreeRTOS/queue.c ****                             taskENTER_CRITICAL();
1686:FreeRTOS/queue.c ****                             {
1687:FreeRTOS/queue.c ****                                 UBaseType_t uxHighestWaitingPriority;
1688:FreeRTOS/queue.c **** 
1689:FreeRTOS/queue.c ****                                 /* This task blocking on the mutex caused another
1690:FreeRTOS/queue.c ****                                  * task to inherit this task's priority.  Now this task
1691:FreeRTOS/queue.c ****                                  * has timed out the priority should be disinherited
1692:FreeRTOS/queue.c ****                                  * again, but only as low as the next highest priority
1693:FreeRTOS/queue.c ****                                  * task that is waiting for the same mutex. */
1694:FreeRTOS/queue.c ****                                 uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( px
1695:FreeRTOS/queue.c ****                                 vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHo
1696:FreeRTOS/queue.c ****                             }
1697:FreeRTOS/queue.c ****                             taskEXIT_CRITICAL();
1698:FreeRTOS/queue.c ****                         }
1699:FreeRTOS/queue.c ****                     }
1700:FreeRTOS/queue.c ****                 #endif /* configUSE_MUTEXES */
1701:FreeRTOS/queue.c **** 
1702:FreeRTOS/queue.c ****                 traceQUEUE_RECEIVE_FAILED( pxQueue );
1703:FreeRTOS/queue.c ****                 return errQUEUE_EMPTY;
1704:FreeRTOS/queue.c ****             }
1705:FreeRTOS/queue.c ****             else
1706:FreeRTOS/queue.c ****             {
1707:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
1708:FreeRTOS/queue.c ****             }
1709:FreeRTOS/queue.c ****         }
1710:FreeRTOS/queue.c ****     } /*lint -restore */
1711:FreeRTOS/queue.c **** }
1712:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1713:FreeRTOS/queue.c **** 
1714:FreeRTOS/queue.c **** BaseType_t xQueuePeek( QueueHandle_t xQueue,
1715:FreeRTOS/queue.c ****                        void * const pvBuffer,
1716:FreeRTOS/queue.c ****                        TickType_t xTicksToWait )
1717:FreeRTOS/queue.c **** {
1718:FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
1719:FreeRTOS/queue.c ****     TimeOut_t xTimeOut;
1720:FreeRTOS/queue.c ****     int8_t * pcOriginalReadPosition;
1721:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
1722:FreeRTOS/queue.c **** 
1723:FreeRTOS/queue.c ****     /* Check the pointer is not NULL. */
1724:FreeRTOS/queue.c ****     configASSERT( ( pxQueue ) );
1725:FreeRTOS/queue.c **** 
1726:FreeRTOS/queue.c ****     /* The buffer into which data is received can only be NULL if the data size
1727:FreeRTOS/queue.c ****      * is zero (so no data is copied into the buffer. */
1728:FreeRTOS/queue.c ****     configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) 
1729:FreeRTOS/queue.c **** 
1730:FreeRTOS/queue.c ****     /* Cannot block if the scheduler is suspended. */
1731:FreeRTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1732:FreeRTOS/queue.c ****         {
1733:FreeRTOS/queue.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
1734:FreeRTOS/queue.c ****         }
1735:FreeRTOS/queue.c ****     #endif
1736:FreeRTOS/queue.c **** 
1737:FreeRTOS/queue.c ****     /*lint -save -e904  This function relaxes the coding standard somewhat to
1738:FreeRTOS/queue.c ****      * allow return statements within the function itself.  This is done in the
1739:FreeRTOS/queue.c ****      * interest of execution time efficiency. */
1740:FreeRTOS/queue.c ****     for( ; ; )
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 32


1741:FreeRTOS/queue.c ****     {
1742:FreeRTOS/queue.c ****         taskENTER_CRITICAL();
1743:FreeRTOS/queue.c ****         {
1744:FreeRTOS/queue.c ****             const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1745:FreeRTOS/queue.c **** 
1746:FreeRTOS/queue.c ****             /* Is there data in the queue now?  To be running the calling task
1747:FreeRTOS/queue.c ****              * must be the highest priority task wanting to access the queue. */
1748:FreeRTOS/queue.c ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1749:FreeRTOS/queue.c ****             {
1750:FreeRTOS/queue.c ****                 /* Remember the read position so it can be reset after the data
1751:FreeRTOS/queue.c ****                  * is read from the queue as this function is only peeking the
1752:FreeRTOS/queue.c ****                  * data, not removing it. */
1753:FreeRTOS/queue.c ****                 pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
1754:FreeRTOS/queue.c **** 
1755:FreeRTOS/queue.c ****                 prvCopyDataFromQueue( pxQueue, pvBuffer );
1756:FreeRTOS/queue.c ****                 traceQUEUE_PEEK( pxQueue );
1757:FreeRTOS/queue.c **** 
1758:FreeRTOS/queue.c ****                 /* The data is not being removed, so reset the read pointer. */
1759:FreeRTOS/queue.c ****                 pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
1760:FreeRTOS/queue.c **** 
1761:FreeRTOS/queue.c ****                 /* The data is being left in the queue, so see if there are
1762:FreeRTOS/queue.c ****                  * any other tasks waiting for the data. */
1763:FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1764:FreeRTOS/queue.c ****                 {
1765:FreeRTOS/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE
1766:FreeRTOS/queue.c ****                     {
1767:FreeRTOS/queue.c ****                         /* The task waiting has a higher priority than this task. */
1768:FreeRTOS/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
1769:FreeRTOS/queue.c ****                     }
1770:FreeRTOS/queue.c ****                     else
1771:FreeRTOS/queue.c ****                     {
1772:FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1773:FreeRTOS/queue.c ****                     }
1774:FreeRTOS/queue.c ****                 }
1775:FreeRTOS/queue.c ****                 else
1776:FreeRTOS/queue.c ****                 {
1777:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1778:FreeRTOS/queue.c ****                 }
1779:FreeRTOS/queue.c **** 
1780:FreeRTOS/queue.c ****                 taskEXIT_CRITICAL();
1781:FreeRTOS/queue.c ****                 return pdPASS;
1782:FreeRTOS/queue.c ****             }
1783:FreeRTOS/queue.c ****             else
1784:FreeRTOS/queue.c ****             {
1785:FreeRTOS/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
1786:FreeRTOS/queue.c ****                 {
1787:FreeRTOS/queue.c ****                     /* The queue was empty and no block time is specified (or
1788:FreeRTOS/queue.c ****                      * the block time has expired) so leave now. */
1789:FreeRTOS/queue.c ****                     taskEXIT_CRITICAL();
1790:FreeRTOS/queue.c ****                     traceQUEUE_PEEK_FAILED( pxQueue );
1791:FreeRTOS/queue.c ****                     return errQUEUE_EMPTY;
1792:FreeRTOS/queue.c ****                 }
1793:FreeRTOS/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
1794:FreeRTOS/queue.c ****                 {
1795:FreeRTOS/queue.c ****                     /* The queue was empty and a block time was specified so
1796:FreeRTOS/queue.c ****                      * configure the timeout structure ready to enter the blocked
1797:FreeRTOS/queue.c ****                      * state. */
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 33


1798:FreeRTOS/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
1799:FreeRTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
1800:FreeRTOS/queue.c ****                 }
1801:FreeRTOS/queue.c ****                 else
1802:FreeRTOS/queue.c ****                 {
1803:FreeRTOS/queue.c ****                     /* Entry time was already set. */
1804:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1805:FreeRTOS/queue.c ****                 }
1806:FreeRTOS/queue.c ****             }
1807:FreeRTOS/queue.c ****         }
1808:FreeRTOS/queue.c ****         taskEXIT_CRITICAL();
1809:FreeRTOS/queue.c **** 
1810:FreeRTOS/queue.c ****         /* Interrupts and other tasks can send to and receive from the queue
1811:FreeRTOS/queue.c ****          * now that the critical section has been exited. */
1812:FreeRTOS/queue.c **** 
1813:FreeRTOS/queue.c ****         vTaskSuspendAll();
1814:FreeRTOS/queue.c ****         prvLockQueue( pxQueue );
1815:FreeRTOS/queue.c **** 
1816:FreeRTOS/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1817:FreeRTOS/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1818:FreeRTOS/queue.c ****         {
1819:FreeRTOS/queue.c ****             /* Timeout has not expired yet, check to see if there is data in the
1820:FreeRTOS/queue.c ****             * queue now, and if not enter the Blocked state to wait for data. */
1821:FreeRTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1822:FreeRTOS/queue.c ****             {
1823:FreeRTOS/queue.c ****                 traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
1824:FreeRTOS/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1825:FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
1826:FreeRTOS/queue.c **** 
1827:FreeRTOS/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
1828:FreeRTOS/queue.c ****                 {
1829:FreeRTOS/queue.c ****                     portYIELD_WITHIN_API();
1830:FreeRTOS/queue.c ****                 }
1831:FreeRTOS/queue.c ****                 else
1832:FreeRTOS/queue.c ****                 {
1833:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1834:FreeRTOS/queue.c ****                 }
1835:FreeRTOS/queue.c ****             }
1836:FreeRTOS/queue.c ****             else
1837:FreeRTOS/queue.c ****             {
1838:FreeRTOS/queue.c ****                 /* There is data in the queue now, so don't enter the blocked
1839:FreeRTOS/queue.c ****                  * state, instead return to try and obtain the data. */
1840:FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
1841:FreeRTOS/queue.c ****                 ( void ) xTaskResumeAll();
1842:FreeRTOS/queue.c ****             }
1843:FreeRTOS/queue.c ****         }
1844:FreeRTOS/queue.c ****         else
1845:FreeRTOS/queue.c ****         {
1846:FreeRTOS/queue.c ****             /* The timeout has expired.  If there is still no data in the queue
1847:FreeRTOS/queue.c ****              * exit, otherwise go back and try to read the data again. */
1848:FreeRTOS/queue.c ****             prvUnlockQueue( pxQueue );
1849:FreeRTOS/queue.c ****             ( void ) xTaskResumeAll();
1850:FreeRTOS/queue.c **** 
1851:FreeRTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1852:FreeRTOS/queue.c ****             {
1853:FreeRTOS/queue.c ****                 traceQUEUE_PEEK_FAILED( pxQueue );
1854:FreeRTOS/queue.c ****                 return errQUEUE_EMPTY;
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 34


1855:FreeRTOS/queue.c ****             }
1856:FreeRTOS/queue.c ****             else
1857:FreeRTOS/queue.c ****             {
1858:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
1859:FreeRTOS/queue.c ****             }
1860:FreeRTOS/queue.c ****         }
1861:FreeRTOS/queue.c ****     } /*lint -restore */
1862:FreeRTOS/queue.c **** }
1863:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1864:FreeRTOS/queue.c **** 
1865:FreeRTOS/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
1866:FreeRTOS/queue.c ****                                  void * const pvBuffer,
1867:FreeRTOS/queue.c ****                                  BaseType_t * const pxHigherPriorityTaskWoken )
1868:FreeRTOS/queue.c **** {
1869:FreeRTOS/queue.c ****     BaseType_t xReturn;
1870:FreeRTOS/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1871:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
1872:FreeRTOS/queue.c **** 
1873:FreeRTOS/queue.c ****     configASSERT( pxQueue );
1874:FreeRTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1875:FreeRTOS/queue.c **** 
1876:FreeRTOS/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1877:FreeRTOS/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1878:FreeRTOS/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1879:FreeRTOS/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1880:FreeRTOS/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1881:FreeRTOS/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1882:FreeRTOS/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1883:FreeRTOS/queue.c ****      * assigned a priority above the configured maximum system call priority.
1884:FreeRTOS/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1885:FreeRTOS/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1886:FreeRTOS/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1887:FreeRTOS/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1888:FreeRTOS/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1889:FreeRTOS/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1890:FreeRTOS/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1891:FreeRTOS/queue.c **** 
1892:FreeRTOS/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1893:FreeRTOS/queue.c ****     {
1894:FreeRTOS/queue.c ****         const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1895:FreeRTOS/queue.c **** 
1896:FreeRTOS/queue.c ****         /* Cannot block in an ISR, so check there is data available. */
1897:FreeRTOS/queue.c ****         if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1898:FreeRTOS/queue.c ****         {
1899:FreeRTOS/queue.c ****             const int8_t cRxLock = pxQueue->cRxLock;
1900:FreeRTOS/queue.c **** 
1901:FreeRTOS/queue.c ****             traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1902:FreeRTOS/queue.c **** 
1903:FreeRTOS/queue.c ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
1904:FreeRTOS/queue.c ****             pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1905:FreeRTOS/queue.c **** 
1906:FreeRTOS/queue.c ****             /* If the queue is locked the event list will not be modified.
1907:FreeRTOS/queue.c ****              * Instead update the lock count so the task that unlocks the queue
1908:FreeRTOS/queue.c ****              * will know that an ISR has removed data while the queue was
1909:FreeRTOS/queue.c ****              * locked. */
1910:FreeRTOS/queue.c ****             if( cRxLock == queueUNLOCKED )
1911:FreeRTOS/queue.c ****             {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 35


1912:FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1913:FreeRTOS/queue.c ****                 {
1914:FreeRTOS/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1915:FreeRTOS/queue.c ****                     {
1916:FreeRTOS/queue.c ****                         /* The task waiting has a higher priority than us so
1917:FreeRTOS/queue.c ****                          * force a context switch. */
1918:FreeRTOS/queue.c ****                         if( pxHigherPriorityTaskWoken != NULL )
1919:FreeRTOS/queue.c ****                         {
1920:FreeRTOS/queue.c ****                             *pxHigherPriorityTaskWoken = pdTRUE;
1921:FreeRTOS/queue.c ****                         }
1922:FreeRTOS/queue.c ****                         else
1923:FreeRTOS/queue.c ****                         {
1924:FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1925:FreeRTOS/queue.c ****                         }
1926:FreeRTOS/queue.c ****                     }
1927:FreeRTOS/queue.c ****                     else
1928:FreeRTOS/queue.c ****                     {
1929:FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1930:FreeRTOS/queue.c ****                     }
1931:FreeRTOS/queue.c ****                 }
1932:FreeRTOS/queue.c ****                 else
1933:FreeRTOS/queue.c ****                 {
1934:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1935:FreeRTOS/queue.c ****                 }
1936:FreeRTOS/queue.c ****             }
1937:FreeRTOS/queue.c ****             else
1938:FreeRTOS/queue.c ****             {
1939:FreeRTOS/queue.c ****                 /* Increment the lock count so the task that unlocks the queue
1940:FreeRTOS/queue.c ****                  * knows that data was removed while it was locked. */
1941:FreeRTOS/queue.c ****                 configASSERT( cRxLock != queueINT8_MAX );
1942:FreeRTOS/queue.c **** 
1943:FreeRTOS/queue.c ****                 pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1944:FreeRTOS/queue.c ****             }
1945:FreeRTOS/queue.c **** 
1946:FreeRTOS/queue.c ****             xReturn = pdPASS;
1947:FreeRTOS/queue.c ****         }
1948:FreeRTOS/queue.c ****         else
1949:FreeRTOS/queue.c ****         {
1950:FreeRTOS/queue.c ****             xReturn = pdFAIL;
1951:FreeRTOS/queue.c ****             traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1952:FreeRTOS/queue.c ****         }
1953:FreeRTOS/queue.c ****     }
1954:FreeRTOS/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1955:FreeRTOS/queue.c **** 
1956:FreeRTOS/queue.c ****     return xReturn;
1957:FreeRTOS/queue.c **** }
1958:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1959:FreeRTOS/queue.c **** 
1960:FreeRTOS/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,
1961:FreeRTOS/queue.c ****                               void * const pvBuffer )
1962:FreeRTOS/queue.c **** {
1963:FreeRTOS/queue.c ****     BaseType_t xReturn;
1964:FreeRTOS/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1965:FreeRTOS/queue.c ****     int8_t * pcOriginalReadPosition;
1966:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
1967:FreeRTOS/queue.c **** 
1968:FreeRTOS/queue.c ****     configASSERT( pxQueue );
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 36


1969:FreeRTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1970:FreeRTOS/queue.c ****     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
1971:FreeRTOS/queue.c **** 
1972:FreeRTOS/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1973:FreeRTOS/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1974:FreeRTOS/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1975:FreeRTOS/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1976:FreeRTOS/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1977:FreeRTOS/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1978:FreeRTOS/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1979:FreeRTOS/queue.c ****      * assigned a priority above the configured maximum system call priority.
1980:FreeRTOS/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1981:FreeRTOS/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1982:FreeRTOS/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1983:FreeRTOS/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1984:FreeRTOS/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1985:FreeRTOS/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1986:FreeRTOS/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1987:FreeRTOS/queue.c **** 
1988:FreeRTOS/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1989:FreeRTOS/queue.c ****     {
1990:FreeRTOS/queue.c ****         /* Cannot block in an ISR, so check there is data available. */
1991:FreeRTOS/queue.c ****         if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1992:FreeRTOS/queue.c ****         {
1993:FreeRTOS/queue.c ****             traceQUEUE_PEEK_FROM_ISR( pxQueue );
1994:FreeRTOS/queue.c **** 
1995:FreeRTOS/queue.c ****             /* Remember the read position so it can be reset as nothing is
1996:FreeRTOS/queue.c ****              * actually being removed from the queue. */
1997:FreeRTOS/queue.c ****             pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
1998:FreeRTOS/queue.c ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
1999:FreeRTOS/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
2000:FreeRTOS/queue.c **** 
2001:FreeRTOS/queue.c ****             xReturn = pdPASS;
2002:FreeRTOS/queue.c ****         }
2003:FreeRTOS/queue.c ****         else
2004:FreeRTOS/queue.c ****         {
2005:FreeRTOS/queue.c ****             xReturn = pdFAIL;
2006:FreeRTOS/queue.c ****             traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
2007:FreeRTOS/queue.c ****         }
2008:FreeRTOS/queue.c ****     }
2009:FreeRTOS/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2010:FreeRTOS/queue.c **** 
2011:FreeRTOS/queue.c ****     return xReturn;
2012:FreeRTOS/queue.c **** }
2013:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2014:FreeRTOS/queue.c **** 
2015:FreeRTOS/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
2016:FreeRTOS/queue.c **** {
2017:FreeRTOS/queue.c ****     UBaseType_t uxReturn;
2018:FreeRTOS/queue.c **** 
2019:FreeRTOS/queue.c ****     configASSERT( xQueue );
2020:FreeRTOS/queue.c **** 
2021:FreeRTOS/queue.c ****     taskENTER_CRITICAL();
2022:FreeRTOS/queue.c ****     {
2023:FreeRTOS/queue.c ****         uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
2024:FreeRTOS/queue.c ****     }
2025:FreeRTOS/queue.c ****     taskEXIT_CRITICAL();
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 37


2026:FreeRTOS/queue.c **** 
2027:FreeRTOS/queue.c ****     return uxReturn;
2028:FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
2029:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2030:FreeRTOS/queue.c **** 
2031:FreeRTOS/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
2032:FreeRTOS/queue.c **** {
2033:FreeRTOS/queue.c ****     UBaseType_t uxReturn;
2034:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
2035:FreeRTOS/queue.c **** 
2036:FreeRTOS/queue.c ****     configASSERT( pxQueue );
2037:FreeRTOS/queue.c **** 
2038:FreeRTOS/queue.c ****     taskENTER_CRITICAL();
2039:FreeRTOS/queue.c ****     {
2040:FreeRTOS/queue.c ****         uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
2041:FreeRTOS/queue.c ****     }
2042:FreeRTOS/queue.c ****     taskEXIT_CRITICAL();
2043:FreeRTOS/queue.c **** 
2044:FreeRTOS/queue.c ****     return uxReturn;
2045:FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
2046:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2047:FreeRTOS/queue.c **** 
2048:FreeRTOS/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
2049:FreeRTOS/queue.c **** {
2050:FreeRTOS/queue.c ****     UBaseType_t uxReturn;
2051:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
2052:FreeRTOS/queue.c **** 
2053:FreeRTOS/queue.c ****     configASSERT( pxQueue );
2054:FreeRTOS/queue.c ****     uxReturn = pxQueue->uxMessagesWaiting;
2055:FreeRTOS/queue.c **** 
2056:FreeRTOS/queue.c ****     return uxReturn;
2057:FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
2058:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2059:FreeRTOS/queue.c **** 
2060:FreeRTOS/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
2061:FreeRTOS/queue.c **** {
2062:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
2063:FreeRTOS/queue.c **** 
2064:FreeRTOS/queue.c ****     configASSERT( pxQueue );
2065:FreeRTOS/queue.c ****     traceQUEUE_DELETE( pxQueue );
2066:FreeRTOS/queue.c **** 
2067:FreeRTOS/queue.c ****     #if ( configQUEUE_REGISTRY_SIZE > 0 )
2068:FreeRTOS/queue.c ****         {
2069:FreeRTOS/queue.c ****             vQueueUnregisterQueue( pxQueue );
2070:FreeRTOS/queue.c ****         }
2071:FreeRTOS/queue.c ****     #endif
2072:FreeRTOS/queue.c **** 
2073:FreeRTOS/queue.c ****     #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
2074:FreeRTOS/queue.c ****         {
2075:FreeRTOS/queue.c ****             /* The queue can only have been allocated dynamically - free it
2076:FreeRTOS/queue.c ****              * again. */
2077:FreeRTOS/queue.c ****             vPortFree( pxQueue );
2078:FreeRTOS/queue.c ****         }
2079:FreeRTOS/queue.c ****     #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
2080:FreeRTOS/queue.c ****         {
2081:FreeRTOS/queue.c ****             /* The queue could have been allocated statically or dynamically, so
2082:FreeRTOS/queue.c ****              * check before attempting to free the memory. */
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 38


2083:FreeRTOS/queue.c ****             if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
2084:FreeRTOS/queue.c ****             {
2085:FreeRTOS/queue.c ****                 vPortFree( pxQueue );
2086:FreeRTOS/queue.c ****             }
2087:FreeRTOS/queue.c ****             else
2088:FreeRTOS/queue.c ****             {
2089:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2090:FreeRTOS/queue.c ****             }
2091:FreeRTOS/queue.c ****         }
2092:FreeRTOS/queue.c ****     #else /* if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION ==
2093:FreeRTOS/queue.c ****         {
2094:FreeRTOS/queue.c ****             /* The queue must have been statically allocated, so is not going to be
2095:FreeRTOS/queue.c ****              * deleted.  Avoid compiler warnings about the unused parameter. */
2096:FreeRTOS/queue.c ****             ( void ) pxQueue;
2097:FreeRTOS/queue.c ****         }
2098:FreeRTOS/queue.c ****     #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
2099:FreeRTOS/queue.c **** }
2100:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2101:FreeRTOS/queue.c **** 
2102:FreeRTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2103:FreeRTOS/queue.c **** 
2104:FreeRTOS/queue.c ****     UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
2105:FreeRTOS/queue.c ****     {
2106:FreeRTOS/queue.c ****         return ( ( Queue_t * ) xQueue )->uxQueueNumber;
2107:FreeRTOS/queue.c ****     }
2108:FreeRTOS/queue.c **** 
2109:FreeRTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2110:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2111:FreeRTOS/queue.c **** 
2112:FreeRTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2113:FreeRTOS/queue.c **** 
2114:FreeRTOS/queue.c ****     void vQueueSetQueueNumber( QueueHandle_t xQueue,
2115:FreeRTOS/queue.c ****                                UBaseType_t uxQueueNumber )
2116:FreeRTOS/queue.c ****     {
2117:FreeRTOS/queue.c ****         ( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
2118:FreeRTOS/queue.c ****     }
2119:FreeRTOS/queue.c **** 
2120:FreeRTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2121:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2122:FreeRTOS/queue.c **** 
2123:FreeRTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2124:FreeRTOS/queue.c **** 
2125:FreeRTOS/queue.c ****     uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
2126:FreeRTOS/queue.c ****     {
2127:FreeRTOS/queue.c ****         return ( ( Queue_t * ) xQueue )->ucQueueType;
2128:FreeRTOS/queue.c ****     }
2129:FreeRTOS/queue.c **** 
2130:FreeRTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2131:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2132:FreeRTOS/queue.c **** 
2133:FreeRTOS/queue.c **** #if ( configUSE_MUTEXES == 1 )
2134:FreeRTOS/queue.c **** 
2135:FreeRTOS/queue.c ****     static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
2136:FreeRTOS/queue.c ****     {
  29              		.loc 1 2136 5 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 39


  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              		.loc 1 2136 5 is_stmt 0 view .LVU1
  35 0000 0346     		mov	r3, r0
2137:FreeRTOS/queue.c ****         UBaseType_t uxHighestPriorityOfWaitingTasks;
  36              		.loc 1 2137 9 is_stmt 1 view .LVU2
2138:FreeRTOS/queue.c **** 
2139:FreeRTOS/queue.c ****         /* If a task waiting for a mutex causes the mutex holder to inherit a
2140:FreeRTOS/queue.c ****          * priority, but the waiting task times out, then the holder should
2141:FreeRTOS/queue.c ****          * disinherit the priority - but only down to the highest priority of any
2142:FreeRTOS/queue.c ****          * other tasks that are waiting for the same mutex.  For this purpose,
2143:FreeRTOS/queue.c ****          * return the priority of the highest priority task that is waiting for the
2144:FreeRTOS/queue.c ****          * mutex. */
2145:FreeRTOS/queue.c ****         if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
  37              		.loc 1 2145 9 view .LVU3
  38              		.loc 1 2145 13 is_stmt 0 view .LVU4
  39 0002 406A     		ldr	r0, [r0, #36]
  40              	.LVL1:
  41              		.loc 1 2145 11 view .LVU5
  42 0004 18B1     		cbz	r0, .L1
2146:FreeRTOS/queue.c ****         {
2147:FreeRTOS/queue.c ****             uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t 
  43              		.loc 1 2147 13 is_stmt 1 view .LVU6
  44              		.loc 1 2147 102 is_stmt 0 view .LVU7
  45 0006 1B6B     		ldr	r3, [r3, #48]
  46              	.LVL2:
  47              		.loc 1 2147 102 view .LVU8
  48 0008 1868     		ldr	r0, [r3]
  49              		.loc 1 2147 45 view .LVU9
  50 000a C0F10500 		rsb	r0, r0, #5
  51              	.LVL3:
2148:FreeRTOS/queue.c ****         }
2149:FreeRTOS/queue.c ****         else
2150:FreeRTOS/queue.c ****         {
2151:FreeRTOS/queue.c ****             uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
2152:FreeRTOS/queue.c ****         }
2153:FreeRTOS/queue.c **** 
2154:FreeRTOS/queue.c ****         return uxHighestPriorityOfWaitingTasks;
  52              		.loc 1 2154 9 is_stmt 1 view .LVU10
  53              	.L1:
2155:FreeRTOS/queue.c ****     }
  54              		.loc 1 2155 5 is_stmt 0 view .LVU11
  55 000e 7047     		bx	lr
  56              		.cfi_endproc
  57              	.LFE33:
  59              		.section	.text.prvIsQueueFull,"ax",%progbits
  60              		.align	1
  61              		.syntax unified
  62              		.thumb
  63              		.thumb_func
  64              		.fpu fpv4-sp-d16
  66              	prvIsQueueFull:
  67              	.LVL4:
  68              	.LFB39:
2156:FreeRTOS/queue.c **** 
2157:FreeRTOS/queue.c **** #endif /* configUSE_MUTEXES */
2158:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 40


2159:FreeRTOS/queue.c **** 
2160:FreeRTOS/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
2161:FreeRTOS/queue.c ****                                       const void * pvItemToQueue,
2162:FreeRTOS/queue.c ****                                       const BaseType_t xPosition )
2163:FreeRTOS/queue.c **** {
2164:FreeRTOS/queue.c ****     BaseType_t xReturn = pdFALSE;
2165:FreeRTOS/queue.c ****     UBaseType_t uxMessagesWaiting;
2166:FreeRTOS/queue.c **** 
2167:FreeRTOS/queue.c ****     /* This function is called from a critical section. */
2168:FreeRTOS/queue.c **** 
2169:FreeRTOS/queue.c ****     uxMessagesWaiting = pxQueue->uxMessagesWaiting;
2170:FreeRTOS/queue.c **** 
2171:FreeRTOS/queue.c ****     if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
2172:FreeRTOS/queue.c ****     {
2173:FreeRTOS/queue.c ****         #if ( configUSE_MUTEXES == 1 )
2174:FreeRTOS/queue.c ****             {
2175:FreeRTOS/queue.c ****                 if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
2176:FreeRTOS/queue.c ****                 {
2177:FreeRTOS/queue.c ****                     /* The mutex is no longer being held. */
2178:FreeRTOS/queue.c ****                     xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
2179:FreeRTOS/queue.c ****                     pxQueue->u.xSemaphore.xMutexHolder = NULL;
2180:FreeRTOS/queue.c ****                 }
2181:FreeRTOS/queue.c ****                 else
2182:FreeRTOS/queue.c ****                 {
2183:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2184:FreeRTOS/queue.c ****                 }
2185:FreeRTOS/queue.c ****             }
2186:FreeRTOS/queue.c ****         #endif /* configUSE_MUTEXES */
2187:FreeRTOS/queue.c ****     }
2188:FreeRTOS/queue.c ****     else if( xPosition == queueSEND_TO_BACK )
2189:FreeRTOS/queue.c ****     {
2190:FreeRTOS/queue.c ****         ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSi
2191:FreeRTOS/queue.c ****         pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                 
2192:FreeRTOS/queue.c **** 
2193:FreeRTOS/queue.c ****         if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                       
2194:FreeRTOS/queue.c ****         {
2195:FreeRTOS/queue.c ****             pxQueue->pcWriteTo = pxQueue->pcHead;
2196:FreeRTOS/queue.c ****         }
2197:FreeRTOS/queue.c ****         else
2198:FreeRTOS/queue.c ****         {
2199:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2200:FreeRTOS/queue.c ****         }
2201:FreeRTOS/queue.c ****     }
2202:FreeRTOS/queue.c ****     else
2203:FreeRTOS/queue.c ****     {
2204:FreeRTOS/queue.c ****         ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue
2205:FreeRTOS/queue.c ****         pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
2206:FreeRTOS/queue.c **** 
2207:FreeRTOS/queue.c ****         if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified
2208:FreeRTOS/queue.c ****         {
2209:FreeRTOS/queue.c ****             pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
2210:FreeRTOS/queue.c ****         }
2211:FreeRTOS/queue.c ****         else
2212:FreeRTOS/queue.c ****         {
2213:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2214:FreeRTOS/queue.c ****         }
2215:FreeRTOS/queue.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 41


2216:FreeRTOS/queue.c ****         if( xPosition == queueOVERWRITE )
2217:FreeRTOS/queue.c ****         {
2218:FreeRTOS/queue.c ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
2219:FreeRTOS/queue.c ****             {
2220:FreeRTOS/queue.c ****                 /* An item is not being added but overwritten, so subtract
2221:FreeRTOS/queue.c ****                  * one from the recorded number of items in the queue so when
2222:FreeRTOS/queue.c ****                  * one is added again below the number of recorded items remains
2223:FreeRTOS/queue.c ****                  * correct. */
2224:FreeRTOS/queue.c ****                 --uxMessagesWaiting;
2225:FreeRTOS/queue.c ****             }
2226:FreeRTOS/queue.c ****             else
2227:FreeRTOS/queue.c ****             {
2228:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2229:FreeRTOS/queue.c ****             }
2230:FreeRTOS/queue.c ****         }
2231:FreeRTOS/queue.c ****         else
2232:FreeRTOS/queue.c ****         {
2233:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2234:FreeRTOS/queue.c ****         }
2235:FreeRTOS/queue.c ****     }
2236:FreeRTOS/queue.c **** 
2237:FreeRTOS/queue.c ****     pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
2238:FreeRTOS/queue.c **** 
2239:FreeRTOS/queue.c ****     return xReturn;
2240:FreeRTOS/queue.c **** }
2241:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2242:FreeRTOS/queue.c **** 
2243:FreeRTOS/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue,
2244:FreeRTOS/queue.c ****                                   void * const pvBuffer )
2245:FreeRTOS/queue.c **** {
2246:FreeRTOS/queue.c ****     if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
2247:FreeRTOS/queue.c ****     {
2248:FreeRTOS/queue.c ****         pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithm
2249:FreeRTOS/queue.c **** 
2250:FreeRTOS/queue.c ****         if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception
2251:FreeRTOS/queue.c ****         {
2252:FreeRTOS/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2253:FreeRTOS/queue.c ****         }
2254:FreeRTOS/queue.c ****         else
2255:FreeRTOS/queue.c ****         {
2256:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2257:FreeRTOS/queue.c ****         }
2258:FreeRTOS/queue.c **** 
2259:FreeRTOS/queue.c ****         ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) p
2260:FreeRTOS/queue.c ****     }
2261:FreeRTOS/queue.c **** }
2262:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2263:FreeRTOS/queue.c **** 
2264:FreeRTOS/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
2265:FreeRTOS/queue.c **** {
2266:FreeRTOS/queue.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
2267:FreeRTOS/queue.c **** 
2268:FreeRTOS/queue.c ****     /* The lock counts contains the number of extra data items placed or
2269:FreeRTOS/queue.c ****      * removed from the queue while the queue was locked.  When a queue is
2270:FreeRTOS/queue.c ****      * locked items can be added or removed, but the event lists cannot be
2271:FreeRTOS/queue.c ****      * updated. */
2272:FreeRTOS/queue.c ****     taskENTER_CRITICAL();
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 42


2273:FreeRTOS/queue.c ****     {
2274:FreeRTOS/queue.c ****         int8_t cTxLock = pxQueue->cTxLock;
2275:FreeRTOS/queue.c **** 
2276:FreeRTOS/queue.c ****         /* See if data was added to the queue while it was locked. */
2277:FreeRTOS/queue.c ****         while( cTxLock > queueLOCKED_UNMODIFIED )
2278:FreeRTOS/queue.c ****         {
2279:FreeRTOS/queue.c ****             /* Data was posted while the queue was locked.  Are any tasks
2280:FreeRTOS/queue.c ****              * blocked waiting for data to become available? */
2281:FreeRTOS/queue.c ****             #if ( configUSE_QUEUE_SETS == 1 )
2282:FreeRTOS/queue.c ****                 {
2283:FreeRTOS/queue.c ****                     if( pxQueue->pxQueueSetContainer != NULL )
2284:FreeRTOS/queue.c ****                     {
2285:FreeRTOS/queue.c ****                         if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
2286:FreeRTOS/queue.c ****                         {
2287:FreeRTOS/queue.c ****                             /* The queue is a member of a queue set, and posting to
2288:FreeRTOS/queue.c ****                              * the queue set caused a higher priority task to unblock.
2289:FreeRTOS/queue.c ****                              * A context switch is required. */
2290:FreeRTOS/queue.c ****                             vTaskMissedYield();
2291:FreeRTOS/queue.c ****                         }
2292:FreeRTOS/queue.c ****                         else
2293:FreeRTOS/queue.c ****                         {
2294:FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
2295:FreeRTOS/queue.c ****                         }
2296:FreeRTOS/queue.c ****                     }
2297:FreeRTOS/queue.c ****                     else
2298:FreeRTOS/queue.c ****                     {
2299:FreeRTOS/queue.c ****                         /* Tasks that are removed from the event list will get
2300:FreeRTOS/queue.c ****                          * added to the pending ready list as the scheduler is still
2301:FreeRTOS/queue.c ****                          * suspended. */
2302:FreeRTOS/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2303:FreeRTOS/queue.c ****                         {
2304:FreeRTOS/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
2305:FreeRTOS/queue.c ****                             {
2306:FreeRTOS/queue.c ****                                 /* The task waiting has a higher priority so record that a
2307:FreeRTOS/queue.c ****                                  * context switch is required. */
2308:FreeRTOS/queue.c ****                                 vTaskMissedYield();
2309:FreeRTOS/queue.c ****                             }
2310:FreeRTOS/queue.c ****                             else
2311:FreeRTOS/queue.c ****                             {
2312:FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
2313:FreeRTOS/queue.c ****                             }
2314:FreeRTOS/queue.c ****                         }
2315:FreeRTOS/queue.c ****                         else
2316:FreeRTOS/queue.c ****                         {
2317:FreeRTOS/queue.c ****                             break;
2318:FreeRTOS/queue.c ****                         }
2319:FreeRTOS/queue.c ****                     }
2320:FreeRTOS/queue.c ****                 }
2321:FreeRTOS/queue.c ****             #else /* configUSE_QUEUE_SETS */
2322:FreeRTOS/queue.c ****                 {
2323:FreeRTOS/queue.c ****                     /* Tasks that are removed from the event list will get added to
2324:FreeRTOS/queue.c ****                      * the pending ready list as the scheduler is still suspended. */
2325:FreeRTOS/queue.c ****                     if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2326:FreeRTOS/queue.c ****                     {
2327:FreeRTOS/queue.c ****                         if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdF
2328:FreeRTOS/queue.c ****                         {
2329:FreeRTOS/queue.c ****                             /* The task waiting has a higher priority so record that
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 43


2330:FreeRTOS/queue.c ****                              * a context switch is required. */
2331:FreeRTOS/queue.c ****                             vTaskMissedYield();
2332:FreeRTOS/queue.c ****                         }
2333:FreeRTOS/queue.c ****                         else
2334:FreeRTOS/queue.c ****                         {
2335:FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
2336:FreeRTOS/queue.c ****                         }
2337:FreeRTOS/queue.c ****                     }
2338:FreeRTOS/queue.c ****                     else
2339:FreeRTOS/queue.c ****                     {
2340:FreeRTOS/queue.c ****                         break;
2341:FreeRTOS/queue.c ****                     }
2342:FreeRTOS/queue.c ****                 }
2343:FreeRTOS/queue.c ****             #endif /* configUSE_QUEUE_SETS */
2344:FreeRTOS/queue.c **** 
2345:FreeRTOS/queue.c ****             --cTxLock;
2346:FreeRTOS/queue.c ****         }
2347:FreeRTOS/queue.c **** 
2348:FreeRTOS/queue.c ****         pxQueue->cTxLock = queueUNLOCKED;
2349:FreeRTOS/queue.c ****     }
2350:FreeRTOS/queue.c ****     taskEXIT_CRITICAL();
2351:FreeRTOS/queue.c **** 
2352:FreeRTOS/queue.c ****     /* Do the same for the Rx lock. */
2353:FreeRTOS/queue.c ****     taskENTER_CRITICAL();
2354:FreeRTOS/queue.c ****     {
2355:FreeRTOS/queue.c ****         int8_t cRxLock = pxQueue->cRxLock;
2356:FreeRTOS/queue.c **** 
2357:FreeRTOS/queue.c ****         while( cRxLock > queueLOCKED_UNMODIFIED )
2358:FreeRTOS/queue.c ****         {
2359:FreeRTOS/queue.c ****             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2360:FreeRTOS/queue.c ****             {
2361:FreeRTOS/queue.c ****                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2362:FreeRTOS/queue.c ****                 {
2363:FreeRTOS/queue.c ****                     vTaskMissedYield();
2364:FreeRTOS/queue.c ****                 }
2365:FreeRTOS/queue.c ****                 else
2366:FreeRTOS/queue.c ****                 {
2367:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2368:FreeRTOS/queue.c ****                 }
2369:FreeRTOS/queue.c **** 
2370:FreeRTOS/queue.c ****                 --cRxLock;
2371:FreeRTOS/queue.c ****             }
2372:FreeRTOS/queue.c ****             else
2373:FreeRTOS/queue.c ****             {
2374:FreeRTOS/queue.c ****                 break;
2375:FreeRTOS/queue.c ****             }
2376:FreeRTOS/queue.c ****         }
2377:FreeRTOS/queue.c **** 
2378:FreeRTOS/queue.c ****         pxQueue->cRxLock = queueUNLOCKED;
2379:FreeRTOS/queue.c ****     }
2380:FreeRTOS/queue.c ****     taskEXIT_CRITICAL();
2381:FreeRTOS/queue.c **** }
2382:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2383:FreeRTOS/queue.c **** 
2384:FreeRTOS/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
2385:FreeRTOS/queue.c **** {
2386:FreeRTOS/queue.c ****     BaseType_t xReturn;
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 44


2387:FreeRTOS/queue.c **** 
2388:FreeRTOS/queue.c ****     taskENTER_CRITICAL();
2389:FreeRTOS/queue.c ****     {
2390:FreeRTOS/queue.c ****         if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2391:FreeRTOS/queue.c ****         {
2392:FreeRTOS/queue.c ****             xReturn = pdTRUE;
2393:FreeRTOS/queue.c ****         }
2394:FreeRTOS/queue.c ****         else
2395:FreeRTOS/queue.c ****         {
2396:FreeRTOS/queue.c ****             xReturn = pdFALSE;
2397:FreeRTOS/queue.c ****         }
2398:FreeRTOS/queue.c ****     }
2399:FreeRTOS/queue.c ****     taskEXIT_CRITICAL();
2400:FreeRTOS/queue.c **** 
2401:FreeRTOS/queue.c ****     return xReturn;
2402:FreeRTOS/queue.c **** }
2403:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2404:FreeRTOS/queue.c **** 
2405:FreeRTOS/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
2406:FreeRTOS/queue.c **** {
2407:FreeRTOS/queue.c ****     BaseType_t xReturn;
2408:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
2409:FreeRTOS/queue.c **** 
2410:FreeRTOS/queue.c ****     configASSERT( pxQueue );
2411:FreeRTOS/queue.c **** 
2412:FreeRTOS/queue.c ****     if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2413:FreeRTOS/queue.c ****     {
2414:FreeRTOS/queue.c ****         xReturn = pdTRUE;
2415:FreeRTOS/queue.c ****     }
2416:FreeRTOS/queue.c ****     else
2417:FreeRTOS/queue.c ****     {
2418:FreeRTOS/queue.c ****         xReturn = pdFALSE;
2419:FreeRTOS/queue.c ****     }
2420:FreeRTOS/queue.c **** 
2421:FreeRTOS/queue.c ****     return xReturn;
2422:FreeRTOS/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
2423:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2424:FreeRTOS/queue.c **** 
2425:FreeRTOS/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
2426:FreeRTOS/queue.c **** {
  69              		.loc 1 2426 1 is_stmt 1 view -0
  70              		.cfi_startproc
  71              		@ args = 0, pretend = 0, frame = 0
  72              		@ frame_needed = 0, uses_anonymous_args = 0
  73              		.loc 1 2426 1 is_stmt 0 view .LVU13
  74 0000 10B5     		push	{r4, lr}
  75              	.LCFI0:
  76              		.cfi_def_cfa_offset 8
  77              		.cfi_offset 4, -8
  78              		.cfi_offset 14, -4
  79 0002 0446     		mov	r4, r0
2427:FreeRTOS/queue.c ****     BaseType_t xReturn;
  80              		.loc 1 2427 5 is_stmt 1 view .LVU14
2428:FreeRTOS/queue.c **** 
2429:FreeRTOS/queue.c ****     taskENTER_CRITICAL();
  81              		.loc 1 2429 5 view .LVU15
  82 0004 FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 45


  83              	.LVL5:
2430:FreeRTOS/queue.c ****     {
2431:FreeRTOS/queue.c ****         if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  84              		.loc 1 2431 9 view .LVU16
  85              		.loc 1 2431 20 is_stmt 0 view .LVU17
  86 0008 A26B     		ldr	r2, [r4, #56]
  87              		.loc 1 2431 50 view .LVU18
  88 000a E36B     		ldr	r3, [r4, #60]
  89              		.loc 1 2431 11 view .LVU19
  90 000c 9A42     		cmp	r2, r3
  91 000e 04D0     		beq	.L7
2432:FreeRTOS/queue.c ****         {
2433:FreeRTOS/queue.c ****             xReturn = pdTRUE;
2434:FreeRTOS/queue.c ****         }
2435:FreeRTOS/queue.c ****         else
2436:FreeRTOS/queue.c ****         {
2437:FreeRTOS/queue.c ****             xReturn = pdFALSE;
  92              		.loc 1 2437 21 view .LVU20
  93 0010 0024     		movs	r4, #0
  94              	.LVL6:
  95              	.L4:
2438:FreeRTOS/queue.c ****         }
2439:FreeRTOS/queue.c ****     }
2440:FreeRTOS/queue.c ****     taskEXIT_CRITICAL();
  96              		.loc 1 2440 5 is_stmt 1 view .LVU21
  97 0012 FFF7FEFF 		bl	vPortExitCritical
  98              	.LVL7:
2441:FreeRTOS/queue.c **** 
2442:FreeRTOS/queue.c ****     return xReturn;
  99              		.loc 1 2442 5 view .LVU22
2443:FreeRTOS/queue.c **** }
 100              		.loc 1 2443 1 is_stmt 0 view .LVU23
 101 0016 2046     		mov	r0, r4
 102 0018 10BD     		pop	{r4, pc}
 103              	.LVL8:
 104              	.L7:
2433:FreeRTOS/queue.c ****         }
 105              		.loc 1 2433 21 view .LVU24
 106 001a 0124     		movs	r4, #1
 107              	.LVL9:
2433:FreeRTOS/queue.c ****         }
 108              		.loc 1 2433 21 view .LVU25
 109 001c F9E7     		b	.L4
 110              		.cfi_endproc
 111              	.LFE39:
 113              		.section	.text.prvIsQueueEmpty,"ax",%progbits
 114              		.align	1
 115              		.syntax unified
 116              		.thumb
 117              		.thumb_func
 118              		.fpu fpv4-sp-d16
 120              	prvIsQueueEmpty:
 121              	.LVL10:
 122              	.LFB37:
2385:FreeRTOS/queue.c ****     BaseType_t xReturn;
 123              		.loc 1 2385 1 is_stmt 1 view -0
 124              		.cfi_startproc
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 46


 125              		@ args = 0, pretend = 0, frame = 0
 126              		@ frame_needed = 0, uses_anonymous_args = 0
2385:FreeRTOS/queue.c ****     BaseType_t xReturn;
 127              		.loc 1 2385 1 is_stmt 0 view .LVU27
 128 0000 10B5     		push	{r4, lr}
 129              	.LCFI1:
 130              		.cfi_def_cfa_offset 8
 131              		.cfi_offset 4, -8
 132              		.cfi_offset 14, -4
 133 0002 0446     		mov	r4, r0
2386:FreeRTOS/queue.c **** 
 134              		.loc 1 2386 5 is_stmt 1 view .LVU28
2388:FreeRTOS/queue.c ****     {
 135              		.loc 1 2388 5 view .LVU29
 136 0004 FFF7FEFF 		bl	vPortEnterCritical
 137              	.LVL11:
2390:FreeRTOS/queue.c ****         {
 138              		.loc 1 2390 9 view .LVU30
2390:FreeRTOS/queue.c ****         {
 139              		.loc 1 2390 20 is_stmt 0 view .LVU31
 140 0008 A36B     		ldr	r3, [r4, #56]
2390:FreeRTOS/queue.c ****         {
 141              		.loc 1 2390 11 view .LVU32
 142 000a 23B9     		cbnz	r3, .L10
2392:FreeRTOS/queue.c ****         }
 143              		.loc 1 2392 21 view .LVU33
 144 000c 0124     		movs	r4, #1
 145              	.LVL12:
 146              	.L9:
2399:FreeRTOS/queue.c **** 
 147              		.loc 1 2399 5 is_stmt 1 view .LVU34
 148 000e FFF7FEFF 		bl	vPortExitCritical
 149              	.LVL13:
2401:FreeRTOS/queue.c **** }
 150              		.loc 1 2401 5 view .LVU35
2402:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 151              		.loc 1 2402 1 is_stmt 0 view .LVU36
 152 0012 2046     		mov	r0, r4
 153 0014 10BD     		pop	{r4, pc}
 154              	.LVL14:
 155              	.L10:
2396:FreeRTOS/queue.c ****         }
 156              		.loc 1 2396 21 view .LVU37
 157 0016 0024     		movs	r4, #0
 158              	.LVL15:
2396:FreeRTOS/queue.c ****         }
 159              		.loc 1 2396 21 view .LVU38
 160 0018 F9E7     		b	.L9
 161              		.cfi_endproc
 162              	.LFE37:
 164              		.section	.text.prvCopyDataToQueue,"ax",%progbits
 165              		.align	1
 166              		.syntax unified
 167              		.thumb
 168              		.thumb_func
 169              		.fpu fpv4-sp-d16
 171              	prvCopyDataToQueue:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 47


 172              	.LVL16:
 173              	.LFB34:
2163:FreeRTOS/queue.c ****     BaseType_t xReturn = pdFALSE;
 174              		.loc 1 2163 1 is_stmt 1 view -0
 175              		.cfi_startproc
 176              		@ args = 0, pretend = 0, frame = 0
 177              		@ frame_needed = 0, uses_anonymous_args = 0
2163:FreeRTOS/queue.c ****     BaseType_t xReturn = pdFALSE;
 178              		.loc 1 2163 1 is_stmt 0 view .LVU40
 179 0000 70B5     		push	{r4, r5, r6, lr}
 180              	.LCFI2:
 181              		.cfi_def_cfa_offset 16
 182              		.cfi_offset 4, -16
 183              		.cfi_offset 5, -12
 184              		.cfi_offset 6, -8
 185              		.cfi_offset 14, -4
 186 0002 0446     		mov	r4, r0
 187 0004 1546     		mov	r5, r2
2164:FreeRTOS/queue.c ****     UBaseType_t uxMessagesWaiting;
 188              		.loc 1 2164 5 is_stmt 1 view .LVU41
 189              	.LVL17:
2165:FreeRTOS/queue.c **** 
 190              		.loc 1 2165 5 view .LVU42
2169:FreeRTOS/queue.c **** 
 191              		.loc 1 2169 5 view .LVU43
2169:FreeRTOS/queue.c **** 
 192              		.loc 1 2169 23 is_stmt 0 view .LVU44
 193 0006 866B     		ldr	r6, [r0, #56]
 194              	.LVL18:
2171:FreeRTOS/queue.c ****     {
 195              		.loc 1 2171 5 is_stmt 1 view .LVU45
2171:FreeRTOS/queue.c ****     {
 196              		.loc 1 2171 16 is_stmt 0 view .LVU46
 197 0008 026C     		ldr	r2, [r0, #64]
 198              	.LVL19:
2171:FreeRTOS/queue.c ****     {
 199              		.loc 1 2171 7 view .LVU47
 200 000a 5AB9     		cbnz	r2, .L13
2175:FreeRTOS/queue.c ****                 {
 201              		.loc 1 2175 17 is_stmt 1 view .LVU48
2175:FreeRTOS/queue.c ****                 {
 202              		.loc 1 2175 28 is_stmt 0 view .LVU49
 203 000c 0368     		ldr	r3, [r0]
2175:FreeRTOS/queue.c ****                 {
 204              		.loc 1 2175 19 view .LVU50
 205 000e 1BB1     		cbz	r3, .L22
2164:FreeRTOS/queue.c ****     UBaseType_t uxMessagesWaiting;
 206              		.loc 1 2164 16 view .LVU51
 207 0010 0020     		movs	r0, #0
 208              	.LVL20:
 209              	.L14:
2233:FreeRTOS/queue.c ****         }
 210              		.loc 1 2233 37 is_stmt 1 view .LVU52
2237:FreeRTOS/queue.c **** 
 211              		.loc 1 2237 5 view .LVU53
2237:FreeRTOS/queue.c **** 
 212              		.loc 1 2237 52 is_stmt 0 view .LVU54
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 48


 213 0012 0136     		adds	r6, r6, #1
 214              	.LVL21:
2237:FreeRTOS/queue.c **** 
 215              		.loc 1 2237 32 view .LVU55
 216 0014 A663     		str	r6, [r4, #56]
2239:FreeRTOS/queue.c **** }
 217              		.loc 1 2239 5 is_stmt 1 view .LVU56
2240:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 218              		.loc 1 2240 1 is_stmt 0 view .LVU57
 219 0016 70BD     		pop	{r4, r5, r6, pc}
 220              	.LVL22:
 221              	.L22:
2178:FreeRTOS/queue.c ****                     pxQueue->u.xSemaphore.xMutexHolder = NULL;
 222              		.loc 1 2178 21 is_stmt 1 view .LVU58
2178:FreeRTOS/queue.c ****                     pxQueue->u.xSemaphore.xMutexHolder = NULL;
 223              		.loc 1 2178 31 is_stmt 0 view .LVU59
 224 0018 8068     		ldr	r0, [r0, #8]
 225              	.LVL23:
2178:FreeRTOS/queue.c ****                     pxQueue->u.xSemaphore.xMutexHolder = NULL;
 226              		.loc 1 2178 31 view .LVU60
 227 001a FFF7FEFF 		bl	xTaskPriorityDisinherit
 228              	.LVL24:
2179:FreeRTOS/queue.c ****                 }
 229              		.loc 1 2179 21 is_stmt 1 view .LVU61
2179:FreeRTOS/queue.c ****                 }
 230              		.loc 1 2179 56 is_stmt 0 view .LVU62
 231 001e 0023     		movs	r3, #0
 232 0020 A360     		str	r3, [r4, #8]
 233 0022 F6E7     		b	.L14
 234              	.LVL25:
 235              	.L13:
2188:FreeRTOS/queue.c ****     {
 236              		.loc 1 2188 10 is_stmt 1 view .LVU63
2188:FreeRTOS/queue.c ****     {
 237              		.loc 1 2188 12 is_stmt 0 view .LVU64
 238 0024 6DB9     		cbnz	r5, .L15
2190:FreeRTOS/queue.c ****         pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                 
 239              		.loc 1 2190 9 is_stmt 1 view .LVU65
2190:FreeRTOS/queue.c ****         pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                 
 240              		.loc 1 2190 18 is_stmt 0 view .LVU66
 241 0026 4068     		ldr	r0, [r0, #4]
 242              	.LVL26:
2190:FreeRTOS/queue.c ****         pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                 
 243              		.loc 1 2190 18 view .LVU67
 244 0028 FFF7FEFF 		bl	memcpy
 245              	.LVL27:
2191:FreeRTOS/queue.c **** 
 246              		.loc 1 2191 9 is_stmt 1 view .LVU68
2191:FreeRTOS/queue.c **** 
 247              		.loc 1 2191 38 is_stmt 0 view .LVU69
 248 002c 226C     		ldr	r2, [r4, #64]
2191:FreeRTOS/queue.c **** 
 249              		.loc 1 2191 28 view .LVU70
 250 002e 6368     		ldr	r3, [r4, #4]
 251 0030 1344     		add	r3, r3, r2
 252 0032 6360     		str	r3, [r4, #4]
2193:FreeRTOS/queue.c ****         {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 49


 253              		.loc 1 2193 9 is_stmt 1 view .LVU71
2193:FreeRTOS/queue.c ****         {
 254              		.loc 1 2193 52 is_stmt 0 view .LVU72
 255 0034 A268     		ldr	r2, [r4, #8]
2193:FreeRTOS/queue.c ****         {
 256              		.loc 1 2193 11 view .LVU73
 257 0036 9342     		cmp	r3, r2
 258 0038 19D3     		bcc	.L18
2195:FreeRTOS/queue.c ****         }
 259              		.loc 1 2195 13 is_stmt 1 view .LVU74
2195:FreeRTOS/queue.c ****         }
 260              		.loc 1 2195 41 is_stmt 0 view .LVU75
 261 003a 2368     		ldr	r3, [r4]
2195:FreeRTOS/queue.c ****         }
 262              		.loc 1 2195 32 view .LVU76
 263 003c 6360     		str	r3, [r4, #4]
2164:FreeRTOS/queue.c ****     UBaseType_t uxMessagesWaiting;
 264              		.loc 1 2164 16 view .LVU77
 265 003e 2846     		mov	r0, r5
 266 0040 E7E7     		b	.L14
 267              	.LVL28:
 268              	.L15:
2204:FreeRTOS/queue.c ****         pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 269              		.loc 1 2204 9 is_stmt 1 view .LVU78
2204:FreeRTOS/queue.c ****         pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 270              		.loc 1 2204 18 is_stmt 0 view .LVU79
 271 0042 C068     		ldr	r0, [r0, #12]
 272              	.LVL29:
2204:FreeRTOS/queue.c ****         pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 273              		.loc 1 2204 18 view .LVU80
 274 0044 FFF7FEFF 		bl	memcpy
 275              	.LVL30:
2205:FreeRTOS/queue.c **** 
 276              		.loc 1 2205 9 is_stmt 1 view .LVU81
2205:FreeRTOS/queue.c **** 
 277              		.loc 1 2205 48 is_stmt 0 view .LVU82
 278 0048 226C     		ldr	r2, [r4, #64]
2205:FreeRTOS/queue.c **** 
 279              		.loc 1 2205 38 view .LVU83
 280 004a 5142     		rsbs	r1, r2, #0
 281 004c E368     		ldr	r3, [r4, #12]
 282 004e 9B1A     		subs	r3, r3, r2
 283 0050 E360     		str	r3, [r4, #12]
2207:FreeRTOS/queue.c ****         {
 284              		.loc 1 2207 9 is_stmt 1 view .LVU84
2207:FreeRTOS/queue.c ****         {
 285              		.loc 1 2207 51 is_stmt 0 view .LVU85
 286 0052 2268     		ldr	r2, [r4]
2207:FreeRTOS/queue.c ****         {
 287              		.loc 1 2207 11 view .LVU86
 288 0054 9342     		cmp	r3, r2
 289 0056 02D2     		bcs	.L16
2209:FreeRTOS/queue.c ****         }
 290              		.loc 1 2209 13 is_stmt 1 view .LVU87
2209:FreeRTOS/queue.c ****         }
 291              		.loc 1 2209 63 is_stmt 0 view .LVU88
 292 0058 A368     		ldr	r3, [r4, #8]
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 50


2209:FreeRTOS/queue.c ****         }
 293              		.loc 1 2209 71 view .LVU89
 294 005a 0B44     		add	r3, r3, r1
2209:FreeRTOS/queue.c ****         }
 295              		.loc 1 2209 42 view .LVU90
 296 005c E360     		str	r3, [r4, #12]
 297              	.L16:
2213:FreeRTOS/queue.c ****         }
 298              		.loc 1 2213 37 is_stmt 1 view .LVU91
2216:FreeRTOS/queue.c ****         {
 299              		.loc 1 2216 9 view .LVU92
2216:FreeRTOS/queue.c ****         {
 300              		.loc 1 2216 11 is_stmt 0 view .LVU93
 301 005e 022D     		cmp	r5, #2
 302 0060 01D0     		beq	.L23
2164:FreeRTOS/queue.c ****     UBaseType_t uxMessagesWaiting;
 303              		.loc 1 2164 16 view .LVU94
 304 0062 0020     		movs	r0, #0
 305 0064 D5E7     		b	.L14
 306              	.L23:
2218:FreeRTOS/queue.c ****             {
 307              		.loc 1 2218 13 is_stmt 1 view .LVU95
2218:FreeRTOS/queue.c ****             {
 308              		.loc 1 2218 15 is_stmt 0 view .LVU96
 309 0066 26B1     		cbz	r6, .L20
2224:FreeRTOS/queue.c ****             }
 310              		.loc 1 2224 17 is_stmt 1 view .LVU97
 311 0068 013E     		subs	r6, r6, #1
 312              	.LVL31:
2164:FreeRTOS/queue.c ****     UBaseType_t uxMessagesWaiting;
 313              		.loc 1 2164 16 is_stmt 0 view .LVU98
 314 006a 0020     		movs	r0, #0
 315 006c D1E7     		b	.L14
 316              	.L18:
2164:FreeRTOS/queue.c ****     UBaseType_t uxMessagesWaiting;
 317              		.loc 1 2164 16 view .LVU99
 318 006e 2846     		mov	r0, r5
 319 0070 CFE7     		b	.L14
 320              	.L20:
2164:FreeRTOS/queue.c ****     UBaseType_t uxMessagesWaiting;
 321              		.loc 1 2164 16 view .LVU100
 322 0072 0020     		movs	r0, #0
 323 0074 CDE7     		b	.L14
 324              		.cfi_endproc
 325              	.LFE34:
 327              		.section	.text.prvNotifyQueueSetContainer,"ax",%progbits
 328              		.align	1
 329              		.syntax unified
 330              		.thumb
 331              		.thumb_func
 332              		.fpu fpv4-sp-d16
 334              	prvNotifyQueueSetContainer:
 335              	.LVL32:
 336              	.LFB46:
2444:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2445:FreeRTOS/queue.c **** 
2446:FreeRTOS/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 51


2447:FreeRTOS/queue.c **** {
2448:FreeRTOS/queue.c ****     BaseType_t xReturn;
2449:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
2450:FreeRTOS/queue.c **** 
2451:FreeRTOS/queue.c ****     configASSERT( pxQueue );
2452:FreeRTOS/queue.c **** 
2453:FreeRTOS/queue.c ****     if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
2454:FreeRTOS/queue.c ****     {
2455:FreeRTOS/queue.c ****         xReturn = pdTRUE;
2456:FreeRTOS/queue.c ****     }
2457:FreeRTOS/queue.c ****     else
2458:FreeRTOS/queue.c ****     {
2459:FreeRTOS/queue.c ****         xReturn = pdFALSE;
2460:FreeRTOS/queue.c ****     }
2461:FreeRTOS/queue.c **** 
2462:FreeRTOS/queue.c ****     return xReturn;
2463:FreeRTOS/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
2464:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2465:FreeRTOS/queue.c **** 
2466:FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2467:FreeRTOS/queue.c **** 
2468:FreeRTOS/queue.c ****     BaseType_t xQueueCRSend( QueueHandle_t xQueue,
2469:FreeRTOS/queue.c ****                              const void * pvItemToQueue,
2470:FreeRTOS/queue.c ****                              TickType_t xTicksToWait )
2471:FreeRTOS/queue.c ****     {
2472:FreeRTOS/queue.c ****         BaseType_t xReturn;
2473:FreeRTOS/queue.c ****         Queue_t * const pxQueue = xQueue;
2474:FreeRTOS/queue.c **** 
2475:FreeRTOS/queue.c ****         /* If the queue is already full we may have to block.  A critical section
2476:FreeRTOS/queue.c ****          * is required to prevent an interrupt removing something from the queue
2477:FreeRTOS/queue.c ****          * between the check to see if the queue is full and blocking on the queue. */
2478:FreeRTOS/queue.c ****         portDISABLE_INTERRUPTS();
2479:FreeRTOS/queue.c ****         {
2480:FreeRTOS/queue.c ****             if( prvIsQueueFull( pxQueue ) != pdFALSE )
2481:FreeRTOS/queue.c ****             {
2482:FreeRTOS/queue.c ****                 /* The queue is full - do we want to block or just leave without
2483:FreeRTOS/queue.c ****                  * posting? */
2484:FreeRTOS/queue.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
2485:FreeRTOS/queue.c ****                 {
2486:FreeRTOS/queue.c ****                     /* As this is called from a coroutine we cannot block directly, but
2487:FreeRTOS/queue.c ****                      * return indicating that we need to block. */
2488:FreeRTOS/queue.c ****                     vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2489:FreeRTOS/queue.c ****                     portENABLE_INTERRUPTS();
2490:FreeRTOS/queue.c ****                     return errQUEUE_BLOCKED;
2491:FreeRTOS/queue.c ****                 }
2492:FreeRTOS/queue.c ****                 else
2493:FreeRTOS/queue.c ****                 {
2494:FreeRTOS/queue.c ****                     portENABLE_INTERRUPTS();
2495:FreeRTOS/queue.c ****                     return errQUEUE_FULL;
2496:FreeRTOS/queue.c ****                 }
2497:FreeRTOS/queue.c ****             }
2498:FreeRTOS/queue.c ****         }
2499:FreeRTOS/queue.c ****         portENABLE_INTERRUPTS();
2500:FreeRTOS/queue.c **** 
2501:FreeRTOS/queue.c ****         portDISABLE_INTERRUPTS();
2502:FreeRTOS/queue.c ****         {
2503:FreeRTOS/queue.c ****             if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 52


2504:FreeRTOS/queue.c ****             {
2505:FreeRTOS/queue.c ****                 /* There is room in the queue, copy the data into the queue. */
2506:FreeRTOS/queue.c ****                 prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2507:FreeRTOS/queue.c ****                 xReturn = pdPASS;
2508:FreeRTOS/queue.c **** 
2509:FreeRTOS/queue.c ****                 /* Were any co-routines waiting for data to become available? */
2510:FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2511:FreeRTOS/queue.c ****                 {
2512:FreeRTOS/queue.c ****                     /* In this instance the co-routine could be placed directly
2513:FreeRTOS/queue.c ****                      * into the ready list as we are within a critical section.
2514:FreeRTOS/queue.c ****                      * Instead the same pending ready list mechanism is used as if
2515:FreeRTOS/queue.c ****                      * the event were caused from within an interrupt. */
2516:FreeRTOS/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pd
2517:FreeRTOS/queue.c ****                     {
2518:FreeRTOS/queue.c ****                         /* The co-routine waiting has a higher priority so record
2519:FreeRTOS/queue.c ****                          * that a yield might be appropriate. */
2520:FreeRTOS/queue.c ****                         xReturn = errQUEUE_YIELD;
2521:FreeRTOS/queue.c ****                     }
2522:FreeRTOS/queue.c ****                     else
2523:FreeRTOS/queue.c ****                     {
2524:FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2525:FreeRTOS/queue.c ****                     }
2526:FreeRTOS/queue.c ****                 }
2527:FreeRTOS/queue.c ****                 else
2528:FreeRTOS/queue.c ****                 {
2529:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2530:FreeRTOS/queue.c ****                 }
2531:FreeRTOS/queue.c ****             }
2532:FreeRTOS/queue.c ****             else
2533:FreeRTOS/queue.c ****             {
2534:FreeRTOS/queue.c ****                 xReturn = errQUEUE_FULL;
2535:FreeRTOS/queue.c ****             }
2536:FreeRTOS/queue.c ****         }
2537:FreeRTOS/queue.c ****         portENABLE_INTERRUPTS();
2538:FreeRTOS/queue.c **** 
2539:FreeRTOS/queue.c ****         return xReturn;
2540:FreeRTOS/queue.c ****     }
2541:FreeRTOS/queue.c **** 
2542:FreeRTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2543:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2544:FreeRTOS/queue.c **** 
2545:FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2546:FreeRTOS/queue.c **** 
2547:FreeRTOS/queue.c ****     BaseType_t xQueueCRReceive( QueueHandle_t xQueue,
2548:FreeRTOS/queue.c ****                                 void * pvBuffer,
2549:FreeRTOS/queue.c ****                                 TickType_t xTicksToWait )
2550:FreeRTOS/queue.c ****     {
2551:FreeRTOS/queue.c ****         BaseType_t xReturn;
2552:FreeRTOS/queue.c ****         Queue_t * const pxQueue = xQueue;
2553:FreeRTOS/queue.c **** 
2554:FreeRTOS/queue.c ****         /* If the queue is already empty we may have to block.  A critical section
2555:FreeRTOS/queue.c ****          * is required to prevent an interrupt adding something to the queue
2556:FreeRTOS/queue.c ****          * between the check to see if the queue is empty and blocking on the queue. */
2557:FreeRTOS/queue.c ****         portDISABLE_INTERRUPTS();
2558:FreeRTOS/queue.c ****         {
2559:FreeRTOS/queue.c ****             if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2560:FreeRTOS/queue.c ****             {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 53


2561:FreeRTOS/queue.c ****                 /* There are no messages in the queue, do we want to block or just
2562:FreeRTOS/queue.c ****                  * leave with nothing? */
2563:FreeRTOS/queue.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
2564:FreeRTOS/queue.c ****                 {
2565:FreeRTOS/queue.c ****                     /* As this is a co-routine we cannot block directly, but return
2566:FreeRTOS/queue.c ****                      * indicating that we need to block. */
2567:FreeRTOS/queue.c ****                     vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) 
2568:FreeRTOS/queue.c ****                     portENABLE_INTERRUPTS();
2569:FreeRTOS/queue.c ****                     return errQUEUE_BLOCKED;
2570:FreeRTOS/queue.c ****                 }
2571:FreeRTOS/queue.c ****                 else
2572:FreeRTOS/queue.c ****                 {
2573:FreeRTOS/queue.c ****                     portENABLE_INTERRUPTS();
2574:FreeRTOS/queue.c ****                     return errQUEUE_FULL;
2575:FreeRTOS/queue.c ****                 }
2576:FreeRTOS/queue.c ****             }
2577:FreeRTOS/queue.c ****             else
2578:FreeRTOS/queue.c ****             {
2579:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2580:FreeRTOS/queue.c ****             }
2581:FreeRTOS/queue.c ****         }
2582:FreeRTOS/queue.c ****         portENABLE_INTERRUPTS();
2583:FreeRTOS/queue.c **** 
2584:FreeRTOS/queue.c ****         portDISABLE_INTERRUPTS();
2585:FreeRTOS/queue.c ****         {
2586:FreeRTOS/queue.c ****             if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2587:FreeRTOS/queue.c ****             {
2588:FreeRTOS/queue.c ****                 /* Data is available from the queue. */
2589:FreeRTOS/queue.c ****                 pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2590:FreeRTOS/queue.c **** 
2591:FreeRTOS/queue.c ****                 if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2592:FreeRTOS/queue.c ****                 {
2593:FreeRTOS/queue.c ****                     pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2594:FreeRTOS/queue.c ****                 }
2595:FreeRTOS/queue.c ****                 else
2596:FreeRTOS/queue.c ****                 {
2597:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2598:FreeRTOS/queue.c ****                 }
2599:FreeRTOS/queue.c **** 
2600:FreeRTOS/queue.c ****                 --( pxQueue->uxMessagesWaiting );
2601:FreeRTOS/queue.c ****                 ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( un
2602:FreeRTOS/queue.c **** 
2603:FreeRTOS/queue.c ****                 xReturn = pdPASS;
2604:FreeRTOS/queue.c **** 
2605:FreeRTOS/queue.c ****                 /* Were any co-routines waiting for space to become available? */
2606:FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2607:FreeRTOS/queue.c ****                 {
2608:FreeRTOS/queue.c ****                     /* In this instance the co-routine could be placed directly
2609:FreeRTOS/queue.c ****                      * into the ready list as we are within a critical section.
2610:FreeRTOS/queue.c ****                      * Instead the same pending ready list mechanism is used as if
2611:FreeRTOS/queue.c ****                      * the event were caused from within an interrupt. */
2612:FreeRTOS/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFAL
2613:FreeRTOS/queue.c ****                     {
2614:FreeRTOS/queue.c ****                         xReturn = errQUEUE_YIELD;
2615:FreeRTOS/queue.c ****                     }
2616:FreeRTOS/queue.c ****                     else
2617:FreeRTOS/queue.c ****                     {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 54


2618:FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2619:FreeRTOS/queue.c ****                     }
2620:FreeRTOS/queue.c ****                 }
2621:FreeRTOS/queue.c ****                 else
2622:FreeRTOS/queue.c ****                 {
2623:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2624:FreeRTOS/queue.c ****                 }
2625:FreeRTOS/queue.c ****             }
2626:FreeRTOS/queue.c ****             else
2627:FreeRTOS/queue.c ****             {
2628:FreeRTOS/queue.c ****                 xReturn = pdFAIL;
2629:FreeRTOS/queue.c ****             }
2630:FreeRTOS/queue.c ****         }
2631:FreeRTOS/queue.c ****         portENABLE_INTERRUPTS();
2632:FreeRTOS/queue.c **** 
2633:FreeRTOS/queue.c ****         return xReturn;
2634:FreeRTOS/queue.c ****     }
2635:FreeRTOS/queue.c **** 
2636:FreeRTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2637:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2638:FreeRTOS/queue.c **** 
2639:FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2640:FreeRTOS/queue.c **** 
2641:FreeRTOS/queue.c ****     BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue,
2642:FreeRTOS/queue.c ****                                     const void * pvItemToQueue,
2643:FreeRTOS/queue.c ****                                     BaseType_t xCoRoutinePreviouslyWoken )
2644:FreeRTOS/queue.c ****     {
2645:FreeRTOS/queue.c ****         Queue_t * const pxQueue = xQueue;
2646:FreeRTOS/queue.c **** 
2647:FreeRTOS/queue.c ****         /* Cannot block within an ISR so if there is no space on the queue then
2648:FreeRTOS/queue.c ****          * exit without doing anything. */
2649:FreeRTOS/queue.c ****         if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2650:FreeRTOS/queue.c ****         {
2651:FreeRTOS/queue.c ****             prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2652:FreeRTOS/queue.c **** 
2653:FreeRTOS/queue.c ****             /* We only want to wake one co-routine per ISR, so check that a
2654:FreeRTOS/queue.c ****              * co-routine has not already been woken. */
2655:FreeRTOS/queue.c ****             if( xCoRoutinePreviouslyWoken == pdFALSE )
2656:FreeRTOS/queue.c ****             {
2657:FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2658:FreeRTOS/queue.c ****                 {
2659:FreeRTOS/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pd
2660:FreeRTOS/queue.c ****                     {
2661:FreeRTOS/queue.c ****                         return pdTRUE;
2662:FreeRTOS/queue.c ****                     }
2663:FreeRTOS/queue.c ****                     else
2664:FreeRTOS/queue.c ****                     {
2665:FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2666:FreeRTOS/queue.c ****                     }
2667:FreeRTOS/queue.c ****                 }
2668:FreeRTOS/queue.c ****                 else
2669:FreeRTOS/queue.c ****                 {
2670:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2671:FreeRTOS/queue.c ****                 }
2672:FreeRTOS/queue.c ****             }
2673:FreeRTOS/queue.c ****             else
2674:FreeRTOS/queue.c ****             {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 55


2675:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2676:FreeRTOS/queue.c ****             }
2677:FreeRTOS/queue.c ****         }
2678:FreeRTOS/queue.c ****         else
2679:FreeRTOS/queue.c ****         {
2680:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2681:FreeRTOS/queue.c ****         }
2682:FreeRTOS/queue.c **** 
2683:FreeRTOS/queue.c ****         return xCoRoutinePreviouslyWoken;
2684:FreeRTOS/queue.c ****     }
2685:FreeRTOS/queue.c **** 
2686:FreeRTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2687:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2688:FreeRTOS/queue.c **** 
2689:FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2690:FreeRTOS/queue.c **** 
2691:FreeRTOS/queue.c ****     BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue,
2692:FreeRTOS/queue.c ****                                        void * pvBuffer,
2693:FreeRTOS/queue.c ****                                        BaseType_t * pxCoRoutineWoken )
2694:FreeRTOS/queue.c ****     {
2695:FreeRTOS/queue.c ****         BaseType_t xReturn;
2696:FreeRTOS/queue.c ****         Queue_t * const pxQueue = xQueue;
2697:FreeRTOS/queue.c **** 
2698:FreeRTOS/queue.c ****         /* We cannot block from an ISR, so check there is data available. If
2699:FreeRTOS/queue.c ****          * not then just leave without doing anything. */
2700:FreeRTOS/queue.c ****         if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2701:FreeRTOS/queue.c ****         {
2702:FreeRTOS/queue.c ****             /* Copy the data from the queue. */
2703:FreeRTOS/queue.c ****             pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2704:FreeRTOS/queue.c **** 
2705:FreeRTOS/queue.c ****             if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2706:FreeRTOS/queue.c ****             {
2707:FreeRTOS/queue.c ****                 pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2708:FreeRTOS/queue.c ****             }
2709:FreeRTOS/queue.c ****             else
2710:FreeRTOS/queue.c ****             {
2711:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2712:FreeRTOS/queue.c ****             }
2713:FreeRTOS/queue.c **** 
2714:FreeRTOS/queue.c ****             --( pxQueue->uxMessagesWaiting );
2715:FreeRTOS/queue.c ****             ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsign
2716:FreeRTOS/queue.c **** 
2717:FreeRTOS/queue.c ****             if( ( *pxCoRoutineWoken ) == pdFALSE )
2718:FreeRTOS/queue.c ****             {
2719:FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2720:FreeRTOS/queue.c ****                 {
2721:FreeRTOS/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFAL
2722:FreeRTOS/queue.c ****                     {
2723:FreeRTOS/queue.c ****                         *pxCoRoutineWoken = pdTRUE;
2724:FreeRTOS/queue.c ****                     }
2725:FreeRTOS/queue.c ****                     else
2726:FreeRTOS/queue.c ****                     {
2727:FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2728:FreeRTOS/queue.c ****                     }
2729:FreeRTOS/queue.c ****                 }
2730:FreeRTOS/queue.c ****                 else
2731:FreeRTOS/queue.c ****                 {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 56


2732:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2733:FreeRTOS/queue.c ****                 }
2734:FreeRTOS/queue.c ****             }
2735:FreeRTOS/queue.c ****             else
2736:FreeRTOS/queue.c ****             {
2737:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2738:FreeRTOS/queue.c ****             }
2739:FreeRTOS/queue.c **** 
2740:FreeRTOS/queue.c ****             xReturn = pdPASS;
2741:FreeRTOS/queue.c ****         }
2742:FreeRTOS/queue.c ****         else
2743:FreeRTOS/queue.c ****         {
2744:FreeRTOS/queue.c ****             xReturn = pdFAIL;
2745:FreeRTOS/queue.c ****         }
2746:FreeRTOS/queue.c **** 
2747:FreeRTOS/queue.c ****         return xReturn;
2748:FreeRTOS/queue.c ****     }
2749:FreeRTOS/queue.c **** 
2750:FreeRTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2751:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2752:FreeRTOS/queue.c **** 
2753:FreeRTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2754:FreeRTOS/queue.c **** 
2755:FreeRTOS/queue.c ****     void vQueueAddToRegistry( QueueHandle_t xQueue,
2756:FreeRTOS/queue.c ****                               const char * pcQueueName ) /*lint !e971 Unqualified char types are al
2757:FreeRTOS/queue.c ****     {
2758:FreeRTOS/queue.c ****         UBaseType_t ux;
2759:FreeRTOS/queue.c **** 
2760:FreeRTOS/queue.c ****         configASSERT( xQueue );
2761:FreeRTOS/queue.c **** 
2762:FreeRTOS/queue.c ****         QueueRegistryItem_t * pxEntryToWrite = NULL;
2763:FreeRTOS/queue.c **** 
2764:FreeRTOS/queue.c ****         if( pcQueueName != NULL )
2765:FreeRTOS/queue.c ****         {
2766:FreeRTOS/queue.c ****             /* See if there is an empty space in the registry.  A NULL name denotes
2767:FreeRTOS/queue.c ****              * a free slot. */
2768:FreeRTOS/queue.c ****             for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
2769:FreeRTOS/queue.c ****             {
2770:FreeRTOS/queue.c ****                 /* Replace an existing entry if the queue is already in the registry. */
2771:FreeRTOS/queue.c ****                 if( xQueue == xQueueRegistry[ ux ].xHandle )
2772:FreeRTOS/queue.c ****                 {
2773:FreeRTOS/queue.c ****                     pxEntryToWrite = &( xQueueRegistry[ ux ] );
2774:FreeRTOS/queue.c ****                     break;
2775:FreeRTOS/queue.c ****                 }
2776:FreeRTOS/queue.c ****                 /* Otherwise, store in the next empty location */
2777:FreeRTOS/queue.c ****                 else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL )
2778:FreeRTOS/queue.c ****                 {
2779:FreeRTOS/queue.c ****                     pxEntryToWrite = &( xQueueRegistry[ ux ] );
2780:FreeRTOS/queue.c ****                 }
2781:FreeRTOS/queue.c ****                 else
2782:FreeRTOS/queue.c ****                 {
2783:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2784:FreeRTOS/queue.c ****                 }
2785:FreeRTOS/queue.c ****             }
2786:FreeRTOS/queue.c ****         }
2787:FreeRTOS/queue.c **** 
2788:FreeRTOS/queue.c ****         if( pxEntryToWrite != NULL )
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 57


2789:FreeRTOS/queue.c ****         {
2790:FreeRTOS/queue.c ****             /* Store the information on this queue. */
2791:FreeRTOS/queue.c ****             pxEntryToWrite->pcQueueName = pcQueueName;
2792:FreeRTOS/queue.c ****             pxEntryToWrite->xHandle = xQueue;
2793:FreeRTOS/queue.c **** 
2794:FreeRTOS/queue.c ****             traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2795:FreeRTOS/queue.c ****         }
2796:FreeRTOS/queue.c ****     }
2797:FreeRTOS/queue.c **** 
2798:FreeRTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2799:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2800:FreeRTOS/queue.c **** 
2801:FreeRTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2802:FreeRTOS/queue.c **** 
2803:FreeRTOS/queue.c ****     const char * pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are all
2804:FreeRTOS/queue.c ****     {
2805:FreeRTOS/queue.c ****         UBaseType_t ux;
2806:FreeRTOS/queue.c ****         const char * pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings a
2807:FreeRTOS/queue.c **** 
2808:FreeRTOS/queue.c ****         configASSERT( xQueue );
2809:FreeRTOS/queue.c **** 
2810:FreeRTOS/queue.c ****         /* Note there is nothing here to protect against another task adding or
2811:FreeRTOS/queue.c ****          * removing entries from the registry while it is being searched. */
2812:FreeRTOS/queue.c **** 
2813:FreeRTOS/queue.c ****         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
2814:FreeRTOS/queue.c ****         {
2815:FreeRTOS/queue.c ****             if( xQueueRegistry[ ux ].xHandle == xQueue )
2816:FreeRTOS/queue.c ****             {
2817:FreeRTOS/queue.c ****                 pcReturn = xQueueRegistry[ ux ].pcQueueName;
2818:FreeRTOS/queue.c ****                 break;
2819:FreeRTOS/queue.c ****             }
2820:FreeRTOS/queue.c ****             else
2821:FreeRTOS/queue.c ****             {
2822:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2823:FreeRTOS/queue.c ****             }
2824:FreeRTOS/queue.c ****         }
2825:FreeRTOS/queue.c **** 
2826:FreeRTOS/queue.c ****         return pcReturn;
2827:FreeRTOS/queue.c ****     } /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
2828:FreeRTOS/queue.c **** 
2829:FreeRTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2830:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2831:FreeRTOS/queue.c **** 
2832:FreeRTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2833:FreeRTOS/queue.c **** 
2834:FreeRTOS/queue.c ****     void vQueueUnregisterQueue( QueueHandle_t xQueue )
2835:FreeRTOS/queue.c ****     {
2836:FreeRTOS/queue.c ****         UBaseType_t ux;
2837:FreeRTOS/queue.c **** 
2838:FreeRTOS/queue.c ****         configASSERT( xQueue );
2839:FreeRTOS/queue.c **** 
2840:FreeRTOS/queue.c ****         /* See if the handle of the queue being unregistered in actually in the
2841:FreeRTOS/queue.c ****          * registry. */
2842:FreeRTOS/queue.c ****         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
2843:FreeRTOS/queue.c ****         {
2844:FreeRTOS/queue.c ****             if( xQueueRegistry[ ux ].xHandle == xQueue )
2845:FreeRTOS/queue.c ****             {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 58


2846:FreeRTOS/queue.c ****                 /* Set the name to NULL to show that this slot if free again. */
2847:FreeRTOS/queue.c ****                 xQueueRegistry[ ux ].pcQueueName = NULL;
2848:FreeRTOS/queue.c **** 
2849:FreeRTOS/queue.c ****                 /* Set the handle to NULL to ensure the same queue handle cannot
2850:FreeRTOS/queue.c ****                  * appear in the registry twice if it is added, removed, then
2851:FreeRTOS/queue.c ****                  * added again. */
2852:FreeRTOS/queue.c ****                 xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
2853:FreeRTOS/queue.c ****                 break;
2854:FreeRTOS/queue.c ****             }
2855:FreeRTOS/queue.c ****             else
2856:FreeRTOS/queue.c ****             {
2857:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2858:FreeRTOS/queue.c ****             }
2859:FreeRTOS/queue.c ****         }
2860:FreeRTOS/queue.c ****     } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
2861:FreeRTOS/queue.c **** 
2862:FreeRTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2863:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2864:FreeRTOS/queue.c **** 
2865:FreeRTOS/queue.c **** #if ( configUSE_TIMERS == 1 )
2866:FreeRTOS/queue.c **** 
2867:FreeRTOS/queue.c ****     void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
2868:FreeRTOS/queue.c ****                                          TickType_t xTicksToWait,
2869:FreeRTOS/queue.c ****                                          const BaseType_t xWaitIndefinitely )
2870:FreeRTOS/queue.c ****     {
2871:FreeRTOS/queue.c ****         Queue_t * const pxQueue = xQueue;
2872:FreeRTOS/queue.c **** 
2873:FreeRTOS/queue.c ****         /* This function should not be called by application code hence the
2874:FreeRTOS/queue.c ****          * 'Restricted' in its name.  It is not part of the public API.  It is
2875:FreeRTOS/queue.c ****          * designed for use by kernel code, and has special calling requirements.
2876:FreeRTOS/queue.c ****          * It can result in vListInsert() being called on a list that can only
2877:FreeRTOS/queue.c ****          * possibly ever have one item in it, so the list will be fast, but even
2878:FreeRTOS/queue.c ****          * so it should be called with the scheduler locked and not from a critical
2879:FreeRTOS/queue.c ****          * section. */
2880:FreeRTOS/queue.c **** 
2881:FreeRTOS/queue.c ****         /* Only do anything if there are no messages in the queue.  This function
2882:FreeRTOS/queue.c ****          *  will not actually cause the task to block, just place it on a blocked
2883:FreeRTOS/queue.c ****          *  list.  It will not block until the scheduler is unlocked - at which
2884:FreeRTOS/queue.c ****          *  time a yield will be performed.  If an item is added to the queue while
2885:FreeRTOS/queue.c ****          *  the queue is locked, and the calling task blocks on the queue, then the
2886:FreeRTOS/queue.c ****          *  calling task will be immediately unblocked when the queue is unlocked. */
2887:FreeRTOS/queue.c ****         prvLockQueue( pxQueue );
2888:FreeRTOS/queue.c **** 
2889:FreeRTOS/queue.c ****         if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
2890:FreeRTOS/queue.c ****         {
2891:FreeRTOS/queue.c ****             /* There is nothing in the queue, block for the specified period. */
2892:FreeRTOS/queue.c ****             vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xW
2893:FreeRTOS/queue.c ****         }
2894:FreeRTOS/queue.c ****         else
2895:FreeRTOS/queue.c ****         {
2896:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2897:FreeRTOS/queue.c ****         }
2898:FreeRTOS/queue.c **** 
2899:FreeRTOS/queue.c ****         prvUnlockQueue( pxQueue );
2900:FreeRTOS/queue.c ****     }
2901:FreeRTOS/queue.c **** 
2902:FreeRTOS/queue.c **** #endif /* configUSE_TIMERS */
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 59


2903:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2904:FreeRTOS/queue.c **** 
2905:FreeRTOS/queue.c **** #if ( ( configUSE_QUEUE_SETS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
2906:FreeRTOS/queue.c **** 
2907:FreeRTOS/queue.c ****     QueueSetHandle_t xQueueCreateSet( const UBaseType_t uxEventQueueLength )
2908:FreeRTOS/queue.c ****     {
2909:FreeRTOS/queue.c ****         QueueSetHandle_t pxQueue;
2910:FreeRTOS/queue.c **** 
2911:FreeRTOS/queue.c ****         pxQueue = xQueueGenericCreate( uxEventQueueLength, ( UBaseType_t ) sizeof( Queue_t * ), que
2912:FreeRTOS/queue.c **** 
2913:FreeRTOS/queue.c ****         return pxQueue;
2914:FreeRTOS/queue.c ****     }
2915:FreeRTOS/queue.c **** 
2916:FreeRTOS/queue.c **** #endif /* configUSE_QUEUE_SETS */
2917:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2918:FreeRTOS/queue.c **** 
2919:FreeRTOS/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
2920:FreeRTOS/queue.c **** 
2921:FreeRTOS/queue.c ****     BaseType_t xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore,
2922:FreeRTOS/queue.c ****                                QueueSetHandle_t xQueueSet )
2923:FreeRTOS/queue.c ****     {
2924:FreeRTOS/queue.c ****         BaseType_t xReturn;
2925:FreeRTOS/queue.c **** 
2926:FreeRTOS/queue.c ****         taskENTER_CRITICAL();
2927:FreeRTOS/queue.c ****         {
2928:FreeRTOS/queue.c ****             if( ( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer != NULL )
2929:FreeRTOS/queue.c ****             {
2930:FreeRTOS/queue.c ****                 /* Cannot add a queue/semaphore to more than one queue set. */
2931:FreeRTOS/queue.c ****                 xReturn = pdFAIL;
2932:FreeRTOS/queue.c ****             }
2933:FreeRTOS/queue.c ****             else if( ( ( Queue_t * ) xQueueOrSemaphore )->uxMessagesWaiting != ( UBaseType_t ) 0 )
2934:FreeRTOS/queue.c ****             {
2935:FreeRTOS/queue.c ****                 /* Cannot add a queue/semaphore to a queue set if there are already
2936:FreeRTOS/queue.c ****                  * items in the queue/semaphore. */
2937:FreeRTOS/queue.c ****                 xReturn = pdFAIL;
2938:FreeRTOS/queue.c ****             }
2939:FreeRTOS/queue.c ****             else
2940:FreeRTOS/queue.c ****             {
2941:FreeRTOS/queue.c ****                 ( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer = xQueueSet;
2942:FreeRTOS/queue.c ****                 xReturn = pdPASS;
2943:FreeRTOS/queue.c ****             }
2944:FreeRTOS/queue.c ****         }
2945:FreeRTOS/queue.c ****         taskEXIT_CRITICAL();
2946:FreeRTOS/queue.c **** 
2947:FreeRTOS/queue.c ****         return xReturn;
2948:FreeRTOS/queue.c ****     }
2949:FreeRTOS/queue.c **** 
2950:FreeRTOS/queue.c **** #endif /* configUSE_QUEUE_SETS */
2951:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2952:FreeRTOS/queue.c **** 
2953:FreeRTOS/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
2954:FreeRTOS/queue.c **** 
2955:FreeRTOS/queue.c ****     BaseType_t xQueueRemoveFromSet( QueueSetMemberHandle_t xQueueOrSemaphore,
2956:FreeRTOS/queue.c ****                                     QueueSetHandle_t xQueueSet )
2957:FreeRTOS/queue.c ****     {
2958:FreeRTOS/queue.c ****         BaseType_t xReturn;
2959:FreeRTOS/queue.c ****         Queue_t * const pxQueueOrSemaphore = ( Queue_t * ) xQueueOrSemaphore;
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 60


2960:FreeRTOS/queue.c **** 
2961:FreeRTOS/queue.c ****         if( pxQueueOrSemaphore->pxQueueSetContainer != xQueueSet )
2962:FreeRTOS/queue.c ****         {
2963:FreeRTOS/queue.c ****             /* The queue was not a member of the set. */
2964:FreeRTOS/queue.c ****             xReturn = pdFAIL;
2965:FreeRTOS/queue.c ****         }
2966:FreeRTOS/queue.c ****         else if( pxQueueOrSemaphore->uxMessagesWaiting != ( UBaseType_t ) 0 )
2967:FreeRTOS/queue.c ****         {
2968:FreeRTOS/queue.c ****             /* It is dangerous to remove a queue from a set when the queue is
2969:FreeRTOS/queue.c ****              * not empty because the queue set will still hold pending events for
2970:FreeRTOS/queue.c ****              * the queue. */
2971:FreeRTOS/queue.c ****             xReturn = pdFAIL;
2972:FreeRTOS/queue.c ****         }
2973:FreeRTOS/queue.c ****         else
2974:FreeRTOS/queue.c ****         {
2975:FreeRTOS/queue.c ****             taskENTER_CRITICAL();
2976:FreeRTOS/queue.c ****             {
2977:FreeRTOS/queue.c ****                 /* The queue is no longer contained in the set. */
2978:FreeRTOS/queue.c ****                 pxQueueOrSemaphore->pxQueueSetContainer = NULL;
2979:FreeRTOS/queue.c ****             }
2980:FreeRTOS/queue.c ****             taskEXIT_CRITICAL();
2981:FreeRTOS/queue.c ****             xReturn = pdPASS;
2982:FreeRTOS/queue.c ****         }
2983:FreeRTOS/queue.c **** 
2984:FreeRTOS/queue.c ****         return xReturn;
2985:FreeRTOS/queue.c ****     } /*lint !e818 xQueueSet could not be declared as pointing to const as it is a typedef. */
2986:FreeRTOS/queue.c **** 
2987:FreeRTOS/queue.c **** #endif /* configUSE_QUEUE_SETS */
2988:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2989:FreeRTOS/queue.c **** 
2990:FreeRTOS/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
2991:FreeRTOS/queue.c **** 
2992:FreeRTOS/queue.c ****     QueueSetMemberHandle_t xQueueSelectFromSet( QueueSetHandle_t xQueueSet,
2993:FreeRTOS/queue.c ****                                                 TickType_t const xTicksToWait )
2994:FreeRTOS/queue.c ****     {
2995:FreeRTOS/queue.c ****         QueueSetMemberHandle_t xReturn = NULL;
2996:FreeRTOS/queue.c **** 
2997:FreeRTOS/queue.c ****         ( void ) xQueueReceive( ( QueueHandle_t ) xQueueSet, &xReturn, xTicksToWait ); /*lint !e961
2998:FreeRTOS/queue.c ****         return xReturn;
2999:FreeRTOS/queue.c ****     }
3000:FreeRTOS/queue.c **** 
3001:FreeRTOS/queue.c **** #endif /* configUSE_QUEUE_SETS */
3002:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
3003:FreeRTOS/queue.c **** 
3004:FreeRTOS/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
3005:FreeRTOS/queue.c **** 
3006:FreeRTOS/queue.c ****     QueueSetMemberHandle_t xQueueSelectFromSetFromISR( QueueSetHandle_t xQueueSet )
3007:FreeRTOS/queue.c ****     {
3008:FreeRTOS/queue.c ****         QueueSetMemberHandle_t xReturn = NULL;
3009:FreeRTOS/queue.c **** 
3010:FreeRTOS/queue.c ****         ( void ) xQueueReceiveFromISR( ( QueueHandle_t ) xQueueSet, &xReturn, NULL ); /*lint !e961 
3011:FreeRTOS/queue.c ****         return xReturn;
3012:FreeRTOS/queue.c ****     }
3013:FreeRTOS/queue.c **** 
3014:FreeRTOS/queue.c **** #endif /* configUSE_QUEUE_SETS */
3015:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
3016:FreeRTOS/queue.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 61


3017:FreeRTOS/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
3018:FreeRTOS/queue.c **** 
3019:FreeRTOS/queue.c ****     static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
3020:FreeRTOS/queue.c ****     {
 337              		.loc 1 3020 5 is_stmt 1 view -0
 338              		.cfi_startproc
 339              		@ args = 0, pretend = 0, frame = 8
 340              		@ frame_needed = 0, uses_anonymous_args = 0
 341              		.loc 1 3020 5 is_stmt 0 view .LVU102
 342 0000 70B5     		push	{r4, r5, r6, lr}
 343              	.LCFI3:
 344              		.cfi_def_cfa_offset 16
 345              		.cfi_offset 4, -16
 346              		.cfi_offset 5, -12
 347              		.cfi_offset 6, -8
 348              		.cfi_offset 14, -4
 349 0002 82B0     		sub	sp, sp, #8
 350              	.LCFI4:
 351              		.cfi_def_cfa_offset 24
 352 0004 0190     		str	r0, [sp, #4]
3021:FreeRTOS/queue.c ****         Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 353              		.loc 1 3021 9 is_stmt 1 view .LVU103
 354              		.loc 1 3021 19 is_stmt 0 view .LVU104
 355 0006 846C     		ldr	r4, [r0, #72]
 356              	.LVL33:
3022:FreeRTOS/queue.c ****         BaseType_t xReturn = pdFALSE;
 357              		.loc 1 3022 9 is_stmt 1 view .LVU105
3023:FreeRTOS/queue.c **** 
3024:FreeRTOS/queue.c ****         /* This function must be called form a critical section. */
3025:FreeRTOS/queue.c **** 
3026:FreeRTOS/queue.c ****         /* The following line is not reachable in unit tests because every call
3027:FreeRTOS/queue.c ****          * to prvNotifyQueueSetContainer is preceded by a check that
3028:FreeRTOS/queue.c ****          * pxQueueSetContainer != NULL */
3029:FreeRTOS/queue.c ****         configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
 358              		.loc 1 3029 9 view .LVU106
 359 0008 64B1     		cbz	r4, .L36
 360              		.loc 1 3029 44 discriminator 2 view .LVU107
3030:FreeRTOS/queue.c ****         configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 361              		.loc 1 3030 9 discriminator 2 view .LVU108
 362 000a A26B     		ldr	r2, [r4, #56]
 363 000c E36B     		ldr	r3, [r4, #60]
 364 000e 9A42     		cmp	r2, r3
 365 0010 11D3     		bcc	.L27
 366              		.loc 1 3030 9 view .LVU109
 367              	.LBB128:
 368              	.LBI128:
 369              		.file 2 "FreeRTOS/portable/portmacro.h"
   1:FreeRTOS/portable/portmacro.h **** /*
   2:FreeRTOS/portable/portmacro.h ****  * FreeRTOS Kernel V10.4.6
   3:FreeRTOS/portable/portmacro.h ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/portable/portmacro.h ****  *
   5:FreeRTOS/portable/portmacro.h ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS/portable/portmacro.h ****  *
   7:FreeRTOS/portable/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS/portable/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS/portable/portmacro.h ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS/portable/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 62


  11:FreeRTOS/portable/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS/portable/portmacro.h ****  * subject to the following conditions:
  13:FreeRTOS/portable/portmacro.h ****  *
  14:FreeRTOS/portable/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS/portable/portmacro.h ****  * copies or substantial portions of the Software.
  16:FreeRTOS/portable/portmacro.h ****  *
  17:FreeRTOS/portable/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS/portable/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS/portable/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS/portable/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS/portable/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS/portable/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS/portable/portmacro.h ****  *
  24:FreeRTOS/portable/portmacro.h ****  * https://www.FreeRTOS.org
  25:FreeRTOS/portable/portmacro.h ****  * https://github.com/FreeRTOS
  26:FreeRTOS/portable/portmacro.h ****  *
  27:FreeRTOS/portable/portmacro.h ****  */
  28:FreeRTOS/portable/portmacro.h **** 
  29:FreeRTOS/portable/portmacro.h **** 
  30:FreeRTOS/portable/portmacro.h **** #ifndef PORTMACRO_H
  31:FreeRTOS/portable/portmacro.h ****     #define PORTMACRO_H
  32:FreeRTOS/portable/portmacro.h **** 
  33:FreeRTOS/portable/portmacro.h ****     #ifdef __cplusplus
  34:FreeRTOS/portable/portmacro.h ****         extern "C" {
  35:FreeRTOS/portable/portmacro.h ****     #endif
  36:FreeRTOS/portable/portmacro.h **** 
  37:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------
  38:FreeRTOS/portable/portmacro.h ****  * Port specific definitions.
  39:FreeRTOS/portable/portmacro.h ****  *
  40:FreeRTOS/portable/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  41:FreeRTOS/portable/portmacro.h ****  * given hardware and compiler.
  42:FreeRTOS/portable/portmacro.h ****  *
  43:FreeRTOS/portable/portmacro.h ****  * These settings should not be altered.
  44:FreeRTOS/portable/portmacro.h ****  *-----------------------------------------------------------
  45:FreeRTOS/portable/portmacro.h ****  */
  46:FreeRTOS/portable/portmacro.h **** 
  47:FreeRTOS/portable/portmacro.h **** /* Type definitions. */
  48:FreeRTOS/portable/portmacro.h ****     #define portCHAR          char
  49:FreeRTOS/portable/portmacro.h ****     #define portFLOAT         float
  50:FreeRTOS/portable/portmacro.h ****     #define portDOUBLE        double
  51:FreeRTOS/portable/portmacro.h ****     #define portLONG          long
  52:FreeRTOS/portable/portmacro.h ****     #define portSHORT         short
  53:FreeRTOS/portable/portmacro.h ****     #define portSTACK_TYPE    uint32_t
  54:FreeRTOS/portable/portmacro.h ****     #define portBASE_TYPE     long
  55:FreeRTOS/portable/portmacro.h **** 
  56:FreeRTOS/portable/portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  57:FreeRTOS/portable/portmacro.h ****     typedef long             BaseType_t;
  58:FreeRTOS/portable/portmacro.h ****     typedef unsigned long    UBaseType_t;
  59:FreeRTOS/portable/portmacro.h **** 
  60:FreeRTOS/portable/portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  61:FreeRTOS/portable/portmacro.h ****         typedef uint16_t     TickType_t;
  62:FreeRTOS/portable/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  63:FreeRTOS/portable/portmacro.h ****     #else
  64:FreeRTOS/portable/portmacro.h ****         typedef uint32_t     TickType_t;
  65:FreeRTOS/portable/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  66:FreeRTOS/portable/portmacro.h **** 
  67:FreeRTOS/portable/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 63


  68:FreeRTOS/portable/portmacro.h ****  * not need to be guarded with a critical section. */
  69:FreeRTOS/portable/portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  70:FreeRTOS/portable/portmacro.h ****     #endif
  71:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
  72:FreeRTOS/portable/portmacro.h **** 
  73:FreeRTOS/portable/portmacro.h **** /* Architecture specifics. */
  74:FreeRTOS/portable/portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  75:FreeRTOS/portable/portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  76:FreeRTOS/portable/portmacro.h ****     #define portBYTE_ALIGNMENT    8
  77:FreeRTOS/portable/portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  78:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
  79:FreeRTOS/portable/portmacro.h **** 
  80:FreeRTOS/portable/portmacro.h **** /* Scheduler utilities. */
  81:FreeRTOS/portable/portmacro.h ****     #define portYIELD()                                 \
  82:FreeRTOS/portable/portmacro.h ****     {                                                   \
  83:FreeRTOS/portable/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  84:FreeRTOS/portable/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  85:FreeRTOS/portable/portmacro.h ****                                                         \
  86:FreeRTOS/portable/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  87:FreeRTOS/portable/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  88:FreeRTOS/portable/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  89:FreeRTOS/portable/portmacro.h ****         __asm volatile ( "isb" );                                  \
  90:FreeRTOS/portable/portmacro.h ****     }
  91:FreeRTOS/portable/portmacro.h **** 
  92:FreeRTOS/portable/portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  93:FreeRTOS/portable/portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  94:FreeRTOS/portable/portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    do { if( xSwitchRequired != pdFALSE ) portY
  95:FreeRTOS/portable/portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  96:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
  97:FreeRTOS/portable/portmacro.h **** 
  98:FreeRTOS/portable/portmacro.h **** /* Critical section management. */
  99:FreeRTOS/portable/portmacro.h ****     extern void vPortEnterCritical( void );
 100:FreeRTOS/portable/portmacro.h ****     extern void vPortExitCritical( void );
 101:FreeRTOS/portable/portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 102:FreeRTOS/portable/portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 103:FreeRTOS/portable/portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 104:FreeRTOS/portable/portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 105:FreeRTOS/portable/portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 106:FreeRTOS/portable/portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 107:FreeRTOS/portable/portmacro.h **** 
 108:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
 109:FreeRTOS/portable/portmacro.h **** 
 110:FreeRTOS/portable/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 111:FreeRTOS/portable/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 112:FreeRTOS/portable/portmacro.h ****  * (which build with all the ports) will build. */
 113:FreeRTOS/portable/portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 114:FreeRTOS/portable/portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 115:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
 116:FreeRTOS/portable/portmacro.h **** 
 117:FreeRTOS/portable/portmacro.h **** /* Tickless idle/low power functionality. */
 118:FreeRTOS/portable/portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 119:FreeRTOS/portable/portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 120:FreeRTOS/portable/portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 121:FreeRTOS/portable/portmacro.h ****     #endif
 122:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
 123:FreeRTOS/portable/portmacro.h **** 
 124:FreeRTOS/portable/portmacro.h **** /* Architecture specific optimisations. */
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 64


 125:FreeRTOS/portable/portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 126:FreeRTOS/portable/portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 127:FreeRTOS/portable/portmacro.h ****     #endif
 128:FreeRTOS/portable/portmacro.h **** 
 129:FreeRTOS/portable/portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 130:FreeRTOS/portable/portmacro.h **** 
 131:FreeRTOS/portable/portmacro.h **** /* Generic helper function. */
 132:FreeRTOS/portable/portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 133:FreeRTOS/portable/portmacro.h ****         {
 134:FreeRTOS/portable/portmacro.h ****             uint8_t ucReturn;
 135:FreeRTOS/portable/portmacro.h **** 
 136:FreeRTOS/portable/portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 137:FreeRTOS/portable/portmacro.h **** 
 138:FreeRTOS/portable/portmacro.h ****             return ucReturn;
 139:FreeRTOS/portable/portmacro.h ****         }
 140:FreeRTOS/portable/portmacro.h **** 
 141:FreeRTOS/portable/portmacro.h **** /* Check the configuration. */
 142:FreeRTOS/portable/portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 143:FreeRTOS/portable/portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 144:FreeRTOS/portable/portmacro.h ****         #endif
 145:FreeRTOS/portable/portmacro.h **** 
 146:FreeRTOS/portable/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 147:FreeRTOS/portable/portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 148:FreeRTOS/portable/portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 149:FreeRTOS/portable/portmacro.h **** 
 150:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
 151:FreeRTOS/portable/portmacro.h **** 
 152:FreeRTOS/portable/portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 153:FreeRTOS/portable/portmacro.h **** 
 154:FreeRTOS/portable/portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 155:FreeRTOS/portable/portmacro.h **** 
 156:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
 157:FreeRTOS/portable/portmacro.h **** 
 158:FreeRTOS/portable/portmacro.h ****     #ifdef configASSERT
 159:FreeRTOS/portable/portmacro.h ****         void vPortValidateInterruptPriority( void );
 160:FreeRTOS/portable/portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 161:FreeRTOS/portable/portmacro.h ****     #endif
 162:FreeRTOS/portable/portmacro.h **** 
 163:FreeRTOS/portable/portmacro.h **** /* portNOP() is not required by this port. */
 164:FreeRTOS/portable/portmacro.h ****     #define portNOP()
 165:FreeRTOS/portable/portmacro.h **** 
 166:FreeRTOS/portable/portmacro.h ****     #define portINLINE              __inline
 167:FreeRTOS/portable/portmacro.h **** 
 168:FreeRTOS/portable/portmacro.h ****     #ifndef portFORCE_INLINE
 169:FreeRTOS/portable/portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 170:FreeRTOS/portable/portmacro.h ****     #endif
 171:FreeRTOS/portable/portmacro.h **** 
 172:FreeRTOS/portable/portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 173:FreeRTOS/portable/portmacro.h ****     {
 174:FreeRTOS/portable/portmacro.h ****         uint32_t ulCurrentInterrupt;
 175:FreeRTOS/portable/portmacro.h ****         BaseType_t xReturn;
 176:FreeRTOS/portable/portmacro.h **** 
 177:FreeRTOS/portable/portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 178:FreeRTOS/portable/portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 179:FreeRTOS/portable/portmacro.h **** 
 180:FreeRTOS/portable/portmacro.h ****         if( ulCurrentInterrupt == 0 )
 181:FreeRTOS/portable/portmacro.h ****         {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 65


 182:FreeRTOS/portable/portmacro.h ****             xReturn = pdFALSE;
 183:FreeRTOS/portable/portmacro.h ****         }
 184:FreeRTOS/portable/portmacro.h ****         else
 185:FreeRTOS/portable/portmacro.h ****         {
 186:FreeRTOS/portable/portmacro.h ****             xReturn = pdTRUE;
 187:FreeRTOS/portable/portmacro.h ****         }
 188:FreeRTOS/portable/portmacro.h **** 
 189:FreeRTOS/portable/portmacro.h ****         return xReturn;
 190:FreeRTOS/portable/portmacro.h ****     }
 191:FreeRTOS/portable/portmacro.h **** 
 192:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
 193:FreeRTOS/portable/portmacro.h **** 
 194:FreeRTOS/portable/portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 370              		.loc 2 194 34 view .LVU110
 371              	.LBB129:
 195:FreeRTOS/portable/portmacro.h ****     {
 196:FreeRTOS/portable/portmacro.h ****         uint32_t ulNewBASEPRI;
 372              		.loc 2 196 9 view .LVU111
 197:FreeRTOS/portable/portmacro.h **** 
 198:FreeRTOS/portable/portmacro.h ****         __asm volatile
 373              		.loc 2 198 9 view .LVU112
 374              		.syntax unified
 375              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 376 0012 4FF05003 			mov r3, #80												
 377 0016 83F31188 		msr basepri, r3											
 378 001a BFF36F8F 		isb														
 379 001e BFF34F8F 		dsb														
 380              	
 381              	@ 0 "" 2
 382              	.LVL34:
 383              		.thumb
 384              		.syntax unified
 385              	.L28:
 386              		.loc 2 198 9 is_stmt 0 view .LVU113
 387              	.LBE129:
 388              	.LBE128:
 389              		.loc 1 3030 9 is_stmt 1 discriminator 2 view .LVU114
 390              		.loc 1 3030 9 discriminator 2 view .LVU115
 391              		.loc 1 3030 9 discriminator 2 view .LVU116
 392 0022 FEE7     		b	.L28
 393              	.L36:
3029:FreeRTOS/queue.c ****         configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 394              		.loc 1 3029 9 view .LVU117
 395              	.LBB130:
 396              	.LBI130:
 194:FreeRTOS/portable/portmacro.h ****     {
 397              		.loc 2 194 34 view .LVU118
 398              	.LBB131:
 196:FreeRTOS/portable/portmacro.h **** 
 399              		.loc 2 196 9 view .LVU119
 400              		.loc 2 198 9 view .LVU120
 401              		.syntax unified
 402              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 403 0024 4FF05003 			mov r3, #80												
 404 0028 83F31188 		msr basepri, r3											
 405 002c BFF36F8F 		isb														
 406 0030 BFF34F8F 		dsb														
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 66


 407              	
 408              	@ 0 "" 2
 409              	.LVL35:
 410              		.thumb
 411              		.syntax unified
 412              	.L26:
 413              		.loc 2 198 9 is_stmt 0 view .LVU121
 414              	.LBE131:
 415              	.LBE130:
3029:FreeRTOS/queue.c ****         configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 416              		.loc 1 3029 9 is_stmt 1 discriminator 1 view .LVU122
3029:FreeRTOS/queue.c ****         configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 417              		.loc 1 3029 9 discriminator 1 view .LVU123
3029:FreeRTOS/queue.c ****         configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 418              		.loc 1 3029 9 discriminator 1 view .LVU124
 419 0034 FEE7     		b	.L26
 420              	.L27:
 421              		.loc 1 3030 95 discriminator 2 view .LVU125
3031:FreeRTOS/queue.c **** 
3032:FreeRTOS/queue.c ****         if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 422              		.loc 1 3032 9 discriminator 2 view .LVU126
 423              		.loc 1 3032 32 is_stmt 0 discriminator 2 view .LVU127
 424 0036 A26B     		ldr	r2, [r4, #56]
 425              		.loc 1 3032 11 discriminator 2 view .LVU128
 426 0038 9342     		cmp	r3, r2
 427 003a 03D8     		bhi	.L37
3022:FreeRTOS/queue.c **** 
 428              		.loc 1 3022 20 view .LVU129
 429 003c 0026     		movs	r6, #0
 430              	.LVL36:
 431              	.L24:
3033:FreeRTOS/queue.c ****         {
3034:FreeRTOS/queue.c ****             const int8_t cTxLock = pxQueueSetContainer->cTxLock;
3035:FreeRTOS/queue.c **** 
3036:FreeRTOS/queue.c ****             traceQUEUE_SET_SEND( pxQueueSetContainer );
3037:FreeRTOS/queue.c **** 
3038:FreeRTOS/queue.c ****             /* The data copied is the handle of the queue that contains data. */
3039:FreeRTOS/queue.c ****             xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
3040:FreeRTOS/queue.c **** 
3041:FreeRTOS/queue.c ****             if( cTxLock == queueUNLOCKED )
3042:FreeRTOS/queue.c ****             {
3043:FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALS
3044:FreeRTOS/queue.c ****                 {
3045:FreeRTOS/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) 
3046:FreeRTOS/queue.c ****                     {
3047:FreeRTOS/queue.c ****                         /* The task waiting has a higher priority. */
3048:FreeRTOS/queue.c ****                         xReturn = pdTRUE;
3049:FreeRTOS/queue.c ****                     }
3050:FreeRTOS/queue.c ****                     else
3051:FreeRTOS/queue.c ****                     {
3052:FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
3053:FreeRTOS/queue.c ****                     }
3054:FreeRTOS/queue.c ****                 }
3055:FreeRTOS/queue.c ****                 else
3056:FreeRTOS/queue.c ****                 {
3057:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
3058:FreeRTOS/queue.c ****                 }
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 67


3059:FreeRTOS/queue.c ****             }
3060:FreeRTOS/queue.c ****             else
3061:FreeRTOS/queue.c ****             {
3062:FreeRTOS/queue.c ****                 configASSERT( cTxLock != queueINT8_MAX );
3063:FreeRTOS/queue.c **** 
3064:FreeRTOS/queue.c ****                 pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
3065:FreeRTOS/queue.c ****             }
3066:FreeRTOS/queue.c ****         }
3067:FreeRTOS/queue.c ****         else
3068:FreeRTOS/queue.c ****         {
3069:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
3070:FreeRTOS/queue.c ****         }
3071:FreeRTOS/queue.c **** 
3072:FreeRTOS/queue.c ****         return xReturn;
3073:FreeRTOS/queue.c ****     }
 432              		.loc 1 3073 5 view .LVU130
 433 003e 3046     		mov	r0, r6
 434 0040 02B0     		add	sp, sp, #8
 435              	.LCFI5:
 436              		.cfi_remember_state
 437              		.cfi_def_cfa_offset 16
 438              		@ sp needed
 439 0042 70BD     		pop	{r4, r5, r6, pc}
 440              	.LVL37:
 441              	.L37:
 442              	.LCFI6:
 443              		.cfi_restore_state
 444              	.LBB132:
3034:FreeRTOS/queue.c **** 
 445              		.loc 1 3034 13 is_stmt 1 view .LVU131
3034:FreeRTOS/queue.c **** 
 446              		.loc 1 3034 26 is_stmt 0 view .LVU132
 447 0044 94F84550 		ldrb	r5, [r4, #69]	@ zero_extendqisi2
 448 0048 6DB2     		sxtb	r5, r5
 449              	.LVL38:
3036:FreeRTOS/queue.c **** 
 450              		.loc 1 3036 55 is_stmt 1 view .LVU133
3039:FreeRTOS/queue.c **** 
 451              		.loc 1 3039 13 view .LVU134
3039:FreeRTOS/queue.c **** 
 452              		.loc 1 3039 23 is_stmt 0 view .LVU135
 453 004a 0022     		movs	r2, #0
 454 004c 01A9     		add	r1, sp, #4
 455 004e 2046     		mov	r0, r4
 456              	.LVL39:
3039:FreeRTOS/queue.c **** 
 457              		.loc 1 3039 23 view .LVU136
 458 0050 FFF7FEFF 		bl	prvCopyDataToQueue
 459              	.LVL40:
3039:FreeRTOS/queue.c **** 
 460              		.loc 1 3039 23 view .LVU137
 461 0054 0646     		mov	r6, r0
 462              	.LVL41:
3041:FreeRTOS/queue.c ****             {
 463              		.loc 1 3041 13 is_stmt 1 view .LVU138
3041:FreeRTOS/queue.c ****             {
 464              		.loc 1 3041 15 is_stmt 0 view .LVU139
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 68


 465 0056 B5F1FF3F 		cmp	r5, #-1
 466 005a 06D0     		beq	.L38
3062:FreeRTOS/queue.c **** 
 467              		.loc 1 3062 17 is_stmt 1 view .LVU140
 468 005c 7F2D     		cmp	r5, #127
 469 005e 0FD0     		beq	.L39
3062:FreeRTOS/queue.c **** 
 470              		.loc 1 3062 57 discriminator 2 view .LVU141
3064:FreeRTOS/queue.c ****             }
 471              		.loc 1 3064 17 discriminator 2 view .LVU142
3064:FreeRTOS/queue.c ****             }
 472              		.loc 1 3064 69 is_stmt 0 discriminator 2 view .LVU143
 473 0060 6B1C     		adds	r3, r5, #1
3064:FreeRTOS/queue.c ****             }
 474              		.loc 1 3064 48 discriminator 2 view .LVU144
 475 0062 5BB2     		sxtb	r3, r3
3064:FreeRTOS/queue.c ****             }
 476              		.loc 1 3064 46 discriminator 2 view .LVU145
 477 0064 84F84530 		strb	r3, [r4, #69]
 478 0068 E9E7     		b	.L24
 479              	.L38:
3043:FreeRTOS/queue.c ****                 {
 480              		.loc 1 3043 17 is_stmt 1 view .LVU146
3043:FreeRTOS/queue.c ****                 {
 481              		.loc 1 3043 21 is_stmt 0 view .LVU147
 482 006a 636A     		ldr	r3, [r4, #36]
3043:FreeRTOS/queue.c ****                 {
 483              		.loc 1 3043 19 view .LVU148
 484 006c 002B     		cmp	r3, #0
 485 006e E6D0     		beq	.L24
3045:FreeRTOS/queue.c ****                     {
 486              		.loc 1 3045 21 is_stmt 1 view .LVU149
3045:FreeRTOS/queue.c ****                     {
 487              		.loc 1 3045 25 is_stmt 0 view .LVU150
 488 0070 04F12400 		add	r0, r4, #36
 489              	.LVL42:
3045:FreeRTOS/queue.c ****                     {
 490              		.loc 1 3045 25 view .LVU151
 491 0074 FFF7FEFF 		bl	xTaskRemoveFromEventList
 492              	.LVL43:
3045:FreeRTOS/queue.c ****                     {
 493              		.loc 1 3045 23 view .LVU152
 494 0078 0028     		cmp	r0, #0
 495 007a E0D0     		beq	.L24
3048:FreeRTOS/queue.c ****                     }
 496              		.loc 1 3048 33 view .LVU153
 497 007c 0126     		movs	r6, #1
 498              	.LVL44:
3048:FreeRTOS/queue.c ****                     }
 499              		.loc 1 3048 33 view .LVU154
 500              	.LBE132:
3069:FreeRTOS/queue.c ****         }
 501              		.loc 1 3069 37 is_stmt 1 view .LVU155
3072:FreeRTOS/queue.c ****     }
 502              		.loc 1 3072 9 view .LVU156
3072:FreeRTOS/queue.c ****     }
 503              		.loc 1 3072 16 is_stmt 0 view .LVU157
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 69


 504 007e DEE7     		b	.L24
 505              	.LVL45:
 506              	.L39:
 507              	.LBB135:
3062:FreeRTOS/queue.c **** 
 508              		.loc 1 3062 17 is_stmt 1 view .LVU158
 509              	.LBB133:
 510              	.LBI133:
 194:FreeRTOS/portable/portmacro.h ****     {
 511              		.loc 2 194 34 view .LVU159
 512              	.LBB134:
 196:FreeRTOS/portable/portmacro.h **** 
 513              		.loc 2 196 9 view .LVU160
 514              		.loc 2 198 9 view .LVU161
 515              		.syntax unified
 516              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 517 0080 4FF05003 			mov r3, #80												
 518 0084 83F31188 		msr basepri, r3											
 519 0088 BFF36F8F 		isb														
 520 008c BFF34F8F 		dsb														
 521              	
 522              	@ 0 "" 2
 523              	.LVL46:
 524              		.thumb
 525              		.syntax unified
 526              	.L32:
 527              		.loc 2 198 9 is_stmt 0 view .LVU162
 528              	.LBE134:
 529              	.LBE133:
3062:FreeRTOS/queue.c **** 
 530              		.loc 1 3062 17 is_stmt 1 discriminator 5 view .LVU163
3062:FreeRTOS/queue.c **** 
 531              		.loc 1 3062 17 discriminator 5 view .LVU164
3062:FreeRTOS/queue.c **** 
 532              		.loc 1 3062 17 discriminator 5 view .LVU165
 533 0090 FEE7     		b	.L32
 534              	.LBE135:
 535              		.cfi_endproc
 536              	.LFE46:
 538              		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 539              		.align	1
 540              		.syntax unified
 541              		.thumb
 542              		.thumb_func
 543              		.fpu fpv4-sp-d16
 545              	prvCopyDataFromQueue:
 546              	.LVL47:
 547              	.LFB35:
2245:FreeRTOS/queue.c ****     if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 548              		.loc 1 2245 1 view -0
 549              		.cfi_startproc
 550              		@ args = 0, pretend = 0, frame = 0
 551              		@ frame_needed = 0, uses_anonymous_args = 0
2245:FreeRTOS/queue.c ****     if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 552              		.loc 1 2245 1 is_stmt 0 view .LVU167
 553 0000 0346     		mov	r3, r0
2246:FreeRTOS/queue.c ****     {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 70


 554              		.loc 1 2246 5 is_stmt 1 view .LVU168
2246:FreeRTOS/queue.c ****     {
 555              		.loc 1 2246 16 is_stmt 0 view .LVU169
 556 0002 026C     		ldr	r2, [r0, #64]
2246:FreeRTOS/queue.c ****     {
 557              		.loc 1 2246 7 view .LVU170
 558 0004 6AB1     		cbz	r2, .L44
2245:FreeRTOS/queue.c ****     if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 559              		.loc 1 2245 1 view .LVU171
 560 0006 10B5     		push	{r4, lr}
 561              	.LCFI7:
 562              		.cfi_def_cfa_offset 8
 563              		.cfi_offset 4, -8
 564              		.cfi_offset 14, -4
 565 0008 0846     		mov	r0, r1
 566              	.LVL48:
2248:FreeRTOS/queue.c **** 
 567              		.loc 1 2248 9 is_stmt 1 view .LVU172
2248:FreeRTOS/queue.c **** 
 568              		.loc 1 2248 38 is_stmt 0 view .LVU173
 569 000a D968     		ldr	r1, [r3, #12]
 570              	.LVL49:
2248:FreeRTOS/queue.c **** 
 571              		.loc 1 2248 38 view .LVU174
 572 000c 1144     		add	r1, r1, r2
 573 000e D960     		str	r1, [r3, #12]
2250:FreeRTOS/queue.c ****         {
 574              		.loc 1 2250 9 is_stmt 1 view .LVU175
2250:FreeRTOS/queue.c ****         {
 575              		.loc 1 2250 62 is_stmt 0 view .LVU176
 576 0010 9C68     		ldr	r4, [r3, #8]
2250:FreeRTOS/queue.c ****         {
 577              		.loc 1 2250 11 view .LVU177
 578 0012 A142     		cmp	r1, r4
 579 0014 01D3     		bcc	.L42
2252:FreeRTOS/queue.c ****         }
 580              		.loc 1 2252 13 is_stmt 1 view .LVU178
2252:FreeRTOS/queue.c ****         }
 581              		.loc 1 2252 51 is_stmt 0 view .LVU179
 582 0016 1968     		ldr	r1, [r3]
2252:FreeRTOS/queue.c ****         }
 583              		.loc 1 2252 42 view .LVU180
 584 0018 D960     		str	r1, [r3, #12]
 585              	.L42:
2256:FreeRTOS/queue.c ****         }
 586              		.loc 1 2256 37 is_stmt 1 view .LVU181
2259:FreeRTOS/queue.c ****     }
 587              		.loc 1 2259 9 view .LVU182
2259:FreeRTOS/queue.c ****     }
 588              		.loc 1 2259 18 is_stmt 0 view .LVU183
 589 001a D968     		ldr	r1, [r3, #12]
 590 001c FFF7FEFF 		bl	memcpy
 591              	.LVL50:
2261:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 592              		.loc 1 2261 1 view .LVU184
 593 0020 10BD     		pop	{r4, pc}
 594              	.LVL51:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 71


 595              	.L44:
 596              	.LCFI8:
 597              		.cfi_def_cfa_offset 0
 598              		.cfi_restore 4
 599              		.cfi_restore 14
2261:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 600              		.loc 1 2261 1 view .LVU185
 601 0022 7047     		bx	lr
 602              		.cfi_endproc
 603              	.LFE35:
 605              		.section	.text.prvUnlockQueue,"ax",%progbits
 606              		.align	1
 607              		.syntax unified
 608              		.thumb
 609              		.thumb_func
 610              		.fpu fpv4-sp-d16
 612              	prvUnlockQueue:
 613              	.LVL52:
 614              	.LFB36:
2265:FreeRTOS/queue.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 615              		.loc 1 2265 1 is_stmt 1 view -0
 616              		.cfi_startproc
 617              		@ args = 0, pretend = 0, frame = 0
 618              		@ frame_needed = 0, uses_anonymous_args = 0
2265:FreeRTOS/queue.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 619              		.loc 1 2265 1 is_stmt 0 view .LVU187
 620 0000 38B5     		push	{r3, r4, r5, lr}
 621              	.LCFI9:
 622              		.cfi_def_cfa_offset 16
 623              		.cfi_offset 3, -16
 624              		.cfi_offset 4, -12
 625              		.cfi_offset 5, -8
 626              		.cfi_offset 14, -4
 627 0002 0546     		mov	r5, r0
2272:FreeRTOS/queue.c ****     {
 628              		.loc 1 2272 5 is_stmt 1 view .LVU188
 629 0004 FFF7FEFF 		bl	vPortEnterCritical
 630              	.LVL53:
 631              	.LBB136:
2274:FreeRTOS/queue.c **** 
 632              		.loc 1 2274 9 view .LVU189
2274:FreeRTOS/queue.c **** 
 633              		.loc 1 2274 16 is_stmt 0 view .LVU190
 634 0008 95F84540 		ldrb	r4, [r5, #69]	@ zero_extendqisi2
 635 000c 64B2     		sxtb	r4, r4
 636              	.LVL54:
2277:FreeRTOS/queue.c ****         {
 637              		.loc 1 2277 9 is_stmt 1 view .LVU191
2277:FreeRTOS/queue.c ****         {
 638              		.loc 1 2277 14 is_stmt 0 view .LVU192
 639 000e 08E0     		b	.L48
 640              	.L49:
2302:FreeRTOS/queue.c ****                         {
 641              		.loc 1 2302 25 is_stmt 1 view .LVU193
2302:FreeRTOS/queue.c ****                         {
 642              		.loc 1 2302 29 is_stmt 0 view .LVU194
 643 0010 6B6A     		ldr	r3, [r5, #36]
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 72


2302:FreeRTOS/queue.c ****                         {
 644              		.loc 1 2302 27 view .LVU195
 645 0012 B3B1     		cbz	r3, .L51
2304:FreeRTOS/queue.c ****                             {
 646              		.loc 1 2304 29 is_stmt 1 view .LVU196
2304:FreeRTOS/queue.c ****                             {
 647              		.loc 1 2304 33 is_stmt 0 view .LVU197
 648 0014 05F12400 		add	r0, r5, #36
 649 0018 FFF7FEFF 		bl	xTaskRemoveFromEventList
 650              	.LVL55:
2304:FreeRTOS/queue.c ****                             {
 651              		.loc 1 2304 31 view .LVU198
 652 001c 70B9     		cbnz	r0, .L58
 653              	.L50:
2312:FreeRTOS/queue.c ****                             }
 654              		.loc 1 2312 57 is_stmt 1 view .LVU199
2345:FreeRTOS/queue.c ****         }
 655              		.loc 1 2345 13 view .LVU200
 656 001e 013C     		subs	r4, r4, #1
 657              	.LVL56:
2345:FreeRTOS/queue.c ****         }
 658              		.loc 1 2345 13 is_stmt 0 view .LVU201
 659 0020 64B2     		sxtb	r4, r4
 660              	.LVL57:
 661              	.L48:
2277:FreeRTOS/queue.c ****         {
 662              		.loc 1 2277 14 is_stmt 1 view .LVU202
 663 0022 002C     		cmp	r4, #0
 664 0024 0DDD     		ble	.L51
2283:FreeRTOS/queue.c ****                     {
 665              		.loc 1 2283 21 view .LVU203
2283:FreeRTOS/queue.c ****                     {
 666              		.loc 1 2283 32 is_stmt 0 view .LVU204
 667 0026 AB6C     		ldr	r3, [r5, #72]
2283:FreeRTOS/queue.c ****                     {
 668              		.loc 1 2283 23 view .LVU205
 669 0028 002B     		cmp	r3, #0
 670 002a F1D0     		beq	.L49
2285:FreeRTOS/queue.c ****                         {
 671              		.loc 1 2285 25 is_stmt 1 view .LVU206
2285:FreeRTOS/queue.c ****                         {
 672              		.loc 1 2285 29 is_stmt 0 view .LVU207
 673 002c 2846     		mov	r0, r5
 674 002e FFF7FEFF 		bl	prvNotifyQueueSetContainer
 675              	.LVL58:
2285:FreeRTOS/queue.c ****                         {
 676              		.loc 1 2285 27 view .LVU208
 677 0032 0028     		cmp	r0, #0
 678 0034 F3D0     		beq	.L50
2290:FreeRTOS/queue.c ****                         }
 679              		.loc 1 2290 29 is_stmt 1 view .LVU209
 680 0036 FFF7FEFF 		bl	vTaskMissedYield
 681              	.LVL59:
 682 003a F0E7     		b	.L50
 683              	.L58:
2308:FreeRTOS/queue.c ****                             }
 684              		.loc 1 2308 33 view .LVU210
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 73


 685 003c FFF7FEFF 		bl	vTaskMissedYield
 686              	.LVL60:
 687 0040 EDE7     		b	.L50
 688              	.L51:
2348:FreeRTOS/queue.c ****     }
 689              		.loc 1 2348 9 view .LVU211
2348:FreeRTOS/queue.c ****     }
 690              		.loc 1 2348 26 is_stmt 0 view .LVU212
 691 0042 FF23     		movs	r3, #255
 692 0044 85F84530 		strb	r3, [r5, #69]
 693              	.LBE136:
2350:FreeRTOS/queue.c **** 
 694              		.loc 1 2350 5 is_stmt 1 view .LVU213
 695 0048 FFF7FEFF 		bl	vPortExitCritical
 696              	.LVL61:
2353:FreeRTOS/queue.c ****     {
 697              		.loc 1 2353 5 view .LVU214
 698 004c FFF7FEFF 		bl	vPortEnterCritical
 699              	.LVL62:
 700              	.LBB137:
2355:FreeRTOS/queue.c **** 
 701              		.loc 1 2355 9 view .LVU215
2355:FreeRTOS/queue.c **** 
 702              		.loc 1 2355 16 is_stmt 0 view .LVU216
 703 0050 95F84440 		ldrb	r4, [r5, #68]	@ zero_extendqisi2
 704              	.LVL63:
2355:FreeRTOS/queue.c **** 
 705              		.loc 1 2355 16 view .LVU217
 706 0054 64B2     		sxtb	r4, r4
 707              	.LVL64:
2357:FreeRTOS/queue.c ****         {
 708              		.loc 1 2357 9 is_stmt 1 view .LVU218
2357:FreeRTOS/queue.c ****         {
 709              		.loc 1 2357 14 is_stmt 0 view .LVU219
 710 0056 03E0     		b	.L53
 711              	.L59:
2363:FreeRTOS/queue.c ****                 }
 712              		.loc 1 2363 21 is_stmt 1 view .LVU220
 713 0058 FFF7FEFF 		bl	vTaskMissedYield
 714              	.LVL65:
 715              	.L55:
2367:FreeRTOS/queue.c ****                 }
 716              		.loc 1 2367 45 view .LVU221
2370:FreeRTOS/queue.c ****             }
 717              		.loc 1 2370 17 view .LVU222
 718 005c 013C     		subs	r4, r4, #1
 719              	.LVL66:
2370:FreeRTOS/queue.c ****             }
 720              		.loc 1 2370 17 is_stmt 0 view .LVU223
 721 005e 64B2     		sxtb	r4, r4
 722              	.LVL67:
 723              	.L53:
2357:FreeRTOS/queue.c ****         {
 724              		.loc 1 2357 14 is_stmt 1 view .LVU224
 725 0060 002C     		cmp	r4, #0
 726 0062 08DD     		ble	.L54
2359:FreeRTOS/queue.c ****             {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 74


 727              		.loc 1 2359 13 view .LVU225
2359:FreeRTOS/queue.c ****             {
 728              		.loc 1 2359 17 is_stmt 0 view .LVU226
 729 0064 2B69     		ldr	r3, [r5, #16]
2359:FreeRTOS/queue.c ****             {
 730              		.loc 1 2359 15 view .LVU227
 731 0066 33B1     		cbz	r3, .L54
2361:FreeRTOS/queue.c ****                 {
 732              		.loc 1 2361 17 is_stmt 1 view .LVU228
2361:FreeRTOS/queue.c ****                 {
 733              		.loc 1 2361 21 is_stmt 0 view .LVU229
 734 0068 05F11000 		add	r0, r5, #16
 735 006c FFF7FEFF 		bl	xTaskRemoveFromEventList
 736              	.LVL68:
2361:FreeRTOS/queue.c ****                 {
 737              		.loc 1 2361 19 view .LVU230
 738 0070 0028     		cmp	r0, #0
 739 0072 F3D0     		beq	.L55
 740 0074 F0E7     		b	.L59
 741              	.L54:
2378:FreeRTOS/queue.c ****     }
 742              		.loc 1 2378 9 is_stmt 1 view .LVU231
2378:FreeRTOS/queue.c ****     }
 743              		.loc 1 2378 26 is_stmt 0 view .LVU232
 744 0076 FF23     		movs	r3, #255
 745 0078 85F84430 		strb	r3, [r5, #68]
 746              	.LBE137:
2380:FreeRTOS/queue.c **** }
 747              		.loc 1 2380 5 is_stmt 1 view .LVU233
 748 007c FFF7FEFF 		bl	vPortExitCritical
 749              	.LVL69:
2381:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 750              		.loc 1 2381 1 is_stmt 0 view .LVU234
 751 0080 38BD     		pop	{r3, r4, r5, pc}
2381:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 752              		.loc 1 2381 1 view .LVU235
 753              		.cfi_endproc
 754              	.LFE36:
 756              		.section	.text.xQueueGenericReset,"ax",%progbits
 757              		.align	1
 758              		.global	xQueueGenericReset
 759              		.syntax unified
 760              		.thumb
 761              		.thumb_func
 762              		.fpu fpv4-sp-d16
 764              	xQueueGenericReset:
 765              	.LVL70:
 766              	.LFB5:
 268:FreeRTOS/queue.c ****     BaseType_t xReturn = pdPASS;
 767              		.loc 1 268 1 is_stmt 1 view -0
 768              		.cfi_startproc
 769              		@ args = 0, pretend = 0, frame = 0
 770              		@ frame_needed = 0, uses_anonymous_args = 0
 268:FreeRTOS/queue.c ****     BaseType_t xReturn = pdPASS;
 771              		.loc 1 268 1 is_stmt 0 view .LVU237
 772 0000 38B5     		push	{r3, r4, r5, lr}
 773              	.LCFI10:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 75


 774              		.cfi_def_cfa_offset 16
 775              		.cfi_offset 3, -16
 776              		.cfi_offset 4, -12
 777              		.cfi_offset 5, -8
 778              		.cfi_offset 14, -4
 269:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 779              		.loc 1 269 5 is_stmt 1 view .LVU238
 780              	.LVL71:
 270:FreeRTOS/queue.c **** 
 781              		.loc 1 270 5 view .LVU239
 272:FreeRTOS/queue.c **** 
 782              		.loc 1 272 5 view .LVU240
 783 0002 90B1     		cbz	r0, .L71
 784 0004 0D46     		mov	r5, r1
 785 0006 0446     		mov	r4, r0
 272:FreeRTOS/queue.c **** 
 786              		.loc 1 272 28 discriminator 1 view .LVU241
 274:FreeRTOS/queue.c ****         ( pxQueue->uxLength >= 1U ) &&
 787              		.loc 1 274 5 discriminator 1 view .LVU242
 275:FreeRTOS/queue.c ****         /* Check for multiplication overflow. */
 788              		.loc 1 275 18 is_stmt 0 discriminator 1 view .LVU243
 789 0008 C16B     		ldr	r1, [r0, #60]
 790              	.LVL72:
 274:FreeRTOS/queue.c ****         ( pxQueue->uxLength >= 1U ) &&
 791              		.loc 1 274 29 discriminator 1 view .LVU244
 792 000a 29B1     		cbz	r1, .L63
 277:FreeRTOS/queue.c ****     {
 793              		.loc 1 277 54 view .LVU245
 794 000c 036C     		ldr	r3, [r0, #64]
 277:FreeRTOS/queue.c ****     {
 795              		.loc 1 277 44 view .LVU246
 796 000e 0022     		movs	r2, #0
 797 0010 A1FB0313 		umull	r1, r3, r1, r3
 798 0014 93B9     		cbnz	r3, .L72
 799              	.L64:
 275:FreeRTOS/queue.c ****         /* Check for multiplication overflow. */
 800              		.loc 1 275 37 view .LVU247
 801 0016 9AB1     		cbz	r2, .L73
 802              	.L63:
 803              	.LVL73:
 325:FreeRTOS/queue.c **** 
 804              		.loc 1 325 5 is_stmt 1 view .LVU248
 805              	.LBB138:
 806              	.LBI138:
 194:FreeRTOS/portable/portmacro.h ****     {
 807              		.loc 2 194 34 view .LVU249
 808              	.LBB139:
 196:FreeRTOS/portable/portmacro.h **** 
 809              		.loc 2 196 9 view .LVU250
 810              		.loc 2 198 9 view .LVU251
 811              		.syntax unified
 812              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 813 0018 4FF05003 			mov r3, #80												
 814 001c 83F31188 		msr basepri, r3											
 815 0020 BFF36F8F 		isb														
 816 0024 BFF34F8F 		dsb														
 817              	
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 76


 818              	@ 0 "" 2
 819              	.LVL74:
 820              		.thumb
 821              		.syntax unified
 822              	.L68:
 823              		.loc 2 198 9 is_stmt 0 view .LVU252
 824              	.LBE139:
 825              	.LBE138:
 325:FreeRTOS/queue.c **** 
 826              		.loc 1 325 5 is_stmt 1 discriminator 3 view .LVU253
 325:FreeRTOS/queue.c **** 
 827              		.loc 1 325 5 discriminator 3 view .LVU254
 325:FreeRTOS/queue.c **** 
 828              		.loc 1 325 5 discriminator 3 view .LVU255
 829 0028 FEE7     		b	.L68
 830              	.LVL75:
 831              	.L71:
 272:FreeRTOS/queue.c **** 
 832              		.loc 1 272 5 view .LVU256
 833              	.LBB140:
 834              	.LBI140:
 194:FreeRTOS/portable/portmacro.h ****     {
 835              		.loc 2 194 34 view .LVU257
 836              	.LBB141:
 196:FreeRTOS/portable/portmacro.h **** 
 837              		.loc 2 196 9 view .LVU258
 838              		.loc 2 198 9 view .LVU259
 839              		.syntax unified
 840              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 841 002a 4FF05003 			mov r3, #80												
 842 002e 83F31188 		msr basepri, r3											
 843 0032 BFF36F8F 		isb														
 844 0036 BFF34F8F 		dsb														
 845              	
 846              	@ 0 "" 2
 847              	.LVL76:
 848              		.thumb
 849              		.syntax unified
 850              	.L62:
 851              		.loc 2 198 9 is_stmt 0 view .LVU260
 852              	.LBE141:
 853              	.LBE140:
 272:FreeRTOS/queue.c **** 
 854              		.loc 1 272 5 is_stmt 1 discriminator 1 view .LVU261
 272:FreeRTOS/queue.c **** 
 855              		.loc 1 272 5 discriminator 1 view .LVU262
 272:FreeRTOS/queue.c **** 
 856              		.loc 1 272 5 discriminator 1 view .LVU263
 857 003a FEE7     		b	.L62
 858              	.LVL77:
 859              	.L72:
 277:FreeRTOS/queue.c ****     {
 860              		.loc 1 277 44 is_stmt 0 view .LVU264
 861 003c 0122     		movs	r2, #1
 862 003e EAE7     		b	.L64
 863              	.L73:
 279:FreeRTOS/queue.c ****         {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 77


 864              		.loc 1 279 9 is_stmt 1 view .LVU265
 865 0040 FFF7FEFF 		bl	vPortEnterCritical
 866              	.LVL78:
 281:FreeRTOS/queue.c ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 867              		.loc 1 281 13 view .LVU266
 281:FreeRTOS/queue.c ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 868              		.loc 1 281 47 is_stmt 0 view .LVU267
 869 0044 2168     		ldr	r1, [r4]
 281:FreeRTOS/queue.c ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 870              		.loc 1 281 67 view .LVU268
 871 0046 E26B     		ldr	r2, [r4, #60]
 281:FreeRTOS/queue.c ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 872              		.loc 1 281 87 view .LVU269
 873 0048 236C     		ldr	r3, [r4, #64]
 281:FreeRTOS/queue.c ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 874              		.loc 1 281 56 view .LVU270
 875 004a 03FB0210 		mla	r0, r3, r2, r1
 281:FreeRTOS/queue.c ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 876              		.loc 1 281 38 view .LVU271
 877 004e A060     		str	r0, [r4, #8]
 282:FreeRTOS/queue.c ****             pxQueue->pcWriteTo = pxQueue->pcHead;
 878              		.loc 1 282 13 is_stmt 1 view .LVU272
 282:FreeRTOS/queue.c ****             pxQueue->pcWriteTo = pxQueue->pcHead;
 879              		.loc 1 282 40 is_stmt 0 view .LVU273
 880 0050 0020     		movs	r0, #0
 881 0052 A063     		str	r0, [r4, #56]
 283:FreeRTOS/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue
 882              		.loc 1 283 13 is_stmt 1 view .LVU274
 283:FreeRTOS/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue
 883              		.loc 1 283 32 is_stmt 0 view .LVU275
 884 0054 6160     		str	r1, [r4, #4]
 284:FreeRTOS/queue.c ****             pxQueue->cRxLock = queueUNLOCKED;
 885              		.loc 1 284 13 is_stmt 1 view .LVU276
 284:FreeRTOS/queue.c ****             pxQueue->cRxLock = queueUNLOCKED;
 886              		.loc 1 284 84 is_stmt 0 view .LVU277
 887 0056 013A     		subs	r2, r2, #1
 284:FreeRTOS/queue.c ****             pxQueue->cRxLock = queueUNLOCKED;
 888              		.loc 1 284 60 view .LVU278
 889 0058 02FB0313 		mla	r3, r2, r3, r1
 284:FreeRTOS/queue.c ****             pxQueue->cRxLock = queueUNLOCKED;
 890              		.loc 1 284 42 view .LVU279
 891 005c E360     		str	r3, [r4, #12]
 285:FreeRTOS/queue.c ****             pxQueue->cTxLock = queueUNLOCKED;
 892              		.loc 1 285 13 is_stmt 1 view .LVU280
 285:FreeRTOS/queue.c ****             pxQueue->cTxLock = queueUNLOCKED;
 893              		.loc 1 285 30 is_stmt 0 view .LVU281
 894 005e FF23     		movs	r3, #255
 895 0060 84F84430 		strb	r3, [r4, #68]
 286:FreeRTOS/queue.c **** 
 896              		.loc 1 286 13 is_stmt 1 view .LVU282
 286:FreeRTOS/queue.c **** 
 897              		.loc 1 286 30 is_stmt 0 view .LVU283
 898 0064 84F84530 		strb	r3, [r4, #69]
 288:FreeRTOS/queue.c ****             {
 899              		.loc 1 288 13 is_stmt 1 view .LVU284
 288:FreeRTOS/queue.c ****             {
 900              		.loc 1 288 15 is_stmt 0 view .LVU285
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 78


 901 0068 A5B9     		cbnz	r5, .L66
 295:FreeRTOS/queue.c ****                 {
 902              		.loc 1 295 17 is_stmt 1 view .LVU286
 295:FreeRTOS/queue.c ****                 {
 903              		.loc 1 295 21 is_stmt 0 view .LVU287
 904 006a 2369     		ldr	r3, [r4, #16]
 295:FreeRTOS/queue.c ****                 {
 905              		.loc 1 295 19 view .LVU288
 906 006c 1BB9     		cbnz	r3, .L74
 907              	.L67:
 318:FreeRTOS/queue.c ****     }
 908              		.loc 1 318 9 is_stmt 1 view .LVU289
 909 006e FFF7FEFF 		bl	vPortExitCritical
 910              	.LVL79:
 325:FreeRTOS/queue.c **** 
 911              		.loc 1 325 5 view .LVU290
 325:FreeRTOS/queue.c **** 
 912              		.loc 1 325 38 view .LVU291
 329:FreeRTOS/queue.c **** }
 913              		.loc 1 329 5 view .LVU292
 330:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 914              		.loc 1 330 1 is_stmt 0 view .LVU293
 915 0072 0120     		movs	r0, #1
 916 0074 38BD     		pop	{r3, r4, r5, pc}
 917              	.LVL80:
 918              	.L74:
 297:FreeRTOS/queue.c ****                     {
 919              		.loc 1 297 21 is_stmt 1 view .LVU294
 297:FreeRTOS/queue.c ****                     {
 920              		.loc 1 297 25 is_stmt 0 view .LVU295
 921 0076 04F11000 		add	r0, r4, #16
 922 007a FFF7FEFF 		bl	xTaskRemoveFromEventList
 923              	.LVL81:
 297:FreeRTOS/queue.c ****                     {
 924              		.loc 1 297 23 view .LVU296
 925 007e 0028     		cmp	r0, #0
 926 0080 F5D0     		beq	.L67
 299:FreeRTOS/queue.c ****                     }
 927              		.loc 1 299 25 is_stmt 1 view .LVU297
 928 0082 094B     		ldr	r3, .L75
 929 0084 4FF08052 		mov	r2, #268435456
 930 0088 1A60     		str	r2, [r3]
 299:FreeRTOS/queue.c ****                     }
 931              		.loc 1 299 25 view .LVU298
 932              		.syntax unified
 933              	@ 299 "FreeRTOS/queue.c" 1
 934 008a BFF34F8F 		dsb
 935              	@ 0 "" 2
 299:FreeRTOS/queue.c ****                     }
 936              		.loc 1 299 25 view .LVU299
 937              	@ 299 "FreeRTOS/queue.c" 1
 938 008e BFF36F8F 		isb
 939              	@ 0 "" 2
 299:FreeRTOS/queue.c ****                     }
 940              		.loc 1 299 57 view .LVU300
 941              		.thumb
 942              		.syntax unified
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 79


 943 0092 ECE7     		b	.L67
 944              	.L66:
 314:FreeRTOS/queue.c ****                 vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 945              		.loc 1 314 17 view .LVU301
 946 0094 04F11000 		add	r0, r4, #16
 947 0098 FFF7FEFF 		bl	vListInitialise
 948              	.LVL82:
 315:FreeRTOS/queue.c ****             }
 949              		.loc 1 315 17 view .LVU302
 950 009c 04F12400 		add	r0, r4, #36
 951 00a0 FFF7FEFF 		bl	vListInitialise
 952              	.LVL83:
 953 00a4 E3E7     		b	.L67
 954              	.L76:
 955 00a6 00BF     		.align	2
 956              	.L75:
 957 00a8 04ED00E0 		.word	-536810236
 958              		.cfi_endproc
 959              	.LFE5:
 961              		.section	.text.prvInitialiseNewQueue,"ax",%progbits
 962              		.align	1
 963              		.syntax unified
 964              		.thumb
 965              		.thumb_func
 966              		.fpu fpv4-sp-d16
 968              	prvInitialiseNewQueue:
 969              	.LVL84:
 970              	.LFB8:
 469:FreeRTOS/queue.c ****     /* Remove compiler warnings about unused parameters should
 971              		.loc 1 469 1 view -0
 972              		.cfi_startproc
 973              		@ args = 4, pretend = 0, frame = 0
 974              		@ frame_needed = 0, uses_anonymous_args = 0
 469:FreeRTOS/queue.c ****     /* Remove compiler warnings about unused parameters should
 975              		.loc 1 469 1 is_stmt 0 view .LVU304
 976 0000 38B5     		push	{r3, r4, r5, lr}
 977              	.LCFI11:
 978              		.cfi_def_cfa_offset 16
 979              		.cfi_offset 3, -16
 980              		.cfi_offset 4, -12
 981              		.cfi_offset 5, -8
 982              		.cfi_offset 14, -4
 983 0002 1D46     		mov	r5, r3
 984 0004 049C     		ldr	r4, [sp, #16]
 472:FreeRTOS/queue.c **** 
 985              		.loc 1 472 5 is_stmt 1 view .LVU305
 474:FreeRTOS/queue.c ****     {
 986              		.loc 1 474 5 view .LVU306
 474:FreeRTOS/queue.c ****     {
 987              		.loc 1 474 7 is_stmt 0 view .LVU307
 988 0006 0B46     		mov	r3, r1
 989              	.LVL85:
 474:FreeRTOS/queue.c ****     {
 990              		.loc 1 474 7 view .LVU308
 991 0008 59B9     		cbnz	r1, .L78
 480:FreeRTOS/queue.c ****     }
 992              		.loc 1 480 9 is_stmt 1 view .LVU309
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 80


 480:FreeRTOS/queue.c ****     }
 993              		.loc 1 480 28 is_stmt 0 view .LVU310
 994 000a 2460     		str	r4, [r4]
 995              	.L79:
 490:FreeRTOS/queue.c ****     pxNewQueue->uxItemSize = uxItemSize;
 996              		.loc 1 490 5 is_stmt 1 view .LVU311
 490:FreeRTOS/queue.c ****     pxNewQueue->uxItemSize = uxItemSize;
 997              		.loc 1 490 26 is_stmt 0 view .LVU312
 998 000c E063     		str	r0, [r4, #60]
 491:FreeRTOS/queue.c ****     ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 999              		.loc 1 491 5 is_stmt 1 view .LVU313
 491:FreeRTOS/queue.c ****     ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 1000              		.loc 1 491 28 is_stmt 0 view .LVU314
 1001 000e 2364     		str	r3, [r4, #64]
 492:FreeRTOS/queue.c **** 
 1002              		.loc 1 492 5 is_stmt 1 view .LVU315
 492:FreeRTOS/queue.c **** 
 1003              		.loc 1 492 14 is_stmt 0 view .LVU316
 1004 0010 0121     		movs	r1, #1
 1005              	.LVL86:
 492:FreeRTOS/queue.c **** 
 1006              		.loc 1 492 14 view .LVU317
 1007 0012 2046     		mov	r0, r4
 1008              	.LVL87:
 492:FreeRTOS/queue.c **** 
 1009              		.loc 1 492 14 view .LVU318
 1010 0014 FFF7FEFF 		bl	xQueueGenericReset
 1011              	.LVL88:
 496:FreeRTOS/queue.c ****         }
 1012              		.loc 1 496 13 is_stmt 1 view .LVU319
 496:FreeRTOS/queue.c ****         }
 1013              		.loc 1 496 37 is_stmt 0 view .LVU320
 1014 0018 84F85050 		strb	r5, [r4, #80]
 502:FreeRTOS/queue.c ****         }
 1015              		.loc 1 502 13 is_stmt 1 view .LVU321
 502:FreeRTOS/queue.c ****         }
 1016              		.loc 1 502 45 is_stmt 0 view .LVU322
 1017 001c 0023     		movs	r3, #0
 1018 001e A364     		str	r3, [r4, #72]
 506:FreeRTOS/queue.c **** }
 1019              		.loc 1 506 36 is_stmt 1 view .LVU323
 507:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 1020              		.loc 1 507 1 is_stmt 0 view .LVU324
 1021 0020 38BD     		pop	{r3, r4, r5, pc}
 1022              	.LVL89:
 1023              	.L78:
 485:FreeRTOS/queue.c ****     }
 1024              		.loc 1 485 9 is_stmt 1 view .LVU325
 485:FreeRTOS/queue.c ****     }
 1025              		.loc 1 485 28 is_stmt 0 view .LVU326
 1026 0022 2260     		str	r2, [r4]
 1027 0024 F2E7     		b	.L79
 1028              		.cfi_endproc
 1029              	.LFE8:
 1031              		.section	.text.xQueueGenericCreateStatic,"ax",%progbits
 1032              		.align	1
 1033              		.global	xQueueGenericCreateStatic
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 81


 1034              		.syntax unified
 1035              		.thumb
 1036              		.thumb_func
 1037              		.fpu fpv4-sp-d16
 1039              	xQueueGenericCreateStatic:
 1040              	.LVL90:
 1041              	.LFB6:
 340:FreeRTOS/queue.c ****         Queue_t * pxNewQueue = NULL;
 1042              		.loc 1 340 5 is_stmt 1 view -0
 1043              		.cfi_startproc
 1044              		@ args = 4, pretend = 0, frame = 8
 1045              		@ frame_needed = 0, uses_anonymous_args = 0
 341:FreeRTOS/queue.c **** 
 1046              		.loc 1 341 9 view .LVU328
 345:FreeRTOS/queue.c **** 
 1047              		.loc 1 345 9 view .LVU329
 1048 0000 A3B1     		cbz	r3, .L93
 340:FreeRTOS/queue.c ****         Queue_t * pxNewQueue = NULL;
 1049              		.loc 1 340 5 is_stmt 0 discriminator 2 view .LVU330
 1050 0002 10B5     		push	{r4, lr}
 1051              	.LCFI12:
 1052              		.cfi_def_cfa_offset 8
 1053              		.cfi_offset 4, -8
 1054              		.cfi_offset 14, -4
 1055 0004 84B0     		sub	sp, sp, #16
 1056              	.LCFI13:
 1057              		.cfi_def_cfa_offset 24
 1058 0006 1C46     		mov	r4, r3
 345:FreeRTOS/queue.c **** 
 1059              		.loc 1 345 38 is_stmt 1 discriminator 2 view .LVU331
 347:FreeRTOS/queue.c ****             ( pxStaticQueue != NULL ) &&
 1060              		.loc 1 347 9 discriminator 2 view .LVU332
 347:FreeRTOS/queue.c ****             ( pxStaticQueue != NULL ) &&
 1061              		.loc 1 347 11 is_stmt 0 discriminator 2 view .LVU333
 1062 0008 D8B1     		cbz	r0, .L84
 348:FreeRTOS/queue.c **** 
 1063              		.loc 1 348 39 view .LVU334
 1064 000a 02B1     		cbz	r2, .L85
 352:FreeRTOS/queue.c ****             ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 1065              		.loc 1 352 15 view .LVU335
 1066 000c C9B1     		cbz	r1, .L84
 1067              	.L85:
 352:FreeRTOS/queue.c ****             ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 1068              		.loc 1 352 73 discriminator 1 view .LVU336
 1069 000e B2B1     		cbz	r2, .L94
 1070              	.L86:
 1071              	.LBB142:
 360:FreeRTOS/queue.c **** 
 1072              		.loc 1 360 21 is_stmt 1 view .LVU337
 360:FreeRTOS/queue.c **** 
 1073              		.loc 1 360 37 is_stmt 0 view .LVU338
 1074 0010 5423     		movs	r3, #84
 1075              	.LVL91:
 360:FreeRTOS/queue.c **** 
 1076              		.loc 1 360 37 view .LVU339
 1077 0012 0393     		str	r3, [sp, #12]
 363:FreeRTOS/queue.c ****                     ( void ) xSize;                             /* Keeps lint quiet when configASSE
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 82


 1078              		.loc 1 363 21 is_stmt 1 view .LVU340
 1079 0014 039B     		ldr	r3, [sp, #12]
 1080 0016 542B     		cmp	r3, #84
 1081 0018 1CD0     		beq	.L87
 363:FreeRTOS/queue.c ****                     ( void ) xSize;                             /* Keeps lint quiet when configASSE
 1082              		.loc 1 363 21 view .LVU341
 1083              	.LBB143:
 1084              	.LBI143:
 194:FreeRTOS/portable/portmacro.h ****     {
 1085              		.loc 2 194 34 view .LVU342
 1086              	.LBB144:
 196:FreeRTOS/portable/portmacro.h **** 
 1087              		.loc 2 196 9 view .LVU343
 1088              		.loc 2 198 9 view .LVU344
 1089              		.syntax unified
 1090              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 1091 001a 4FF05003 			mov r3, #80												
 1092 001e 83F31188 		msr basepri, r3											
 1093 0022 BFF36F8F 		isb														
 1094 0026 BFF34F8F 		dsb														
 1095              	
 1096              	@ 0 "" 2
 1097              	.LVL92:
 1098              		.thumb
 1099              		.syntax unified
 1100              	.L88:
 1101              		.loc 2 198 9 is_stmt 0 view .LVU345
 1102              	.LBE144:
 1103              	.LBE143:
 363:FreeRTOS/queue.c ****                     ( void ) xSize;                             /* Keeps lint quiet when configASSE
 1104              		.loc 1 363 21 is_stmt 1 discriminator 2 view .LVU346
 363:FreeRTOS/queue.c ****                     ( void ) xSize;                             /* Keeps lint quiet when configASSE
 1105              		.loc 1 363 21 discriminator 2 view .LVU347
 363:FreeRTOS/queue.c ****                     ( void ) xSize;                             /* Keeps lint quiet when configASSE
 1106              		.loc 1 363 21 discriminator 2 view .LVU348
 1107 002a FEE7     		b	.L88
 1108              	.LVL93:
 1109              	.L93:
 1110              	.LCFI14:
 1111              		.cfi_def_cfa_offset 0
 1112              		.cfi_restore 4
 1113              		.cfi_restore 14
 363:FreeRTOS/queue.c ****                     ( void ) xSize;                             /* Keeps lint quiet when configASSE
 1114              		.loc 1 363 21 is_stmt 0 discriminator 2 view .LVU349
 1115              	.LBE142:
 345:FreeRTOS/queue.c **** 
 1116              		.loc 1 345 9 is_stmt 1 view .LVU350
 1117              	.LBB145:
 1118              	.LBI145:
 194:FreeRTOS/portable/portmacro.h ****     {
 1119              		.loc 2 194 34 view .LVU351
 1120              	.LBB146:
 196:FreeRTOS/portable/portmacro.h **** 
 1121              		.loc 2 196 9 view .LVU352
 1122              		.loc 2 198 9 view .LVU353
 1123              		.syntax unified
 1124              	@ 198 "FreeRTOS/portable/portmacro.h" 1
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 83


 1125 002c 4FF05003 			mov r3, #80												
 1126 0030 83F31188 		msr basepri, r3											
 1127 0034 BFF36F8F 		isb														
 1128 0038 BFF34F8F 		dsb														
 1129              	
 1130              	@ 0 "" 2
 1131              	.LVL94:
 1132              		.thumb
 1133              		.syntax unified
 1134              	.L83:
 1135              		.loc 2 198 9 is_stmt 0 view .LVU354
 1136              	.LBE146:
 1137              	.LBE145:
 345:FreeRTOS/queue.c **** 
 1138              		.loc 1 345 9 is_stmt 1 discriminator 1 view .LVU355
 345:FreeRTOS/queue.c **** 
 1139              		.loc 1 345 9 discriminator 1 view .LVU356
 345:FreeRTOS/queue.c **** 
 1140              		.loc 1 345 9 discriminator 1 view .LVU357
 1141 003c FEE7     		b	.L83
 1142              	.LVL95:
 1143              	.L94:
 1144              	.LCFI15:
 1145              		.cfi_def_cfa_offset 24
 1146              		.cfi_offset 4, -8
 1147              		.cfi_offset 14, -4
 353:FreeRTOS/queue.c ****         {
 1148              		.loc 1 353 15 is_stmt 0 view .LVU358
 1149 003e 0029     		cmp	r1, #0
 1150 0040 E6D0     		beq	.L86
 1151              	.L84:
 386:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 1152              		.loc 1 386 13 is_stmt 1 view .LVU359
 386:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 1153              		.loc 1 386 13 view .LVU360
 1154              	.LBB147:
 1155              	.LBI147:
 194:FreeRTOS/portable/portmacro.h ****     {
 1156              		.loc 2 194 34 view .LVU361
 1157              	.LBB148:
 196:FreeRTOS/portable/portmacro.h **** 
 1158              		.loc 2 196 9 view .LVU362
 1159              		.loc 2 198 9 view .LVU363
 1160              		.syntax unified
 1161              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 1162 0042 4FF05003 			mov r3, #80												
 1163 0046 83F31188 		msr basepri, r3											
 1164 004a BFF36F8F 		isb														
 1165 004e BFF34F8F 		dsb														
 1166              	
 1167              	@ 0 "" 2
 1168              	.LVL96:
 1169              		.thumb
 1170              		.syntax unified
 1171              	.L89:
 1172              		.loc 2 198 9 is_stmt 0 view .LVU364
 1173              	.LBE148:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 84


 1174              	.LBE147:
 386:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 1175              		.loc 1 386 13 is_stmt 1 discriminator 3 view .LVU365
 386:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 1176              		.loc 1 386 13 discriminator 3 view .LVU366
 386:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 1177              		.loc 1 386 13 discriminator 3 view .LVU367
 1178 0052 FEE7     		b	.L89
 1179              	.L87:
 1180              	.LBB149:
 363:FreeRTOS/queue.c ****                     ( void ) xSize;                             /* Keeps lint quiet when configASSE
 1181              		.loc 1 363 63 discriminator 2 view .LVU368
 364:FreeRTOS/queue.c ****                 }
 1182              		.loc 1 364 21 discriminator 2 view .LVU369
 1183 0054 039B     		ldr	r3, [sp, #12]
 1184              	.LBE149:
 371:FreeRTOS/queue.c **** 
 1185              		.loc 1 371 13 discriminator 2 view .LVU370
 1186              	.LVL97:
 378:FreeRTOS/queue.c ****                 }
 1187              		.loc 1 378 21 discriminator 2 view .LVU371
 378:FreeRTOS/queue.c ****                 }
 1188              		.loc 1 378 55 is_stmt 0 discriminator 2 view .LVU372
 1189 0056 0123     		movs	r3, #1
 1190 0058 84F84630 		strb	r3, [r4, #70]
 382:FreeRTOS/queue.c ****         }
 1191              		.loc 1 382 13 is_stmt 1 discriminator 2 view .LVU373
 1192 005c 0094     		str	r4, [sp]
 1193 005e 9DF81830 		ldrb	r3, [sp, #24]	@ zero_extendqisi2
 1194 0062 FFF7FEFF 		bl	prvInitialiseNewQueue
 1195              	.LVL98:
 386:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 1196              		.loc 1 386 39 discriminator 2 view .LVU374
 387:FreeRTOS/queue.c ****         }
 1197              		.loc 1 387 37 discriminator 2 view .LVU375
 390:FreeRTOS/queue.c ****     }
 1198              		.loc 1 390 9 discriminator 2 view .LVU376
 391:FreeRTOS/queue.c **** 
 1199              		.loc 1 391 5 is_stmt 0 discriminator 2 view .LVU377
 1200 0066 2046     		mov	r0, r4
 1201 0068 04B0     		add	sp, sp, #16
 1202              	.LCFI16:
 1203              		.cfi_def_cfa_offset 8
 1204              		@ sp needed
 1205 006a 10BD     		pop	{r4, pc}
 391:FreeRTOS/queue.c **** 
 1206              		.loc 1 391 5 discriminator 2 view .LVU378
 1207              		.cfi_endproc
 1208              	.LFE6:
 1210              		.section	.text.xQueueGenericCreate,"ax",%progbits
 1211              		.align	1
 1212              		.global	xQueueGenericCreate
 1213              		.syntax unified
 1214              		.thumb
 1215              		.thumb_func
 1216              		.fpu fpv4-sp-d16
 1218              	xQueueGenericCreate:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 85


 1219              	.LVL99:
 1220              	.LFB7:
 401:FreeRTOS/queue.c ****         Queue_t * pxNewQueue = NULL;
 1221              		.loc 1 401 5 is_stmt 1 view -0
 1222              		.cfi_startproc
 1223              		@ args = 0, pretend = 0, frame = 0
 1224              		@ frame_needed = 0, uses_anonymous_args = 0
 401:FreeRTOS/queue.c ****         Queue_t * pxNewQueue = NULL;
 1225              		.loc 1 401 5 is_stmt 0 view .LVU380
 1226 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1227              	.LCFI17:
 1228              		.cfi_def_cfa_offset 20
 1229              		.cfi_offset 4, -20
 1230              		.cfi_offset 5, -16
 1231              		.cfi_offset 6, -12
 1232              		.cfi_offset 7, -8
 1233              		.cfi_offset 14, -4
 1234 0002 83B0     		sub	sp, sp, #12
 1235              	.LCFI18:
 1236              		.cfi_def_cfa_offset 32
 402:FreeRTOS/queue.c ****         size_t xQueueSizeInBytes;
 1237              		.loc 1 402 9 is_stmt 1 view .LVU381
 1238              	.LVL100:
 403:FreeRTOS/queue.c ****         uint8_t * pucQueueStorage;
 1239              		.loc 1 403 9 view .LVU382
 404:FreeRTOS/queue.c **** 
 1240              		.loc 1 404 9 view .LVU383
 406:FreeRTOS/queue.c ****             /* Check for multiplication overflow. */
 1241              		.loc 1 406 9 view .LVU384
 406:FreeRTOS/queue.c ****             /* Check for multiplication overflow. */
 1242              		.loc 1 406 11 is_stmt 0 view .LVU385
 1243 0004 60B1     		cbz	r0, .L96
 1244 0006 0C46     		mov	r4, r1
 1245 0008 1746     		mov	r7, r2
 1246 000a 0646     		mov	r6, r0
 408:FreeRTOS/queue.c ****             /* Check for addition overflow. */
 1247              		.loc 1 408 44 discriminator 1 view .LVU386
 1248 000c 0023     		movs	r3, #0
 1249 000e A0FB0412 		umull	r1, r2, r0, r4
 1250              	.LVL101:
 408:FreeRTOS/queue.c ****             /* Check for addition overflow. */
 1251              		.loc 1 408 44 discriminator 1 view .LVU387
 1252 0012 72B9     		cbnz	r2, .L102
 1253              	.L97:
 406:FreeRTOS/queue.c ****             /* Check for multiplication overflow. */
 1254              		.loc 1 406 51 discriminator 1 view .LVU388
 1255 0014 23B9     		cbnz	r3, .L96
 410:FreeRTOS/queue.c ****         {
 1256              		.loc 1 410 67 view .LVU389
 1257 0016 04FB06F0 		mul	r0, r4, r6
 1258              	.LVL102:
 408:FreeRTOS/queue.c ****             /* Check for addition overflow. */
 1259              		.loc 1 408 60 view .LVU390
 1260 001a 10F1550F 		cmn	r0, #85
 1261 001e 0AD9     		bls	.L103
 1262              	.LVL103:
 1263              	.L96:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 86


 454:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 1264              		.loc 1 454 13 is_stmt 1 view .LVU391
 454:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 1265              		.loc 1 454 13 view .LVU392
 1266              	.LBB150:
 1267              	.LBI150:
 194:FreeRTOS/portable/portmacro.h ****     {
 1268              		.loc 2 194 34 view .LVU393
 1269              	.LBB151:
 196:FreeRTOS/portable/portmacro.h **** 
 1270              		.loc 2 196 9 view .LVU394
 1271              		.loc 2 198 9 view .LVU395
 1272              		.syntax unified
 1273              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 1274 0020 4FF05003 			mov r3, #80												
 1275 0024 83F31188 		msr basepri, r3											
 1276 0028 BFF36F8F 		isb														
 1277 002c BFF34F8F 		dsb														
 1278              	
 1279              	@ 0 "" 2
 1280              	.LVL104:
 1281              		.thumb
 1282              		.syntax unified
 1283              	.L100:
 1284              		.loc 2 198 9 is_stmt 0 view .LVU396
 1285              	.LBE151:
 1286              	.LBE150:
 454:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 1287              		.loc 1 454 13 is_stmt 1 discriminator 1 view .LVU397
 454:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 1288              		.loc 1 454 13 discriminator 1 view .LVU398
 454:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 1289              		.loc 1 454 13 discriminator 1 view .LVU399
 1290 0030 FEE7     		b	.L100
 1291              	.LVL105:
 1292              	.L102:
 408:FreeRTOS/queue.c ****             /* Check for addition overflow. */
 1293              		.loc 1 408 44 is_stmt 0 discriminator 1 view .LVU400
 1294 0032 0123     		movs	r3, #1
 1295 0034 EEE7     		b	.L97
 1296              	.LVL106:
 1297              	.L103:
 415:FreeRTOS/queue.c **** 
 1298              		.loc 1 415 13 is_stmt 1 view .LVU401
 426:FreeRTOS/queue.c **** 
 1299              		.loc 1 426 13 view .LVU402
 426:FreeRTOS/queue.c **** 
 1300              		.loc 1 426 40 is_stmt 0 view .LVU403
 1301 0036 5430     		adds	r0, r0, #84
 1302              	.LVL107:
 426:FreeRTOS/queue.c **** 
 1303              		.loc 1 426 40 view .LVU404
 1304 0038 FFF7FEFF 		bl	pvPortMalloc
 1305              	.LVL108:
 428:FreeRTOS/queue.c ****             {
 1306              		.loc 1 428 13 is_stmt 1 view .LVU405
 428:FreeRTOS/queue.c ****             {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 87


 1307              		.loc 1 428 15 is_stmt 0 view .LVU406
 1308 003c 0546     		mov	r5, r0
 1309 003e 50B1     		cbz	r0, .L95
 432:FreeRTOS/queue.c ****                 pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on c
 1310              		.loc 1 432 17 is_stmt 1 view .LVU407
 1311              	.LVL109:
 433:FreeRTOS/queue.c **** 
 1312              		.loc 1 433 17 view .LVU408
 440:FreeRTOS/queue.c ****                     }
 1313              		.loc 1 440 25 view .LVU409
 440:FreeRTOS/queue.c ****                     }
 1314              		.loc 1 440 59 is_stmt 0 view .LVU410
 1315 0040 0023     		movs	r3, #0
 1316 0042 80F84630 		strb	r3, [r0, #70]
 444:FreeRTOS/queue.c ****             }
 1317              		.loc 1 444 17 is_stmt 1 view .LVU411
 1318 0046 0090     		str	r0, [sp]
 1319 0048 3B46     		mov	r3, r7
 1320 004a 00F15402 		add	r2, r0, #84
 1321              	.LVL110:
 444:FreeRTOS/queue.c ****             }
 1322              		.loc 1 444 17 is_stmt 0 view .LVU412
 1323 004e 2146     		mov	r1, r4
 1324 0050 3046     		mov	r0, r6
 1325              	.LVL111:
 444:FreeRTOS/queue.c ****             }
 1326              		.loc 1 444 17 view .LVU413
 1327 0052 FFF7FEFF 		bl	prvInitialiseNewQueue
 1328              	.LVL112:
 1329              	.L95:
 459:FreeRTOS/queue.c **** 
 1330              		.loc 1 459 5 view .LVU414
 1331 0056 2846     		mov	r0, r5
 1332 0058 03B0     		add	sp, sp, #12
 1333              	.LCFI19:
 1334              		.cfi_def_cfa_offset 20
 1335              		@ sp needed
 1336 005a F0BD     		pop	{r4, r5, r6, r7, pc}
 459:FreeRTOS/queue.c **** 
 1337              		.loc 1 459 5 view .LVU415
 1338              		.cfi_endproc
 1339              	.LFE7:
 1341              		.section	.text.xQueueGetMutexHolder,"ax",%progbits
 1342              		.align	1
 1343              		.global	xQueueGetMutexHolder
 1344              		.syntax unified
 1345              		.thumb
 1346              		.thumb_func
 1347              		.fpu fpv4-sp-d16
 1349              	xQueueGetMutexHolder:
 1350              	.LVL113:
 1351              	.LFB12:
 580:FreeRTOS/queue.c ****         TaskHandle_t pxReturn;
 1352              		.loc 1 580 5 is_stmt 1 view -0
 1353              		.cfi_startproc
 1354              		@ args = 0, pretend = 0, frame = 0
 1355              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 88


 581:FreeRTOS/queue.c ****         Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 1356              		.loc 1 581 9 view .LVU417
 582:FreeRTOS/queue.c **** 
 1357              		.loc 1 582 9 view .LVU418
 584:FreeRTOS/queue.c **** 
 1358              		.loc 1 584 9 view .LVU419
 1359 0000 50B1     		cbz	r0, .L111
 580:FreeRTOS/queue.c ****         TaskHandle_t pxReturn;
 1360              		.loc 1 580 5 is_stmt 0 discriminator 2 view .LVU420
 1361 0002 10B5     		push	{r4, lr}
 1362              	.LCFI20:
 1363              		.cfi_def_cfa_offset 8
 1364              		.cfi_offset 4, -8
 1365              		.cfi_offset 14, -4
 1366 0004 0446     		mov	r4, r0
 584:FreeRTOS/queue.c **** 
 1367              		.loc 1 584 35 is_stmt 1 discriminator 2 view .LVU421
 591:FreeRTOS/queue.c ****         {
 1368              		.loc 1 591 9 discriminator 2 view .LVU422
 1369 0006 FFF7FEFF 		bl	vPortEnterCritical
 1370              	.LVL114:
 593:FreeRTOS/queue.c ****             {
 1371              		.loc 1 593 13 discriminator 2 view .LVU423
 593:FreeRTOS/queue.c ****             {
 1372              		.loc 1 593 28 is_stmt 0 discriminator 2 view .LVU424
 1373 000a 2368     		ldr	r3, [r4]
 593:FreeRTOS/queue.c ****             {
 1374              		.loc 1 593 15 discriminator 2 view .LVU425
 1375 000c 6BB9     		cbnz	r3, .L108
 595:FreeRTOS/queue.c ****             }
 1376              		.loc 1 595 17 is_stmt 1 view .LVU426
 595:FreeRTOS/queue.c ****             }
 1377              		.loc 1 595 26 is_stmt 0 view .LVU427
 1378 000e A468     		ldr	r4, [r4, #8]
 1379              	.LVL115:
 1380              	.L107:
 602:FreeRTOS/queue.c **** 
 1381              		.loc 1 602 9 is_stmt 1 view .LVU428
 1382 0010 FFF7FEFF 		bl	vPortExitCritical
 1383              	.LVL116:
 604:FreeRTOS/queue.c ****     } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 1384              		.loc 1 604 9 view .LVU429
 605:FreeRTOS/queue.c **** 
 1385              		.loc 1 605 5 is_stmt 0 view .LVU430
 1386 0014 2046     		mov	r0, r4
 1387 0016 10BD     		pop	{r4, pc}
 1388              	.LVL117:
 1389              	.L111:
 1390              	.LCFI21:
 1391              		.cfi_def_cfa_offset 0
 1392              		.cfi_restore 4
 1393              		.cfi_restore 14
 584:FreeRTOS/queue.c **** 
 1394              		.loc 1 584 9 is_stmt 1 view .LVU431
 1395              	.LBB152:
 1396              	.LBI152:
 194:FreeRTOS/portable/portmacro.h ****     {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 89


 1397              		.loc 2 194 34 view .LVU432
 1398              	.LBB153:
 196:FreeRTOS/portable/portmacro.h **** 
 1399              		.loc 2 196 9 view .LVU433
 1400              		.loc 2 198 9 view .LVU434
 1401              		.syntax unified
 1402              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 1403 0018 4FF05003 			mov r3, #80												
 1404 001c 83F31188 		msr basepri, r3											
 1405 0020 BFF36F8F 		isb														
 1406 0024 BFF34F8F 		dsb														
 1407              	
 1408              	@ 0 "" 2
 1409              	.LVL118:
 1410              		.thumb
 1411              		.syntax unified
 1412              	.L106:
 1413              		.loc 2 198 9 is_stmt 0 view .LVU435
 1414              	.LBE153:
 1415              	.LBE152:
 584:FreeRTOS/queue.c **** 
 1416              		.loc 1 584 9 is_stmt 1 discriminator 1 view .LVU436
 584:FreeRTOS/queue.c **** 
 1417              		.loc 1 584 9 discriminator 1 view .LVU437
 584:FreeRTOS/queue.c **** 
 1418              		.loc 1 584 9 discriminator 1 view .LVU438
 1419 0028 FEE7     		b	.L106
 1420              	.LVL119:
 1421              	.L108:
 1422              	.LCFI22:
 1423              		.cfi_def_cfa_offset 8
 1424              		.cfi_offset 4, -8
 1425              		.cfi_offset 14, -4
 599:FreeRTOS/queue.c ****             }
 1426              		.loc 1 599 26 is_stmt 0 view .LVU439
 1427 002a 0024     		movs	r4, #0
 1428              	.LVL120:
 599:FreeRTOS/queue.c ****             }
 1429              		.loc 1 599 26 view .LVU440
 1430 002c F0E7     		b	.L107
 1431              		.cfi_endproc
 1432              	.LFE12:
 1434              		.section	.text.xQueueGetMutexHolderFromISR,"ax",%progbits
 1435              		.align	1
 1436              		.global	xQueueGetMutexHolderFromISR
 1437              		.syntax unified
 1438              		.thumb
 1439              		.thumb_func
 1440              		.fpu fpv4-sp-d16
 1442              	xQueueGetMutexHolderFromISR:
 1443              	.LVL121:
 1444              	.LFB13:
 613:FreeRTOS/queue.c ****         TaskHandle_t pxReturn;
 1445              		.loc 1 613 5 is_stmt 1 view -0
 1446              		.cfi_startproc
 1447              		@ args = 0, pretend = 0, frame = 0
 1448              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 90


 1449              		@ link register save eliminated.
 614:FreeRTOS/queue.c **** 
 1450              		.loc 1 614 9 view .LVU442
 616:FreeRTOS/queue.c **** 
 1451              		.loc 1 616 9 view .LVU443
 1452 0000 18B1     		cbz	r0, .L117
 616:FreeRTOS/queue.c **** 
 1453              		.loc 1 616 35 discriminator 2 view .LVU444
 621:FreeRTOS/queue.c ****         {
 1454              		.loc 1 621 9 discriminator 2 view .LVU445
 621:FreeRTOS/queue.c ****         {
 1455              		.loc 1 621 41 is_stmt 0 discriminator 2 view .LVU446
 1456 0002 0268     		ldr	r2, [r0]
 621:FreeRTOS/queue.c ****         {
 1457              		.loc 1 621 11 discriminator 2 view .LVU447
 1458 0004 52B9     		cbnz	r2, .L116
 623:FreeRTOS/queue.c ****         }
 1459              		.loc 1 623 13 is_stmt 1 view .LVU448
 623:FreeRTOS/queue.c ****         }
 1460              		.loc 1 623 22 is_stmt 0 view .LVU449
 1461 0006 8068     		ldr	r0, [r0, #8]
 1462              	.LVL122:
 623:FreeRTOS/queue.c ****         }
 1463              		.loc 1 623 22 view .LVU450
 1464 0008 7047     		bx	lr
 1465              	.LVL123:
 1466              	.L117:
 616:FreeRTOS/queue.c **** 
 1467              		.loc 1 616 9 is_stmt 1 view .LVU451
 1468              	.LBB154:
 1469              	.LBI154:
 194:FreeRTOS/portable/portmacro.h ****     {
 1470              		.loc 2 194 34 view .LVU452
 1471              	.LBB155:
 196:FreeRTOS/portable/portmacro.h **** 
 1472              		.loc 2 196 9 view .LVU453
 1473              		.loc 2 198 9 view .LVU454
 1474              		.syntax unified
 1475              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 1476 000a 4FF05003 			mov r3, #80												
 1477 000e 83F31188 		msr basepri, r3											
 1478 0012 BFF36F8F 		isb														
 1479 0016 BFF34F8F 		dsb														
 1480              	
 1481              	@ 0 "" 2
 1482              	.LVL124:
 1483              		.thumb
 1484              		.syntax unified
 1485              	.L114:
 1486              		.loc 2 198 9 is_stmt 0 view .LVU455
 1487              	.LBE155:
 1488              	.LBE154:
 616:FreeRTOS/queue.c **** 
 1489              		.loc 1 616 9 is_stmt 1 discriminator 1 view .LVU456
 616:FreeRTOS/queue.c **** 
 1490              		.loc 1 616 9 discriminator 1 view .LVU457
 616:FreeRTOS/queue.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 91


 1491              		.loc 1 616 9 discriminator 1 view .LVU458
 1492 001a FEE7     		b	.L114
 1493              	.L116:
 627:FreeRTOS/queue.c ****         }
 1494              		.loc 1 627 22 is_stmt 0 view .LVU459
 1495 001c 0020     		movs	r0, #0
 1496              	.LVL125:
 630:FreeRTOS/queue.c ****     } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 1497              		.loc 1 630 9 is_stmt 1 view .LVU460
 631:FreeRTOS/queue.c **** 
 1498              		.loc 1 631 5 is_stmt 0 view .LVU461
 1499 001e 7047     		bx	lr
 1500              		.cfi_endproc
 1501              	.LFE13:
 1503              		.section	.text.xQueueCreateCountingSemaphoreStatic,"ax",%progbits
 1504              		.align	1
 1505              		.global	xQueueCreateCountingSemaphoreStatic
 1506              		.syntax unified
 1507              		.thumb
 1508              		.thumb_func
 1509              		.fpu fpv4-sp-d16
 1511              	xQueueCreateCountingSemaphoreStatic:
 1512              	.LVL126:
 1513              	.LFB16:
 739:FreeRTOS/queue.c ****         QueueHandle_t xHandle = NULL;
 1514              		.loc 1 739 5 is_stmt 1 view -0
 1515              		.cfi_startproc
 1516              		@ args = 0, pretend = 0, frame = 0
 1517              		@ frame_needed = 0, uses_anonymous_args = 0
 739:FreeRTOS/queue.c ****         QueueHandle_t xHandle = NULL;
 1518              		.loc 1 739 5 is_stmt 0 view .LVU463
 1519 0000 30B5     		push	{r4, r5, lr}
 1520              	.LCFI23:
 1521              		.cfi_def_cfa_offset 12
 1522              		.cfi_offset 4, -12
 1523              		.cfi_offset 5, -8
 1524              		.cfi_offset 14, -4
 1525 0002 83B0     		sub	sp, sp, #12
 1526              	.LCFI24:
 1527              		.cfi_def_cfa_offset 24
 740:FreeRTOS/queue.c **** 
 1528              		.loc 1 740 9 is_stmt 1 view .LVU464
 1529              	.LVL127:
 742:FreeRTOS/queue.c ****             ( uxInitialCount <= uxMaxCount ) )
 1530              		.loc 1 742 9 view .LVU465
 742:FreeRTOS/queue.c ****             ( uxInitialCount <= uxMaxCount ) )
 1531              		.loc 1 742 11 is_stmt 0 view .LVU466
 1532 0004 18B1     		cbz	r0, .L119
 1533 0006 0C46     		mov	r4, r1
 1534 0008 1346     		mov	r3, r2
 742:FreeRTOS/queue.c ****             ( uxInitialCount <= uxMaxCount ) )
 1535              		.loc 1 742 33 discriminator 1 view .LVU467
 1536 000a 8842     		cmp	r0, r1
 1537 000c 08D2     		bcs	.L123
 1538              	.L119:
 760:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 1539              		.loc 1 760 13 is_stmt 1 view .LVU468
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 92


 760:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 1540              		.loc 1 760 13 view .LVU469
 1541              	.LBB156:
 1542              	.LBI156:
 194:FreeRTOS/portable/portmacro.h ****     {
 1543              		.loc 2 194 34 view .LVU470
 1544              	.LBB157:
 196:FreeRTOS/portable/portmacro.h **** 
 1545              		.loc 2 196 9 view .LVU471
 1546              		.loc 2 198 9 view .LVU472
 1547              		.syntax unified
 1548              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 1549 000e 4FF05003 			mov r3, #80												
 1550 0012 83F31188 		msr basepri, r3											
 1551 0016 BFF36F8F 		isb														
 1552 001a BFF34F8F 		dsb														
 1553              	
 1554              	@ 0 "" 2
 1555              	.LVL128:
 1556              		.thumb
 1557              		.syntax unified
 1558              	.L121:
 1559              		.loc 2 198 9 is_stmt 0 view .LVU473
 1560              	.LBE157:
 1561              	.LBE156:
 760:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 1562              		.loc 1 760 13 is_stmt 1 discriminator 1 view .LVU474
 760:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 1563              		.loc 1 760 13 discriminator 1 view .LVU475
 760:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 1564              		.loc 1 760 13 discriminator 1 view .LVU476
 1565 001e FEE7     		b	.L121
 1566              	.L123:
 745:FreeRTOS/queue.c **** 
 1567              		.loc 1 745 13 view .LVU477
 745:FreeRTOS/queue.c **** 
 1568              		.loc 1 745 23 is_stmt 0 view .LVU478
 1569 0020 0222     		movs	r2, #2
 1570              	.LVL129:
 745:FreeRTOS/queue.c **** 
 1571              		.loc 1 745 23 view .LVU479
 1572 0022 0092     		str	r2, [sp]
 1573 0024 0022     		movs	r2, #0
 1574 0026 1146     		mov	r1, r2
 1575              	.LVL130:
 745:FreeRTOS/queue.c **** 
 1576              		.loc 1 745 23 view .LVU480
 1577 0028 FFF7FEFF 		bl	xQueueGenericCreateStatic
 1578              	.LVL131:
 747:FreeRTOS/queue.c ****             {
 1579              		.loc 1 747 13 is_stmt 1 view .LVU481
 747:FreeRTOS/queue.c ****             {
 1580              		.loc 1 747 15 is_stmt 0 view .LVU482
 1581 002c 0346     		mov	r3, r0
 1582 002e 00B1     		cbz	r0, .L118
 749:FreeRTOS/queue.c **** 
 1583              		.loc 1 749 17 is_stmt 1 view .LVU483
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 93


 749:FreeRTOS/queue.c **** 
 1584              		.loc 1 749 62 is_stmt 0 view .LVU484
 1585 0030 8463     		str	r4, [r0, #56]
 751:FreeRTOS/queue.c ****             }
 1586              		.loc 1 751 49 is_stmt 1 view .LVU485
 1587              	.L118:
 765:FreeRTOS/queue.c **** 
 1588              		.loc 1 765 5 is_stmt 0 view .LVU486
 1589 0032 1846     		mov	r0, r3
 1590              	.LVL132:
 765:FreeRTOS/queue.c **** 
 1591              		.loc 1 765 5 view .LVU487
 1592 0034 03B0     		add	sp, sp, #12
 1593              	.LCFI25:
 1594              		.cfi_def_cfa_offset 12
 1595              		@ sp needed
 1596 0036 30BD     		pop	{r4, r5, pc}
 765:FreeRTOS/queue.c **** 
 1597              		.loc 1 765 5 view .LVU488
 1598              		.cfi_endproc
 1599              	.LFE16:
 1601              		.section	.text.xQueueCreateCountingSemaphore,"ax",%progbits
 1602              		.align	1
 1603              		.global	xQueueCreateCountingSemaphore
 1604              		.syntax unified
 1605              		.thumb
 1606              		.thumb_func
 1607              		.fpu fpv4-sp-d16
 1609              	xQueueCreateCountingSemaphore:
 1610              	.LVL133:
 1611              	.LFB17:
 774:FreeRTOS/queue.c ****         QueueHandle_t xHandle = NULL;
 1612              		.loc 1 774 5 is_stmt 1 view -0
 1613              		.cfi_startproc
 1614              		@ args = 0, pretend = 0, frame = 0
 1615              		@ frame_needed = 0, uses_anonymous_args = 0
 774:FreeRTOS/queue.c ****         QueueHandle_t xHandle = NULL;
 1616              		.loc 1 774 5 is_stmt 0 view .LVU490
 1617 0000 10B5     		push	{r4, lr}
 1618              	.LCFI26:
 1619              		.cfi_def_cfa_offset 8
 1620              		.cfi_offset 4, -8
 1621              		.cfi_offset 14, -4
 775:FreeRTOS/queue.c **** 
 1622              		.loc 1 775 9 is_stmt 1 view .LVU491
 1623              	.LVL134:
 777:FreeRTOS/queue.c ****             ( uxInitialCount <= uxMaxCount ) )
 1624              		.loc 1 777 9 view .LVU492
 777:FreeRTOS/queue.c ****             ( uxInitialCount <= uxMaxCount ) )
 1625              		.loc 1 777 11 is_stmt 0 view .LVU493
 1626 0002 10B1     		cbz	r0, .L125
 1627 0004 0C46     		mov	r4, r1
 777:FreeRTOS/queue.c ****             ( uxInitialCount <= uxMaxCount ) )
 1628              		.loc 1 777 33 discriminator 1 view .LVU494
 1629 0006 8842     		cmp	r0, r1
 1630 0008 08D2     		bcs	.L129
 1631              	.L125:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 94


 795:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 1632              		.loc 1 795 13 is_stmt 1 view .LVU495
 795:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 1633              		.loc 1 795 13 view .LVU496
 1634              	.LBB158:
 1635              	.LBI158:
 194:FreeRTOS/portable/portmacro.h ****     {
 1636              		.loc 2 194 34 view .LVU497
 1637              	.LBB159:
 196:FreeRTOS/portable/portmacro.h **** 
 1638              		.loc 2 196 9 view .LVU498
 1639              		.loc 2 198 9 view .LVU499
 1640              		.syntax unified
 1641              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 1642 000a 4FF05003 			mov r3, #80												
 1643 000e 83F31188 		msr basepri, r3											
 1644 0012 BFF36F8F 		isb														
 1645 0016 BFF34F8F 		dsb														
 1646              	
 1647              	@ 0 "" 2
 1648              	.LVL135:
 1649              		.thumb
 1650              		.syntax unified
 1651              	.L127:
 1652              		.loc 2 198 9 is_stmt 0 view .LVU500
 1653              	.LBE159:
 1654              	.LBE158:
 795:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 1655              		.loc 1 795 13 is_stmt 1 discriminator 1 view .LVU501
 795:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 1656              		.loc 1 795 13 discriminator 1 view .LVU502
 795:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 1657              		.loc 1 795 13 discriminator 1 view .LVU503
 1658 001a FEE7     		b	.L127
 1659              	.L129:
 780:FreeRTOS/queue.c **** 
 1660              		.loc 1 780 13 view .LVU504
 780:FreeRTOS/queue.c **** 
 1661              		.loc 1 780 23 is_stmt 0 view .LVU505
 1662 001c 0222     		movs	r2, #2
 1663 001e 0021     		movs	r1, #0
 1664              	.LVL136:
 780:FreeRTOS/queue.c **** 
 1665              		.loc 1 780 23 view .LVU506
 1666 0020 FFF7FEFF 		bl	xQueueGenericCreate
 1667              	.LVL137:
 782:FreeRTOS/queue.c ****             {
 1668              		.loc 1 782 13 is_stmt 1 view .LVU507
 782:FreeRTOS/queue.c ****             {
 1669              		.loc 1 782 15 is_stmt 0 view .LVU508
 1670 0024 0346     		mov	r3, r0
 1671 0026 00B1     		cbz	r0, .L124
 784:FreeRTOS/queue.c **** 
 1672              		.loc 1 784 17 is_stmt 1 view .LVU509
 784:FreeRTOS/queue.c **** 
 1673              		.loc 1 784 62 is_stmt 0 view .LVU510
 1674 0028 8463     		str	r4, [r0, #56]
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 95


 786:FreeRTOS/queue.c ****             }
 1675              		.loc 1 786 49 is_stmt 1 view .LVU511
 1676              	.L124:
 800:FreeRTOS/queue.c **** 
 1677              		.loc 1 800 5 is_stmt 0 view .LVU512
 1678 002a 1846     		mov	r0, r3
 1679              	.LVL138:
 800:FreeRTOS/queue.c **** 
 1680              		.loc 1 800 5 view .LVU513
 1681 002c 10BD     		pop	{r4, pc}
 800:FreeRTOS/queue.c **** 
 1682              		.loc 1 800 5 view .LVU514
 1683              		.cfi_endproc
 1684              	.LFE17:
 1686              		.section	.text.xQueueGenericSend,"ax",%progbits
 1687              		.align	1
 1688              		.global	xQueueGenericSend
 1689              		.syntax unified
 1690              		.thumb
 1691              		.thumb_func
 1692              		.fpu fpv4-sp-d16
 1694              	xQueueGenericSend:
 1695              	.LVL139:
 1696              	.LFB18:
 809:FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 1697              		.loc 1 809 1 is_stmt 1 view -0
 1698              		.cfi_startproc
 1699              		@ args = 0, pretend = 0, frame = 16
 1700              		@ frame_needed = 0, uses_anonymous_args = 0
 809:FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 1701              		.loc 1 809 1 is_stmt 0 view .LVU516
 1702 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1703              	.LCFI27:
 1704              		.cfi_def_cfa_offset 20
 1705              		.cfi_offset 4, -20
 1706              		.cfi_offset 5, -16
 1707              		.cfi_offset 6, -12
 1708              		.cfi_offset 7, -8
 1709              		.cfi_offset 14, -4
 1710 0002 85B0     		sub	sp, sp, #20
 1711              	.LCFI28:
 1712              		.cfi_def_cfa_offset 40
 1713 0004 0192     		str	r2, [sp, #4]
 810:FreeRTOS/queue.c ****     TimeOut_t xTimeOut;
 1714              		.loc 1 810 5 is_stmt 1 view .LVU517
 1715              	.LVL140:
 811:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 1716              		.loc 1 811 5 view .LVU518
 812:FreeRTOS/queue.c **** 
 1717              		.loc 1 812 5 view .LVU519
 814:FreeRTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 1718              		.loc 1 814 5 view .LVU520
 1719 0006 88B1     		cbz	r0, .L156
 1720 0008 0E46     		mov	r6, r1
 1721 000a 1D46     		mov	r5, r3
 1722 000c 0446     		mov	r4, r0
 814:FreeRTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 96


 1723              		.loc 1 814 28 discriminator 2 view .LVU521
 815:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1724              		.loc 1 815 5 discriminator 2 view .LVU522
 1725 000e B1B1     		cbz	r1, .L157
 1726              	.LVL141:
 1727              	.L133:
 815:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1728              		.loc 1 815 100 discriminator 8 view .LVU523
 816:FreeRTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1729              		.loc 1 816 5 discriminator 8 view .LVU524
 1730 0010 022D     		cmp	r5, #2
 1731 0012 20D1     		bne	.L135
 816:FreeRTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1732              		.loc 1 816 5 is_stmt 0 discriminator 2 view .LVU525
 1733 0014 E36B     		ldr	r3, [r4, #60]
 1734 0016 012B     		cmp	r3, #1
 1735 0018 1DD0     		beq	.L135
 816:FreeRTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1736              		.loc 1 816 5 is_stmt 1 view .LVU526
 1737              	.LBB160:
 1738              	.LBI160:
 194:FreeRTOS/portable/portmacro.h ****     {
 1739              		.loc 2 194 34 view .LVU527
 1740              	.LBB161:
 196:FreeRTOS/portable/portmacro.h **** 
 1741              		.loc 2 196 9 view .LVU528
 1742              		.loc 2 198 9 view .LVU529
 1743              		.syntax unified
 1744              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 1745 001a 4FF05003 			mov r3, #80												
 1746 001e 83F31188 		msr basepri, r3											
 1747 0022 BFF36F8F 		isb														
 1748 0026 BFF34F8F 		dsb														
 1749              	
 1750              	@ 0 "" 2
 1751              	.LVL142:
 1752              		.thumb
 1753              		.syntax unified
 1754              	.L136:
 1755              		.loc 2 198 9 is_stmt 0 view .LVU530
 1756              	.LBE161:
 1757              	.LBE160:
 816:FreeRTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1758              		.loc 1 816 5 is_stmt 1 discriminator 3 view .LVU531
 816:FreeRTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1759              		.loc 1 816 5 discriminator 3 view .LVU532
 816:FreeRTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1760              		.loc 1 816 5 discriminator 3 view .LVU533
 1761 002a FEE7     		b	.L136
 1762              	.LVL143:
 1763              	.L156:
 814:FreeRTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 1764              		.loc 1 814 5 view .LVU534
 1765              	.LBB162:
 1766              	.LBI162:
 194:FreeRTOS/portable/portmacro.h ****     {
 1767              		.loc 2 194 34 view .LVU535
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 97


 1768              	.LBB163:
 196:FreeRTOS/portable/portmacro.h **** 
 1769              		.loc 2 196 9 view .LVU536
 1770              		.loc 2 198 9 view .LVU537
 1771              		.syntax unified
 1772              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 1773 002c 4FF05003 			mov r3, #80												
 1774 0030 83F31188 		msr basepri, r3											
 1775 0034 BFF36F8F 		isb														
 1776 0038 BFF34F8F 		dsb														
 1777              	
 1778              	@ 0 "" 2
 1779              	.LVL144:
 1780              		.thumb
 1781              		.syntax unified
 1782              	.L132:
 1783              		.loc 2 198 9 is_stmt 0 view .LVU538
 1784              	.LBE163:
 1785              	.LBE162:
 814:FreeRTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 1786              		.loc 1 814 5 is_stmt 1 discriminator 1 view .LVU539
 814:FreeRTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 1787              		.loc 1 814 5 discriminator 1 view .LVU540
 814:FreeRTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 1788              		.loc 1 814 5 discriminator 1 view .LVU541
 1789 003c FEE7     		b	.L132
 1790              	.LVL145:
 1791              	.L157:
 815:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1792              		.loc 1 815 5 is_stmt 0 discriminator 2 view .LVU542
 1793 003e 036C     		ldr	r3, [r0, #64]
 1794              	.LVL146:
 815:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1795              		.loc 1 815 5 discriminator 2 view .LVU543
 1796 0040 002B     		cmp	r3, #0
 1797 0042 E5D0     		beq	.L133
 815:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1798              		.loc 1 815 5 is_stmt 1 view .LVU544
 1799              	.LBB164:
 1800              	.LBI164:
 194:FreeRTOS/portable/portmacro.h ****     {
 1801              		.loc 2 194 34 view .LVU545
 1802              	.LBB165:
 196:FreeRTOS/portable/portmacro.h **** 
 1803              		.loc 2 196 9 view .LVU546
 1804              		.loc 2 198 9 view .LVU547
 1805              		.syntax unified
 1806              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 1807 0044 4FF05003 			mov r3, #80												
 1808 0048 83F31188 		msr basepri, r3											
 1809 004c BFF36F8F 		isb														
 1810 0050 BFF34F8F 		dsb														
 1811              	
 1812              	@ 0 "" 2
 1813              	.LVL147:
 1814              		.thumb
 1815              		.syntax unified
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 98


 1816              	.L134:
 1817              		.loc 2 198 9 is_stmt 0 view .LVU548
 1818              	.LBE165:
 1819              	.LBE164:
 815:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1820              		.loc 1 815 5 is_stmt 1 discriminator 2 view .LVU549
 815:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1821              		.loc 1 815 5 discriminator 2 view .LVU550
 815:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1822              		.loc 1 815 5 discriminator 2 view .LVU551
 1823 0054 FEE7     		b	.L134
 1824              	.L135:
 816:FreeRTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1825              		.loc 1 816 91 discriminator 8 view .LVU552
 819:FreeRTOS/queue.c ****         }
 1826              		.loc 1 819 13 discriminator 8 view .LVU553
 1827 0056 FFF7FEFF 		bl	xTaskGetSchedulerState
 1828              	.LVL148:
 819:FreeRTOS/queue.c ****         }
 1829              		.loc 1 819 13 is_stmt 0 discriminator 8 view .LVU554
 1830 005a 0746     		mov	r7, r0
 1831 005c 58B9     		cbnz	r0, .L154
 819:FreeRTOS/queue.c ****         }
 1832              		.loc 1 819 13 discriminator 2 view .LVU555
 1833 005e 019B     		ldr	r3, [sp, #4]
 1834 0060 002B     		cmp	r3, #0
 1835 0062 58D0     		beq	.L139
 819:FreeRTOS/queue.c ****         }
 1836              		.loc 1 819 13 is_stmt 1 view .LVU556
 1837              	.LBB166:
 1838              	.LBI166:
 194:FreeRTOS/portable/portmacro.h ****     {
 1839              		.loc 2 194 34 view .LVU557
 1840              	.LBB167:
 196:FreeRTOS/portable/portmacro.h **** 
 1841              		.loc 2 196 9 view .LVU558
 1842              		.loc 2 198 9 view .LVU559
 1843              		.syntax unified
 1844              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 1845 0064 4FF05003 			mov r3, #80												
 1846 0068 83F31188 		msr basepri, r3											
 1847 006c BFF36F8F 		isb														
 1848 0070 BFF34F8F 		dsb														
 1849              	
 1850              	@ 0 "" 2
 1851              	.LVL149:
 1852              		.thumb
 1853              		.syntax unified
 1854              	.L138:
 1855              		.loc 2 198 9 is_stmt 0 view .LVU560
 1856              	.LBE167:
 1857              	.LBE166:
 819:FreeRTOS/queue.c ****         }
 1858              		.loc 1 819 13 is_stmt 1 discriminator 4 view .LVU561
 819:FreeRTOS/queue.c ****         }
 1859              		.loc 1 819 13 discriminator 4 view .LVU562
 819:FreeRTOS/queue.c ****         }
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 99


 1860              		.loc 1 819 13 discriminator 4 view .LVU563
 1861 0074 FEE7     		b	.L138
 1862              	.L154:
 1863 0076 0027     		movs	r7, #0
 1864 0078 4DE0     		b	.L139
 1865              	.LVL150:
 1866              	.L140:
 836:FreeRTOS/queue.c **** 
 1867              		.loc 1 836 43 view .LVU564
 1868              	.LBB168:
 840:FreeRTOS/queue.c **** 
 1869              		.loc 1 840 25 view .LVU565
 840:FreeRTOS/queue.c **** 
 1870              		.loc 1 840 43 is_stmt 0 view .LVU566
 1871 007a A76B     		ldr	r7, [r4, #56]
 1872              	.LVL151:
 842:FreeRTOS/queue.c **** 
 1873              		.loc 1 842 25 is_stmt 1 view .LVU567
 842:FreeRTOS/queue.c **** 
 1874              		.loc 1 842 42 is_stmt 0 view .LVU568
 1875 007c 2A46     		mov	r2, r5
 1876 007e 3146     		mov	r1, r6
 1877 0080 2046     		mov	r0, r4
 1878 0082 FFF7FEFF 		bl	prvCopyDataToQueue
 1879              	.LVL152:
 844:FreeRTOS/queue.c ****                         {
 1880              		.loc 1 844 25 is_stmt 1 view .LVU569
 844:FreeRTOS/queue.c ****                         {
 1881              		.loc 1 844 36 is_stmt 0 view .LVU570
 1882 0086 A26C     		ldr	r2, [r4, #72]
 844:FreeRTOS/queue.c ****                         {
 1883              		.loc 1 844 27 view .LVU571
 1884 0088 9AB1     		cbz	r2, .L142
 846:FreeRTOS/queue.c ****                             {
 1885              		.loc 1 846 29 is_stmt 1 view .LVU572
 846:FreeRTOS/queue.c ****                             {
 1886              		.loc 1 846 31 is_stmt 0 view .LVU573
 1887 008a 022D     		cmp	r5, #2
 1888 008c 00D1     		bne	.L143
 846:FreeRTOS/queue.c ****                             {
 1889              		.loc 1 846 69 discriminator 1 view .LVU574
 1890 008e 5FB9     		cbnz	r7, .L144
 1891              	.L143:
 853:FreeRTOS/queue.c ****                             {
 1892              		.loc 1 853 34 is_stmt 1 view .LVU575
 853:FreeRTOS/queue.c ****                             {
 1893              		.loc 1 853 38 is_stmt 0 view .LVU576
 1894 0090 2046     		mov	r0, r4
 1895              	.LVL153:
 853:FreeRTOS/queue.c ****                             {
 1896              		.loc 1 853 38 view .LVU577
 1897 0092 FFF7FEFF 		bl	prvNotifyQueueSetContainer
 1898              	.LVL154:
 853:FreeRTOS/queue.c ****                             {
 1899              		.loc 1 853 36 view .LVU578
 1900 0096 38B1     		cbz	r0, .L144
 858:FreeRTOS/queue.c ****                             }
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 100


 1901              		.loc 1 858 33 is_stmt 1 view .LVU579
 1902 0098 424B     		ldr	r3, .L163
 1903 009a 4FF08052 		mov	r2, #268435456
 1904 009e 1A60     		str	r2, [r3]
 858:FreeRTOS/queue.c ****                             }
 1905              		.loc 1 858 33 view .LVU580
 1906              		.syntax unified
 1907              	@ 858 "FreeRTOS/queue.c" 1
 1908 00a0 BFF34F8F 		dsb
 1909              	@ 0 "" 2
 858:FreeRTOS/queue.c ****                             }
 1910              		.loc 1 858 33 view .LVU581
 1911              	@ 858 "FreeRTOS/queue.c" 1
 1912 00a4 BFF36F8F 		isb
 1913              	@ 0 "" 2
 858:FreeRTOS/queue.c ****                             }
 1914              		.loc 1 858 65 view .LVU582
 1915              		.thumb
 1916              		.syntax unified
 1917              	.L144:
 894:FreeRTOS/queue.c ****                             }
 1918              		.loc 1 894 57 view .LVU583
 1919              	.LBE168:
 934:FreeRTOS/queue.c ****                 return pdPASS;
 1920              		.loc 1 934 17 view .LVU584
 1921 00a8 FFF7FEFF 		bl	vPortExitCritical
 1922              	.LVL155:
 935:FreeRTOS/queue.c ****             }
 1923              		.loc 1 935 17 view .LVU585
 935:FreeRTOS/queue.c ****             }
 1924              		.loc 1 935 24 is_stmt 0 view .LVU586
 1925 00ac 0120     		movs	r0, #1
 1926              	.LVL156:
 1927              	.L130:
1014:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 1928              		.loc 1 1014 1 view .LVU587
 1929 00ae 05B0     		add	sp, sp, #20
 1930              	.LCFI29:
 1931              		.cfi_remember_state
 1932              		.cfi_def_cfa_offset 20
 1933              		@ sp needed
 1934 00b0 F0BD     		pop	{r4, r5, r6, r7, pc}
 1935              	.LVL157:
 1936              	.L142:
 1937              	.LCFI30:
 1938              		.cfi_restore_state
 1939              	.LBB169:
 869:FreeRTOS/queue.c ****                             {
 1940              		.loc 1 869 29 is_stmt 1 view .LVU588
 869:FreeRTOS/queue.c ****                             {
 1941              		.loc 1 869 33 is_stmt 0 view .LVU589
 1942 00b2 626A     		ldr	r2, [r4, #36]
 869:FreeRTOS/queue.c ****                             {
 1943              		.loc 1 869 31 view .LVU590
 1944 00b4 52B9     		cbnz	r2, .L158
 884:FreeRTOS/queue.c ****                             {
 1945              		.loc 1 884 34 is_stmt 1 view .LVU591
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 101


 884:FreeRTOS/queue.c ****                             {
 1946              		.loc 1 884 36 is_stmt 0 view .LVU592
 1947 00b6 0028     		cmp	r0, #0
 1948 00b8 F6D0     		beq	.L144
 890:FreeRTOS/queue.c ****                             }
 1949              		.loc 1 890 33 is_stmt 1 view .LVU593
 1950 00ba 3A4B     		ldr	r3, .L163
 1951 00bc 4FF08052 		mov	r2, #268435456
 1952 00c0 1A60     		str	r2, [r3]
 890:FreeRTOS/queue.c ****                             }
 1953              		.loc 1 890 33 view .LVU594
 1954              		.syntax unified
 1955              	@ 890 "FreeRTOS/queue.c" 1
 1956 00c2 BFF34F8F 		dsb
 1957              	@ 0 "" 2
 890:FreeRTOS/queue.c ****                             }
 1958              		.loc 1 890 33 view .LVU595
 1959              	@ 890 "FreeRTOS/queue.c" 1
 1960 00c6 BFF36F8F 		isb
 1961              	@ 0 "" 2
 890:FreeRTOS/queue.c ****                             }
 1962              		.loc 1 890 65 view .LVU596
 1963              		.thumb
 1964              		.syntax unified
 1965 00ca EDE7     		b	.L144
 1966              	.L158:
 871:FreeRTOS/queue.c ****                                 {
 1967              		.loc 1 871 33 view .LVU597
 871:FreeRTOS/queue.c ****                                 {
 1968              		.loc 1 871 37 is_stmt 0 view .LVU598
 1969 00cc 04F12400 		add	r0, r4, #36
 1970              	.LVL158:
 871:FreeRTOS/queue.c ****                                 {
 1971              		.loc 1 871 37 view .LVU599
 1972 00d0 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1973              	.LVL159:
 871:FreeRTOS/queue.c ****                                 {
 1974              		.loc 1 871 35 view .LVU600
 1975 00d4 0028     		cmp	r0, #0
 1976 00d6 E7D0     		beq	.L144
 877:FreeRTOS/queue.c ****                                 }
 1977              		.loc 1 877 37 is_stmt 1 view .LVU601
 1978 00d8 324B     		ldr	r3, .L163
 1979 00da 4FF08052 		mov	r2, #268435456
 1980 00de 1A60     		str	r2, [r3]
 877:FreeRTOS/queue.c ****                                 }
 1981              		.loc 1 877 37 view .LVU602
 1982              		.syntax unified
 1983              	@ 877 "FreeRTOS/queue.c" 1
 1984 00e0 BFF34F8F 		dsb
 1985              	@ 0 "" 2
 877:FreeRTOS/queue.c ****                                 }
 1986              		.loc 1 877 37 view .LVU603
 1987              	@ 877 "FreeRTOS/queue.c" 1
 1988 00e4 BFF36F8F 		isb
 1989              	@ 0 "" 2
 877:FreeRTOS/queue.c ****                                 }
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 102


 1990              		.loc 1 877 69 view .LVU604
 1991              		.thumb
 1992              		.syntax unified
 1993 00e8 DEE7     		b	.L144
 1994              	.LVL160:
 1995              	.L159:
 877:FreeRTOS/queue.c ****                                 }
 1996              		.loc 1 877 69 is_stmt 0 view .LVU605
 1997              	.LBE169:
 943:FreeRTOS/queue.c **** 
 1998              		.loc 1 943 21 is_stmt 1 view .LVU606
 1999 00ea FFF7FEFF 		bl	vPortExitCritical
 2000              	.LVL161:
 947:FreeRTOS/queue.c ****                     return errQUEUE_FULL;
 2001              		.loc 1 947 54 view .LVU607
 948:FreeRTOS/queue.c ****                 }
 2002              		.loc 1 948 21 view .LVU608
 948:FreeRTOS/queue.c ****                 }
 2003              		.loc 1 948 28 is_stmt 0 view .LVU609
 2004 00ee 0020     		movs	r0, #0
 2005 00f0 DDE7     		b	.L130
 2006              	.L160:
 954:FreeRTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
 2007              		.loc 1 954 21 is_stmt 1 view .LVU610
 2008 00f2 02A8     		add	r0, sp, #8
 2009 00f4 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 2010              	.LVL162:
 955:FreeRTOS/queue.c ****                 }
 2011              		.loc 1 955 21 view .LVU611
 955:FreeRTOS/queue.c ****                 }
 2012              		.loc 1 955 35 is_stmt 0 view .LVU612
 2013 00f8 0127     		movs	r7, #1
 2014 00fa 19E0     		b	.L148
 2015              	.LVL163:
 2016              	.L161:
 970:FreeRTOS/queue.c **** 
 2017              		.loc 1 970 9 is_stmt 1 discriminator 1 view .LVU613
 2018 00fc 0023     		movs	r3, #0
 2019 00fe 84F84430 		strb	r3, [r4, #68]
 2020 0102 21E0     		b	.L149
 2021              	.L162:
 970:FreeRTOS/queue.c **** 
 2022              		.loc 1 970 9 discriminator 4 view .LVU614
 2023 0104 0023     		movs	r3, #0
 2024 0106 84F84530 		strb	r3, [r4, #69]
 2025 010a 23E0     		b	.L150
 2026              	.L152:
1000:FreeRTOS/queue.c ****                 ( void ) xTaskResumeAll();
 2027              		.loc 1 1000 17 view .LVU615
 2028 010c 2046     		mov	r0, r4
 2029 010e FFF7FEFF 		bl	prvUnlockQueue
 2030              	.LVL164:
1001:FreeRTOS/queue.c ****             }
 2031              		.loc 1 1001 17 view .LVU616
1001:FreeRTOS/queue.c ****             }
 2032              		.loc 1 1001 26 is_stmt 0 view .LVU617
 2033 0112 FFF7FEFF 		bl	xTaskResumeAll
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 103


 2034              	.LVL165:
 2035              	.L139:
 819:FreeRTOS/queue.c ****         }
 2036              		.loc 1 819 114 is_stmt 1 discriminator 8 view .LVU618
 826:FreeRTOS/queue.c ****     {
 2037              		.loc 1 826 5 discriminator 8 view .LVU619
 828:FreeRTOS/queue.c ****         {
 2038              		.loc 1 828 9 discriminator 8 view .LVU620
 2039 0116 FFF7FEFF 		bl	vPortEnterCritical
 2040              	.LVL166:
 834:FreeRTOS/queue.c ****             {
 2041              		.loc 1 834 13 discriminator 8 view .LVU621
 834:FreeRTOS/queue.c ****             {
 2042              		.loc 1 834 26 is_stmt 0 discriminator 8 view .LVU622
 2043 011a A26B     		ldr	r2, [r4, #56]
 834:FreeRTOS/queue.c ****             {
 2044              		.loc 1 834 55 discriminator 8 view .LVU623
 2045 011c E36B     		ldr	r3, [r4, #60]
 834:FreeRTOS/queue.c ****             {
 2046              		.loc 1 834 15 discriminator 8 view .LVU624
 2047 011e 9A42     		cmp	r2, r3
 2048 0120 ABD3     		bcc	.L140
 834:FreeRTOS/queue.c ****             {
 2049              		.loc 1 834 68 discriminator 1 view .LVU625
 2050 0122 022D     		cmp	r5, #2
 2051 0124 A9D0     		beq	.L140
 939:FreeRTOS/queue.c ****                 {
 2052              		.loc 1 939 17 is_stmt 1 view .LVU626
 939:FreeRTOS/queue.c ****                 {
 2053              		.loc 1 939 34 is_stmt 0 view .LVU627
 2054 0126 019B     		ldr	r3, [sp, #4]
 939:FreeRTOS/queue.c ****                 {
 2055              		.loc 1 939 19 view .LVU628
 2056 0128 002B     		cmp	r3, #0
 2057 012a DED0     		beq	.L159
 950:FreeRTOS/queue.c ****                 {
 2058              		.loc 1 950 22 is_stmt 1 view .LVU629
 950:FreeRTOS/queue.c ****                 {
 2059              		.loc 1 950 24 is_stmt 0 view .LVU630
 2060 012c 002F     		cmp	r7, #0
 2061 012e E0D0     		beq	.L160
 2062              	.LVL167:
 2063              	.L148:
 960:FreeRTOS/queue.c ****                 }
 2064              		.loc 1 960 45 is_stmt 1 view .LVU631
 964:FreeRTOS/queue.c **** 
 2065              		.loc 1 964 9 view .LVU632
 2066 0130 FFF7FEFF 		bl	vPortExitCritical
 2067              	.LVL168:
 969:FreeRTOS/queue.c ****         prvLockQueue( pxQueue );
 2068              		.loc 1 969 9 view .LVU633
 2069 0134 FFF7FEFF 		bl	vTaskSuspendAll
 2070              	.LVL169:
 970:FreeRTOS/queue.c **** 
 2071              		.loc 1 970 9 view .LVU634
 2072 0138 FFF7FEFF 		bl	vPortEnterCritical
 2073              	.LVL170:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 104


 970:FreeRTOS/queue.c **** 
 2074              		.loc 1 970 9 view .LVU635
 2075 013c 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 2076 0140 5BB2     		sxtb	r3, r3
 2077 0142 B3F1FF3F 		cmp	r3, #-1
 2078 0146 D9D0     		beq	.L161
 2079              	.L149:
 970:FreeRTOS/queue.c **** 
 2080              		.loc 1 970 9 discriminator 3 view .LVU636
 2081 0148 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 2082 014c 5BB2     		sxtb	r3, r3
 2083 014e B3F1FF3F 		cmp	r3, #-1
 2084 0152 D7D0     		beq	.L162
 2085              	.L150:
 970:FreeRTOS/queue.c **** 
 2086              		.loc 1 970 9 discriminator 6 view .LVU637
 2087 0154 FFF7FEFF 		bl	vPortExitCritical
 2088              	.LVL171:
 973:FreeRTOS/queue.c ****         {
 2089              		.loc 1 973 9 discriminator 6 view .LVU638
 973:FreeRTOS/queue.c ****         {
 2090              		.loc 1 973 13 is_stmt 0 discriminator 6 view .LVU639
 2091 0158 01A9     		add	r1, sp, #4
 2092 015a 02A8     		add	r0, sp, #8
 2093 015c FFF7FEFF 		bl	xTaskCheckForTimeOut
 2094              	.LVL172:
 973:FreeRTOS/queue.c ****         {
 2095              		.loc 1 973 11 discriminator 6 view .LVU640
 2096 0160 C8B9     		cbnz	r0, .L151
 975:FreeRTOS/queue.c ****             {
 2097              		.loc 1 975 13 is_stmt 1 view .LVU641
 975:FreeRTOS/queue.c ****             {
 2098              		.loc 1 975 17 is_stmt 0 view .LVU642
 2099 0162 2046     		mov	r0, r4
 2100 0164 FFF7FEFF 		bl	prvIsQueueFull
 2101              	.LVL173:
 975:FreeRTOS/queue.c ****             {
 2102              		.loc 1 975 15 view .LVU643
 2103 0168 0028     		cmp	r0, #0
 2104 016a CFD0     		beq	.L152
 977:FreeRTOS/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 2105              		.loc 1 977 55 is_stmt 1 view .LVU644
 978:FreeRTOS/queue.c **** 
 2106              		.loc 1 978 17 view .LVU645
 2107 016c 0199     		ldr	r1, [sp, #4]
 2108 016e 04F11000 		add	r0, r4, #16
 2109 0172 FFF7FEFF 		bl	vTaskPlaceOnEventList
 2110              	.LVL174:
 985:FreeRTOS/queue.c **** 
 2111              		.loc 1 985 17 view .LVU646
 2112 0176 2046     		mov	r0, r4
 2113 0178 FFF7FEFF 		bl	prvUnlockQueue
 2114              	.LVL175:
 992:FreeRTOS/queue.c ****                 {
 2115              		.loc 1 992 17 view .LVU647
 992:FreeRTOS/queue.c ****                 {
 2116              		.loc 1 992 21 is_stmt 0 view .LVU648
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 105


 2117 017c FFF7FEFF 		bl	xTaskResumeAll
 2118              	.LVL176:
 992:FreeRTOS/queue.c ****                 {
 2119              		.loc 1 992 19 view .LVU649
 2120 0180 0028     		cmp	r0, #0
 2121 0182 C8D1     		bne	.L139
 994:FreeRTOS/queue.c ****                 }
 2122              		.loc 1 994 21 is_stmt 1 view .LVU650
 2123 0184 074B     		ldr	r3, .L163
 2124 0186 4FF08052 		mov	r2, #268435456
 2125 018a 1A60     		str	r2, [r3]
 994:FreeRTOS/queue.c ****                 }
 2126              		.loc 1 994 21 view .LVU651
 2127              		.syntax unified
 2128              	@ 994 "FreeRTOS/queue.c" 1
 2129 018c BFF34F8F 		dsb
 2130              	@ 0 "" 2
 994:FreeRTOS/queue.c ****                 }
 2131              		.loc 1 994 21 view .LVU652
 2132              	@ 994 "FreeRTOS/queue.c" 1
 2133 0190 BFF36F8F 		isb
 2134              	@ 0 "" 2
 2135              		.thumb
 2136              		.syntax unified
 2137 0194 BFE7     		b	.L139
 2138              	.L151:
1007:FreeRTOS/queue.c ****             ( void ) xTaskResumeAll();
 2139              		.loc 1 1007 13 view .LVU653
 2140 0196 2046     		mov	r0, r4
 2141 0198 FFF7FEFF 		bl	prvUnlockQueue
 2142              	.LVL177:
1008:FreeRTOS/queue.c **** 
 2143              		.loc 1 1008 13 view .LVU654
1008:FreeRTOS/queue.c **** 
 2144              		.loc 1 1008 22 is_stmt 0 view .LVU655
 2145 019c FFF7FEFF 		bl	xTaskResumeAll
 2146              	.LVL178:
1010:FreeRTOS/queue.c ****             return errQUEUE_FULL;
 2147              		.loc 1 1010 46 is_stmt 1 view .LVU656
1011:FreeRTOS/queue.c ****         }
 2148              		.loc 1 1011 13 view .LVU657
1011:FreeRTOS/queue.c ****         }
 2149              		.loc 1 1011 20 is_stmt 0 view .LVU658
 2150 01a0 0020     		movs	r0, #0
 2151 01a2 84E7     		b	.L130
 2152              	.L164:
 2153              		.align	2
 2154              	.L163:
 2155 01a4 04ED00E0 		.word	-536810236
 2156              		.cfi_endproc
 2157              	.LFE18:
 2159              		.section	.text.prvInitialiseMutex,"ax",%progbits
 2160              		.align	1
 2161              		.syntax unified
 2162              		.thumb
 2163              		.thumb_func
 2164              		.fpu fpv4-sp-d16
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 106


 2166              	prvInitialiseMutex:
 2167              	.LVL179:
 2168              	.LFB9:
 513:FreeRTOS/queue.c ****         if( pxNewQueue != NULL )
 2169              		.loc 1 513 5 is_stmt 1 view -0
 2170              		.cfi_startproc
 2171              		@ args = 0, pretend = 0, frame = 0
 2172              		@ frame_needed = 0, uses_anonymous_args = 0
 514:FreeRTOS/queue.c ****         {
 2173              		.loc 1 514 9 view .LVU660
 514:FreeRTOS/queue.c ****         {
 2174              		.loc 1 514 11 is_stmt 0 view .LVU661
 2175 0000 48B1     		cbz	r0, .L168
 513:FreeRTOS/queue.c ****         if( pxNewQueue != NULL )
 2176              		.loc 1 513 5 view .LVU662
 2177 0002 10B5     		push	{r4, lr}
 2178              	.LCFI31:
 2179              		.cfi_def_cfa_offset 8
 2180              		.cfi_offset 4, -8
 2181              		.cfi_offset 14, -4
 520:FreeRTOS/queue.c ****             pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 2182              		.loc 1 520 13 is_stmt 1 view .LVU663
 520:FreeRTOS/queue.c ****             pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 2183              		.loc 1 520 51 is_stmt 0 view .LVU664
 2184 0004 0021     		movs	r1, #0
 2185 0006 8160     		str	r1, [r0, #8]
 521:FreeRTOS/queue.c **** 
 2186              		.loc 1 521 13 is_stmt 1 view .LVU665
 521:FreeRTOS/queue.c **** 
 2187              		.loc 1 521 37 is_stmt 0 view .LVU666
 2188 0008 0160     		str	r1, [r0]
 524:FreeRTOS/queue.c **** 
 2189              		.loc 1 524 13 is_stmt 1 view .LVU667
 524:FreeRTOS/queue.c **** 
 2190              		.loc 1 524 59 is_stmt 0 view .LVU668
 2191 000a C160     		str	r1, [r0, #12]
 526:FreeRTOS/queue.c **** 
 2192              		.loc 1 526 44 is_stmt 1 view .LVU669
 529:FreeRTOS/queue.c ****         }
 2193              		.loc 1 529 13 view .LVU670
 529:FreeRTOS/queue.c ****         }
 2194              		.loc 1 529 22 is_stmt 0 view .LVU671
 2195 000c 0B46     		mov	r3, r1
 2196 000e 0A46     		mov	r2, r1
 2197 0010 FFF7FEFF 		bl	xQueueGenericSend
 2198              	.LVL180:
 533:FreeRTOS/queue.c ****         }
 2199              		.loc 1 533 39 is_stmt 1 view .LVU672
 535:FreeRTOS/queue.c **** 
 2200              		.loc 1 535 5 is_stmt 0 view .LVU673
 2201 0014 10BD     		pop	{r4, pc}
 2202              	.LVL181:
 2203              	.L168:
 2204              	.LCFI32:
 2205              		.cfi_def_cfa_offset 0
 2206              		.cfi_restore 4
 2207              		.cfi_restore 14
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 107


 535:FreeRTOS/queue.c **** 
 2208              		.loc 1 535 5 view .LVU674
 2209 0016 7047     		bx	lr
 2210              		.cfi_endproc
 2211              	.LFE9:
 2213              		.section	.text.xQueueCreateMutex,"ax",%progbits
 2214              		.align	1
 2215              		.global	xQueueCreateMutex
 2216              		.syntax unified
 2217              		.thumb
 2218              		.thumb_func
 2219              		.fpu fpv4-sp-d16
 2221              	xQueueCreateMutex:
 2222              	.LVL182:
 2223              	.LFB10:
 543:FreeRTOS/queue.c ****         QueueHandle_t xNewQueue;
 2224              		.loc 1 543 5 is_stmt 1 view -0
 2225              		.cfi_startproc
 2226              		@ args = 0, pretend = 0, frame = 0
 2227              		@ frame_needed = 0, uses_anonymous_args = 0
 543:FreeRTOS/queue.c ****         QueueHandle_t xNewQueue;
 2228              		.loc 1 543 5 is_stmt 0 view .LVU676
 2229 0000 10B5     		push	{r4, lr}
 2230              	.LCFI33:
 2231              		.cfi_def_cfa_offset 8
 2232              		.cfi_offset 4, -8
 2233              		.cfi_offset 14, -4
 2234 0002 0246     		mov	r2, r0
 544:FreeRTOS/queue.c ****         const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 2235              		.loc 1 544 9 is_stmt 1 view .LVU677
 545:FreeRTOS/queue.c **** 
 2236              		.loc 1 545 9 view .LVU678
 2237              	.LVL183:
 547:FreeRTOS/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 2238              		.loc 1 547 9 view .LVU679
 547:FreeRTOS/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 2239              		.loc 1 547 21 is_stmt 0 view .LVU680
 2240 0004 0021     		movs	r1, #0
 2241 0006 0120     		movs	r0, #1
 2242              	.LVL184:
 547:FreeRTOS/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 2243              		.loc 1 547 21 view .LVU681
 2244 0008 FFF7FEFF 		bl	xQueueGenericCreate
 2245              	.LVL185:
 2246 000c 0446     		mov	r4, r0
 2247              	.LVL186:
 548:FreeRTOS/queue.c **** 
 2248              		.loc 1 548 9 is_stmt 1 view .LVU682
 2249 000e FFF7FEFF 		bl	prvInitialiseMutex
 2250              	.LVL187:
 550:FreeRTOS/queue.c ****     }
 2251              		.loc 1 550 9 view .LVU683
 551:FreeRTOS/queue.c **** 
 2252              		.loc 1 551 5 is_stmt 0 view .LVU684
 2253 0012 2046     		mov	r0, r4
 2254 0014 10BD     		pop	{r4, pc}
 551:FreeRTOS/queue.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 108


 2255              		.loc 1 551 5 view .LVU685
 2256              		.cfi_endproc
 2257              	.LFE10:
 2259              		.section	.text.xQueueCreateMutexStatic,"ax",%progbits
 2260              		.align	1
 2261              		.global	xQueueCreateMutexStatic
 2262              		.syntax unified
 2263              		.thumb
 2264              		.thumb_func
 2265              		.fpu fpv4-sp-d16
 2267              	xQueueCreateMutexStatic:
 2268              	.LVL188:
 2269              	.LFB11:
 560:FreeRTOS/queue.c ****         QueueHandle_t xNewQueue;
 2270              		.loc 1 560 5 is_stmt 1 view -0
 2271              		.cfi_startproc
 2272              		@ args = 0, pretend = 0, frame = 0
 2273              		@ frame_needed = 0, uses_anonymous_args = 0
 560:FreeRTOS/queue.c ****         QueueHandle_t xNewQueue;
 2274              		.loc 1 560 5 is_stmt 0 view .LVU687
 2275 0000 10B5     		push	{r4, lr}
 2276              	.LCFI34:
 2277              		.cfi_def_cfa_offset 8
 2278              		.cfi_offset 4, -8
 2279              		.cfi_offset 14, -4
 2280 0002 82B0     		sub	sp, sp, #8
 2281              	.LCFI35:
 2282              		.cfi_def_cfa_offset 16
 2283 0004 0B46     		mov	r3, r1
 561:FreeRTOS/queue.c ****         const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 2284              		.loc 1 561 9 is_stmt 1 view .LVU688
 562:FreeRTOS/queue.c **** 
 2285              		.loc 1 562 9 view .LVU689
 2286              	.LVL189:
 566:FreeRTOS/queue.c **** 
 2287              		.loc 1 566 9 view .LVU690
 568:FreeRTOS/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 2288              		.loc 1 568 9 view .LVU691
 568:FreeRTOS/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 2289              		.loc 1 568 21 is_stmt 0 view .LVU692
 2290 0006 0090     		str	r0, [sp]
 2291 0008 0022     		movs	r2, #0
 2292 000a 1146     		mov	r1, r2
 2293              	.LVL190:
 568:FreeRTOS/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 2294              		.loc 1 568 21 view .LVU693
 2295 000c 0120     		movs	r0, #1
 2296              	.LVL191:
 568:FreeRTOS/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 2297              		.loc 1 568 21 view .LVU694
 2298 000e FFF7FEFF 		bl	xQueueGenericCreateStatic
 2299              	.LVL192:
 568:FreeRTOS/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 2300              		.loc 1 568 21 view .LVU695
 2301 0012 0446     		mov	r4, r0
 2302              	.LVL193:
 569:FreeRTOS/queue.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 109


 2303              		.loc 1 569 9 is_stmt 1 view .LVU696
 2304 0014 FFF7FEFF 		bl	prvInitialiseMutex
 2305              	.LVL194:
 571:FreeRTOS/queue.c ****     }
 2306              		.loc 1 571 9 view .LVU697
 572:FreeRTOS/queue.c **** 
 2307              		.loc 1 572 5 is_stmt 0 view .LVU698
 2308 0018 2046     		mov	r0, r4
 2309 001a 02B0     		add	sp, sp, #8
 2310              	.LCFI36:
 2311              		.cfi_def_cfa_offset 8
 2312              		@ sp needed
 2313 001c 10BD     		pop	{r4, pc}
 572:FreeRTOS/queue.c **** 
 2314              		.loc 1 572 5 view .LVU699
 2315              		.cfi_endproc
 2316              	.LFE11:
 2318              		.section	.text.xQueueGiveMutexRecursive,"ax",%progbits
 2319              		.align	1
 2320              		.global	xQueueGiveMutexRecursive
 2321              		.syntax unified
 2322              		.thumb
 2323              		.thumb_func
 2324              		.fpu fpv4-sp-d16
 2326              	xQueueGiveMutexRecursive:
 2327              	.LVL195:
 2328              	.LFB14:
 639:FreeRTOS/queue.c ****         BaseType_t xReturn;
 2329              		.loc 1 639 5 is_stmt 1 view -0
 2330              		.cfi_startproc
 2331              		@ args = 0, pretend = 0, frame = 0
 2332              		@ frame_needed = 0, uses_anonymous_args = 0
 639:FreeRTOS/queue.c ****         BaseType_t xReturn;
 2333              		.loc 1 639 5 is_stmt 0 view .LVU701
 2334 0000 38B5     		push	{r3, r4, r5, lr}
 2335              	.LCFI37:
 2336              		.cfi_def_cfa_offset 16
 2337              		.cfi_offset 3, -16
 2338              		.cfi_offset 4, -12
 2339              		.cfi_offset 5, -8
 2340              		.cfi_offset 14, -4
 640:FreeRTOS/queue.c ****         Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 2341              		.loc 1 640 9 is_stmt 1 view .LVU702
 641:FreeRTOS/queue.c **** 
 2342              		.loc 1 641 9 view .LVU703
 2343              	.LVL196:
 643:FreeRTOS/queue.c **** 
 2344              		.loc 1 643 9 view .LVU704
 2345 0002 38B1     		cbz	r0, .L182
 2346 0004 0446     		mov	r4, r0
 643:FreeRTOS/queue.c **** 
 2347              		.loc 1 643 32 discriminator 2 view .LVU705
 651:FreeRTOS/queue.c ****         {
 2348              		.loc 1 651 9 discriminator 2 view .LVU706
 651:FreeRTOS/queue.c ****         {
 2349              		.loc 1 651 34 is_stmt 0 discriminator 2 view .LVU707
 2350 0006 8568     		ldr	r5, [r0, #8]
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 110


 651:FreeRTOS/queue.c ****         {
 2351              		.loc 1 651 51 discriminator 2 view .LVU708
 2352 0008 FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 2353              	.LVL197:
 651:FreeRTOS/queue.c ****         {
 2354              		.loc 1 651 11 discriminator 2 view .LVU709
 2355 000c 8542     		cmp	r5, r0
 2356 000e 0AD0     		beq	.L183
 680:FreeRTOS/queue.c **** 
 2357              		.loc 1 680 21 view .LVU710
 2358 0010 0020     		movs	r0, #0
 2359              	.L175:
 686:FreeRTOS/queue.c **** 
 2360              		.loc 1 686 5 view .LVU711
 2361 0012 38BD     		pop	{r3, r4, r5, pc}
 2362              	.LVL198:
 2363              	.L182:
 643:FreeRTOS/queue.c **** 
 2364              		.loc 1 643 9 is_stmt 1 view .LVU712
 2365              	.LBB170:
 2366              	.LBI170:
 194:FreeRTOS/portable/portmacro.h ****     {
 2367              		.loc 2 194 34 view .LVU713
 2368              	.LBB171:
 196:FreeRTOS/portable/portmacro.h **** 
 2369              		.loc 2 196 9 view .LVU714
 2370              		.loc 2 198 9 view .LVU715
 2371              		.syntax unified
 2372              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 2373 0014 4FF05003 			mov r3, #80												
 2374 0018 83F31188 		msr basepri, r3											
 2375 001c BFF36F8F 		isb														
 2376 0020 BFF34F8F 		dsb														
 2377              	
 2378              	@ 0 "" 2
 2379              	.LVL199:
 2380              		.thumb
 2381              		.syntax unified
 2382              	.L177:
 2383              		.loc 2 198 9 is_stmt 0 view .LVU716
 2384              	.LBE171:
 2385              	.LBE170:
 643:FreeRTOS/queue.c **** 
 2386              		.loc 1 643 9 is_stmt 1 discriminator 1 view .LVU717
 643:FreeRTOS/queue.c **** 
 2387              		.loc 1 643 9 discriminator 1 view .LVU718
 643:FreeRTOS/queue.c **** 
 2388              		.loc 1 643 9 discriminator 1 view .LVU719
 2389 0024 FEE7     		b	.L177
 2390              	.LVL200:
 2391              	.L183:
 653:FreeRTOS/queue.c **** 
 2392              		.loc 1 653 49 view .LVU720
 660:FreeRTOS/queue.c **** 
 2393              		.loc 1 660 13 view .LVU721
 660:FreeRTOS/queue.c **** 
 2394              		.loc 1 660 36 is_stmt 0 view .LVU722
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 111


 2395 0026 E368     		ldr	r3, [r4, #12]
 660:FreeRTOS/queue.c **** 
 2396              		.loc 1 660 59 view .LVU723
 2397 0028 013B     		subs	r3, r3, #1
 2398 002a E360     		str	r3, [r4, #12]
 663:FreeRTOS/queue.c ****             {
 2399              		.loc 1 663 13 is_stmt 1 view .LVU724
 663:FreeRTOS/queue.c ****             {
 2400              		.loc 1 663 15 is_stmt 0 view .LVU725
 2401 002c 0BB1     		cbz	r3, .L184
 674:FreeRTOS/queue.c ****         }
 2402              		.loc 1 674 21 view .LVU726
 2403 002e 0120     		movs	r0, #1
 2404              	.LVL201:
 682:FreeRTOS/queue.c ****         }
 2405              		.loc 1 682 56 is_stmt 1 view .LVU727
 685:FreeRTOS/queue.c ****     }
 2406              		.loc 1 685 9 view .LVU728
 685:FreeRTOS/queue.c ****     }
 2407              		.loc 1 685 16 is_stmt 0 view .LVU729
 2408 0030 EFE7     		b	.L175
 2409              	.LVL202:
 2410              	.L184:
 667:FreeRTOS/queue.c ****             }
 2411              		.loc 1 667 17 is_stmt 1 view .LVU730
 667:FreeRTOS/queue.c ****             }
 2412              		.loc 1 667 26 is_stmt 0 view .LVU731
 2413 0032 1A46     		mov	r2, r3
 2414 0034 1946     		mov	r1, r3
 2415 0036 2046     		mov	r0, r4
 2416 0038 FFF7FEFF 		bl	xQueueGenericSend
 2417              	.LVL203:
 674:FreeRTOS/queue.c ****         }
 2418              		.loc 1 674 21 view .LVU732
 2419 003c 0120     		movs	r0, #1
 2420 003e E8E7     		b	.L175
 2421              		.cfi_endproc
 2422              	.LFE14:
 2424              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 2425              		.align	1
 2426              		.global	xQueueGenericSendFromISR
 2427              		.syntax unified
 2428              		.thumb
 2429              		.thumb_func
 2430              		.fpu fpv4-sp-d16
 2432              	xQueueGenericSendFromISR:
 2433              	.LVL204:
 2434              	.LFB19:
1021:FreeRTOS/queue.c ****     BaseType_t xReturn;
 2435              		.loc 1 1021 1 is_stmt 1 view -0
 2436              		.cfi_startproc
 2437              		@ args = 0, pretend = 0, frame = 0
 2438              		@ frame_needed = 0, uses_anonymous_args = 0
1022:FreeRTOS/queue.c ****     UBaseType_t uxSavedInterruptStatus;
 2439              		.loc 1 1022 5 view .LVU734
1023:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 2440              		.loc 1 1023 5 view .LVU735
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 112


1024:FreeRTOS/queue.c **** 
 2441              		.loc 1 1024 5 view .LVU736
1026:FreeRTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 2442              		.loc 1 1026 5 view .LVU737
 2443 0000 A8B1     		cbz	r0, .L208
1021:FreeRTOS/queue.c ****     BaseType_t xReturn;
 2444              		.loc 1 1021 1 is_stmt 0 discriminator 2 view .LVU738
 2445 0002 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2446              	.LCFI38:
 2447              		.cfi_def_cfa_offset 32
 2448              		.cfi_offset 4, -32
 2449              		.cfi_offset 5, -28
 2450              		.cfi_offset 6, -24
 2451              		.cfi_offset 7, -20
 2452              		.cfi_offset 8, -16
 2453              		.cfi_offset 9, -12
 2454              		.cfi_offset 10, -8
 2455              		.cfi_offset 14, -4
 2456 0006 8946     		mov	r9, r1
 2457 0008 1746     		mov	r7, r2
 2458 000a 9846     		mov	r8, r3
 2459 000c 0446     		mov	r4, r0
1026:FreeRTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 2460              		.loc 1 1026 28 is_stmt 1 discriminator 2 view .LVU739
1027:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 2461              		.loc 1 1027 5 discriminator 2 view .LVU740
 2462 000e B9B1     		cbz	r1, .L209
 2463              	.LVL205:
 2464              	.L188:
1027:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 2465              		.loc 1 1027 100 discriminator 8 view .LVU741
1028:FreeRTOS/queue.c **** 
 2466              		.loc 1 1028 5 discriminator 8 view .LVU742
 2467 0010 B8F1020F 		cmp	r8, #2
 2468 0014 20D1     		bne	.L190
1028:FreeRTOS/queue.c **** 
 2469              		.loc 1 1028 5 is_stmt 0 discriminator 2 view .LVU743
 2470 0016 E36B     		ldr	r3, [r4, #60]
 2471 0018 012B     		cmp	r3, #1
 2472 001a 1DD0     		beq	.L190
1028:FreeRTOS/queue.c **** 
 2473              		.loc 1 1028 5 is_stmt 1 view .LVU744
 2474              	.LBB172:
 2475              	.LBI172:
 194:FreeRTOS/portable/portmacro.h ****     {
 2476              		.loc 2 194 34 view .LVU745
 2477              	.LBB173:
 196:FreeRTOS/portable/portmacro.h **** 
 2478              		.loc 2 196 9 view .LVU746
 2479              		.loc 2 198 9 view .LVU747
 2480              		.syntax unified
 2481              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 2482 001c 4FF05003 			mov r3, #80												
 2483 0020 83F31188 		msr basepri, r3											
 2484 0024 BFF36F8F 		isb														
 2485 0028 BFF34F8F 		dsb														
 2486              	
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 113


 2487              	@ 0 "" 2
 2488              	.LVL206:
 2489              		.thumb
 2490              		.syntax unified
 2491              	.L191:
 2492              		.loc 2 198 9 is_stmt 0 view .LVU748
 2493              	.LBE173:
 2494              	.LBE172:
1028:FreeRTOS/queue.c **** 
 2495              		.loc 1 1028 5 is_stmt 1 discriminator 3 view .LVU749
1028:FreeRTOS/queue.c **** 
 2496              		.loc 1 1028 5 discriminator 3 view .LVU750
1028:FreeRTOS/queue.c **** 
 2497              		.loc 1 1028 5 discriminator 3 view .LVU751
 2498 002c FEE7     		b	.L191
 2499              	.LVL207:
 2500              	.L208:
 2501              	.LCFI39:
 2502              		.cfi_def_cfa_offset 0
 2503              		.cfi_restore 4
 2504              		.cfi_restore 5
 2505              		.cfi_restore 6
 2506              		.cfi_restore 7
 2507              		.cfi_restore 8
 2508              		.cfi_restore 9
 2509              		.cfi_restore 10
 2510              		.cfi_restore 14
1026:FreeRTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 2511              		.loc 1 1026 5 view .LVU752
 2512              	.LBB174:
 2513              	.LBI174:
 194:FreeRTOS/portable/portmacro.h ****     {
 2514              		.loc 2 194 34 view .LVU753
 2515              	.LBB175:
 196:FreeRTOS/portable/portmacro.h **** 
 2516              		.loc 2 196 9 view .LVU754
 2517              		.loc 2 198 9 view .LVU755
 2518              		.syntax unified
 2519              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 2520 002e 4FF05003 			mov r3, #80												
 2521 0032 83F31188 		msr basepri, r3											
 2522 0036 BFF36F8F 		isb														
 2523 003a BFF34F8F 		dsb														
 2524              	
 2525              	@ 0 "" 2
 2526              	.LVL208:
 2527              		.thumb
 2528              		.syntax unified
 2529              	.L187:
 2530              		.loc 2 198 9 is_stmt 0 view .LVU756
 2531              	.LBE175:
 2532              	.LBE174:
1026:FreeRTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 2533              		.loc 1 1026 5 is_stmt 1 discriminator 1 view .LVU757
1026:FreeRTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 2534              		.loc 1 1026 5 discriminator 1 view .LVU758
1026:FreeRTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 114


 2535              		.loc 1 1026 5 discriminator 1 view .LVU759
 2536 003e FEE7     		b	.L187
 2537              	.LVL209:
 2538              	.L209:
 2539              	.LCFI40:
 2540              		.cfi_def_cfa_offset 32
 2541              		.cfi_offset 4, -32
 2542              		.cfi_offset 5, -28
 2543              		.cfi_offset 6, -24
 2544              		.cfi_offset 7, -20
 2545              		.cfi_offset 8, -16
 2546              		.cfi_offset 9, -12
 2547              		.cfi_offset 10, -8
 2548              		.cfi_offset 14, -4
1027:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 2549              		.loc 1 1027 5 is_stmt 0 discriminator 2 view .LVU760
 2550 0040 036C     		ldr	r3, [r0, #64]
 2551              	.LVL210:
1027:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 2552              		.loc 1 1027 5 discriminator 2 view .LVU761
 2553 0042 002B     		cmp	r3, #0
 2554 0044 E4D0     		beq	.L188
1027:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 2555              		.loc 1 1027 5 is_stmt 1 view .LVU762
 2556              	.LBB176:
 2557              	.LBI176:
 194:FreeRTOS/portable/portmacro.h ****     {
 2558              		.loc 2 194 34 view .LVU763
 2559              	.LBB177:
 196:FreeRTOS/portable/portmacro.h **** 
 2560              		.loc 2 196 9 view .LVU764
 2561              		.loc 2 198 9 view .LVU765
 2562              		.syntax unified
 2563              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 2564 0046 4FF05003 			mov r3, #80												
 2565 004a 83F31188 		msr basepri, r3											
 2566 004e BFF36F8F 		isb														
 2567 0052 BFF34F8F 		dsb														
 2568              	
 2569              	@ 0 "" 2
 2570              	.LVL211:
 2571              		.thumb
 2572              		.syntax unified
 2573              	.L189:
 2574              		.loc 2 198 9 is_stmt 0 view .LVU766
 2575              	.LBE177:
 2576              	.LBE176:
1027:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 2577              		.loc 1 1027 5 is_stmt 1 discriminator 2 view .LVU767
1027:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 2578              		.loc 1 1027 5 discriminator 2 view .LVU768
1027:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 2579              		.loc 1 1027 5 discriminator 2 view .LVU769
 2580 0056 FEE7     		b	.L189
 2581              	.L190:
1028:FreeRTOS/queue.c **** 
 2582              		.loc 1 1028 91 discriminator 8 view .LVU770
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 115


1044:FreeRTOS/queue.c **** 
 2583              		.loc 1 1044 5 discriminator 8 view .LVU771
 2584 0058 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2585              	.LVL212:
1051:FreeRTOS/queue.c ****     {
 2586              		.loc 1 1051 5 discriminator 8 view .LVU772
 2587              	.LBB178:
 2588              	.LBI178:
 199:FreeRTOS/portable/portmacro.h ****         (
 200:FreeRTOS/portable/portmacro.h ****             "	mov %0, %1												\n"\
 201:FreeRTOS/portable/portmacro.h ****             "	msr basepri, %0											\n"\
 202:FreeRTOS/portable/portmacro.h ****             "	isb														\n"\
 203:FreeRTOS/portable/portmacro.h ****             "	dsb														\n"\
 204:FreeRTOS/portable/portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 205:FreeRTOS/portable/portmacro.h ****         );
 206:FreeRTOS/portable/portmacro.h ****     }
 207:FreeRTOS/portable/portmacro.h **** 
 208:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
 209:FreeRTOS/portable/portmacro.h **** 
 210:FreeRTOS/portable/portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 2589              		.loc 2 210 38 discriminator 8 view .LVU773
 2590              	.LBB179:
 211:FreeRTOS/portable/portmacro.h ****     {
 212:FreeRTOS/portable/portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 2591              		.loc 2 212 9 discriminator 8 view .LVU774
 213:FreeRTOS/portable/portmacro.h **** 
 214:FreeRTOS/portable/portmacro.h ****         __asm volatile
 2592              		.loc 2 214 9 discriminator 8 view .LVU775
 2593              		.syntax unified
 2594              	@ 214 "FreeRTOS/portable/portmacro.h" 1
 2595 005c EFF31186 			mrs r6, basepri											
 2596 0060 4FF05003 		mov r3, #80												
 2597 0064 83F31188 		msr basepri, r3											
 2598 0068 BFF36F8F 		isb														
 2599 006c BFF34F8F 		dsb														
 2600              	
 2601              	@ 0 "" 2
 2602              	.LVL213:
 215:FreeRTOS/portable/portmacro.h ****         (
 216:FreeRTOS/portable/portmacro.h ****             "	mrs %0, basepri											\n"\
 217:FreeRTOS/portable/portmacro.h ****             "	mov %1, %2												\n"\
 218:FreeRTOS/portable/portmacro.h ****             "	msr basepri, %1											\n"\
 219:FreeRTOS/portable/portmacro.h ****             "	isb														\n"\
 220:FreeRTOS/portable/portmacro.h ****             "	dsb														\n"\
 221:FreeRTOS/portable/portmacro.h ****             : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT
 222:FreeRTOS/portable/portmacro.h ****         );
 223:FreeRTOS/portable/portmacro.h **** 
 224:FreeRTOS/portable/portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
 225:FreeRTOS/portable/portmacro.h ****          * warnings. */
 226:FreeRTOS/portable/portmacro.h ****         return ulOriginalBASEPRI;
 2603              		.loc 2 226 9 discriminator 8 view .LVU776
 2604              		.loc 2 226 9 is_stmt 0 discriminator 8 view .LVU777
 2605              		.thumb
 2606              		.syntax unified
 2607              	.LBE179:
 2608              	.LBE178:
1053:FreeRTOS/queue.c ****         {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 116


 2609              		.loc 1 1053 9 is_stmt 1 discriminator 8 view .LVU778
1053:FreeRTOS/queue.c ****         {
 2610              		.loc 1 1053 22 is_stmt 0 discriminator 8 view .LVU779
 2611 0070 A26B     		ldr	r2, [r4, #56]
1053:FreeRTOS/queue.c ****         {
 2612              		.loc 1 1053 51 discriminator 8 view .LVU780
 2613 0072 E36B     		ldr	r3, [r4, #60]
1053:FreeRTOS/queue.c ****         {
 2614              		.loc 1 1053 11 discriminator 8 view .LVU781
 2615 0074 9A42     		cmp	r2, r3
 2616 0076 07D3     		bcc	.L192
1053:FreeRTOS/queue.c ****         {
 2617              		.loc 1 1053 64 discriminator 1 view .LVU782
 2618 0078 B8F1020F 		cmp	r8, #2
 2619 007c 04D0     		beq	.L192
1175:FreeRTOS/queue.c ****         }
 2620              		.loc 1 1175 21 view .LVU783
 2621 007e 0020     		movs	r0, #0
 2622              	.L193:
 2623              	.LVL214:
1178:FreeRTOS/queue.c **** 
 2624              		.loc 1 1178 5 is_stmt 1 view .LVU784
 2625              	.LBB180:
 2626              	.LBI180:
 227:FreeRTOS/portable/portmacro.h ****     }
 228:FreeRTOS/portable/portmacro.h **** /*-----------------------------------------------------------*/
 229:FreeRTOS/portable/portmacro.h **** 
 230:FreeRTOS/portable/portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 2627              		.loc 2 230 34 view .LVU785
 2628              	.LBB181:
 231:FreeRTOS/portable/portmacro.h ****     {
 232:FreeRTOS/portable/portmacro.h ****         __asm volatile
 2629              		.loc 2 232 9 view .LVU786
 2630              		.syntax unified
 2631              	@ 232 "FreeRTOS/portable/portmacro.h" 1
 2632 0080 86F31188 			msr basepri, r6	
 2633              	@ 0 "" 2
 2634              	.LVL215:
 2635              		.loc 2 232 9 is_stmt 0 view .LVU787
 2636              		.thumb
 2637              		.syntax unified
 2638              	.LBE181:
 2639              	.LBE180:
1180:FreeRTOS/queue.c **** }
 2640              		.loc 1 1180 5 is_stmt 1 view .LVU788
1181:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 2641              		.loc 1 1181 1 is_stmt 0 view .LVU789
 2642 0084 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2643              	.LVL216:
 2644              	.L192:
 2645              	.LBB182:
1055:FreeRTOS/queue.c ****             const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 2646              		.loc 1 1055 13 is_stmt 1 view .LVU790
1055:FreeRTOS/queue.c ****             const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 2647              		.loc 1 1055 26 is_stmt 0 view .LVU791
 2648 0088 94F84550 		ldrb	r5, [r4, #69]	@ zero_extendqisi2
 2649 008c 6DB2     		sxtb	r5, r5
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 117


 2650              	.LVL217:
1056:FreeRTOS/queue.c **** 
 2651              		.loc 1 1056 13 is_stmt 1 view .LVU792
1056:FreeRTOS/queue.c **** 
 2652              		.loc 1 1056 31 is_stmt 0 view .LVU793
 2653 008e D4F838A0 		ldr	r10, [r4, #56]
 2654              	.LVL218:
1058:FreeRTOS/queue.c **** 
 2655              		.loc 1 1058 48 is_stmt 1 view .LVU794
1065:FreeRTOS/queue.c **** 
 2656              		.loc 1 1065 13 view .LVU795
1065:FreeRTOS/queue.c **** 
 2657              		.loc 1 1065 22 is_stmt 0 view .LVU796
 2658 0092 4246     		mov	r2, r8
 2659 0094 4946     		mov	r1, r9
 2660 0096 2046     		mov	r0, r4
 2661 0098 FFF7FEFF 		bl	prvCopyDataToQueue
 2662              	.LVL219:
1069:FreeRTOS/queue.c ****             {
 2663              		.loc 1 1069 13 is_stmt 1 view .LVU797
1069:FreeRTOS/queue.c ****             {
 2664              		.loc 1 1069 15 is_stmt 0 view .LVU798
 2665 009c B5F1FF3F 		cmp	r5, #-1
 2666 00a0 07D0     		beq	.L210
1165:FreeRTOS/queue.c **** 
 2667              		.loc 1 1165 17 is_stmt 1 view .LVU799
 2668 00a2 7F2D     		cmp	r5, #127
 2669 00a4 22D0     		beq	.L211
1165:FreeRTOS/queue.c **** 
 2670              		.loc 1 1165 57 discriminator 2 view .LVU800
1167:FreeRTOS/queue.c ****             }
 2671              		.loc 1 1167 17 discriminator 2 view .LVU801
1167:FreeRTOS/queue.c ****             }
 2672              		.loc 1 1167 57 is_stmt 0 discriminator 2 view .LVU802
 2673 00a6 6B1C     		adds	r3, r5, #1
1167:FreeRTOS/queue.c ****             }
 2674              		.loc 1 1167 36 discriminator 2 view .LVU803
 2675 00a8 5BB2     		sxtb	r3, r3
1167:FreeRTOS/queue.c ****             }
 2676              		.loc 1 1167 34 discriminator 2 view .LVU804
 2677 00aa 84F84530 		strb	r3, [r4, #69]
1170:FreeRTOS/queue.c ****         }
 2678              		.loc 1 1170 21 discriminator 2 view .LVU805
 2679 00ae 0120     		movs	r0, #1
 2680 00b0 E6E7     		b	.L193
 2681              	.L210:
1073:FreeRTOS/queue.c ****                         {
 2682              		.loc 1 1073 25 is_stmt 1 view .LVU806
1073:FreeRTOS/queue.c ****                         {
 2683              		.loc 1 1073 36 is_stmt 0 view .LVU807
 2684 00b2 A36C     		ldr	r3, [r4, #72]
1073:FreeRTOS/queue.c ****                         {
 2685              		.loc 1 1073 27 view .LVU808
 2686 00b4 6BB1     		cbz	r3, .L195
1075:FreeRTOS/queue.c ****                             {
 2687              		.loc 1 1075 29 is_stmt 1 view .LVU809
1075:FreeRTOS/queue.c ****                             {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 118


 2688              		.loc 1 1075 31 is_stmt 0 view .LVU810
 2689 00b6 B8F1020F 		cmp	r8, #2
 2690 00ba 02D1     		bne	.L196
1075:FreeRTOS/queue.c ****                             {
 2691              		.loc 1 1075 69 discriminator 1 view .LVU811
 2692 00bc BAF1000F 		cmp	r10, #0
 2693 00c0 1DD1     		bne	.L200
 2694              	.L196:
1082:FreeRTOS/queue.c ****                             {
 2695              		.loc 1 1082 34 is_stmt 1 view .LVU812
1082:FreeRTOS/queue.c ****                             {
 2696              		.loc 1 1082 38 is_stmt 0 view .LVU813
 2697 00c2 2046     		mov	r0, r4
 2698 00c4 FFF7FEFF 		bl	prvNotifyQueueSetContainer
 2699              	.LVL220:
1082:FreeRTOS/queue.c ****                             {
 2700              		.loc 1 1082 36 view .LVU814
 2701 00c8 D8B1     		cbz	r0, .L201
1087:FreeRTOS/queue.c ****                                 {
 2702              		.loc 1 1087 33 is_stmt 1 view .LVU815
1087:FreeRTOS/queue.c ****                                 {
 2703              		.loc 1 1087 35 is_stmt 0 view .LVU816
 2704 00ca E7B1     		cbz	r7, .L202
1089:FreeRTOS/queue.c ****                                 }
 2705              		.loc 1 1089 37 is_stmt 1 view .LVU817
1089:FreeRTOS/queue.c ****                                 }
 2706              		.loc 1 1089 64 is_stmt 0 view .LVU818
 2707 00cc 0120     		movs	r0, #1
 2708 00ce 3860     		str	r0, [r7]
 2709 00d0 D6E7     		b	.L193
 2710              	.L195:
1103:FreeRTOS/queue.c ****                             {
 2711              		.loc 1 1103 29 is_stmt 1 view .LVU819
1103:FreeRTOS/queue.c ****                             {
 2712              		.loc 1 1103 33 is_stmt 0 view .LVU820
 2713 00d2 636A     		ldr	r3, [r4, #36]
1103:FreeRTOS/queue.c ****                             {
 2714              		.loc 1 1103 31 view .LVU821
 2715 00d4 0BB9     		cbnz	r3, .L212
1170:FreeRTOS/queue.c ****         }
 2716              		.loc 1 1170 21 view .LVU822
 2717 00d6 0120     		movs	r0, #1
 2718 00d8 D2E7     		b	.L193
 2719              	.L212:
1105:FreeRTOS/queue.c ****                                 {
 2720              		.loc 1 1105 33 is_stmt 1 view .LVU823
1105:FreeRTOS/queue.c ****                                 {
 2721              		.loc 1 1105 37 is_stmt 0 view .LVU824
 2722 00da 04F12400 		add	r0, r4, #36
 2723 00de FFF7FEFF 		bl	xTaskRemoveFromEventList
 2724              	.LVL221:
1105:FreeRTOS/queue.c ****                                 {
 2725              		.loc 1 1105 35 view .LVU825
 2726 00e2 90B1     		cbz	r0, .L204
1109:FreeRTOS/queue.c ****                                     {
 2727              		.loc 1 1109 37 is_stmt 1 view .LVU826
1109:FreeRTOS/queue.c ****                                     {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 119


 2728              		.loc 1 1109 39 is_stmt 0 view .LVU827
 2729 00e4 9FB1     		cbz	r7, .L205
1111:FreeRTOS/queue.c ****                                     }
 2730              		.loc 1 1111 41 is_stmt 1 view .LVU828
1111:FreeRTOS/queue.c ****                                     }
 2731              		.loc 1 1111 68 is_stmt 0 view .LVU829
 2732 00e6 0120     		movs	r0, #1
 2733 00e8 3860     		str	r0, [r7]
 2734 00ea C9E7     		b	.L193
 2735              	.L211:
1165:FreeRTOS/queue.c **** 
 2736              		.loc 1 1165 17 is_stmt 1 view .LVU830
 2737              	.LBB183:
 2738              	.LBI183:
 194:FreeRTOS/portable/portmacro.h ****     {
 2739              		.loc 2 194 34 view .LVU831
 2740              	.LBB184:
 196:FreeRTOS/portable/portmacro.h **** 
 2741              		.loc 2 196 9 view .LVU832
 198:FreeRTOS/portable/portmacro.h ****         (
 2742              		.loc 2 198 9 view .LVU833
 2743              		.syntax unified
 2744              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 2745 00ec 4FF05003 			mov r3, #80												
 2746 00f0 83F31188 		msr basepri, r3											
 2747 00f4 BFF36F8F 		isb														
 2748 00f8 BFF34F8F 		dsb														
 2749              	
 2750              	@ 0 "" 2
 2751              	.LVL222:
 2752              		.thumb
 2753              		.syntax unified
 2754              	.L198:
 198:FreeRTOS/portable/portmacro.h ****         (
 2755              		.loc 2 198 9 is_stmt 0 view .LVU834
 2756              	.LBE184:
 2757              	.LBE183:
1165:FreeRTOS/queue.c **** 
 2758              		.loc 1 1165 17 is_stmt 1 discriminator 9 view .LVU835
1165:FreeRTOS/queue.c **** 
 2759              		.loc 1 1165 17 discriminator 9 view .LVU836
1165:FreeRTOS/queue.c **** 
 2760              		.loc 1 1165 17 discriminator 9 view .LVU837
 2761 00fc FEE7     		b	.L198
 2762              	.L200:
1170:FreeRTOS/queue.c ****         }
 2763              		.loc 1 1170 21 is_stmt 0 view .LVU838
 2764 00fe 0120     		movs	r0, #1
 2765 0100 BEE7     		b	.L193
 2766              	.L201:
1170:FreeRTOS/queue.c ****         }
 2767              		.loc 1 1170 21 view .LVU839
 2768 0102 0120     		movs	r0, #1
 2769 0104 BCE7     		b	.L193
 2770              	.L202:
 2771 0106 0120     		movs	r0, #1
 2772 0108 BAE7     		b	.L193
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 120


 2773              	.L204:
1170:FreeRTOS/queue.c ****         }
 2774              		.loc 1 1170 21 view .LVU840
 2775 010a 0120     		movs	r0, #1
 2776 010c B8E7     		b	.L193
 2777              	.L205:
 2778 010e 0120     		movs	r0, #1
 2779 0110 B6E7     		b	.L193
 2780              	.LBE182:
 2781              		.cfi_endproc
 2782              	.LFE19:
 2784              		.section	.text.xQueueGiveFromISR,"ax",%progbits
 2785              		.align	1
 2786              		.global	xQueueGiveFromISR
 2787              		.syntax unified
 2788              		.thumb
 2789              		.thumb_func
 2790              		.fpu fpv4-sp-d16
 2792              	xQueueGiveFromISR:
 2793              	.LVL223:
 2794              	.LFB20:
1186:FreeRTOS/queue.c ****     BaseType_t xReturn;
 2795              		.loc 1 1186 1 is_stmt 1 view -0
 2796              		.cfi_startproc
 2797              		@ args = 0, pretend = 0, frame = 0
 2798              		@ frame_needed = 0, uses_anonymous_args = 0
1187:FreeRTOS/queue.c ****     UBaseType_t uxSavedInterruptStatus;
 2799              		.loc 1 1187 5 view .LVU842
1188:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 2800              		.loc 1 1188 5 view .LVU843
1189:FreeRTOS/queue.c **** 
 2801              		.loc 1 1189 5 view .LVU844
1197:FreeRTOS/queue.c **** 
 2802              		.loc 1 1197 5 view .LVU845
 2803 0000 68B1     		cbz	r0, .L233
1186:FreeRTOS/queue.c ****     BaseType_t xReturn;
 2804              		.loc 1 1186 1 is_stmt 0 discriminator 2 view .LVU846
 2805 0002 70B5     		push	{r4, r5, r6, lr}
 2806              	.LCFI41:
 2807              		.cfi_def_cfa_offset 16
 2808              		.cfi_offset 4, -16
 2809              		.cfi_offset 5, -12
 2810              		.cfi_offset 6, -8
 2811              		.cfi_offset 14, -4
 2812 0004 0E46     		mov	r6, r1
 2813 0006 0446     		mov	r4, r0
1197:FreeRTOS/queue.c **** 
 2814              		.loc 1 1197 28 is_stmt 1 discriminator 2 view .LVU847
1201:FreeRTOS/queue.c **** 
 2815              		.loc 1 1201 5 discriminator 2 view .LVU848
 2816 0008 036C     		ldr	r3, [r0, #64]
 2817 000a 8BB1     		cbz	r3, .L216
1201:FreeRTOS/queue.c **** 
 2818              		.loc 1 1201 5 view .LVU849
 2819              	.LBB185:
 2820              	.LBI185:
 194:FreeRTOS/portable/portmacro.h ****     {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 121


 2821              		.loc 2 194 34 view .LVU850
 2822              	.LBB186:
 196:FreeRTOS/portable/portmacro.h **** 
 2823              		.loc 2 196 9 view .LVU851
 198:FreeRTOS/portable/portmacro.h ****         (
 2824              		.loc 2 198 9 view .LVU852
 2825              		.syntax unified
 2826              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 2827 000c 4FF05003 			mov r3, #80												
 2828 0010 83F31188 		msr basepri, r3											
 2829 0014 BFF36F8F 		isb														
 2830 0018 BFF34F8F 		dsb														
 2831              	
 2832              	@ 0 "" 2
 2833              	.LVL224:
 2834              		.thumb
 2835              		.syntax unified
 2836              	.L217:
 198:FreeRTOS/portable/portmacro.h ****         (
 2837              		.loc 2 198 9 is_stmt 0 view .LVU853
 2838              	.LBE186:
 2839              	.LBE185:
1201:FreeRTOS/queue.c **** 
 2840              		.loc 1 1201 5 is_stmt 1 discriminator 2 view .LVU854
1201:FreeRTOS/queue.c **** 
 2841              		.loc 1 1201 5 discriminator 2 view .LVU855
1201:FreeRTOS/queue.c **** 
 2842              		.loc 1 1201 5 discriminator 2 view .LVU856
 2843 001c FEE7     		b	.L217
 2844              	.L233:
 2845              	.LCFI42:
 2846              		.cfi_def_cfa_offset 0
 2847              		.cfi_restore 4
 2848              		.cfi_restore 5
 2849              		.cfi_restore 6
 2850              		.cfi_restore 14
1197:FreeRTOS/queue.c **** 
 2851              		.loc 1 1197 5 view .LVU857
 2852              	.LBB187:
 2853              	.LBI187:
 194:FreeRTOS/portable/portmacro.h ****     {
 2854              		.loc 2 194 34 view .LVU858
 2855              	.LBB188:
 196:FreeRTOS/portable/portmacro.h **** 
 2856              		.loc 2 196 9 view .LVU859
 198:FreeRTOS/portable/portmacro.h ****         (
 2857              		.loc 2 198 9 view .LVU860
 2858              		.syntax unified
 2859              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 2860 001e 4FF05003 			mov r3, #80												
 2861 0022 83F31188 		msr basepri, r3											
 2862 0026 BFF36F8F 		isb														
 2863 002a BFF34F8F 		dsb														
 2864              	
 2865              	@ 0 "" 2
 2866              	.LVL225:
 2867              		.thumb
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 122


 2868              		.syntax unified
 2869              	.L215:
 198:FreeRTOS/portable/portmacro.h ****         (
 2870              		.loc 2 198 9 is_stmt 0 view .LVU861
 2871              	.LBE188:
 2872              	.LBE187:
1197:FreeRTOS/queue.c **** 
 2873              		.loc 1 1197 5 is_stmt 1 discriminator 1 view .LVU862
1197:FreeRTOS/queue.c **** 
 2874              		.loc 1 1197 5 discriminator 1 view .LVU863
1197:FreeRTOS/queue.c **** 
 2875              		.loc 1 1197 5 discriminator 1 view .LVU864
 2876 002e FEE7     		b	.L215
 2877              	.L216:
 2878              	.LCFI43:
 2879              		.cfi_def_cfa_offset 16
 2880              		.cfi_offset 4, -16
 2881              		.cfi_offset 5, -12
 2882              		.cfi_offset 6, -8
 2883              		.cfi_offset 14, -4
1201:FreeRTOS/queue.c **** 
 2884              		.loc 1 1201 45 discriminator 2 view .LVU865
1206:FreeRTOS/queue.c **** 
 2885              		.loc 1 1206 5 discriminator 2 view .LVU866
 2886 0030 0368     		ldr	r3, [r0]
 2887 0032 FBB1     		cbz	r3, .L234
 2888              	.L218:
1206:FreeRTOS/queue.c **** 
 2889              		.loc 1 1206 123 discriminator 8 view .LVU867
1222:FreeRTOS/queue.c **** 
 2890              		.loc 1 1222 5 discriminator 8 view .LVU868
 2891 0034 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2892              	.LVL226:
1224:FreeRTOS/queue.c ****     {
 2893              		.loc 1 1224 5 discriminator 8 view .LVU869
 2894              	.LBB189:
 2895              	.LBI189:
 210:FreeRTOS/portable/portmacro.h ****     {
 2896              		.loc 2 210 38 discriminator 8 view .LVU870
 2897              	.LBB190:
 212:FreeRTOS/portable/portmacro.h **** 
 2898              		.loc 2 212 9 discriminator 8 view .LVU871
 214:FreeRTOS/portable/portmacro.h ****         (
 2899              		.loc 2 214 9 discriminator 8 view .LVU872
 2900              		.syntax unified
 2901              	@ 214 "FreeRTOS/portable/portmacro.h" 1
 2902 0038 EFF31185 			mrs r5, basepri											
 2903 003c 4FF05003 		mov r3, #80												
 2904 0040 83F31188 		msr basepri, r3											
 2905 0044 BFF36F8F 		isb														
 2906 0048 BFF34F8F 		dsb														
 2907              	
 2908              	@ 0 "" 2
 2909              	.LVL227:
 226:FreeRTOS/portable/portmacro.h ****     }
 2910              		.loc 2 226 9 discriminator 8 view .LVU873
 226:FreeRTOS/portable/portmacro.h ****     }
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 123


 2911              		.loc 2 226 9 is_stmt 0 discriminator 8 view .LVU874
 2912              		.thumb
 2913              		.syntax unified
 2914              	.LBE190:
 2915              	.LBE189:
 2916              	.LBB191:
1226:FreeRTOS/queue.c **** 
 2917              		.loc 1 1226 9 is_stmt 1 discriminator 8 view .LVU875
1226:FreeRTOS/queue.c **** 
 2918              		.loc 1 1226 27 is_stmt 0 discriminator 8 view .LVU876
 2919 004c A26B     		ldr	r2, [r4, #56]
 2920              	.LVL228:
1231:FreeRTOS/queue.c ****         {
 2921              		.loc 1 1231 9 is_stmt 1 discriminator 8 view .LVU877
1231:FreeRTOS/queue.c ****         {
 2922              		.loc 1 1231 40 is_stmt 0 discriminator 8 view .LVU878
 2923 004e E36B     		ldr	r3, [r4, #60]
1231:FreeRTOS/queue.c ****         {
 2924              		.loc 1 1231 11 discriminator 8 view .LVU879
 2925 0050 9342     		cmp	r3, r2
 2926 0052 3BD9     		bls	.L225
 2927              	.LBB192:
1233:FreeRTOS/queue.c **** 
 2928              		.loc 1 1233 13 is_stmt 1 view .LVU880
1233:FreeRTOS/queue.c **** 
 2929              		.loc 1 1233 26 is_stmt 0 view .LVU881
 2930 0054 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 2931 0058 5BB2     		sxtb	r3, r3
 2932              	.LVL229:
1235:FreeRTOS/queue.c **** 
 2933              		.loc 1 1235 48 is_stmt 1 view .LVU882
1243:FreeRTOS/queue.c **** 
 2934              		.loc 1 1243 13 view .LVU883
1243:FreeRTOS/queue.c **** 
 2935              		.loc 1 1243 60 is_stmt 0 view .LVU884
 2936 005a 0132     		adds	r2, r2, #1
 2937              	.LVL230:
1243:FreeRTOS/queue.c **** 
 2938              		.loc 1 1243 40 view .LVU885
 2939 005c A263     		str	r2, [r4, #56]
1247:FreeRTOS/queue.c ****             {
 2940              		.loc 1 1247 13 is_stmt 1 view .LVU886
1247:FreeRTOS/queue.c ****             {
 2941              		.loc 1 1247 15 is_stmt 0 view .LVU887
 2942 005e B3F1FF3F 		cmp	r3, #-1
 2943 0062 13D0     		beq	.L235
1333:FreeRTOS/queue.c **** 
 2944              		.loc 1 1333 17 is_stmt 1 view .LVU888
 2945 0064 7F2B     		cmp	r3, #127
 2946 0066 28D0     		beq	.L236
1333:FreeRTOS/queue.c **** 
 2947              		.loc 1 1333 57 discriminator 2 view .LVU889
1335:FreeRTOS/queue.c ****             }
 2948              		.loc 1 1335 17 discriminator 2 view .LVU890
1335:FreeRTOS/queue.c ****             }
 2949              		.loc 1 1335 57 is_stmt 0 discriminator 2 view .LVU891
 2950 0068 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 124


 2951              	.LVL231:
1335:FreeRTOS/queue.c ****             }
 2952              		.loc 1 1335 36 discriminator 2 view .LVU892
 2953 006a 5BB2     		sxtb	r3, r3
 2954              	.LVL232:
1335:FreeRTOS/queue.c ****             }
 2955              		.loc 1 1335 34 discriminator 2 view .LVU893
 2956 006c 84F84530 		strb	r3, [r4, #69]
1338:FreeRTOS/queue.c ****         }
 2957              		.loc 1 1338 21 discriminator 2 view .LVU894
 2958 0070 0120     		movs	r0, #1
 2959 0072 2CE0     		b	.L220
 2960              	.LVL233:
 2961              	.L234:
1338:FreeRTOS/queue.c ****         }
 2962              		.loc 1 1338 21 discriminator 2 view .LVU895
 2963              	.LBE192:
 2964              	.LBE191:
1206:FreeRTOS/queue.c **** 
 2965              		.loc 1 1206 5 discriminator 2 view .LVU896
 2966 0074 8368     		ldr	r3, [r0, #8]
 2967 0076 002B     		cmp	r3, #0
 2968 0078 DCD0     		beq	.L218
1206:FreeRTOS/queue.c **** 
 2969              		.loc 1 1206 5 is_stmt 1 view .LVU897
 2970              	.LBB197:
 2971              	.LBI197:
 194:FreeRTOS/portable/portmacro.h ****     {
 2972              		.loc 2 194 34 view .LVU898
 2973              	.LBB198:
 196:FreeRTOS/portable/portmacro.h **** 
 2974              		.loc 2 196 9 view .LVU899
 198:FreeRTOS/portable/portmacro.h ****         (
 2975              		.loc 2 198 9 view .LVU900
 2976              		.syntax unified
 2977              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 2978 007a 4FF05003 			mov r3, #80												
 2979 007e 83F31188 		msr basepri, r3											
 2980 0082 BFF36F8F 		isb														
 2981 0086 BFF34F8F 		dsb														
 2982              	
 2983              	@ 0 "" 2
 2984              	.LVL234:
 2985              		.thumb
 2986              		.syntax unified
 2987              	.L219:
 198:FreeRTOS/portable/portmacro.h ****         (
 2988              		.loc 2 198 9 is_stmt 0 view .LVU901
 2989              	.LBE198:
 2990              	.LBE197:
1206:FreeRTOS/queue.c **** 
 2991              		.loc 1 1206 5 is_stmt 1 discriminator 3 view .LVU902
1206:FreeRTOS/queue.c **** 
 2992              		.loc 1 1206 5 discriminator 3 view .LVU903
1206:FreeRTOS/queue.c **** 
 2993              		.loc 1 1206 5 discriminator 3 view .LVU904
 2994 008a FEE7     		b	.L219
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 125


 2995              	.LVL235:
 2996              	.L235:
 2997              	.LBB199:
 2998              	.LBB195:
1251:FreeRTOS/queue.c ****                         {
 2999              		.loc 1 1251 25 view .LVU905
1251:FreeRTOS/queue.c ****                         {
 3000              		.loc 1 1251 36 is_stmt 0 view .LVU906
 3001 008c A36C     		ldr	r3, [r4, #72]
 3002              	.LVL236:
1251:FreeRTOS/queue.c ****                         {
 3003              		.loc 1 1251 27 view .LVU907
 3004 008e 3BB1     		cbz	r3, .L222
1253:FreeRTOS/queue.c ****                             {
 3005              		.loc 1 1253 29 is_stmt 1 view .LVU908
1253:FreeRTOS/queue.c ****                             {
 3006              		.loc 1 1253 33 is_stmt 0 view .LVU909
 3007 0090 2046     		mov	r0, r4
 3008 0092 FFF7FEFF 		bl	prvNotifyQueueSetContainer
 3009              	.LVL237:
1253:FreeRTOS/queue.c ****                             {
 3010              		.loc 1 1253 31 view .LVU910
 3011 0096 E8B1     		cbz	r0, .L226
1258:FreeRTOS/queue.c ****                                 {
 3012              		.loc 1 1258 33 is_stmt 1 view .LVU911
1258:FreeRTOS/queue.c ****                                 {
 3013              		.loc 1 1258 35 is_stmt 0 view .LVU912
 3014 0098 F6B1     		cbz	r6, .L227
1260:FreeRTOS/queue.c ****                                 }
 3015              		.loc 1 1260 37 is_stmt 1 view .LVU913
1260:FreeRTOS/queue.c ****                                 }
 3016              		.loc 1 1260 64 is_stmt 0 view .LVU914
 3017 009a 0120     		movs	r0, #1
 3018 009c 3060     		str	r0, [r6]
 3019 009e 16E0     		b	.L220
 3020              	.LVL238:
 3021              	.L222:
1274:FreeRTOS/queue.c ****                             {
 3022              		.loc 1 1274 29 is_stmt 1 view .LVU915
1274:FreeRTOS/queue.c ****                             {
 3023              		.loc 1 1274 33 is_stmt 0 view .LVU916
 3024 00a0 636A     		ldr	r3, [r4, #36]
1274:FreeRTOS/queue.c ****                             {
 3025              		.loc 1 1274 31 view .LVU917
 3026 00a2 0BB9     		cbnz	r3, .L237
1338:FreeRTOS/queue.c ****         }
 3027              		.loc 1 1338 21 view .LVU918
 3028 00a4 0120     		movs	r0, #1
 3029 00a6 12E0     		b	.L220
 3030              	.L237:
1276:FreeRTOS/queue.c ****                                 {
 3031              		.loc 1 1276 33 is_stmt 1 view .LVU919
1276:FreeRTOS/queue.c ****                                 {
 3032              		.loc 1 1276 37 is_stmt 0 view .LVU920
 3033 00a8 04F12400 		add	r0, r4, #36
 3034 00ac FFF7FEFF 		bl	xTaskRemoveFromEventList
 3035              	.LVL239:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 126


1276:FreeRTOS/queue.c ****                                 {
 3036              		.loc 1 1276 35 view .LVU921
 3037 00b0 A0B1     		cbz	r0, .L229
1280:FreeRTOS/queue.c ****                                     {
 3038              		.loc 1 1280 37 is_stmt 1 view .LVU922
1280:FreeRTOS/queue.c ****                                     {
 3039              		.loc 1 1280 39 is_stmt 0 view .LVU923
 3040 00b2 AEB1     		cbz	r6, .L230
1282:FreeRTOS/queue.c ****                                     }
 3041              		.loc 1 1282 41 is_stmt 1 view .LVU924
1282:FreeRTOS/queue.c ****                                     }
 3042              		.loc 1 1282 68 is_stmt 0 view .LVU925
 3043 00b4 0120     		movs	r0, #1
 3044 00b6 3060     		str	r0, [r6]
 3045 00b8 09E0     		b	.L220
 3046              	.LVL240:
 3047              	.L236:
1333:FreeRTOS/queue.c **** 
 3048              		.loc 1 1333 17 is_stmt 1 view .LVU926
 3049              	.LBB193:
 3050              	.LBI193:
 194:FreeRTOS/portable/portmacro.h ****     {
 3051              		.loc 2 194 34 view .LVU927
 3052              	.LBB194:
 196:FreeRTOS/portable/portmacro.h **** 
 3053              		.loc 2 196 9 view .LVU928
 198:FreeRTOS/portable/portmacro.h ****         (
 3054              		.loc 2 198 9 view .LVU929
 3055              		.syntax unified
 3056              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 3057 00ba 4FF05003 			mov r3, #80												
 3058 00be 83F31188 		msr basepri, r3											
 3059 00c2 BFF36F8F 		isb														
 3060 00c6 BFF34F8F 		dsb														
 3061              	
 3062              	@ 0 "" 2
 3063              	.LVL241:
 3064              		.thumb
 3065              		.syntax unified
 3066              	.L224:
 198:FreeRTOS/portable/portmacro.h ****         (
 3067              		.loc 2 198 9 is_stmt 0 view .LVU930
 3068              	.LBE194:
 3069              	.LBE193:
1333:FreeRTOS/queue.c **** 
 3070              		.loc 1 1333 17 is_stmt 1 discriminator 8 view .LVU931
1333:FreeRTOS/queue.c **** 
 3071              		.loc 1 1333 17 discriminator 8 view .LVU932
1333:FreeRTOS/queue.c **** 
 3072              		.loc 1 1333 17 discriminator 8 view .LVU933
 3073 00ca FEE7     		b	.L224
 3074              	.LVL242:
 3075              	.L225:
1333:FreeRTOS/queue.c **** 
 3076              		.loc 1 1333 17 is_stmt 0 discriminator 8 view .LVU934
 3077              	.LBE195:
1343:FreeRTOS/queue.c ****         }
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 127


 3078              		.loc 1 1343 21 view .LVU935
 3079 00cc 0020     		movs	r0, #0
 3080              	.LVL243:
 3081              	.L220:
1343:FreeRTOS/queue.c ****         }
 3082              		.loc 1 1343 21 view .LVU936
 3083              	.LBE199:
1346:FreeRTOS/queue.c **** 
 3084              		.loc 1 1346 5 is_stmt 1 view .LVU937
 3085              	.LBB200:
 3086              	.LBI200:
 230:FreeRTOS/portable/portmacro.h ****     {
 3087              		.loc 2 230 34 view .LVU938
 3088              	.LBB201:
 3089              		.loc 2 232 9 view .LVU939
 3090              		.syntax unified
 3091              	@ 232 "FreeRTOS/portable/portmacro.h" 1
 3092 00ce 85F31188 			msr basepri, r5	
 3093              	@ 0 "" 2
 3094              	.LVL244:
 3095              		.loc 2 232 9 is_stmt 0 view .LVU940
 3096              		.thumb
 3097              		.syntax unified
 3098              	.LBE201:
 3099              	.LBE200:
1348:FreeRTOS/queue.c **** }
 3100              		.loc 1 1348 5 is_stmt 1 view .LVU941
1349:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 3101              		.loc 1 1349 1 is_stmt 0 view .LVU942
 3102 00d2 70BD     		pop	{r4, r5, r6, pc}
 3103              	.LVL245:
 3104              	.L226:
 3105              	.LBB202:
 3106              	.LBB196:
1338:FreeRTOS/queue.c ****         }
 3107              		.loc 1 1338 21 view .LVU943
 3108 00d4 0120     		movs	r0, #1
 3109 00d6 FAE7     		b	.L220
 3110              	.L227:
 3111 00d8 0120     		movs	r0, #1
 3112 00da F8E7     		b	.L220
 3113              	.L229:
1338:FreeRTOS/queue.c ****         }
 3114              		.loc 1 1338 21 view .LVU944
 3115 00dc 0120     		movs	r0, #1
 3116 00de F6E7     		b	.L220
 3117              	.L230:
 3118 00e0 0120     		movs	r0, #1
 3119 00e2 F4E7     		b	.L220
 3120              	.LBE196:
 3121              	.LBE202:
 3122              		.cfi_endproc
 3123              	.LFE20:
 3125              		.section	.text.xQueueReceive,"ax",%progbits
 3126              		.align	1
 3127              		.global	xQueueReceive
 3128              		.syntax unified
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 128


 3129              		.thumb
 3130              		.thumb_func
 3131              		.fpu fpv4-sp-d16
 3133              	xQueueReceive:
 3134              	.LVL246:
 3135              	.LFB21:
1355:FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 3136              		.loc 1 1355 1 is_stmt 1 view -0
 3137              		.cfi_startproc
 3138              		@ args = 0, pretend = 0, frame = 16
 3139              		@ frame_needed = 0, uses_anonymous_args = 0
1355:FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 3140              		.loc 1 1355 1 is_stmt 0 view .LVU946
 3141 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3142              	.LCFI44:
 3143              		.cfi_def_cfa_offset 20
 3144              		.cfi_offset 4, -20
 3145              		.cfi_offset 5, -16
 3146              		.cfi_offset 6, -12
 3147              		.cfi_offset 7, -8
 3148              		.cfi_offset 14, -4
 3149 0002 85B0     		sub	sp, sp, #20
 3150              	.LCFI45:
 3151              		.cfi_def_cfa_offset 40
 3152 0004 0192     		str	r2, [sp, #4]
1356:FreeRTOS/queue.c ****     TimeOut_t xTimeOut;
 3153              		.loc 1 1356 5 is_stmt 1 view .LVU947
 3154              	.LVL247:
1357:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 3155              		.loc 1 1357 5 view .LVU948
1358:FreeRTOS/queue.c **** 
 3156              		.loc 1 1358 5 view .LVU949
1361:FreeRTOS/queue.c **** 
 3157              		.loc 1 1361 5 view .LVU950
 3158 0006 90B1     		cbz	r0, .L258
 3159 0008 0E46     		mov	r6, r1
 3160 000a 0446     		mov	r4, r0
1361:FreeRTOS/queue.c **** 
 3161              		.loc 1 1361 32 discriminator 2 view .LVU951
1365:FreeRTOS/queue.c **** 
 3162              		.loc 1 1365 5 discriminator 2 view .LVU952
 3163 000c C1B1     		cbz	r1, .L259
 3164              	.L241:
1365:FreeRTOS/queue.c **** 
 3165              		.loc 1 1365 103 discriminator 8 view .LVU953
1370:FreeRTOS/queue.c ****         }
 3166              		.loc 1 1370 13 discriminator 8 view .LVU954
 3167 000e FFF7FEFF 		bl	xTaskGetSchedulerState
 3168              	.LVL248:
1370:FreeRTOS/queue.c ****         }
 3169              		.loc 1 1370 13 is_stmt 0 discriminator 8 view .LVU955
 3170 0012 0746     		mov	r7, r0
 3171 0014 00BB     		cbnz	r0, .L256
1370:FreeRTOS/queue.c ****         }
 3172              		.loc 1 1370 13 discriminator 2 view .LVU956
 3173 0016 019B     		ldr	r3, [sp, #4]
 3174 0018 002B     		cmp	r3, #0
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 129


 3175 001a 5CD0     		beq	.L245
1370:FreeRTOS/queue.c ****         }
 3176              		.loc 1 1370 13 is_stmt 1 view .LVU957
 3177              	.LBB203:
 3178              	.LBI203:
 194:FreeRTOS/portable/portmacro.h ****     {
 3179              		.loc 2 194 34 view .LVU958
 3180              	.LBB204:
 196:FreeRTOS/portable/portmacro.h **** 
 3181              		.loc 2 196 9 view .LVU959
 198:FreeRTOS/portable/portmacro.h ****         (
 3182              		.loc 2 198 9 view .LVU960
 3183              		.syntax unified
 3184              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 3185 001c 4FF05003 			mov r3, #80												
 3186 0020 83F31188 		msr basepri, r3											
 3187 0024 BFF36F8F 		isb														
 3188 0028 BFF34F8F 		dsb														
 3189              	
 3190              	@ 0 "" 2
 3191              	.LVL249:
 3192              		.thumb
 3193              		.syntax unified
 3194              	.L244:
 198:FreeRTOS/portable/portmacro.h ****         (
 3195              		.loc 2 198 9 is_stmt 0 view .LVU961
 3196              	.LBE204:
 3197              	.LBE203:
1370:FreeRTOS/queue.c ****         }
 3198              		.loc 1 1370 13 is_stmt 1 discriminator 3 view .LVU962
1370:FreeRTOS/queue.c ****         }
 3199              		.loc 1 1370 13 discriminator 3 view .LVU963
1370:FreeRTOS/queue.c ****         }
 3200              		.loc 1 1370 13 discriminator 3 view .LVU964
 3201 002c FEE7     		b	.L244
 3202              	.LVL250:
 3203              	.L258:
1361:FreeRTOS/queue.c **** 
 3204              		.loc 1 1361 5 view .LVU965
 3205              	.LBB205:
 3206              	.LBI205:
 194:FreeRTOS/portable/portmacro.h ****     {
 3207              		.loc 2 194 34 view .LVU966
 3208              	.LBB206:
 196:FreeRTOS/portable/portmacro.h **** 
 3209              		.loc 2 196 9 view .LVU967
 198:FreeRTOS/portable/portmacro.h ****         (
 3210              		.loc 2 198 9 view .LVU968
 3211              		.syntax unified
 3212              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 3213 002e 4FF05003 			mov r3, #80												
 3214 0032 83F31188 		msr basepri, r3											
 3215 0036 BFF36F8F 		isb														
 3216 003a BFF34F8F 		dsb														
 3217              	
 3218              	@ 0 "" 2
 3219              	.LVL251:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 130


 3220              		.thumb
 3221              		.syntax unified
 3222              	.L240:
 198:FreeRTOS/portable/portmacro.h ****         (
 3223              		.loc 2 198 9 is_stmt 0 view .LVU969
 3224              	.LBE206:
 3225              	.LBE205:
1361:FreeRTOS/queue.c **** 
 3226              		.loc 1 1361 5 is_stmt 1 discriminator 1 view .LVU970
1361:FreeRTOS/queue.c **** 
 3227              		.loc 1 1361 5 discriminator 1 view .LVU971
1361:FreeRTOS/queue.c **** 
 3228              		.loc 1 1361 5 discriminator 1 view .LVU972
 3229 003e FEE7     		b	.L240
 3230              	.L259:
1365:FreeRTOS/queue.c **** 
 3231              		.loc 1 1365 5 is_stmt 0 discriminator 2 view .LVU973
 3232 0040 036C     		ldr	r3, [r0, #64]
 3233 0042 002B     		cmp	r3, #0
 3234 0044 E3D0     		beq	.L241
1365:FreeRTOS/queue.c **** 
 3235              		.loc 1 1365 5 is_stmt 1 view .LVU974
 3236              	.LBB207:
 3237              	.LBI207:
 194:FreeRTOS/portable/portmacro.h ****     {
 3238              		.loc 2 194 34 view .LVU975
 3239              	.LBB208:
 196:FreeRTOS/portable/portmacro.h **** 
 3240              		.loc 2 196 9 view .LVU976
 198:FreeRTOS/portable/portmacro.h ****         (
 3241              		.loc 2 198 9 view .LVU977
 3242              		.syntax unified
 3243              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 3244 0046 4FF05003 			mov r3, #80												
 3245 004a 83F31188 		msr basepri, r3											
 3246 004e BFF36F8F 		isb														
 3247 0052 BFF34F8F 		dsb														
 3248              	
 3249              	@ 0 "" 2
 3250              	.LVL252:
 3251              		.thumb
 3252              		.syntax unified
 3253              	.L242:
 198:FreeRTOS/portable/portmacro.h ****         (
 3254              		.loc 2 198 9 is_stmt 0 view .LVU978
 3255              	.LBE208:
 3256              	.LBE207:
1365:FreeRTOS/queue.c **** 
 3257              		.loc 1 1365 5 is_stmt 1 discriminator 2 view .LVU979
1365:FreeRTOS/queue.c **** 
 3258              		.loc 1 1365 5 discriminator 2 view .LVU980
1365:FreeRTOS/queue.c **** 
 3259              		.loc 1 1365 5 discriminator 2 view .LVU981
 3260 0056 FEE7     		b	.L242
 3261              	.LVL253:
 3262              	.L256:
1365:FreeRTOS/queue.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 131


 3263              		.loc 1 1365 5 is_stmt 0 discriminator 2 view .LVU982
 3264 0058 0027     		movs	r7, #0
 3265 005a 3CE0     		b	.L245
 3266              	.LVL254:
 3267              	.L262:
 3268              	.LBB209:
1388:FreeRTOS/queue.c ****                 traceQUEUE_RECEIVE( pxQueue );
 3269              		.loc 1 1388 17 is_stmt 1 view .LVU983
 3270 005c 3146     		mov	r1, r6
 3271 005e 2046     		mov	r0, r4
 3272 0060 FFF7FEFF 		bl	prvCopyDataFromQueue
 3273              	.LVL255:
1389:FreeRTOS/queue.c ****                 pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 3274              		.loc 1 1389 46 view .LVU984
1390:FreeRTOS/queue.c **** 
 3275              		.loc 1 1390 17 view .LVU985
1390:FreeRTOS/queue.c **** 
 3276              		.loc 1 1390 64 is_stmt 0 view .LVU986
 3277 0064 013D     		subs	r5, r5, #1
 3278              	.LVL256:
1390:FreeRTOS/queue.c **** 
 3279              		.loc 1 1390 44 view .LVU987
 3280 0066 A563     		str	r5, [r4, #56]
1395:FreeRTOS/queue.c ****                 {
 3281              		.loc 1 1395 17 is_stmt 1 view .LVU988
1395:FreeRTOS/queue.c ****                 {
 3282              		.loc 1 1395 21 is_stmt 0 view .LVU989
 3283 0068 2369     		ldr	r3, [r4, #16]
1395:FreeRTOS/queue.c ****                 {
 3284              		.loc 1 1395 19 view .LVU990
 3285 006a 23B9     		cbnz	r3, .L260
 3286              	.L247:
1408:FreeRTOS/queue.c ****                 }
 3287              		.loc 1 1408 45 is_stmt 1 view .LVU991
1411:FreeRTOS/queue.c ****                 return pdPASS;
 3288              		.loc 1 1411 17 view .LVU992
 3289 006c FFF7FEFF 		bl	vPortExitCritical
 3290              	.LVL257:
1412:FreeRTOS/queue.c ****             }
 3291              		.loc 1 1412 17 view .LVU993
1412:FreeRTOS/queue.c ****             }
 3292              		.loc 1 1412 24 is_stmt 0 view .LVU994
 3293 0070 0120     		movs	r0, #1
 3294              	.LVL258:
 3295              	.L238:
1412:FreeRTOS/queue.c ****             }
 3296              		.loc 1 1412 24 view .LVU995
 3297              	.LBE209:
1492:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 3298              		.loc 1 1492 1 view .LVU996
 3299 0072 05B0     		add	sp, sp, #20
 3300              	.LCFI46:
 3301              		.cfi_remember_state
 3302              		.cfi_def_cfa_offset 20
 3303              		@ sp needed
 3304 0074 F0BD     		pop	{r4, r5, r6, r7, pc}
 3305              	.LVL259:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 132


 3306              	.L260:
 3307              	.LCFI47:
 3308              		.cfi_restore_state
 3309              	.LBB210:
1397:FreeRTOS/queue.c ****                     {
 3310              		.loc 1 1397 21 is_stmt 1 view .LVU997
1397:FreeRTOS/queue.c ****                     {
 3311              		.loc 1 1397 25 is_stmt 0 view .LVU998
 3312 0076 04F11000 		add	r0, r4, #16
 3313 007a FFF7FEFF 		bl	xTaskRemoveFromEventList
 3314              	.LVL260:
1397:FreeRTOS/queue.c ****                     {
 3315              		.loc 1 1397 23 view .LVU999
 3316 007e 0028     		cmp	r0, #0
 3317 0080 F4D0     		beq	.L247
1399:FreeRTOS/queue.c ****                     }
 3318              		.loc 1 1399 25 is_stmt 1 view .LVU1000
 3319 0082 354B     		ldr	r3, .L267
 3320 0084 4FF08052 		mov	r2, #268435456
 3321 0088 1A60     		str	r2, [r3]
1399:FreeRTOS/queue.c ****                     }
 3322              		.loc 1 1399 25 view .LVU1001
 3323              		.syntax unified
 3324              	@ 1399 "FreeRTOS/queue.c" 1
 3325 008a BFF34F8F 		dsb
 3326              	@ 0 "" 2
1399:FreeRTOS/queue.c ****                     }
 3327              		.loc 1 1399 25 view .LVU1002
 3328              	@ 1399 "FreeRTOS/queue.c" 1
 3329 008e BFF36F8F 		isb
 3330              	@ 0 "" 2
1399:FreeRTOS/queue.c ****                     }
 3331              		.loc 1 1399 57 view .LVU1003
 3332              		.thumb
 3333              		.syntax unified
 3334 0092 EBE7     		b	.L247
 3335              	.LVL261:
 3336              	.L263:
1420:FreeRTOS/queue.c ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
 3337              		.loc 1 1420 21 view .LVU1004
 3338 0094 FFF7FEFF 		bl	vPortExitCritical
 3339              	.LVL262:
1421:FreeRTOS/queue.c ****                     return errQUEUE_EMPTY;
 3340              		.loc 1 1421 57 view .LVU1005
1422:FreeRTOS/queue.c ****                 }
 3341              		.loc 1 1422 21 view .LVU1006
1422:FreeRTOS/queue.c ****                 }
 3342              		.loc 1 1422 28 is_stmt 0 view .LVU1007
 3343 0098 0020     		movs	r0, #0
 3344 009a EAE7     		b	.L238
 3345              	.L264:
1428:FreeRTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
 3346              		.loc 1 1428 21 is_stmt 1 view .LVU1008
 3347 009c 02A8     		add	r0, sp, #8
 3348 009e FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 3349              	.LVL263:
1429:FreeRTOS/queue.c ****                 }
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 133


 3350              		.loc 1 1429 21 view .LVU1009
1429:FreeRTOS/queue.c ****                 }
 3351              		.loc 1 1429 35 is_stmt 0 view .LVU1010
 3352 00a2 0127     		movs	r7, #1
 3353 00a4 21E0     		b	.L250
 3354              	.LVL264:
 3355              	.L265:
1429:FreeRTOS/queue.c ****                 }
 3356              		.loc 1 1429 35 view .LVU1011
 3357              	.LBE210:
1444:FreeRTOS/queue.c **** 
 3358              		.loc 1 1444 9 is_stmt 1 discriminator 1 view .LVU1012
 3359 00a6 0023     		movs	r3, #0
 3360 00a8 84F84430 		strb	r3, [r4, #68]
 3361 00ac 29E0     		b	.L251
 3362              	.L266:
1444:FreeRTOS/queue.c **** 
 3363              		.loc 1 1444 9 discriminator 4 view .LVU1013
 3364 00ae 0023     		movs	r3, #0
 3365 00b0 84F84530 		strb	r3, [r4, #69]
 3366 00b4 2BE0     		b	.L252
 3367              	.L254:
1470:FreeRTOS/queue.c ****                 ( void ) xTaskResumeAll();
 3368              		.loc 1 1470 17 view .LVU1014
 3369 00b6 2046     		mov	r0, r4
 3370 00b8 FFF7FEFF 		bl	prvUnlockQueue
 3371              	.LVL265:
1471:FreeRTOS/queue.c ****             }
 3372              		.loc 1 1471 17 view .LVU1015
1471:FreeRTOS/queue.c ****             }
 3373              		.loc 1 1471 26 is_stmt 0 view .LVU1016
 3374 00bc FFF7FEFF 		bl	xTaskResumeAll
 3375              	.LVL266:
 3376 00c0 09E0     		b	.L245
 3377              	.L253:
1478:FreeRTOS/queue.c ****             ( void ) xTaskResumeAll();
 3378              		.loc 1 1478 13 is_stmt 1 view .LVU1017
 3379 00c2 2046     		mov	r0, r4
 3380 00c4 FFF7FEFF 		bl	prvUnlockQueue
 3381              	.LVL267:
1479:FreeRTOS/queue.c **** 
 3382              		.loc 1 1479 13 view .LVU1018
1479:FreeRTOS/queue.c **** 
 3383              		.loc 1 1479 22 is_stmt 0 view .LVU1019
 3384 00c8 FFF7FEFF 		bl	xTaskResumeAll
 3385              	.LVL268:
1481:FreeRTOS/queue.c ****             {
 3386              		.loc 1 1481 13 is_stmt 1 view .LVU1020
1481:FreeRTOS/queue.c ****             {
 3387              		.loc 1 1481 17 is_stmt 0 view .LVU1021
 3388 00cc 2046     		mov	r0, r4
 3389 00ce FFF7FEFF 		bl	prvIsQueueEmpty
 3390              	.LVL269:
1481:FreeRTOS/queue.c ****             {
 3391              		.loc 1 1481 15 view .LVU1022
 3392 00d2 0028     		cmp	r0, #0
 3393 00d4 3DD1     		bne	.L261
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 134


 3394              	.LVL270:
 3395              	.L245:
1370:FreeRTOS/queue.c ****         }
 3396              		.loc 1 1370 114 is_stmt 1 discriminator 8 view .LVU1023
1377:FreeRTOS/queue.c ****     {
 3397              		.loc 1 1377 5 discriminator 8 view .LVU1024
1379:FreeRTOS/queue.c ****         {
 3398              		.loc 1 1379 9 discriminator 8 view .LVU1025
 3399 00d6 FFF7FEFF 		bl	vPortEnterCritical
 3400              	.LVL271:
 3401              	.LBB211:
1381:FreeRTOS/queue.c **** 
 3402              		.loc 1 1381 13 discriminator 8 view .LVU1026
1381:FreeRTOS/queue.c **** 
 3403              		.loc 1 1381 31 is_stmt 0 discriminator 8 view .LVU1027
 3404 00da A56B     		ldr	r5, [r4, #56]
 3405              	.LVL272:
1385:FreeRTOS/queue.c ****             {
 3406              		.loc 1 1385 13 is_stmt 1 discriminator 8 view .LVU1028
1385:FreeRTOS/queue.c ****             {
 3407              		.loc 1 1385 15 is_stmt 0 discriminator 8 view .LVU1029
 3408 00dc 002D     		cmp	r5, #0
 3409 00de BDD1     		bne	.L262
1416:FreeRTOS/queue.c ****                 {
 3410              		.loc 1 1416 17 is_stmt 1 view .LVU1030
1416:FreeRTOS/queue.c ****                 {
 3411              		.loc 1 1416 34 is_stmt 0 view .LVU1031
 3412 00e0 019B     		ldr	r3, [sp, #4]
1416:FreeRTOS/queue.c ****                 {
 3413              		.loc 1 1416 19 view .LVU1032
 3414 00e2 002B     		cmp	r3, #0
 3415 00e4 D6D0     		beq	.L263
1424:FreeRTOS/queue.c ****                 {
 3416              		.loc 1 1424 22 is_stmt 1 view .LVU1033
1424:FreeRTOS/queue.c ****                 {
 3417              		.loc 1 1424 24 is_stmt 0 view .LVU1034
 3418 00e6 002F     		cmp	r7, #0
 3419 00e8 D8D0     		beq	.L264
 3420              	.LVL273:
 3421              	.L250:
1434:FreeRTOS/queue.c ****                 }
 3422              		.loc 1 1434 45 is_stmt 1 view .LVU1035
 3423              	.LBE211:
1438:FreeRTOS/queue.c **** 
 3424              		.loc 1 1438 9 view .LVU1036
 3425 00ea FFF7FEFF 		bl	vPortExitCritical
 3426              	.LVL274:
1443:FreeRTOS/queue.c ****         prvLockQueue( pxQueue );
 3427              		.loc 1 1443 9 view .LVU1037
 3428 00ee FFF7FEFF 		bl	vTaskSuspendAll
 3429              	.LVL275:
1444:FreeRTOS/queue.c **** 
 3430              		.loc 1 1444 9 view .LVU1038
 3431 00f2 FFF7FEFF 		bl	vPortEnterCritical
 3432              	.LVL276:
1444:FreeRTOS/queue.c **** 
 3433              		.loc 1 1444 9 view .LVU1039
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 135


 3434 00f6 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 3435 00fa 5BB2     		sxtb	r3, r3
 3436 00fc B3F1FF3F 		cmp	r3, #-1
 3437 0100 D1D0     		beq	.L265
 3438              	.L251:
1444:FreeRTOS/queue.c **** 
 3439              		.loc 1 1444 9 discriminator 3 view .LVU1040
 3440 0102 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 3441 0106 5BB2     		sxtb	r3, r3
 3442 0108 B3F1FF3F 		cmp	r3, #-1
 3443 010c CFD0     		beq	.L266
 3444              	.L252:
1444:FreeRTOS/queue.c **** 
 3445              		.loc 1 1444 9 discriminator 6 view .LVU1041
 3446 010e FFF7FEFF 		bl	vPortExitCritical
 3447              	.LVL277:
1447:FreeRTOS/queue.c ****         {
 3448              		.loc 1 1447 9 discriminator 6 view .LVU1042
1447:FreeRTOS/queue.c ****         {
 3449              		.loc 1 1447 13 is_stmt 0 discriminator 6 view .LVU1043
 3450 0112 01A9     		add	r1, sp, #4
 3451 0114 02A8     		add	r0, sp, #8
 3452 0116 FFF7FEFF 		bl	xTaskCheckForTimeOut
 3453              	.LVL278:
1447:FreeRTOS/queue.c ****         {
 3454              		.loc 1 1447 11 discriminator 6 view .LVU1044
 3455 011a 0028     		cmp	r0, #0
 3456 011c D1D1     		bne	.L253
1451:FreeRTOS/queue.c ****             {
 3457              		.loc 1 1451 13 is_stmt 1 view .LVU1045
1451:FreeRTOS/queue.c ****             {
 3458              		.loc 1 1451 17 is_stmt 0 view .LVU1046
 3459 011e 2046     		mov	r0, r4
 3460 0120 FFF7FEFF 		bl	prvIsQueueEmpty
 3461              	.LVL279:
1451:FreeRTOS/queue.c ****             {
 3462              		.loc 1 1451 15 view .LVU1047
 3463 0124 0028     		cmp	r0, #0
 3464 0126 C6D0     		beq	.L254
1453:FreeRTOS/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 3465              		.loc 1 1453 58 is_stmt 1 view .LVU1048
1454:FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 3466              		.loc 1 1454 17 view .LVU1049
 3467 0128 0199     		ldr	r1, [sp, #4]
 3468 012a 04F12400 		add	r0, r4, #36
 3469 012e FFF7FEFF 		bl	vTaskPlaceOnEventList
 3470              	.LVL280:
1455:FreeRTOS/queue.c **** 
 3471              		.loc 1 1455 17 view .LVU1050
 3472 0132 2046     		mov	r0, r4
 3473 0134 FFF7FEFF 		bl	prvUnlockQueue
 3474              	.LVL281:
1457:FreeRTOS/queue.c ****                 {
 3475              		.loc 1 1457 17 view .LVU1051
1457:FreeRTOS/queue.c ****                 {
 3476              		.loc 1 1457 21 is_stmt 0 view .LVU1052
 3477 0138 FFF7FEFF 		bl	xTaskResumeAll
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 136


 3478              	.LVL282:
1457:FreeRTOS/queue.c ****                 {
 3479              		.loc 1 1457 19 view .LVU1053
 3480 013c 0028     		cmp	r0, #0
 3481 013e CAD1     		bne	.L245
1459:FreeRTOS/queue.c ****                 }
 3482              		.loc 1 1459 21 is_stmt 1 view .LVU1054
 3483 0140 054B     		ldr	r3, .L267
 3484 0142 4FF08052 		mov	r2, #268435456
 3485 0146 1A60     		str	r2, [r3]
1459:FreeRTOS/queue.c ****                 }
 3486              		.loc 1 1459 21 view .LVU1055
 3487              		.syntax unified
 3488              	@ 1459 "FreeRTOS/queue.c" 1
 3489 0148 BFF34F8F 		dsb
 3490              	@ 0 "" 2
1459:FreeRTOS/queue.c ****                 }
 3491              		.loc 1 1459 21 view .LVU1056
 3492              	@ 1459 "FreeRTOS/queue.c" 1
 3493 014c BFF36F8F 		isb
 3494              	@ 0 "" 2
1459:FreeRTOS/queue.c ****                 }
 3495              		.loc 1 1459 43 view .LVU1057
 3496              		.thumb
 3497              		.syntax unified
 3498 0150 C1E7     		b	.L245
 3499              	.L261:
1484:FreeRTOS/queue.c ****             }
 3500              		.loc 1 1484 24 is_stmt 0 view .LVU1058
 3501 0152 0020     		movs	r0, #0
 3502 0154 8DE7     		b	.L238
 3503              	.L268:
 3504 0156 00BF     		.align	2
 3505              	.L267:
 3506 0158 04ED00E0 		.word	-536810236
 3507              		.cfi_endproc
 3508              	.LFE21:
 3510              		.section	.text.xQueueSemaphoreTake,"ax",%progbits
 3511              		.align	1
 3512              		.global	xQueueSemaphoreTake
 3513              		.syntax unified
 3514              		.thumb
 3515              		.thumb_func
 3516              		.fpu fpv4-sp-d16
 3518              	xQueueSemaphoreTake:
 3519              	.LVL283:
 3520              	.LFB22:
1497:FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 3521              		.loc 1 1497 1 is_stmt 1 view -0
 3522              		.cfi_startproc
 3523              		@ args = 0, pretend = 0, frame = 16
 3524              		@ frame_needed = 0, uses_anonymous_args = 0
1497:FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 3525              		.loc 1 1497 1 is_stmt 0 view .LVU1060
 3526 0000 70B5     		push	{r4, r5, r6, lr}
 3527              	.LCFI48:
 3528              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 137


 3529              		.cfi_offset 4, -16
 3530              		.cfi_offset 5, -12
 3531              		.cfi_offset 6, -8
 3532              		.cfi_offset 14, -4
 3533 0002 84B0     		sub	sp, sp, #16
 3534              	.LCFI49:
 3535              		.cfi_def_cfa_offset 32
 3536 0004 0191     		str	r1, [sp, #4]
1498:FreeRTOS/queue.c ****     TimeOut_t xTimeOut;
 3537              		.loc 1 1498 5 is_stmt 1 view .LVU1061
 3538              	.LVL284:
1499:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 3539              		.loc 1 1499 5 view .LVU1062
1500:FreeRTOS/queue.c **** 
 3540              		.loc 1 1500 5 view .LVU1063
1503:FreeRTOS/queue.c ****     #endif
 3541              		.loc 1 1503 9 view .LVU1064
1507:FreeRTOS/queue.c **** 
 3542              		.loc 1 1507 5 view .LVU1065
 3543 0006 58B1     		cbz	r0, .L295
 3544 0008 0446     		mov	r4, r0
1507:FreeRTOS/queue.c **** 
 3545              		.loc 1 1507 32 discriminator 2 view .LVU1066
1511:FreeRTOS/queue.c **** 
 3546              		.loc 1 1511 5 discriminator 2 view .LVU1067
 3547 000a 036C     		ldr	r3, [r0, #64]
 3548 000c 8BB1     		cbz	r3, .L272
1511:FreeRTOS/queue.c **** 
 3549              		.loc 1 1511 5 view .LVU1068
 3550              	.LBB212:
 3551              	.LBI212:
 194:FreeRTOS/portable/portmacro.h ****     {
 3552              		.loc 2 194 34 view .LVU1069
 3553              	.LBB213:
 196:FreeRTOS/portable/portmacro.h **** 
 3554              		.loc 2 196 9 view .LVU1070
 198:FreeRTOS/portable/portmacro.h ****         (
 3555              		.loc 2 198 9 view .LVU1071
 3556              		.syntax unified
 3557              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 3558 000e 4FF05003 			mov r3, #80												
 3559 0012 83F31188 		msr basepri, r3											
 3560 0016 BFF36F8F 		isb														
 3561 001a BFF34F8F 		dsb														
 3562              	
 3563              	@ 0 "" 2
 3564              	.LVL285:
 3565              		.thumb
 3566              		.syntax unified
 3567              	.L273:
 198:FreeRTOS/portable/portmacro.h ****         (
 3568              		.loc 2 198 9 is_stmt 0 view .LVU1072
 3569              	.LBE213:
 3570              	.LBE212:
1511:FreeRTOS/queue.c **** 
 3571              		.loc 1 1511 5 is_stmt 1 discriminator 2 view .LVU1073
1511:FreeRTOS/queue.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 138


 3572              		.loc 1 1511 5 discriminator 2 view .LVU1074
1511:FreeRTOS/queue.c **** 
 3573              		.loc 1 1511 5 discriminator 2 view .LVU1075
 3574 001e FEE7     		b	.L273
 3575              	.L295:
1507:FreeRTOS/queue.c **** 
 3576              		.loc 1 1507 5 view .LVU1076
 3577              	.LBB214:
 3578              	.LBI214:
 194:FreeRTOS/portable/portmacro.h ****     {
 3579              		.loc 2 194 34 view .LVU1077
 3580              	.LBB215:
 196:FreeRTOS/portable/portmacro.h **** 
 3581              		.loc 2 196 9 view .LVU1078
 198:FreeRTOS/portable/portmacro.h ****         (
 3582              		.loc 2 198 9 view .LVU1079
 3583              		.syntax unified
 3584              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 3585 0020 4FF05003 			mov r3, #80												
 3586 0024 83F31188 		msr basepri, r3											
 3587 0028 BFF36F8F 		isb														
 3588 002c BFF34F8F 		dsb														
 3589              	
 3590              	@ 0 "" 2
 3591              	.LVL286:
 3592              		.thumb
 3593              		.syntax unified
 3594              	.L271:
 198:FreeRTOS/portable/portmacro.h ****         (
 3595              		.loc 2 198 9 is_stmt 0 view .LVU1080
 3596              	.LBE215:
 3597              	.LBE214:
1507:FreeRTOS/queue.c **** 
 3598              		.loc 1 1507 5 is_stmt 1 discriminator 1 view .LVU1081
1507:FreeRTOS/queue.c **** 
 3599              		.loc 1 1507 5 discriminator 1 view .LVU1082
1507:FreeRTOS/queue.c **** 
 3600              		.loc 1 1507 5 discriminator 1 view .LVU1083
 3601 0030 FEE7     		b	.L271
 3602              	.L272:
1511:FreeRTOS/queue.c **** 
 3603              		.loc 1 1511 45 discriminator 2 view .LVU1084
1516:FreeRTOS/queue.c ****         }
 3604              		.loc 1 1516 13 discriminator 2 view .LVU1085
 3605 0032 FFF7FEFF 		bl	xTaskGetSchedulerState
 3606              	.LVL287:
1516:FreeRTOS/queue.c ****         }
 3607              		.loc 1 1516 13 is_stmt 0 discriminator 2 view .LVU1086
 3608 0036 0646     		mov	r6, r0
 3609 0038 50B9     		cbnz	r0, .L292
 3610 003a 019B     		ldr	r3, [sp, #4]
 3611 003c 5BB1     		cbz	r3, .L293
1516:FreeRTOS/queue.c ****         }
 3612              		.loc 1 1516 13 is_stmt 1 view .LVU1087
 3613              	.LBB216:
 3614              	.LBI216:
 194:FreeRTOS/portable/portmacro.h ****     {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 139


 3615              		.loc 2 194 34 view .LVU1088
 3616              	.LBB217:
 196:FreeRTOS/portable/portmacro.h **** 
 3617              		.loc 2 196 9 view .LVU1089
 198:FreeRTOS/portable/portmacro.h ****         (
 3618              		.loc 2 198 9 view .LVU1090
 3619              		.syntax unified
 3620              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 3621 003e 4FF05003 			mov r3, #80												
 3622 0042 83F31188 		msr basepri, r3											
 3623 0046 BFF36F8F 		isb														
 3624 004a BFF34F8F 		dsb														
 3625              	
 3626              	@ 0 "" 2
 3627              	.LVL288:
 3628              		.thumb
 3629              		.syntax unified
 3630              	.L275:
 198:FreeRTOS/portable/portmacro.h ****         (
 3631              		.loc 2 198 9 is_stmt 0 view .LVU1091
 3632              	.LBE217:
 3633              	.LBE216:
1516:FreeRTOS/queue.c ****         }
 3634              		.loc 1 1516 13 is_stmt 1 discriminator 3 view .LVU1092
1516:FreeRTOS/queue.c ****         }
 3635              		.loc 1 1516 13 discriminator 3 view .LVU1093
1516:FreeRTOS/queue.c ****         }
 3636              		.loc 1 1516 13 discriminator 3 view .LVU1094
 3637 004e FEE7     		b	.L275
 3638              	.L292:
 3639 0050 0025     		movs	r5, #0
 3640 0052 2E46     		mov	r6, r5
 3641 0054 53E0     		b	.L276
 3642              	.L293:
 3643 0056 0546     		mov	r5, r0
 3644 0058 51E0     		b	.L276
 3645              	.LVL289:
 3646              	.L299:
 3647              	.LBB218:
1535:FreeRTOS/queue.c **** 
 3648              		.loc 1 1535 46 view .LVU1095
1539:FreeRTOS/queue.c **** 
 3649              		.loc 1 1539 17 view .LVU1096
1539:FreeRTOS/queue.c **** 
 3650              		.loc 1 1539 63 is_stmt 0 view .LVU1097
 3651 005a 013B     		subs	r3, r3, #1
 3652              	.LVL290:
1539:FreeRTOS/queue.c **** 
 3653              		.loc 1 1539 44 view .LVU1098
 3654 005c A363     		str	r3, [r4, #56]
1543:FreeRTOS/queue.c ****                         {
 3655              		.loc 1 1543 25 is_stmt 1 view .LVU1099
1543:FreeRTOS/queue.c ****                         {
 3656              		.loc 1 1543 36 is_stmt 0 view .LVU1100
 3657 005e 2368     		ldr	r3, [r4]
 3658              	.LVL291:
1543:FreeRTOS/queue.c ****                         {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 140


 3659              		.loc 1 1543 27 view .LVU1101
 3660 0060 3BB1     		cbz	r3, .L296
 3661              	.LVL292:
 3662              	.L278:
1551:FreeRTOS/queue.c ****                         }
 3663              		.loc 1 1551 53 is_stmt 1 view .LVU1102
1558:FreeRTOS/queue.c ****                 {
 3664              		.loc 1 1558 17 view .LVU1103
1558:FreeRTOS/queue.c ****                 {
 3665              		.loc 1 1558 21 is_stmt 0 view .LVU1104
 3666 0062 2369     		ldr	r3, [r4, #16]
1558:FreeRTOS/queue.c ****                 {
 3667              		.loc 1 1558 19 view .LVU1105
 3668 0064 4BB9     		cbnz	r3, .L297
 3669              	.L279:
1571:FreeRTOS/queue.c ****                 }
 3670              		.loc 1 1571 45 is_stmt 1 view .LVU1106
1574:FreeRTOS/queue.c ****                 return pdPASS;
 3671              		.loc 1 1574 17 view .LVU1107
 3672 0066 FFF7FEFF 		bl	vPortExitCritical
 3673              	.LVL293:
1575:FreeRTOS/queue.c ****             }
 3674              		.loc 1 1575 17 view .LVU1108
1575:FreeRTOS/queue.c ****             }
 3675              		.loc 1 1575 24 is_stmt 0 view .LVU1109
 3676 006a 0125     		movs	r5, #1
 3677              	.LVL294:
 3678              	.L269:
1575:FreeRTOS/queue.c ****             }
 3679              		.loc 1 1575 24 view .LVU1110
 3680              	.LBE218:
1711:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 3681              		.loc 1 1711 1 view .LVU1111
 3682 006c 2846     		mov	r0, r5
 3683 006e 04B0     		add	sp, sp, #16
 3684              	.LCFI50:
 3685              		.cfi_remember_state
 3686              		.cfi_def_cfa_offset 16
 3687              		@ sp needed
 3688 0070 70BD     		pop	{r4, r5, r6, pc}
 3689              	.LVL295:
 3690              	.L296:
 3691              	.LCFI51:
 3692              		.cfi_restore_state
 3693              	.LBB221:
1547:FreeRTOS/queue.c ****                         }
 3694              		.loc 1 1547 29 is_stmt 1 view .LVU1112
1547:FreeRTOS/queue.c ****                         }
 3695              		.loc 1 1547 66 is_stmt 0 view .LVU1113
 3696 0072 FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount
 3697              	.LVL296:
1547:FreeRTOS/queue.c ****                         }
 3698              		.loc 1 1547 64 view .LVU1114
 3699 0076 A060     		str	r0, [r4, #8]
 3700 0078 F3E7     		b	.L278
 3701              	.L297:
1560:FreeRTOS/queue.c ****                     {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 141


 3702              		.loc 1 1560 21 is_stmt 1 view .LVU1115
1560:FreeRTOS/queue.c ****                     {
 3703              		.loc 1 1560 25 is_stmt 0 view .LVU1116
 3704 007a 04F11000 		add	r0, r4, #16
 3705 007e FFF7FEFF 		bl	xTaskRemoveFromEventList
 3706              	.LVL297:
1560:FreeRTOS/queue.c ****                     {
 3707              		.loc 1 1560 23 view .LVU1117
 3708 0082 0028     		cmp	r0, #0
 3709 0084 EFD0     		beq	.L279
1562:FreeRTOS/queue.c ****                     }
 3710              		.loc 1 1562 25 is_stmt 1 view .LVU1118
 3711 0086 464B     		ldr	r3, .L306
 3712 0088 4FF08052 		mov	r2, #268435456
 3713 008c 1A60     		str	r2, [r3]
1562:FreeRTOS/queue.c ****                     }
 3714              		.loc 1 1562 25 view .LVU1119
 3715              		.syntax unified
 3716              	@ 1562 "FreeRTOS/queue.c" 1
 3717 008e BFF34F8F 		dsb
 3718              	@ 0 "" 2
1562:FreeRTOS/queue.c ****                     }
 3719              		.loc 1 1562 25 view .LVU1120
 3720              	@ 1562 "FreeRTOS/queue.c" 1
 3721 0092 BFF36F8F 		isb
 3722              	@ 0 "" 2
1562:FreeRTOS/queue.c ****                     }
 3723              		.loc 1 1562 57 view .LVU1121
 3724              		.thumb
 3725              		.syntax unified
 3726 0096 E6E7     		b	.L279
 3727              	.L300:
1586:FreeRTOS/queue.c ****                         }
 3728              		.loc 1 1586 29 view .LVU1122
 3729 0098 45B1     		cbz	r5, .L282
1586:FreeRTOS/queue.c ****                         }
 3730              		.loc 1 1586 29 view .LVU1123
 3731              	.LBB219:
 3732              	.LBI219:
 194:FreeRTOS/portable/portmacro.h ****     {
 3733              		.loc 2 194 34 view .LVU1124
 3734              	.LBB220:
 196:FreeRTOS/portable/portmacro.h **** 
 3735              		.loc 2 196 9 view .LVU1125
 198:FreeRTOS/portable/portmacro.h ****         (
 3736              		.loc 2 198 9 view .LVU1126
 3737              		.syntax unified
 3738              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 3739 009a 4FF05003 			mov r3, #80												
 3740 009e 83F31188 		msr basepri, r3											
 3741 00a2 BFF36F8F 		isb														
 3742 00a6 BFF34F8F 		dsb														
 3743              	
 3744              	@ 0 "" 2
 3745              	.LVL298:
 3746              		.thumb
 3747              		.syntax unified
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 142


 3748              	.L283:
 198:FreeRTOS/portable/portmacro.h ****         (
 3749              		.loc 2 198 9 is_stmt 0 view .LVU1127
 3750              	.LBE220:
 3751              	.LBE219:
1586:FreeRTOS/queue.c ****                         }
 3752              		.loc 1 1586 29 is_stmt 1 discriminator 4 view .LVU1128
1586:FreeRTOS/queue.c ****                         }
 3753              		.loc 1 1586 29 discriminator 4 view .LVU1129
1586:FreeRTOS/queue.c ****                         }
 3754              		.loc 1 1586 29 discriminator 4 view .LVU1130
 3755 00aa FEE7     		b	.L283
 3756              	.L282:
1586:FreeRTOS/queue.c ****                         }
 3757              		.loc 1 1586 76 discriminator 2 view .LVU1131
1592:FreeRTOS/queue.c ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
 3758              		.loc 1 1592 21 discriminator 2 view .LVU1132
 3759 00ac FFF7FEFF 		bl	vPortExitCritical
 3760              	.LVL299:
1593:FreeRTOS/queue.c ****                     return errQUEUE_EMPTY;
 3761              		.loc 1 1593 57 discriminator 2 view .LVU1133
1594:FreeRTOS/queue.c ****                 }
 3762              		.loc 1 1594 21 discriminator 2 view .LVU1134
1594:FreeRTOS/queue.c ****                 }
 3763              		.loc 1 1594 28 is_stmt 0 discriminator 2 view .LVU1135
 3764 00b0 DCE7     		b	.L269
 3765              	.L301:
1600:FreeRTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
 3766              		.loc 1 1600 21 is_stmt 1 view .LVU1136
 3767 00b2 02A8     		add	r0, sp, #8
 3768 00b4 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 3769              	.LVL300:
1601:FreeRTOS/queue.c ****                 }
 3770              		.loc 1 1601 21 view .LVU1137
1601:FreeRTOS/queue.c ****                 }
 3771              		.loc 1 1601 35 is_stmt 0 view .LVU1138
 3772 00b8 0126     		movs	r6, #1
 3773 00ba 2AE0     		b	.L284
 3774              	.LVL301:
 3775              	.L302:
1601:FreeRTOS/queue.c ****                 }
 3776              		.loc 1 1601 35 view .LVU1139
 3777              	.LBE221:
1616:FreeRTOS/queue.c **** 
 3778              		.loc 1 1616 9 is_stmt 1 discriminator 1 view .LVU1140
 3779 00bc 0023     		movs	r3, #0
 3780 00be 84F84430 		strb	r3, [r4, #68]
 3781 00c2 32E0     		b	.L285
 3782              	.L303:
1616:FreeRTOS/queue.c **** 
 3783              		.loc 1 1616 9 discriminator 4 view .LVU1141
 3784 00c4 0023     		movs	r3, #0
 3785 00c6 84F84530 		strb	r3, [r4, #69]
 3786 00ca 34E0     		b	.L286
 3787              	.L304:
1633:FreeRTOS/queue.c ****                             {
 3788              		.loc 1 1633 29 view .LVU1142
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 143


 3789 00cc FFF7FEFF 		bl	vPortEnterCritical
 3790              	.LVL302:
1635:FreeRTOS/queue.c ****                             }
 3791              		.loc 1 1635 33 view .LVU1143
1635:FreeRTOS/queue.c ****                             }
 3792              		.loc 1 1635 56 is_stmt 0 view .LVU1144
 3793 00d0 A068     		ldr	r0, [r4, #8]
 3794 00d2 FFF7FEFF 		bl	xTaskPriorityInherit
 3795              	.LVL303:
 3796 00d6 0546     		mov	r5, r0
 3797              	.LVL304:
1637:FreeRTOS/queue.c ****                         }
 3798              		.loc 1 1637 29 is_stmt 1 view .LVU1145
 3799 00d8 FFF7FEFF 		bl	vPortExitCritical
 3800              	.LVL305:
1637:FreeRTOS/queue.c ****                         }
 3801              		.loc 1 1637 29 is_stmt 0 view .LVU1146
 3802 00dc 3BE0     		b	.L289
 3803              	.L288:
1662:FreeRTOS/queue.c ****                 ( void ) xTaskResumeAll();
 3804              		.loc 1 1662 17 is_stmt 1 view .LVU1147
 3805 00de 2046     		mov	r0, r4
 3806 00e0 FFF7FEFF 		bl	prvUnlockQueue
 3807              	.LVL306:
1663:FreeRTOS/queue.c ****             }
 3808              		.loc 1 1663 17 view .LVU1148
1663:FreeRTOS/queue.c ****             }
 3809              		.loc 1 1663 26 is_stmt 0 view .LVU1149
 3810 00e4 FFF7FEFF 		bl	xTaskResumeAll
 3811              	.LVL307:
 3812 00e8 09E0     		b	.L276
 3813              	.L287:
1669:FreeRTOS/queue.c ****             ( void ) xTaskResumeAll();
 3814              		.loc 1 1669 13 is_stmt 1 view .LVU1150
 3815 00ea 2046     		mov	r0, r4
 3816 00ec FFF7FEFF 		bl	prvUnlockQueue
 3817              	.LVL308:
1670:FreeRTOS/queue.c **** 
 3818              		.loc 1 1670 13 view .LVU1151
1670:FreeRTOS/queue.c **** 
 3819              		.loc 1 1670 22 is_stmt 0 view .LVU1152
 3820 00f0 FFF7FEFF 		bl	xTaskResumeAll
 3821              	.LVL309:
1676:FreeRTOS/queue.c ****             {
 3822              		.loc 1 1676 13 is_stmt 1 view .LVU1153
1676:FreeRTOS/queue.c ****             {
 3823              		.loc 1 1676 17 is_stmt 0 view .LVU1154
 3824 00f4 2046     		mov	r0, r4
 3825 00f6 FFF7FEFF 		bl	prvIsQueueEmpty
 3826              	.LVL310:
1676:FreeRTOS/queue.c ****             {
 3827              		.loc 1 1676 15 view .LVU1155
 3828 00fa 0028     		cmp	r0, #0
 3829 00fc 40D1     		bne	.L298
 3830              	.LVL311:
 3831              	.L276:
1516:FreeRTOS/queue.c ****         }
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 144


 3832              		.loc 1 1516 114 is_stmt 1 discriminator 8 view .LVU1156
1523:FreeRTOS/queue.c ****     {
 3833              		.loc 1 1523 5 discriminator 8 view .LVU1157
1525:FreeRTOS/queue.c ****         {
 3834              		.loc 1 1525 9 discriminator 8 view .LVU1158
 3835 00fe FFF7FEFF 		bl	vPortEnterCritical
 3836              	.LVL312:
 3837              	.LBB222:
1529:FreeRTOS/queue.c **** 
 3838              		.loc 1 1529 13 discriminator 8 view .LVU1159
1529:FreeRTOS/queue.c **** 
 3839              		.loc 1 1529 31 is_stmt 0 discriminator 8 view .LVU1160
 3840 0102 A36B     		ldr	r3, [r4, #56]
 3841              	.LVL313:
1533:FreeRTOS/queue.c ****             {
 3842              		.loc 1 1533 13 is_stmt 1 discriminator 8 view .LVU1161
1533:FreeRTOS/queue.c ****             {
 3843              		.loc 1 1533 15 is_stmt 0 discriminator 8 view .LVU1162
 3844 0104 002B     		cmp	r3, #0
 3845 0106 A8D1     		bne	.L299
1579:FreeRTOS/queue.c ****                 {
 3846              		.loc 1 1579 17 is_stmt 1 view .LVU1163
1579:FreeRTOS/queue.c ****                 {
 3847              		.loc 1 1579 34 is_stmt 0 view .LVU1164
 3848 0108 019B     		ldr	r3, [sp, #4]
 3849              	.LVL314:
1579:FreeRTOS/queue.c ****                 {
 3850              		.loc 1 1579 19 view .LVU1165
 3851 010a 002B     		cmp	r3, #0
 3852 010c C4D0     		beq	.L300
1596:FreeRTOS/queue.c ****                 {
 3853              		.loc 1 1596 22 is_stmt 1 view .LVU1166
1596:FreeRTOS/queue.c ****                 {
 3854              		.loc 1 1596 24 is_stmt 0 view .LVU1167
 3855 010e 002E     		cmp	r6, #0
 3856 0110 CFD0     		beq	.L301
 3857              	.LVL315:
 3858              	.L284:
1606:FreeRTOS/queue.c ****                 }
 3859              		.loc 1 1606 45 is_stmt 1 view .LVU1168
 3860              	.LBE222:
1610:FreeRTOS/queue.c **** 
 3861              		.loc 1 1610 9 view .LVU1169
 3862 0112 FFF7FEFF 		bl	vPortExitCritical
 3863              	.LVL316:
1615:FreeRTOS/queue.c ****         prvLockQueue( pxQueue );
 3864              		.loc 1 1615 9 view .LVU1170
 3865 0116 FFF7FEFF 		bl	vTaskSuspendAll
 3866              	.LVL317:
1616:FreeRTOS/queue.c **** 
 3867              		.loc 1 1616 9 view .LVU1171
 3868 011a FFF7FEFF 		bl	vPortEnterCritical
 3869              	.LVL318:
1616:FreeRTOS/queue.c **** 
 3870              		.loc 1 1616 9 view .LVU1172
 3871 011e 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 3872 0122 5BB2     		sxtb	r3, r3
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 145


 3873 0124 B3F1FF3F 		cmp	r3, #-1
 3874 0128 C8D0     		beq	.L302
 3875              	.L285:
1616:FreeRTOS/queue.c **** 
 3876              		.loc 1 1616 9 discriminator 3 view .LVU1173
 3877 012a 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 3878 012e 5BB2     		sxtb	r3, r3
 3879 0130 B3F1FF3F 		cmp	r3, #-1
 3880 0134 C6D0     		beq	.L303
 3881              	.L286:
1616:FreeRTOS/queue.c **** 
 3882              		.loc 1 1616 9 discriminator 6 view .LVU1174
 3883 0136 FFF7FEFF 		bl	vPortExitCritical
 3884              	.LVL319:
1619:FreeRTOS/queue.c ****         {
 3885              		.loc 1 1619 9 discriminator 6 view .LVU1175
1619:FreeRTOS/queue.c ****         {
 3886              		.loc 1 1619 13 is_stmt 0 discriminator 6 view .LVU1176
 3887 013a 01A9     		add	r1, sp, #4
 3888 013c 02A8     		add	r0, sp, #8
 3889 013e FFF7FEFF 		bl	xTaskCheckForTimeOut
 3890              	.LVL320:
1619:FreeRTOS/queue.c ****         {
 3891              		.loc 1 1619 11 discriminator 6 view .LVU1177
 3892 0142 0028     		cmp	r0, #0
 3893 0144 D1D1     		bne	.L287
1625:FreeRTOS/queue.c ****             {
 3894              		.loc 1 1625 13 is_stmt 1 view .LVU1178
1625:FreeRTOS/queue.c ****             {
 3895              		.loc 1 1625 17 is_stmt 0 view .LVU1179
 3896 0146 2046     		mov	r0, r4
 3897 0148 FFF7FEFF 		bl	prvIsQueueEmpty
 3898              	.LVL321:
1625:FreeRTOS/queue.c ****             {
 3899              		.loc 1 1625 15 view .LVU1180
 3900 014c 0028     		cmp	r0, #0
 3901 014e C6D0     		beq	.L288
1627:FreeRTOS/queue.c **** 
 3902              		.loc 1 1627 58 is_stmt 1 view .LVU1181
1631:FreeRTOS/queue.c ****                         {
 3903              		.loc 1 1631 25 view .LVU1182
1631:FreeRTOS/queue.c ****                         {
 3904              		.loc 1 1631 36 is_stmt 0 view .LVU1183
 3905 0150 2368     		ldr	r3, [r4]
1631:FreeRTOS/queue.c ****                         {
 3906              		.loc 1 1631 27 view .LVU1184
 3907 0152 002B     		cmp	r3, #0
 3908 0154 BAD0     		beq	.L304
 3909              	.L289:
1641:FreeRTOS/queue.c ****                         }
 3910              		.loc 1 1641 53 is_stmt 1 view .LVU1185
1646:FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 3911              		.loc 1 1646 17 view .LVU1186
 3912 0156 0199     		ldr	r1, [sp, #4]
 3913 0158 04F12400 		add	r0, r4, #36
 3914 015c FFF7FEFF 		bl	vTaskPlaceOnEventList
 3915              	.LVL322:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 146


1647:FreeRTOS/queue.c **** 
 3916              		.loc 1 1647 17 view .LVU1187
 3917 0160 2046     		mov	r0, r4
 3918 0162 FFF7FEFF 		bl	prvUnlockQueue
 3919              	.LVL323:
1649:FreeRTOS/queue.c ****                 {
 3920              		.loc 1 1649 17 view .LVU1188
1649:FreeRTOS/queue.c ****                 {
 3921              		.loc 1 1649 21 is_stmt 0 view .LVU1189
 3922 0166 FFF7FEFF 		bl	xTaskResumeAll
 3923              	.LVL324:
1649:FreeRTOS/queue.c ****                 {
 3924              		.loc 1 1649 19 view .LVU1190
 3925 016a 0028     		cmp	r0, #0
 3926 016c C7D1     		bne	.L276
1651:FreeRTOS/queue.c ****                 }
 3927              		.loc 1 1651 21 is_stmt 1 view .LVU1191
 3928 016e 0C4B     		ldr	r3, .L306
 3929 0170 4FF08052 		mov	r2, #268435456
 3930 0174 1A60     		str	r2, [r3]
1651:FreeRTOS/queue.c ****                 }
 3931              		.loc 1 1651 21 view .LVU1192
 3932              		.syntax unified
 3933              	@ 1651 "FreeRTOS/queue.c" 1
 3934 0176 BFF34F8F 		dsb
 3935              	@ 0 "" 2
1651:FreeRTOS/queue.c ****                 }
 3936              		.loc 1 1651 21 view .LVU1193
 3937              	@ 1651 "FreeRTOS/queue.c" 1
 3938 017a BFF36F8F 		isb
 3939              	@ 0 "" 2
1651:FreeRTOS/queue.c ****                 }
 3940              		.loc 1 1651 43 view .LVU1194
 3941              		.thumb
 3942              		.syntax unified
 3943 017e BEE7     		b	.L276
 3944              	.L298:
1683:FreeRTOS/queue.c ****                         {
 3945              		.loc 1 1683 25 view .LVU1195
1683:FreeRTOS/queue.c ****                         {
 3946              		.loc 1 1683 27 is_stmt 0 view .LVU1196
 3947 0180 0DB9     		cbnz	r5, .L305
 3948              	.L291:
1702:FreeRTOS/queue.c ****                 return errQUEUE_EMPTY;
 3949              		.loc 1 1702 53 is_stmt 1 view .LVU1197
1703:FreeRTOS/queue.c ****             }
 3950              		.loc 1 1703 17 view .LVU1198
1703:FreeRTOS/queue.c ****             }
 3951              		.loc 1 1703 24 is_stmt 0 view .LVU1199
 3952 0182 0025     		movs	r5, #0
 3953              	.LVL325:
1703:FreeRTOS/queue.c ****             }
 3954              		.loc 1 1703 24 view .LVU1200
 3955 0184 72E7     		b	.L269
 3956              	.LVL326:
 3957              	.L305:
1685:FreeRTOS/queue.c ****                             {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 147


 3958              		.loc 1 1685 29 is_stmt 1 view .LVU1201
 3959 0186 FFF7FEFF 		bl	vPortEnterCritical
 3960              	.LVL327:
 3961              	.LBB223:
1687:FreeRTOS/queue.c **** 
 3962              		.loc 1 1687 33 view .LVU1202
1694:FreeRTOS/queue.c ****                                 vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHo
 3963              		.loc 1 1694 33 view .LVU1203
1694:FreeRTOS/queue.c ****                                 vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHo
 3964              		.loc 1 1694 60 is_stmt 0 view .LVU1204
 3965 018a 2046     		mov	r0, r4
 3966 018c FFF7FEFF 		bl	prvGetDisinheritPriorityAfterTimeout
 3967              	.LVL328:
 3968 0190 0146     		mov	r1, r0
 3969              	.LVL329:
1695:FreeRTOS/queue.c ****                             }
 3970              		.loc 1 1695 33 is_stmt 1 view .LVU1205
 3971 0192 A068     		ldr	r0, [r4, #8]
 3972              	.LVL330:
1695:FreeRTOS/queue.c ****                             }
 3973              		.loc 1 1695 33 is_stmt 0 view .LVU1206
 3974 0194 FFF7FEFF 		bl	vTaskPriorityDisinheritAfterTimeout
 3975              	.LVL331:
1695:FreeRTOS/queue.c ****                             }
 3976              		.loc 1 1695 33 view .LVU1207
 3977              	.LBE223:
1697:FreeRTOS/queue.c ****                         }
 3978              		.loc 1 1697 29 is_stmt 1 view .LVU1208
 3979 0198 FFF7FEFF 		bl	vPortExitCritical
 3980              	.LVL332:
 3981 019c F1E7     		b	.L291
 3982              	.L307:
 3983 019e 00BF     		.align	2
 3984              	.L306:
 3985 01a0 04ED00E0 		.word	-536810236
 3986              		.cfi_endproc
 3987              	.LFE22:
 3989              		.section	.text.xQueueTakeMutexRecursive,"ax",%progbits
 3990              		.align	1
 3991              		.global	xQueueTakeMutexRecursive
 3992              		.syntax unified
 3993              		.thumb
 3994              		.thumb_func
 3995              		.fpu fpv4-sp-d16
 3997              	xQueueTakeMutexRecursive:
 3998              	.LVL333:
 3999              	.LFB15:
 695:FreeRTOS/queue.c ****         BaseType_t xReturn;
 4000              		.loc 1 695 5 view -0
 4001              		.cfi_startproc
 4002              		@ args = 0, pretend = 0, frame = 0
 4003              		@ frame_needed = 0, uses_anonymous_args = 0
 696:FreeRTOS/queue.c ****         Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 4004              		.loc 1 696 9 view .LVU1210
 697:FreeRTOS/queue.c **** 
 4005              		.loc 1 697 9 view .LVU1211
 699:FreeRTOS/queue.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 148


 4006              		.loc 1 699 9 view .LVU1212
 4007 0000 88B1     		cbz	r0, .L315
 695:FreeRTOS/queue.c ****         BaseType_t xReturn;
 4008              		.loc 1 695 5 is_stmt 0 discriminator 2 view .LVU1213
 4009 0002 70B5     		push	{r4, r5, r6, lr}
 4010              	.LCFI52:
 4011              		.cfi_def_cfa_offset 16
 4012              		.cfi_offset 4, -16
 4013              		.cfi_offset 5, -12
 4014              		.cfi_offset 6, -8
 4015              		.cfi_offset 14, -4
 4016 0004 0D46     		mov	r5, r1
 4017 0006 0446     		mov	r4, r0
 699:FreeRTOS/queue.c **** 
 4018              		.loc 1 699 32 is_stmt 1 discriminator 2 view .LVU1214
 704:FreeRTOS/queue.c **** 
 4019              		.loc 1 704 45 discriminator 2 view .LVU1215
 706:FreeRTOS/queue.c ****         {
 4020              		.loc 1 706 9 discriminator 2 view .LVU1216
 706:FreeRTOS/queue.c ****         {
 4021              		.loc 1 706 34 is_stmt 0 discriminator 2 view .LVU1217
 4022 0008 8668     		ldr	r6, [r0, #8]
 706:FreeRTOS/queue.c ****         {
 4023              		.loc 1 706 51 discriminator 2 view .LVU1218
 4024 000a FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 4025              	.LVL334:
 706:FreeRTOS/queue.c ****         {
 4026              		.loc 1 706 11 discriminator 2 view .LVU1219
 4027 000e 8642     		cmp	r6, r0
 4028 0010 12D0     		beq	.L316
 713:FreeRTOS/queue.c **** 
 4029              		.loc 1 713 13 is_stmt 1 view .LVU1220
 713:FreeRTOS/queue.c **** 
 4030              		.loc 1 713 23 is_stmt 0 view .LVU1221
 4031 0012 2946     		mov	r1, r5
 4032 0014 2046     		mov	r0, r4
 4033 0016 FFF7FEFF 		bl	xQueueSemaphoreTake
 4034              	.LVL335:
 718:FreeRTOS/queue.c ****             {
 4035              		.loc 1 718 13 is_stmt 1 view .LVU1222
 718:FreeRTOS/queue.c ****             {
 4036              		.loc 1 718 15 is_stmt 0 view .LVU1223
 4037 001a 0246     		mov	r2, r0
 4038 001c 80B1     		cbz	r0, .L308
 720:FreeRTOS/queue.c ****             }
 4039              		.loc 1 720 17 is_stmt 1 view .LVU1224
 720:FreeRTOS/queue.c ****             }
 4040              		.loc 1 720 40 is_stmt 0 view .LVU1225
 4041 001e E368     		ldr	r3, [r4, #12]
 720:FreeRTOS/queue.c ****             }
 4042              		.loc 1 720 63 view .LVU1226
 4043 0020 0133     		adds	r3, r3, #1
 4044 0022 E360     		str	r3, [r4, #12]
 724:FreeRTOS/queue.c ****             }
 4045              		.loc 1 724 60 is_stmt 1 view .LVU1227
 728:FreeRTOS/queue.c ****     }
 4046              		.loc 1 728 9 view .LVU1228
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 149


 728:FreeRTOS/queue.c ****     }
 4047              		.loc 1 728 16 is_stmt 0 view .LVU1229
 4048 0024 0CE0     		b	.L308
 4049              	.LVL336:
 4050              	.L315:
 4051              	.LCFI53:
 4052              		.cfi_def_cfa_offset 0
 4053              		.cfi_restore 4
 4054              		.cfi_restore 5
 4055              		.cfi_restore 6
 4056              		.cfi_restore 14
 699:FreeRTOS/queue.c **** 
 4057              		.loc 1 699 9 is_stmt 1 view .LVU1230
 4058              	.LBB224:
 4059              	.LBI224:
 194:FreeRTOS/portable/portmacro.h ****     {
 4060              		.loc 2 194 34 view .LVU1231
 4061              	.LBB225:
 196:FreeRTOS/portable/portmacro.h **** 
 4062              		.loc 2 196 9 view .LVU1232
 198:FreeRTOS/portable/portmacro.h ****         (
 4063              		.loc 2 198 9 view .LVU1233
 4064              		.syntax unified
 4065              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 4066 0026 4FF05003 			mov r3, #80												
 4067 002a 83F31188 		msr basepri, r3											
 4068 002e BFF36F8F 		isb														
 4069 0032 BFF34F8F 		dsb														
 4070              	
 4071              	@ 0 "" 2
 4072              	.LVL337:
 4073              		.thumb
 4074              		.syntax unified
 4075              	.L310:
 198:FreeRTOS/portable/portmacro.h ****         (
 4076              		.loc 2 198 9 is_stmt 0 view .LVU1234
 4077              	.LBE225:
 4078              	.LBE224:
 699:FreeRTOS/queue.c **** 
 4079              		.loc 1 699 9 is_stmt 1 discriminator 1 view .LVU1235
 699:FreeRTOS/queue.c **** 
 4080              		.loc 1 699 9 discriminator 1 view .LVU1236
 699:FreeRTOS/queue.c **** 
 4081              		.loc 1 699 9 discriminator 1 view .LVU1237
 4082 0036 FEE7     		b	.L310
 4083              	.LVL338:
 4084              	.L316:
 4085              	.LCFI54:
 4086              		.cfi_def_cfa_offset 16
 4087              		.cfi_offset 4, -16
 4088              		.cfi_offset 5, -12
 4089              		.cfi_offset 6, -8
 4090              		.cfi_offset 14, -4
 708:FreeRTOS/queue.c ****             xReturn = pdPASS;
 4091              		.loc 1 708 13 view .LVU1238
 708:FreeRTOS/queue.c ****             xReturn = pdPASS;
 4092              		.loc 1 708 36 is_stmt 0 view .LVU1239
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 150


 4093 0038 E368     		ldr	r3, [r4, #12]
 708:FreeRTOS/queue.c ****             xReturn = pdPASS;
 4094              		.loc 1 708 59 view .LVU1240
 4095 003a 0133     		adds	r3, r3, #1
 4096 003c E360     		str	r3, [r4, #12]
 709:FreeRTOS/queue.c ****         }
 4097              		.loc 1 709 13 is_stmt 1 view .LVU1241
 4098              	.LVL339:
 709:FreeRTOS/queue.c ****         }
 4099              		.loc 1 709 21 is_stmt 0 view .LVU1242
 4100 003e 0122     		movs	r2, #1
 4101              	.LVL340:
 4102              	.L308:
 729:FreeRTOS/queue.c **** 
 4103              		.loc 1 729 5 view .LVU1243
 4104 0040 1046     		mov	r0, r2
 4105 0042 70BD     		pop	{r4, r5, r6, pc}
 729:FreeRTOS/queue.c **** 
 4106              		.loc 1 729 5 view .LVU1244
 4107              		.cfi_endproc
 4108              	.LFE15:
 4110              		.section	.text.xQueuePeek,"ax",%progbits
 4111              		.align	1
 4112              		.global	xQueuePeek
 4113              		.syntax unified
 4114              		.thumb
 4115              		.thumb_func
 4116              		.fpu fpv4-sp-d16
 4118              	xQueuePeek:
 4119              	.LVL341:
 4120              	.LFB23:
1717:FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 4121              		.loc 1 1717 1 is_stmt 1 view -0
 4122              		.cfi_startproc
 4123              		@ args = 0, pretend = 0, frame = 16
 4124              		@ frame_needed = 0, uses_anonymous_args = 0
1717:FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 4125              		.loc 1 1717 1 is_stmt 0 view .LVU1246
 4126 0000 70B5     		push	{r4, r5, r6, lr}
 4127              	.LCFI55:
 4128              		.cfi_def_cfa_offset 16
 4129              		.cfi_offset 4, -16
 4130              		.cfi_offset 5, -12
 4131              		.cfi_offset 6, -8
 4132              		.cfi_offset 14, -4
 4133 0002 84B0     		sub	sp, sp, #16
 4134              	.LCFI56:
 4135              		.cfi_def_cfa_offset 32
 4136 0004 0192     		str	r2, [sp, #4]
1718:FreeRTOS/queue.c ****     TimeOut_t xTimeOut;
 4137              		.loc 1 1718 5 is_stmt 1 view .LVU1247
 4138              	.LVL342:
1719:FreeRTOS/queue.c ****     int8_t * pcOriginalReadPosition;
 4139              		.loc 1 1719 5 view .LVU1248
1720:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 4140              		.loc 1 1720 5 view .LVU1249
1721:FreeRTOS/queue.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 151


 4141              		.loc 1 1721 5 view .LVU1250
1724:FreeRTOS/queue.c **** 
 4142              		.loc 1 1724 5 view .LVU1251
 4143 0006 90B1     		cbz	r0, .L337
 4144 0008 0D46     		mov	r5, r1
 4145 000a 0446     		mov	r4, r0
1724:FreeRTOS/queue.c **** 
 4146              		.loc 1 1724 32 discriminator 2 view .LVU1252
1728:FreeRTOS/queue.c **** 
 4147              		.loc 1 1728 5 discriminator 2 view .LVU1253
 4148 000c C1B1     		cbz	r1, .L338
 4149              	.L320:
1728:FreeRTOS/queue.c **** 
 4150              		.loc 1 1728 103 discriminator 8 view .LVU1254
1733:FreeRTOS/queue.c ****         }
 4151              		.loc 1 1733 13 discriminator 8 view .LVU1255
 4152 000e FFF7FEFF 		bl	xTaskGetSchedulerState
 4153              	.LVL343:
1733:FreeRTOS/queue.c ****         }
 4154              		.loc 1 1733 13 is_stmt 0 discriminator 8 view .LVU1256
 4155 0012 0646     		mov	r6, r0
 4156 0014 00BB     		cbnz	r0, .L335
1733:FreeRTOS/queue.c ****         }
 4157              		.loc 1 1733 13 discriminator 2 view .LVU1257
 4158 0016 019B     		ldr	r3, [sp, #4]
 4159 0018 002B     		cmp	r3, #0
 4160 001a 5CD0     		beq	.L324
1733:FreeRTOS/queue.c ****         }
 4161              		.loc 1 1733 13 is_stmt 1 view .LVU1258
 4162              	.LBB226:
 4163              	.LBI226:
 194:FreeRTOS/portable/portmacro.h ****     {
 4164              		.loc 2 194 34 view .LVU1259
 4165              	.LBB227:
 196:FreeRTOS/portable/portmacro.h **** 
 4166              		.loc 2 196 9 view .LVU1260
 198:FreeRTOS/portable/portmacro.h ****         (
 4167              		.loc 2 198 9 view .LVU1261
 4168              		.syntax unified
 4169              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 4170 001c 4FF05003 			mov r3, #80												
 4171 0020 83F31188 		msr basepri, r3											
 4172 0024 BFF36F8F 		isb														
 4173 0028 BFF34F8F 		dsb														
 4174              	
 4175              	@ 0 "" 2
 4176              	.LVL344:
 4177              		.thumb
 4178              		.syntax unified
 4179              	.L323:
 198:FreeRTOS/portable/portmacro.h ****         (
 4180              		.loc 2 198 9 is_stmt 0 view .LVU1262
 4181              	.LBE227:
 4182              	.LBE226:
1733:FreeRTOS/queue.c ****         }
 4183              		.loc 1 1733 13 is_stmt 1 discriminator 3 view .LVU1263
1733:FreeRTOS/queue.c ****         }
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 152


 4184              		.loc 1 1733 13 discriminator 3 view .LVU1264
1733:FreeRTOS/queue.c ****         }
 4185              		.loc 1 1733 13 discriminator 3 view .LVU1265
 4186 002c FEE7     		b	.L323
 4187              	.LVL345:
 4188              	.L337:
1724:FreeRTOS/queue.c **** 
 4189              		.loc 1 1724 5 view .LVU1266
 4190              	.LBB228:
 4191              	.LBI228:
 194:FreeRTOS/portable/portmacro.h ****     {
 4192              		.loc 2 194 34 view .LVU1267
 4193              	.LBB229:
 196:FreeRTOS/portable/portmacro.h **** 
 4194              		.loc 2 196 9 view .LVU1268
 198:FreeRTOS/portable/portmacro.h ****         (
 4195              		.loc 2 198 9 view .LVU1269
 4196              		.syntax unified
 4197              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 4198 002e 4FF05003 			mov r3, #80												
 4199 0032 83F31188 		msr basepri, r3											
 4200 0036 BFF36F8F 		isb														
 4201 003a BFF34F8F 		dsb														
 4202              	
 4203              	@ 0 "" 2
 4204              	.LVL346:
 4205              		.thumb
 4206              		.syntax unified
 4207              	.L319:
 198:FreeRTOS/portable/portmacro.h ****         (
 4208              		.loc 2 198 9 is_stmt 0 view .LVU1270
 4209              	.LBE229:
 4210              	.LBE228:
1724:FreeRTOS/queue.c **** 
 4211              		.loc 1 1724 5 is_stmt 1 discriminator 1 view .LVU1271
1724:FreeRTOS/queue.c **** 
 4212              		.loc 1 1724 5 discriminator 1 view .LVU1272
1724:FreeRTOS/queue.c **** 
 4213              		.loc 1 1724 5 discriminator 1 view .LVU1273
 4214 003e FEE7     		b	.L319
 4215              	.L338:
1728:FreeRTOS/queue.c **** 
 4216              		.loc 1 1728 5 is_stmt 0 discriminator 2 view .LVU1274
 4217 0040 036C     		ldr	r3, [r0, #64]
 4218 0042 002B     		cmp	r3, #0
 4219 0044 E3D0     		beq	.L320
1728:FreeRTOS/queue.c **** 
 4220              		.loc 1 1728 5 is_stmt 1 view .LVU1275
 4221              	.LBB230:
 4222              	.LBI230:
 194:FreeRTOS/portable/portmacro.h ****     {
 4223              		.loc 2 194 34 view .LVU1276
 4224              	.LBB231:
 196:FreeRTOS/portable/portmacro.h **** 
 4225              		.loc 2 196 9 view .LVU1277
 198:FreeRTOS/portable/portmacro.h ****         (
 4226              		.loc 2 198 9 view .LVU1278
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 153


 4227              		.syntax unified
 4228              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 4229 0046 4FF05003 			mov r3, #80												
 4230 004a 83F31188 		msr basepri, r3											
 4231 004e BFF36F8F 		isb														
 4232 0052 BFF34F8F 		dsb														
 4233              	
 4234              	@ 0 "" 2
 4235              	.LVL347:
 4236              		.thumb
 4237              		.syntax unified
 4238              	.L321:
 198:FreeRTOS/portable/portmacro.h ****         (
 4239              		.loc 2 198 9 is_stmt 0 view .LVU1279
 4240              	.LBE231:
 4241              	.LBE230:
1728:FreeRTOS/queue.c **** 
 4242              		.loc 1 1728 5 is_stmt 1 discriminator 2 view .LVU1280
1728:FreeRTOS/queue.c **** 
 4243              		.loc 1 1728 5 discriminator 2 view .LVU1281
1728:FreeRTOS/queue.c **** 
 4244              		.loc 1 1728 5 discriminator 2 view .LVU1282
 4245 0056 FEE7     		b	.L321
 4246              	.LVL348:
 4247              	.L335:
1728:FreeRTOS/queue.c **** 
 4248              		.loc 1 1728 5 is_stmt 0 discriminator 2 view .LVU1283
 4249 0058 0026     		movs	r6, #0
 4250 005a 3CE0     		b	.L324
 4251              	.LVL349:
 4252              	.L341:
 4253              	.LBB232:
1753:FreeRTOS/queue.c **** 
 4254              		.loc 1 1753 17 is_stmt 1 view .LVU1284
1753:FreeRTOS/queue.c **** 
 4255              		.loc 1 1753 40 is_stmt 0 view .LVU1285
 4256 005c E668     		ldr	r6, [r4, #12]
 4257              	.LVL350:
1755:FreeRTOS/queue.c ****                 traceQUEUE_PEEK( pxQueue );
 4258              		.loc 1 1755 17 is_stmt 1 view .LVU1286
 4259 005e 2946     		mov	r1, r5
 4260 0060 2046     		mov	r0, r4
 4261 0062 FFF7FEFF 		bl	prvCopyDataFromQueue
 4262              	.LVL351:
1756:FreeRTOS/queue.c **** 
 4263              		.loc 1 1756 43 view .LVU1287
1759:FreeRTOS/queue.c **** 
 4264              		.loc 1 1759 17 view .LVU1288
1759:FreeRTOS/queue.c **** 
 4265              		.loc 1 1759 46 is_stmt 0 view .LVU1289
 4266 0066 E660     		str	r6, [r4, #12]
1763:FreeRTOS/queue.c ****                 {
 4267              		.loc 1 1763 17 is_stmt 1 view .LVU1290
1763:FreeRTOS/queue.c ****                 {
 4268              		.loc 1 1763 21 is_stmt 0 view .LVU1291
 4269 0068 636A     		ldr	r3, [r4, #36]
1763:FreeRTOS/queue.c ****                 {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 154


 4270              		.loc 1 1763 19 view .LVU1292
 4271 006a 23B9     		cbnz	r3, .L339
 4272              	.L326:
1777:FreeRTOS/queue.c ****                 }
 4273              		.loc 1 1777 45 is_stmt 1 view .LVU1293
1780:FreeRTOS/queue.c ****                 return pdPASS;
 4274              		.loc 1 1780 17 view .LVU1294
 4275 006c FFF7FEFF 		bl	vPortExitCritical
 4276              	.LVL352:
1781:FreeRTOS/queue.c ****             }
 4277              		.loc 1 1781 17 view .LVU1295
1781:FreeRTOS/queue.c ****             }
 4278              		.loc 1 1781 24 is_stmt 0 view .LVU1296
 4279 0070 0120     		movs	r0, #1
 4280              	.LVL353:
 4281              	.L317:
1781:FreeRTOS/queue.c ****             }
 4282              		.loc 1 1781 24 view .LVU1297
 4283              	.LBE232:
1862:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 4284              		.loc 1 1862 1 view .LVU1298
 4285 0072 04B0     		add	sp, sp, #16
 4286              	.LCFI57:
 4287              		.cfi_remember_state
 4288              		.cfi_def_cfa_offset 16
 4289              		@ sp needed
 4290 0074 70BD     		pop	{r4, r5, r6, pc}
 4291              	.LVL354:
 4292              	.L339:
 4293              	.LCFI58:
 4294              		.cfi_restore_state
 4295              	.LBB233:
1765:FreeRTOS/queue.c ****                     {
 4296              		.loc 1 1765 21 is_stmt 1 view .LVU1299
1765:FreeRTOS/queue.c ****                     {
 4297              		.loc 1 1765 25 is_stmt 0 view .LVU1300
 4298 0076 04F12400 		add	r0, r4, #36
 4299 007a FFF7FEFF 		bl	xTaskRemoveFromEventList
 4300              	.LVL355:
1765:FreeRTOS/queue.c ****                     {
 4301              		.loc 1 1765 23 view .LVU1301
 4302 007e 0028     		cmp	r0, #0
 4303 0080 F4D0     		beq	.L326
1768:FreeRTOS/queue.c ****                     }
 4304              		.loc 1 1768 25 is_stmt 1 view .LVU1302
 4305 0082 354B     		ldr	r3, .L346
 4306 0084 4FF08052 		mov	r2, #268435456
 4307 0088 1A60     		str	r2, [r3]
1768:FreeRTOS/queue.c ****                     }
 4308              		.loc 1 1768 25 view .LVU1303
 4309              		.syntax unified
 4310              	@ 1768 "FreeRTOS/queue.c" 1
 4311 008a BFF34F8F 		dsb
 4312              	@ 0 "" 2
1768:FreeRTOS/queue.c ****                     }
 4313              		.loc 1 1768 25 view .LVU1304
 4314              	@ 1768 "FreeRTOS/queue.c" 1
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 155


 4315 008e BFF36F8F 		isb
 4316              	@ 0 "" 2
1768:FreeRTOS/queue.c ****                     }
 4317              		.loc 1 1768 57 view .LVU1305
 4318              		.thumb
 4319              		.syntax unified
 4320 0092 EBE7     		b	.L326
 4321              	.LVL356:
 4322              	.L342:
1789:FreeRTOS/queue.c ****                     traceQUEUE_PEEK_FAILED( pxQueue );
 4323              		.loc 1 1789 21 view .LVU1306
 4324 0094 FFF7FEFF 		bl	vPortExitCritical
 4325              	.LVL357:
1790:FreeRTOS/queue.c ****                     return errQUEUE_EMPTY;
 4326              		.loc 1 1790 54 view .LVU1307
1791:FreeRTOS/queue.c ****                 }
 4327              		.loc 1 1791 21 view .LVU1308
1791:FreeRTOS/queue.c ****                 }
 4328              		.loc 1 1791 28 is_stmt 0 view .LVU1309
 4329 0098 0020     		movs	r0, #0
 4330 009a EAE7     		b	.L317
 4331              	.L343:
1798:FreeRTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
 4332              		.loc 1 1798 21 is_stmt 1 view .LVU1310
 4333 009c 02A8     		add	r0, sp, #8
 4334 009e FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 4335              	.LVL358:
1799:FreeRTOS/queue.c ****                 }
 4336              		.loc 1 1799 21 view .LVU1311
1799:FreeRTOS/queue.c ****                 }
 4337              		.loc 1 1799 35 is_stmt 0 view .LVU1312
 4338 00a2 0126     		movs	r6, #1
 4339 00a4 21E0     		b	.L329
 4340              	.LVL359:
 4341              	.L344:
1799:FreeRTOS/queue.c ****                 }
 4342              		.loc 1 1799 35 view .LVU1313
 4343              	.LBE233:
1814:FreeRTOS/queue.c **** 
 4344              		.loc 1 1814 9 is_stmt 1 discriminator 1 view .LVU1314
 4345 00a6 0023     		movs	r3, #0
 4346 00a8 84F84430 		strb	r3, [r4, #68]
 4347 00ac 29E0     		b	.L330
 4348              	.L345:
1814:FreeRTOS/queue.c **** 
 4349              		.loc 1 1814 9 discriminator 4 view .LVU1315
 4350 00ae 0023     		movs	r3, #0
 4351 00b0 84F84530 		strb	r3, [r4, #69]
 4352 00b4 2BE0     		b	.L331
 4353              	.L333:
1840:FreeRTOS/queue.c ****                 ( void ) xTaskResumeAll();
 4354              		.loc 1 1840 17 view .LVU1316
 4355 00b6 2046     		mov	r0, r4
 4356 00b8 FFF7FEFF 		bl	prvUnlockQueue
 4357              	.LVL360:
1841:FreeRTOS/queue.c ****             }
 4358              		.loc 1 1841 17 view .LVU1317
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 156


1841:FreeRTOS/queue.c ****             }
 4359              		.loc 1 1841 26 is_stmt 0 view .LVU1318
 4360 00bc FFF7FEFF 		bl	xTaskResumeAll
 4361              	.LVL361:
 4362 00c0 09E0     		b	.L324
 4363              	.L332:
1848:FreeRTOS/queue.c ****             ( void ) xTaskResumeAll();
 4364              		.loc 1 1848 13 is_stmt 1 view .LVU1319
 4365 00c2 2046     		mov	r0, r4
 4366 00c4 FFF7FEFF 		bl	prvUnlockQueue
 4367              	.LVL362:
1849:FreeRTOS/queue.c **** 
 4368              		.loc 1 1849 13 view .LVU1320
1849:FreeRTOS/queue.c **** 
 4369              		.loc 1 1849 22 is_stmt 0 view .LVU1321
 4370 00c8 FFF7FEFF 		bl	xTaskResumeAll
 4371              	.LVL363:
1851:FreeRTOS/queue.c ****             {
 4372              		.loc 1 1851 13 is_stmt 1 view .LVU1322
1851:FreeRTOS/queue.c ****             {
 4373              		.loc 1 1851 17 is_stmt 0 view .LVU1323
 4374 00cc 2046     		mov	r0, r4
 4375 00ce FFF7FEFF 		bl	prvIsQueueEmpty
 4376              	.LVL364:
1851:FreeRTOS/queue.c ****             {
 4377              		.loc 1 1851 15 view .LVU1324
 4378 00d2 0028     		cmp	r0, #0
 4379 00d4 3DD1     		bne	.L340
 4380              	.LVL365:
 4381              	.L324:
1733:FreeRTOS/queue.c ****         }
 4382              		.loc 1 1733 114 is_stmt 1 discriminator 8 view .LVU1325
1740:FreeRTOS/queue.c ****     {
 4383              		.loc 1 1740 5 discriminator 8 view .LVU1326
1742:FreeRTOS/queue.c ****         {
 4384              		.loc 1 1742 9 discriminator 8 view .LVU1327
 4385 00d6 FFF7FEFF 		bl	vPortEnterCritical
 4386              	.LVL366:
 4387              	.LBB234:
1744:FreeRTOS/queue.c **** 
 4388              		.loc 1 1744 13 discriminator 8 view .LVU1328
1744:FreeRTOS/queue.c **** 
 4389              		.loc 1 1744 31 is_stmt 0 discriminator 8 view .LVU1329
 4390 00da A36B     		ldr	r3, [r4, #56]
 4391              	.LVL367:
1748:FreeRTOS/queue.c ****             {
 4392              		.loc 1 1748 13 is_stmt 1 discriminator 8 view .LVU1330
1748:FreeRTOS/queue.c ****             {
 4393              		.loc 1 1748 15 is_stmt 0 discriminator 8 view .LVU1331
 4394 00dc 002B     		cmp	r3, #0
 4395 00de BDD1     		bne	.L341
1785:FreeRTOS/queue.c ****                 {
 4396              		.loc 1 1785 17 is_stmt 1 view .LVU1332
1785:FreeRTOS/queue.c ****                 {
 4397              		.loc 1 1785 34 is_stmt 0 view .LVU1333
 4398 00e0 019B     		ldr	r3, [sp, #4]
 4399              	.LVL368:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 157


1785:FreeRTOS/queue.c ****                 {
 4400              		.loc 1 1785 19 view .LVU1334
 4401 00e2 002B     		cmp	r3, #0
 4402 00e4 D6D0     		beq	.L342
1793:FreeRTOS/queue.c ****                 {
 4403              		.loc 1 1793 22 is_stmt 1 view .LVU1335
1793:FreeRTOS/queue.c ****                 {
 4404              		.loc 1 1793 24 is_stmt 0 view .LVU1336
 4405 00e6 002E     		cmp	r6, #0
 4406 00e8 D8D0     		beq	.L343
 4407              	.LVL369:
 4408              	.L329:
1804:FreeRTOS/queue.c ****                 }
 4409              		.loc 1 1804 45 is_stmt 1 view .LVU1337
 4410              	.LBE234:
1808:FreeRTOS/queue.c **** 
 4411              		.loc 1 1808 9 view .LVU1338
 4412 00ea FFF7FEFF 		bl	vPortExitCritical
 4413              	.LVL370:
1813:FreeRTOS/queue.c ****         prvLockQueue( pxQueue );
 4414              		.loc 1 1813 9 view .LVU1339
 4415 00ee FFF7FEFF 		bl	vTaskSuspendAll
 4416              	.LVL371:
1814:FreeRTOS/queue.c **** 
 4417              		.loc 1 1814 9 view .LVU1340
 4418 00f2 FFF7FEFF 		bl	vPortEnterCritical
 4419              	.LVL372:
1814:FreeRTOS/queue.c **** 
 4420              		.loc 1 1814 9 view .LVU1341
 4421 00f6 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 4422 00fa 5BB2     		sxtb	r3, r3
 4423 00fc B3F1FF3F 		cmp	r3, #-1
 4424 0100 D1D0     		beq	.L344
 4425              	.L330:
1814:FreeRTOS/queue.c **** 
 4426              		.loc 1 1814 9 discriminator 3 view .LVU1342
 4427 0102 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 4428 0106 5BB2     		sxtb	r3, r3
 4429 0108 B3F1FF3F 		cmp	r3, #-1
 4430 010c CFD0     		beq	.L345
 4431              	.L331:
1814:FreeRTOS/queue.c **** 
 4432              		.loc 1 1814 9 discriminator 6 view .LVU1343
 4433 010e FFF7FEFF 		bl	vPortExitCritical
 4434              	.LVL373:
1817:FreeRTOS/queue.c ****         {
 4435              		.loc 1 1817 9 discriminator 6 view .LVU1344
1817:FreeRTOS/queue.c ****         {
 4436              		.loc 1 1817 13 is_stmt 0 discriminator 6 view .LVU1345
 4437 0112 01A9     		add	r1, sp, #4
 4438 0114 02A8     		add	r0, sp, #8
 4439 0116 FFF7FEFF 		bl	xTaskCheckForTimeOut
 4440              	.LVL374:
1817:FreeRTOS/queue.c ****         {
 4441              		.loc 1 1817 11 discriminator 6 view .LVU1346
 4442 011a 0028     		cmp	r0, #0
 4443 011c D1D1     		bne	.L332
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 158


1821:FreeRTOS/queue.c ****             {
 4444              		.loc 1 1821 13 is_stmt 1 view .LVU1347
1821:FreeRTOS/queue.c ****             {
 4445              		.loc 1 1821 17 is_stmt 0 view .LVU1348
 4446 011e 2046     		mov	r0, r4
 4447 0120 FFF7FEFF 		bl	prvIsQueueEmpty
 4448              	.LVL375:
1821:FreeRTOS/queue.c ****             {
 4449              		.loc 1 1821 15 view .LVU1349
 4450 0124 0028     		cmp	r0, #0
 4451 0126 C6D0     		beq	.L333
1823:FreeRTOS/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 4452              		.loc 1 1823 55 is_stmt 1 view .LVU1350
1824:FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 4453              		.loc 1 1824 17 view .LVU1351
 4454 0128 0199     		ldr	r1, [sp, #4]
 4455 012a 04F12400 		add	r0, r4, #36
 4456 012e FFF7FEFF 		bl	vTaskPlaceOnEventList
 4457              	.LVL376:
1825:FreeRTOS/queue.c **** 
 4458              		.loc 1 1825 17 view .LVU1352
 4459 0132 2046     		mov	r0, r4
 4460 0134 FFF7FEFF 		bl	prvUnlockQueue
 4461              	.LVL377:
1827:FreeRTOS/queue.c ****                 {
 4462              		.loc 1 1827 17 view .LVU1353
1827:FreeRTOS/queue.c ****                 {
 4463              		.loc 1 1827 21 is_stmt 0 view .LVU1354
 4464 0138 FFF7FEFF 		bl	xTaskResumeAll
 4465              	.LVL378:
1827:FreeRTOS/queue.c ****                 {
 4466              		.loc 1 1827 19 view .LVU1355
 4467 013c 0028     		cmp	r0, #0
 4468 013e CAD1     		bne	.L324
1829:FreeRTOS/queue.c ****                 }
 4469              		.loc 1 1829 21 is_stmt 1 view .LVU1356
 4470 0140 054B     		ldr	r3, .L346
 4471 0142 4FF08052 		mov	r2, #268435456
 4472 0146 1A60     		str	r2, [r3]
1829:FreeRTOS/queue.c ****                 }
 4473              		.loc 1 1829 21 view .LVU1357
 4474              		.syntax unified
 4475              	@ 1829 "FreeRTOS/queue.c" 1
 4476 0148 BFF34F8F 		dsb
 4477              	@ 0 "" 2
1829:FreeRTOS/queue.c ****                 }
 4478              		.loc 1 1829 21 view .LVU1358
 4479              	@ 1829 "FreeRTOS/queue.c" 1
 4480 014c BFF36F8F 		isb
 4481              	@ 0 "" 2
1829:FreeRTOS/queue.c ****                 }
 4482              		.loc 1 1829 43 view .LVU1359
 4483              		.thumb
 4484              		.syntax unified
 4485 0150 C1E7     		b	.L324
 4486              	.L340:
1854:FreeRTOS/queue.c ****             }
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 159


 4487              		.loc 1 1854 24 is_stmt 0 view .LVU1360
 4488 0152 0020     		movs	r0, #0
 4489 0154 8DE7     		b	.L317
 4490              	.L347:
 4491 0156 00BF     		.align	2
 4492              	.L346:
 4493 0158 04ED00E0 		.word	-536810236
 4494              		.cfi_endproc
 4495              	.LFE23:
 4497              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 4498              		.align	1
 4499              		.global	xQueueReceiveFromISR
 4500              		.syntax unified
 4501              		.thumb
 4502              		.thumb_func
 4503              		.fpu fpv4-sp-d16
 4505              	xQueueReceiveFromISR:
 4506              	.LVL379:
 4507              	.LFB24:
1868:FreeRTOS/queue.c ****     BaseType_t xReturn;
 4508              		.loc 1 1868 1 is_stmt 1 view -0
 4509              		.cfi_startproc
 4510              		@ args = 0, pretend = 0, frame = 0
 4511              		@ frame_needed = 0, uses_anonymous_args = 0
1868:FreeRTOS/queue.c ****     BaseType_t xReturn;
 4512              		.loc 1 1868 1 is_stmt 0 view .LVU1362
 4513 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 4514              	.LCFI59:
 4515              		.cfi_def_cfa_offset 32
 4516              		.cfi_offset 3, -32
 4517              		.cfi_offset 4, -28
 4518              		.cfi_offset 5, -24
 4519              		.cfi_offset 6, -20
 4520              		.cfi_offset 7, -16
 4521              		.cfi_offset 8, -12
 4522              		.cfi_offset 9, -8
 4523              		.cfi_offset 14, -4
1869:FreeRTOS/queue.c ****     UBaseType_t uxSavedInterruptStatus;
 4524              		.loc 1 1869 5 is_stmt 1 view .LVU1363
1870:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 4525              		.loc 1 1870 5 view .LVU1364
1871:FreeRTOS/queue.c **** 
 4526              		.loc 1 1871 5 view .LVU1365
 4527              	.LVL380:
1873:FreeRTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 4528              		.loc 1 1873 5 view .LVU1366
 4529 0004 C8B1     		cbz	r0, .L362
 4530 0006 8946     		mov	r9, r1
 4531 0008 1746     		mov	r7, r2
 4532 000a 0546     		mov	r5, r0
1873:FreeRTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 4533              		.loc 1 1873 28 discriminator 2 view .LVU1367
1874:FreeRTOS/queue.c **** 
 4534              		.loc 1 1874 5 discriminator 2 view .LVU1368
 4535 000c F1B1     		cbz	r1, .L363
 4536              	.L351:
1874:FreeRTOS/queue.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 160


 4537              		.loc 1 1874 95 discriminator 8 view .LVU1369
1890:FreeRTOS/queue.c **** 
 4538              		.loc 1 1890 5 discriminator 8 view .LVU1370
 4539 000e FFF7FEFF 		bl	vPortValidateInterruptPriority
 4540              	.LVL381:
1892:FreeRTOS/queue.c ****     {
 4541              		.loc 1 1892 5 discriminator 8 view .LVU1371
 4542              	.LBB235:
 4543              	.LBI235:
 210:FreeRTOS/portable/portmacro.h ****     {
 4544              		.loc 2 210 38 discriminator 8 view .LVU1372
 4545              	.LBB236:
 212:FreeRTOS/portable/portmacro.h **** 
 4546              		.loc 2 212 9 discriminator 8 view .LVU1373
 214:FreeRTOS/portable/portmacro.h ****         (
 4547              		.loc 2 214 9 discriminator 8 view .LVU1374
 4548              		.syntax unified
 4549              	@ 214 "FreeRTOS/portable/portmacro.h" 1
 4550 0012 EFF31186 			mrs r6, basepri											
 4551 0016 4FF05003 		mov r3, #80												
 4552 001a 83F31188 		msr basepri, r3											
 4553 001e BFF36F8F 		isb														
 4554 0022 BFF34F8F 		dsb														
 4555              	
 4556              	@ 0 "" 2
 4557              	.LVL382:
 226:FreeRTOS/portable/portmacro.h ****     }
 4558              		.loc 2 226 9 discriminator 8 view .LVU1375
 226:FreeRTOS/portable/portmacro.h ****     }
 4559              		.loc 2 226 9 is_stmt 0 discriminator 8 view .LVU1376
 4560              		.thumb
 4561              		.syntax unified
 4562              	.LBE236:
 4563              	.LBE235:
 4564              	.LBB237:
1894:FreeRTOS/queue.c **** 
 4565              		.loc 1 1894 9 is_stmt 1 discriminator 8 view .LVU1377
1894:FreeRTOS/queue.c **** 
 4566              		.loc 1 1894 27 is_stmt 0 discriminator 8 view .LVU1378
 4567 0026 D5F83880 		ldr	r8, [r5, #56]
 4568              	.LVL383:
1897:FreeRTOS/queue.c ****         {
 4569              		.loc 1 1897 9 is_stmt 1 discriminator 8 view .LVU1379
1897:FreeRTOS/queue.c ****         {
 4570              		.loc 1 1897 11 is_stmt 0 discriminator 8 view .LVU1380
 4571 002a B8F1000F 		cmp	r8, #0
 4572 002e 19D1     		bne	.L364
1950:FreeRTOS/queue.c ****             traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 4573              		.loc 1 1950 21 view .LVU1381
 4574 0030 0020     		movs	r0, #0
 4575              	.L353:
 4576              	.LVL384:
1951:FreeRTOS/queue.c ****         }
 4577              		.loc 1 1951 58 is_stmt 1 view .LVU1382
 4578              	.LBE237:
1954:FreeRTOS/queue.c **** 
 4579              		.loc 1 1954 5 view .LVU1383
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 161


 4580              	.LBB241:
 4581              	.LBI241:
 230:FreeRTOS/portable/portmacro.h ****     {
 4582              		.loc 2 230 34 view .LVU1384
 4583              	.LBB242:
 4584              		.loc 2 232 9 view .LVU1385
 4585              		.syntax unified
 4586              	@ 232 "FreeRTOS/portable/portmacro.h" 1
 4587 0032 86F31188 			msr basepri, r6	
 4588              	@ 0 "" 2
 4589              	.LVL385:
 4590              		.loc 2 232 9 is_stmt 0 view .LVU1386
 4591              		.thumb
 4592              		.syntax unified
 4593              	.LBE242:
 4594              	.LBE241:
1956:FreeRTOS/queue.c **** }
 4595              		.loc 1 1956 5 is_stmt 1 view .LVU1387
1957:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 4596              		.loc 1 1957 1 is_stmt 0 view .LVU1388
 4597 0036 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 4598              	.LVL386:
 4599              	.L362:
1873:FreeRTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 4600              		.loc 1 1873 5 is_stmt 1 view .LVU1389
 4601              	.LBB243:
 4602              	.LBI243:
 194:FreeRTOS/portable/portmacro.h ****     {
 4603              		.loc 2 194 34 view .LVU1390
 4604              	.LBB244:
 196:FreeRTOS/portable/portmacro.h **** 
 4605              		.loc 2 196 9 view .LVU1391
 198:FreeRTOS/portable/portmacro.h ****         (
 4606              		.loc 2 198 9 view .LVU1392
 4607              		.syntax unified
 4608              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 4609 003a 4FF05003 			mov r3, #80												
 4610 003e 83F31188 		msr basepri, r3											
 4611 0042 BFF36F8F 		isb														
 4612 0046 BFF34F8F 		dsb														
 4613              	
 4614              	@ 0 "" 2
 4615              	.LVL387:
 4616              		.thumb
 4617              		.syntax unified
 4618              	.L350:
 198:FreeRTOS/portable/portmacro.h ****         (
 4619              		.loc 2 198 9 is_stmt 0 view .LVU1393
 4620              	.LBE244:
 4621              	.LBE243:
1873:FreeRTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 4622              		.loc 1 1873 5 is_stmt 1 discriminator 1 view .LVU1394
1873:FreeRTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 4623              		.loc 1 1873 5 discriminator 1 view .LVU1395
1873:FreeRTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 4624              		.loc 1 1873 5 discriminator 1 view .LVU1396
 4625 004a FEE7     		b	.L350
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 162


 4626              	.L363:
1874:FreeRTOS/queue.c **** 
 4627              		.loc 1 1874 5 is_stmt 0 discriminator 2 view .LVU1397
 4628 004c 036C     		ldr	r3, [r0, #64]
 4629 004e 002B     		cmp	r3, #0
 4630 0050 DDD0     		beq	.L351
1874:FreeRTOS/queue.c **** 
 4631              		.loc 1 1874 5 is_stmt 1 view .LVU1398
 4632              	.LBB245:
 4633              	.LBI245:
 194:FreeRTOS/portable/portmacro.h ****     {
 4634              		.loc 2 194 34 view .LVU1399
 4635              	.LBB246:
 196:FreeRTOS/portable/portmacro.h **** 
 4636              		.loc 2 196 9 view .LVU1400
 198:FreeRTOS/portable/portmacro.h ****         (
 4637              		.loc 2 198 9 view .LVU1401
 4638              		.syntax unified
 4639              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 4640 0052 4FF05003 			mov r3, #80												
 4641 0056 83F31188 		msr basepri, r3											
 4642 005a BFF36F8F 		isb														
 4643 005e BFF34F8F 		dsb														
 4644              	
 4645              	@ 0 "" 2
 4646              	.LVL388:
 4647              		.thumb
 4648              		.syntax unified
 4649              	.L352:
 198:FreeRTOS/portable/portmacro.h ****         (
 4650              		.loc 2 198 9 is_stmt 0 view .LVU1402
 4651              	.LBE246:
 4652              	.LBE245:
1874:FreeRTOS/queue.c **** 
 4653              		.loc 1 1874 5 is_stmt 1 discriminator 2 view .LVU1403
1874:FreeRTOS/queue.c **** 
 4654              		.loc 1 1874 5 discriminator 2 view .LVU1404
1874:FreeRTOS/queue.c **** 
 4655              		.loc 1 1874 5 discriminator 2 view .LVU1405
 4656 0062 FEE7     		b	.L352
 4657              	.LVL389:
 4658              	.L364:
 4659              	.LBB247:
 4660              	.LBB238:
1899:FreeRTOS/queue.c **** 
 4661              		.loc 1 1899 13 view .LVU1406
1899:FreeRTOS/queue.c **** 
 4662              		.loc 1 1899 26 is_stmt 0 view .LVU1407
 4663 0064 95F84440 		ldrb	r4, [r5, #68]	@ zero_extendqisi2
 4664 0068 64B2     		sxtb	r4, r4
 4665              	.LVL390:
1901:FreeRTOS/queue.c **** 
 4666              		.loc 1 1901 51 is_stmt 1 view .LVU1408
1903:FreeRTOS/queue.c ****             pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 4667              		.loc 1 1903 13 view .LVU1409
 4668 006a 4946     		mov	r1, r9
 4669 006c 2846     		mov	r0, r5
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 163


 4670 006e FFF7FEFF 		bl	prvCopyDataFromQueue
 4671              	.LVL391:
1904:FreeRTOS/queue.c **** 
 4672              		.loc 1 1904 13 view .LVU1410
1904:FreeRTOS/queue.c **** 
 4673              		.loc 1 1904 60 is_stmt 0 view .LVU1411
 4674 0072 08F1FF33 		add	r3, r8, #-1
1904:FreeRTOS/queue.c **** 
 4675              		.loc 1 1904 40 view .LVU1412
 4676 0076 AB63     		str	r3, [r5, #56]
1910:FreeRTOS/queue.c ****             {
 4677              		.loc 1 1910 13 is_stmt 1 view .LVU1413
1910:FreeRTOS/queue.c ****             {
 4678              		.loc 1 1910 15 is_stmt 0 view .LVU1414
 4679 0078 B4F1FF3F 		cmp	r4, #-1
 4680 007c 07D0     		beq	.L365
1941:FreeRTOS/queue.c **** 
 4681              		.loc 1 1941 17 is_stmt 1 view .LVU1415
 4682 007e 7F2C     		cmp	r4, #127
 4683 0080 12D0     		beq	.L366
1941:FreeRTOS/queue.c **** 
 4684              		.loc 1 1941 57 discriminator 2 view .LVU1416
1943:FreeRTOS/queue.c ****             }
 4685              		.loc 1 1943 17 discriminator 2 view .LVU1417
1943:FreeRTOS/queue.c ****             }
 4686              		.loc 1 1943 57 is_stmt 0 discriminator 2 view .LVU1418
 4687 0082 631C     		adds	r3, r4, #1
1943:FreeRTOS/queue.c ****             }
 4688              		.loc 1 1943 36 discriminator 2 view .LVU1419
 4689 0084 5BB2     		sxtb	r3, r3
1943:FreeRTOS/queue.c ****             }
 4690              		.loc 1 1943 34 discriminator 2 view .LVU1420
 4691 0086 85F84430 		strb	r3, [r5, #68]
1946:FreeRTOS/queue.c ****         }
 4692              		.loc 1 1946 21 discriminator 2 view .LVU1421
 4693 008a 0120     		movs	r0, #1
 4694 008c D1E7     		b	.L353
 4695              	.L365:
1912:FreeRTOS/queue.c ****                 {
 4696              		.loc 1 1912 17 is_stmt 1 view .LVU1422
1912:FreeRTOS/queue.c ****                 {
 4697              		.loc 1 1912 21 is_stmt 0 view .LVU1423
 4698 008e 2B69     		ldr	r3, [r5, #16]
1912:FreeRTOS/queue.c ****                 {
 4699              		.loc 1 1912 19 view .LVU1424
 4700 0090 0BB9     		cbnz	r3, .L367
1946:FreeRTOS/queue.c ****         }
 4701              		.loc 1 1946 21 view .LVU1425
 4702 0092 0120     		movs	r0, #1
 4703 0094 CDE7     		b	.L353
 4704              	.L367:
1914:FreeRTOS/queue.c ****                     {
 4705              		.loc 1 1914 21 is_stmt 1 view .LVU1426
1914:FreeRTOS/queue.c ****                     {
 4706              		.loc 1 1914 25 is_stmt 0 view .LVU1427
 4707 0096 05F11000 		add	r0, r5, #16
 4708 009a FFF7FEFF 		bl	xTaskRemoveFromEventList
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 164


 4709              	.LVL392:
1914:FreeRTOS/queue.c ****                     {
 4710              		.loc 1 1914 23 view .LVU1428
 4711 009e 60B1     		cbz	r0, .L359
1918:FreeRTOS/queue.c ****                         {
 4712              		.loc 1 1918 25 is_stmt 1 view .LVU1429
1918:FreeRTOS/queue.c ****                         {
 4713              		.loc 1 1918 27 is_stmt 0 view .LVU1430
 4714 00a0 6FB1     		cbz	r7, .L360
1920:FreeRTOS/queue.c ****                         }
 4715              		.loc 1 1920 29 is_stmt 1 view .LVU1431
1920:FreeRTOS/queue.c ****                         }
 4716              		.loc 1 1920 56 is_stmt 0 view .LVU1432
 4717 00a2 0120     		movs	r0, #1
 4718 00a4 3860     		str	r0, [r7]
 4719 00a6 C4E7     		b	.L353
 4720              	.L366:
1941:FreeRTOS/queue.c **** 
 4721              		.loc 1 1941 17 is_stmt 1 view .LVU1433
 4722              	.LBB239:
 4723              	.LBI239:
 194:FreeRTOS/portable/portmacro.h ****     {
 4724              		.loc 2 194 34 view .LVU1434
 4725              	.LBB240:
 196:FreeRTOS/portable/portmacro.h **** 
 4726              		.loc 2 196 9 view .LVU1435
 198:FreeRTOS/portable/portmacro.h ****         (
 4727              		.loc 2 198 9 view .LVU1436
 4728              		.syntax unified
 4729              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 4730 00a8 4FF05003 			mov r3, #80												
 4731 00ac 83F31188 		msr basepri, r3											
 4732 00b0 BFF36F8F 		isb														
 4733 00b4 BFF34F8F 		dsb														
 4734              	
 4735              	@ 0 "" 2
 4736              	.LVL393:
 4737              		.thumb
 4738              		.syntax unified
 4739              	.L356:
 198:FreeRTOS/portable/portmacro.h ****         (
 4740              		.loc 2 198 9 is_stmt 0 view .LVU1437
 4741              	.LBE240:
 4742              	.LBE239:
1941:FreeRTOS/queue.c **** 
 4743              		.loc 1 1941 17 is_stmt 1 discriminator 5 view .LVU1438
1941:FreeRTOS/queue.c **** 
 4744              		.loc 1 1941 17 discriminator 5 view .LVU1439
1941:FreeRTOS/queue.c **** 
 4745              		.loc 1 1941 17 discriminator 5 view .LVU1440
 4746 00b8 FEE7     		b	.L356
 4747              	.L359:
1946:FreeRTOS/queue.c ****         }
 4748              		.loc 1 1946 21 is_stmt 0 view .LVU1441
 4749 00ba 0120     		movs	r0, #1
 4750 00bc B9E7     		b	.L353
 4751              	.L360:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 165


 4752 00be 0120     		movs	r0, #1
 4753 00c0 B7E7     		b	.L353
 4754              	.LBE238:
 4755              	.LBE247:
 4756              		.cfi_endproc
 4757              	.LFE24:
 4759              		.section	.text.xQueuePeekFromISR,"ax",%progbits
 4760              		.align	1
 4761              		.global	xQueuePeekFromISR
 4762              		.syntax unified
 4763              		.thumb
 4764              		.thumb_func
 4765              		.fpu fpv4-sp-d16
 4767              	xQueuePeekFromISR:
 4768              	.LVL394:
 4769              	.LFB25:
1962:FreeRTOS/queue.c ****     BaseType_t xReturn;
 4770              		.loc 1 1962 1 is_stmt 1 view -0
 4771              		.cfi_startproc
 4772              		@ args = 0, pretend = 0, frame = 0
 4773              		@ frame_needed = 0, uses_anonymous_args = 0
1962:FreeRTOS/queue.c ****     BaseType_t xReturn;
 4774              		.loc 1 1962 1 is_stmt 0 view .LVU1443
 4775 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4776              	.LCFI60:
 4777              		.cfi_def_cfa_offset 24
 4778              		.cfi_offset 3, -24
 4779              		.cfi_offset 4, -20
 4780              		.cfi_offset 5, -16
 4781              		.cfi_offset 6, -12
 4782              		.cfi_offset 7, -8
 4783              		.cfi_offset 14, -4
1963:FreeRTOS/queue.c ****     UBaseType_t uxSavedInterruptStatus;
 4784              		.loc 1 1963 5 is_stmt 1 view .LVU1444
1964:FreeRTOS/queue.c ****     int8_t * pcOriginalReadPosition;
 4785              		.loc 1 1964 5 view .LVU1445
1965:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 4786              		.loc 1 1965 5 view .LVU1446
1966:FreeRTOS/queue.c **** 
 4787              		.loc 1 1966 5 view .LVU1447
 4788              	.LVL395:
1968:FreeRTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 4789              		.loc 1 1968 5 view .LVU1448
 4790 0002 68B1     		cbz	r0, .L378
 4791 0004 0D46     		mov	r5, r1
 4792 0006 0446     		mov	r4, r0
1968:FreeRTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 4793              		.loc 1 1968 28 discriminator 2 view .LVU1449
1969:FreeRTOS/queue.c ****     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 4794              		.loc 1 1969 5 discriminator 2 view .LVU1450
 4795 0008 99B1     		cbz	r1, .L379
 4796              	.L371:
1969:FreeRTOS/queue.c ****     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 4797              		.loc 1 1969 95 discriminator 8 view .LVU1451
1970:FreeRTOS/queue.c **** 
 4798              		.loc 1 1970 5 discriminator 8 view .LVU1452
 4799 000a 236C     		ldr	r3, [r4, #64]
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 166


 4800 000c EBB9     		cbnz	r3, .L373
1970:FreeRTOS/queue.c **** 
 4801              		.loc 1 1970 5 view .LVU1453
 4802              	.LBB248:
 4803              	.LBI248:
 194:FreeRTOS/portable/portmacro.h ****     {
 4804              		.loc 2 194 34 view .LVU1454
 4805              	.LBB249:
 196:FreeRTOS/portable/portmacro.h **** 
 4806              		.loc 2 196 9 view .LVU1455
 198:FreeRTOS/portable/portmacro.h ****         (
 4807              		.loc 2 198 9 view .LVU1456
 4808              		.syntax unified
 4809              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 4810 000e 4FF05003 			mov r3, #80												
 4811 0012 83F31188 		msr basepri, r3											
 4812 0016 BFF36F8F 		isb														
 4813 001a BFF34F8F 		dsb														
 4814              	
 4815              	@ 0 "" 2
 4816              	.LVL396:
 4817              		.thumb
 4818              		.syntax unified
 4819              	.L374:
 198:FreeRTOS/portable/portmacro.h ****         (
 4820              		.loc 2 198 9 is_stmt 0 view .LVU1457
 4821              	.LBE249:
 4822              	.LBE248:
1970:FreeRTOS/queue.c **** 
 4823              		.loc 1 1970 5 is_stmt 1 discriminator 3 view .LVU1458
1970:FreeRTOS/queue.c **** 
 4824              		.loc 1 1970 5 discriminator 3 view .LVU1459
1970:FreeRTOS/queue.c **** 
 4825              		.loc 1 1970 5 discriminator 3 view .LVU1460
 4826 001e FEE7     		b	.L374
 4827              	.L378:
1968:FreeRTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 4828              		.loc 1 1968 5 view .LVU1461
 4829              	.LBB250:
 4830              	.LBI250:
 194:FreeRTOS/portable/portmacro.h ****     {
 4831              		.loc 2 194 34 view .LVU1462
 4832              	.LBB251:
 196:FreeRTOS/portable/portmacro.h **** 
 4833              		.loc 2 196 9 view .LVU1463
 198:FreeRTOS/portable/portmacro.h ****         (
 4834              		.loc 2 198 9 view .LVU1464
 4835              		.syntax unified
 4836              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 4837 0020 4FF05003 			mov r3, #80												
 4838 0024 83F31188 		msr basepri, r3											
 4839 0028 BFF36F8F 		isb														
 4840 002c BFF34F8F 		dsb														
 4841              	
 4842              	@ 0 "" 2
 4843              	.LVL397:
 4844              		.thumb
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 167


 4845              		.syntax unified
 4846              	.L370:
 198:FreeRTOS/portable/portmacro.h ****         (
 4847              		.loc 2 198 9 is_stmt 0 view .LVU1465
 4848              	.LBE251:
 4849              	.LBE250:
1968:FreeRTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 4850              		.loc 1 1968 5 is_stmt 1 discriminator 1 view .LVU1466
1968:FreeRTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 4851              		.loc 1 1968 5 discriminator 1 view .LVU1467
1968:FreeRTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 4852              		.loc 1 1968 5 discriminator 1 view .LVU1468
 4853 0030 FEE7     		b	.L370
 4854              	.L379:
1969:FreeRTOS/queue.c ****     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 4855              		.loc 1 1969 5 is_stmt 0 discriminator 2 view .LVU1469
 4856 0032 036C     		ldr	r3, [r0, #64]
 4857 0034 002B     		cmp	r3, #0
 4858 0036 E8D0     		beq	.L371
1969:FreeRTOS/queue.c ****     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 4859              		.loc 1 1969 5 is_stmt 1 view .LVU1470
 4860              	.LBB252:
 4861              	.LBI252:
 194:FreeRTOS/portable/portmacro.h ****     {
 4862              		.loc 2 194 34 view .LVU1471
 4863              	.LBB253:
 196:FreeRTOS/portable/portmacro.h **** 
 4864              		.loc 2 196 9 view .LVU1472
 198:FreeRTOS/portable/portmacro.h ****         (
 4865              		.loc 2 198 9 view .LVU1473
 4866              		.syntax unified
 4867              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 4868 0038 4FF05003 			mov r3, #80												
 4869 003c 83F31188 		msr basepri, r3											
 4870 0040 BFF36F8F 		isb														
 4871 0044 BFF34F8F 		dsb														
 4872              	
 4873              	@ 0 "" 2
 4874              	.LVL398:
 4875              		.thumb
 4876              		.syntax unified
 4877              	.L372:
 198:FreeRTOS/portable/portmacro.h ****         (
 4878              		.loc 2 198 9 is_stmt 0 view .LVU1474
 4879              	.LBE253:
 4880              	.LBE252:
1969:FreeRTOS/queue.c ****     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 4881              		.loc 1 1969 5 is_stmt 1 discriminator 2 view .LVU1475
1969:FreeRTOS/queue.c ****     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 4882              		.loc 1 1969 5 discriminator 2 view .LVU1476
1969:FreeRTOS/queue.c ****     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 4883              		.loc 1 1969 5 discriminator 2 view .LVU1477
 4884 0048 FEE7     		b	.L372
 4885              	.L373:
1970:FreeRTOS/queue.c **** 
 4886              		.loc 1 1970 45 discriminator 2 view .LVU1478
1986:FreeRTOS/queue.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 168


 4887              		.loc 1 1986 5 discriminator 2 view .LVU1479
 4888 004a FFF7FEFF 		bl	vPortValidateInterruptPriority
 4889              	.LVL399:
1988:FreeRTOS/queue.c ****     {
 4890              		.loc 1 1988 5 discriminator 2 view .LVU1480
 4891              	.LBB254:
 4892              	.LBI254:
 210:FreeRTOS/portable/portmacro.h ****     {
 4893              		.loc 2 210 38 discriminator 2 view .LVU1481
 4894              	.LBB255:
 212:FreeRTOS/portable/portmacro.h **** 
 4895              		.loc 2 212 9 discriminator 2 view .LVU1482
 214:FreeRTOS/portable/portmacro.h ****         (
 4896              		.loc 2 214 9 discriminator 2 view .LVU1483
 4897              		.syntax unified
 4898              	@ 214 "FreeRTOS/portable/portmacro.h" 1
 4899 004e EFF31186 			mrs r6, basepri											
 4900 0052 4FF05003 		mov r3, #80												
 4901 0056 83F31188 		msr basepri, r3											
 4902 005a BFF36F8F 		isb														
 4903 005e BFF34F8F 		dsb														
 4904              	
 4905              	@ 0 "" 2
 4906              	.LVL400:
 226:FreeRTOS/portable/portmacro.h ****     }
 4907              		.loc 2 226 9 discriminator 2 view .LVU1484
 226:FreeRTOS/portable/portmacro.h ****     }
 4908              		.loc 2 226 9 is_stmt 0 discriminator 2 view .LVU1485
 4909              		.thumb
 4910              		.syntax unified
 4911              	.LBE255:
 4912              	.LBE254:
1991:FreeRTOS/queue.c ****         {
 4913              		.loc 1 1991 9 is_stmt 1 discriminator 2 view .LVU1486
1991:FreeRTOS/queue.c ****         {
 4914              		.loc 1 1991 20 is_stmt 0 discriminator 2 view .LVU1487
 4915 0062 A36B     		ldr	r3, [r4, #56]
1991:FreeRTOS/queue.c ****         {
 4916              		.loc 1 1991 11 discriminator 2 view .LVU1488
 4917 0064 1BB9     		cbnz	r3, .L380
2005:FreeRTOS/queue.c ****             traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 4918              		.loc 1 2005 21 view .LVU1489
 4919 0066 0020     		movs	r0, #0
 4920              	.L375:
 4921              	.LVL401:
2006:FreeRTOS/queue.c ****         }
 4922              		.loc 1 2006 55 is_stmt 1 view .LVU1490
2009:FreeRTOS/queue.c **** 
 4923              		.loc 1 2009 5 view .LVU1491
 4924              	.LBB256:
 4925              	.LBI256:
 230:FreeRTOS/portable/portmacro.h ****     {
 4926              		.loc 2 230 34 view .LVU1492
 4927              	.LBB257:
 4928              		.loc 2 232 9 view .LVU1493
 4929              		.syntax unified
 4930              	@ 232 "FreeRTOS/portable/portmacro.h" 1
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 169


 4931 0068 86F31188 			msr basepri, r6	
 4932              	@ 0 "" 2
 4933              	.LVL402:
 4934              		.loc 2 232 9 is_stmt 0 view .LVU1494
 4935              		.thumb
 4936              		.syntax unified
 4937              	.LBE257:
 4938              	.LBE256:
2011:FreeRTOS/queue.c **** }
 4939              		.loc 1 2011 5 is_stmt 1 view .LVU1495
2012:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 4940              		.loc 1 2012 1 is_stmt 0 view .LVU1496
 4941 006c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4942              	.LVL403:
 4943              	.L380:
1993:FreeRTOS/queue.c **** 
 4944              		.loc 1 1993 48 is_stmt 1 view .LVU1497
1997:FreeRTOS/queue.c ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
 4945              		.loc 1 1997 13 view .LVU1498
1997:FreeRTOS/queue.c ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
 4946              		.loc 1 1997 36 is_stmt 0 view .LVU1499
 4947 006e E768     		ldr	r7, [r4, #12]
 4948              	.LVL404:
1998:FreeRTOS/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 4949              		.loc 1 1998 13 is_stmt 1 view .LVU1500
 4950 0070 2946     		mov	r1, r5
 4951 0072 2046     		mov	r0, r4
 4952 0074 FFF7FEFF 		bl	prvCopyDataFromQueue
 4953              	.LVL405:
1999:FreeRTOS/queue.c **** 
 4954              		.loc 1 1999 13 view .LVU1501
1999:FreeRTOS/queue.c **** 
 4955              		.loc 1 1999 42 is_stmt 0 view .LVU1502
 4956 0078 E760     		str	r7, [r4, #12]
2001:FreeRTOS/queue.c ****         }
 4957              		.loc 1 2001 13 is_stmt 1 view .LVU1503
 4958              	.LVL406:
2001:FreeRTOS/queue.c ****         }
 4959              		.loc 1 2001 21 is_stmt 0 view .LVU1504
 4960 007a 0120     		movs	r0, #1
 4961 007c F4E7     		b	.L375
 4962              		.cfi_endproc
 4963              	.LFE25:
 4965              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 4966              		.align	1
 4967              		.global	uxQueueMessagesWaiting
 4968              		.syntax unified
 4969              		.thumb
 4970              		.thumb_func
 4971              		.fpu fpv4-sp-d16
 4973              	uxQueueMessagesWaiting:
 4974              	.LVL407:
 4975              	.LFB26:
2016:FreeRTOS/queue.c ****     UBaseType_t uxReturn;
 4976              		.loc 1 2016 1 is_stmt 1 view -0
 4977              		.cfi_startproc
 4978              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 170


 4979              		@ frame_needed = 0, uses_anonymous_args = 0
2017:FreeRTOS/queue.c **** 
 4980              		.loc 1 2017 5 view .LVU1506
2019:FreeRTOS/queue.c **** 
 4981              		.loc 1 2019 5 view .LVU1507
 4982 0000 40B1     		cbz	r0, .L386
2016:FreeRTOS/queue.c ****     UBaseType_t uxReturn;
 4983              		.loc 1 2016 1 is_stmt 0 discriminator 2 view .LVU1508
 4984 0002 10B5     		push	{r4, lr}
 4985              	.LCFI61:
 4986              		.cfi_def_cfa_offset 8
 4987              		.cfi_offset 4, -8
 4988              		.cfi_offset 14, -4
 4989 0004 0446     		mov	r4, r0
2019:FreeRTOS/queue.c **** 
 4990              		.loc 1 2019 27 is_stmt 1 discriminator 2 view .LVU1509
2021:FreeRTOS/queue.c ****     {
 4991              		.loc 1 2021 5 discriminator 2 view .LVU1510
 4992 0006 FFF7FEFF 		bl	vPortEnterCritical
 4993              	.LVL408:
2023:FreeRTOS/queue.c ****     }
 4994              		.loc 1 2023 9 discriminator 2 view .LVU1511
2023:FreeRTOS/queue.c ****     }
 4995              		.loc 1 2023 18 is_stmt 0 discriminator 2 view .LVU1512
 4996 000a A46B     		ldr	r4, [r4, #56]
 4997              	.LVL409:
2025:FreeRTOS/queue.c **** 
 4998              		.loc 1 2025 5 is_stmt 1 discriminator 2 view .LVU1513
 4999 000c FFF7FEFF 		bl	vPortExitCritical
 5000              	.LVL410:
2027:FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 5001              		.loc 1 2027 5 discriminator 2 view .LVU1514
2028:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 5002              		.loc 1 2028 1 is_stmt 0 discriminator 2 view .LVU1515
 5003 0010 2046     		mov	r0, r4
 5004 0012 10BD     		pop	{r4, pc}
 5005              	.LVL411:
 5006              	.L386:
 5007              	.LCFI62:
 5008              		.cfi_def_cfa_offset 0
 5009              		.cfi_restore 4
 5010              		.cfi_restore 14
2019:FreeRTOS/queue.c **** 
 5011              		.loc 1 2019 5 is_stmt 1 view .LVU1516
 5012              	.LBB258:
 5013              	.LBI258:
 194:FreeRTOS/portable/portmacro.h ****     {
 5014              		.loc 2 194 34 view .LVU1517
 5015              	.LBB259:
 196:FreeRTOS/portable/portmacro.h **** 
 5016              		.loc 2 196 9 view .LVU1518
 198:FreeRTOS/portable/portmacro.h ****         (
 5017              		.loc 2 198 9 view .LVU1519
 5018              		.syntax unified
 5019              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 5020 0014 4FF05003 			mov r3, #80												
 5021 0018 83F31188 		msr basepri, r3											
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 171


 5022 001c BFF36F8F 		isb														
 5023 0020 BFF34F8F 		dsb														
 5024              	
 5025              	@ 0 "" 2
 5026              	.LVL412:
 5027              		.thumb
 5028              		.syntax unified
 5029              	.L383:
 198:FreeRTOS/portable/portmacro.h ****         (
 5030              		.loc 2 198 9 is_stmt 0 view .LVU1520
 5031              	.LBE259:
 5032              	.LBE258:
2019:FreeRTOS/queue.c **** 
 5033              		.loc 1 2019 5 is_stmt 1 discriminator 1 view .LVU1521
2019:FreeRTOS/queue.c **** 
 5034              		.loc 1 2019 5 discriminator 1 view .LVU1522
2019:FreeRTOS/queue.c **** 
 5035              		.loc 1 2019 5 discriminator 1 view .LVU1523
 5036 0024 FEE7     		b	.L383
 5037              		.cfi_endproc
 5038              	.LFE26:
 5040              		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 5041              		.align	1
 5042              		.global	uxQueueSpacesAvailable
 5043              		.syntax unified
 5044              		.thumb
 5045              		.thumb_func
 5046              		.fpu fpv4-sp-d16
 5048              	uxQueueSpacesAvailable:
 5049              	.LVL413:
 5050              	.LFB27:
2032:FreeRTOS/queue.c ****     UBaseType_t uxReturn;
 5051              		.loc 1 2032 1 view -0
 5052              		.cfi_startproc
 5053              		@ args = 0, pretend = 0, frame = 0
 5054              		@ frame_needed = 0, uses_anonymous_args = 0
2032:FreeRTOS/queue.c ****     UBaseType_t uxReturn;
 5055              		.loc 1 2032 1 is_stmt 0 view .LVU1525
 5056 0000 38B5     		push	{r3, r4, r5, lr}
 5057              	.LCFI63:
 5058              		.cfi_def_cfa_offset 16
 5059              		.cfi_offset 3, -16
 5060              		.cfi_offset 4, -12
 5061              		.cfi_offset 5, -8
 5062              		.cfi_offset 14, -4
2033:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 5063              		.loc 1 2033 5 is_stmt 1 view .LVU1526
2034:FreeRTOS/queue.c **** 
 5064              		.loc 1 2034 5 view .LVU1527
 5065              	.LVL414:
2036:FreeRTOS/queue.c **** 
 5066              		.loc 1 2036 5 view .LVU1528
 5067 0002 48B1     		cbz	r0, .L391
 5068 0004 0546     		mov	r5, r0
2036:FreeRTOS/queue.c **** 
 5069              		.loc 1 2036 28 discriminator 2 view .LVU1529
2038:FreeRTOS/queue.c ****     {
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 172


 5070              		.loc 1 2038 5 discriminator 2 view .LVU1530
 5071 0006 FFF7FEFF 		bl	vPortEnterCritical
 5072              	.LVL415:
2040:FreeRTOS/queue.c ****     }
 5073              		.loc 1 2040 9 discriminator 2 view .LVU1531
2040:FreeRTOS/queue.c ****     }
 5074              		.loc 1 2040 27 is_stmt 0 discriminator 2 view .LVU1532
 5075 000a EC6B     		ldr	r4, [r5, #60]
2040:FreeRTOS/queue.c ****     }
 5076              		.loc 1 2040 47 discriminator 2 view .LVU1533
 5077 000c AB6B     		ldr	r3, [r5, #56]
2040:FreeRTOS/queue.c ****     }
 5078              		.loc 1 2040 18 discriminator 2 view .LVU1534
 5079 000e E41A     		subs	r4, r4, r3
 5080              	.LVL416:
2042:FreeRTOS/queue.c **** 
 5081              		.loc 1 2042 5 is_stmt 1 discriminator 2 view .LVU1535
 5082 0010 FFF7FEFF 		bl	vPortExitCritical
 5083              	.LVL417:
2044:FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 5084              		.loc 1 2044 5 discriminator 2 view .LVU1536
2045:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 5085              		.loc 1 2045 1 is_stmt 0 discriminator 2 view .LVU1537
 5086 0014 2046     		mov	r0, r4
 5087 0016 38BD     		pop	{r3, r4, r5, pc}
 5088              	.LVL418:
 5089              	.L391:
2036:FreeRTOS/queue.c **** 
 5090              		.loc 1 2036 5 is_stmt 1 view .LVU1538
 5091              	.LBB260:
 5092              	.LBI260:
 194:FreeRTOS/portable/portmacro.h ****     {
 5093              		.loc 2 194 34 view .LVU1539
 5094              	.LBB261:
 196:FreeRTOS/portable/portmacro.h **** 
 5095              		.loc 2 196 9 view .LVU1540
 198:FreeRTOS/portable/portmacro.h ****         (
 5096              		.loc 2 198 9 view .LVU1541
 5097              		.syntax unified
 5098              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 5099 0018 4FF05003 			mov r3, #80												
 5100 001c 83F31188 		msr basepri, r3											
 5101 0020 BFF36F8F 		isb														
 5102 0024 BFF34F8F 		dsb														
 5103              	
 5104              	@ 0 "" 2
 5105              	.LVL419:
 5106              		.thumb
 5107              		.syntax unified
 5108              	.L389:
 198:FreeRTOS/portable/portmacro.h ****         (
 5109              		.loc 2 198 9 is_stmt 0 view .LVU1542
 5110              	.LBE261:
 5111              	.LBE260:
2036:FreeRTOS/queue.c **** 
 5112              		.loc 1 2036 5 is_stmt 1 discriminator 1 view .LVU1543
2036:FreeRTOS/queue.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 173


 5113              		.loc 1 2036 5 discriminator 1 view .LVU1544
2036:FreeRTOS/queue.c **** 
 5114              		.loc 1 2036 5 discriminator 1 view .LVU1545
 5115 0028 FEE7     		b	.L389
 5116              		.cfi_endproc
 5117              	.LFE27:
 5119              		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 5120              		.align	1
 5121              		.global	uxQueueMessagesWaitingFromISR
 5122              		.syntax unified
 5123              		.thumb
 5124              		.thumb_func
 5125              		.fpu fpv4-sp-d16
 5127              	uxQueueMessagesWaitingFromISR:
 5128              	.LVL420:
 5129              	.LFB28:
2049:FreeRTOS/queue.c ****     UBaseType_t uxReturn;
 5130              		.loc 1 2049 1 view -0
 5131              		.cfi_startproc
 5132              		@ args = 0, pretend = 0, frame = 0
 5133              		@ frame_needed = 0, uses_anonymous_args = 0
 5134              		@ link register save eliminated.
2050:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 5135              		.loc 1 2050 5 view .LVU1547
2051:FreeRTOS/queue.c **** 
 5136              		.loc 1 2051 5 view .LVU1548
2053:FreeRTOS/queue.c ****     uxReturn = pxQueue->uxMessagesWaiting;
 5137              		.loc 1 2053 5 view .LVU1549
 5138 0000 08B1     		cbz	r0, .L395
2053:FreeRTOS/queue.c ****     uxReturn = pxQueue->uxMessagesWaiting;
 5139              		.loc 1 2053 28 discriminator 2 view .LVU1550
2054:FreeRTOS/queue.c **** 
 5140              		.loc 1 2054 5 discriminator 2 view .LVU1551
2054:FreeRTOS/queue.c **** 
 5141              		.loc 1 2054 14 is_stmt 0 discriminator 2 view .LVU1552
 5142 0002 806B     		ldr	r0, [r0, #56]
 5143              	.LVL421:
2056:FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 5144              		.loc 1 2056 5 is_stmt 1 discriminator 2 view .LVU1553
2057:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 5145              		.loc 1 2057 1 is_stmt 0 discriminator 2 view .LVU1554
 5146 0004 7047     		bx	lr
 5147              	.LVL422:
 5148              	.L395:
2053:FreeRTOS/queue.c ****     uxReturn = pxQueue->uxMessagesWaiting;
 5149              		.loc 1 2053 5 is_stmt 1 view .LVU1555
 5150              	.LBB262:
 5151              	.LBI262:
 194:FreeRTOS/portable/portmacro.h ****     {
 5152              		.loc 2 194 34 view .LVU1556
 5153              	.LBB263:
 196:FreeRTOS/portable/portmacro.h **** 
 5154              		.loc 2 196 9 view .LVU1557
 198:FreeRTOS/portable/portmacro.h ****         (
 5155              		.loc 2 198 9 view .LVU1558
 5156              		.syntax unified
 5157              	@ 198 "FreeRTOS/portable/portmacro.h" 1
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 174


 5158 0006 4FF05003 			mov r3, #80												
 5159 000a 83F31188 		msr basepri, r3											
 5160 000e BFF36F8F 		isb														
 5161 0012 BFF34F8F 		dsb														
 5162              	
 5163              	@ 0 "" 2
 5164              	.LVL423:
 5165              		.thumb
 5166              		.syntax unified
 5167              	.L394:
 198:FreeRTOS/portable/portmacro.h ****         (
 5168              		.loc 2 198 9 is_stmt 0 view .LVU1559
 5169              	.LBE263:
 5170              	.LBE262:
2053:FreeRTOS/queue.c ****     uxReturn = pxQueue->uxMessagesWaiting;
 5171              		.loc 1 2053 5 is_stmt 1 discriminator 1 view .LVU1560
2053:FreeRTOS/queue.c ****     uxReturn = pxQueue->uxMessagesWaiting;
 5172              		.loc 1 2053 5 discriminator 1 view .LVU1561
2053:FreeRTOS/queue.c ****     uxReturn = pxQueue->uxMessagesWaiting;
 5173              		.loc 1 2053 5 discriminator 1 view .LVU1562
 5174 0016 FEE7     		b	.L394
 5175              		.cfi_endproc
 5176              	.LFE28:
 5178              		.section	.text.vQueueDelete,"ax",%progbits
 5179              		.align	1
 5180              		.global	vQueueDelete
 5181              		.syntax unified
 5182              		.thumb
 5183              		.thumb_func
 5184              		.fpu fpv4-sp-d16
 5186              	vQueueDelete:
 5187              	.LVL424:
 5188              	.LFB29:
2061:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 5189              		.loc 1 2061 1 view -0
 5190              		.cfi_startproc
 5191              		@ args = 0, pretend = 0, frame = 0
 5192              		@ frame_needed = 0, uses_anonymous_args = 0
2061:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 5193              		.loc 1 2061 1 is_stmt 0 view .LVU1564
 5194 0000 08B5     		push	{r3, lr}
 5195              	.LCFI64:
 5196              		.cfi_def_cfa_offset 8
 5197              		.cfi_offset 3, -8
 5198              		.cfi_offset 14, -4
2062:FreeRTOS/queue.c **** 
 5199              		.loc 1 2062 5 is_stmt 1 view .LVU1565
 5200              	.LVL425:
2064:FreeRTOS/queue.c ****     traceQUEUE_DELETE( pxQueue );
 5201              		.loc 1 2064 5 view .LVU1566
 5202 0002 18B1     		cbz	r0, .L401
2064:FreeRTOS/queue.c ****     traceQUEUE_DELETE( pxQueue );
 5203              		.loc 1 2064 28 discriminator 2 view .LVU1567
2065:FreeRTOS/queue.c **** 
 5204              		.loc 1 2065 33 discriminator 2 view .LVU1568
2083:FreeRTOS/queue.c ****             {
 5205              		.loc 1 2083 13 discriminator 2 view .LVU1569
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 175


2083:FreeRTOS/queue.c ****             {
 5206              		.loc 1 2083 24 is_stmt 0 discriminator 2 view .LVU1570
 5207 0004 90F84620 		ldrb	r2, [r0, #70]	@ zero_extendqisi2
2083:FreeRTOS/queue.c ****             {
 5208              		.loc 1 2083 15 discriminator 2 view .LVU1571
 5209 0008 4AB1     		cbz	r2, .L402
 5210              	.LVL426:
 5211              	.L396:
2099:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 5212              		.loc 1 2099 1 view .LVU1572
 5213 000a 08BD     		pop	{r3, pc}
 5214              	.LVL427:
 5215              	.L401:
2064:FreeRTOS/queue.c ****     traceQUEUE_DELETE( pxQueue );
 5216              		.loc 1 2064 5 is_stmt 1 view .LVU1573
 5217              	.LBB264:
 5218              	.LBI264:
 194:FreeRTOS/portable/portmacro.h ****     {
 5219              		.loc 2 194 34 view .LVU1574
 5220              	.LBB265:
 196:FreeRTOS/portable/portmacro.h **** 
 5221              		.loc 2 196 9 view .LVU1575
 198:FreeRTOS/portable/portmacro.h ****         (
 5222              		.loc 2 198 9 view .LVU1576
 5223              		.syntax unified
 5224              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 5225 000c 4FF05003 			mov r3, #80												
 5226 0010 83F31188 		msr basepri, r3											
 5227 0014 BFF36F8F 		isb														
 5228 0018 BFF34F8F 		dsb														
 5229              	
 5230              	@ 0 "" 2
 5231              	.LVL428:
 5232              		.thumb
 5233              		.syntax unified
 5234              	.L398:
 198:FreeRTOS/portable/portmacro.h ****         (
 5235              		.loc 2 198 9 is_stmt 0 view .LVU1577
 5236              	.LBE265:
 5237              	.LBE264:
2064:FreeRTOS/queue.c ****     traceQUEUE_DELETE( pxQueue );
 5238              		.loc 1 2064 5 is_stmt 1 discriminator 1 view .LVU1578
2064:FreeRTOS/queue.c ****     traceQUEUE_DELETE( pxQueue );
 5239              		.loc 1 2064 5 discriminator 1 view .LVU1579
2064:FreeRTOS/queue.c ****     traceQUEUE_DELETE( pxQueue );
 5240              		.loc 1 2064 5 discriminator 1 view .LVU1580
 5241 001c FEE7     		b	.L398
 5242              	.L402:
2085:FreeRTOS/queue.c ****             }
 5243              		.loc 1 2085 17 view .LVU1581
 5244 001e FFF7FEFF 		bl	vPortFree
 5245              	.LVL429:
2089:FreeRTOS/queue.c ****             }
 5246              		.loc 1 2089 41 view .LVU1582
2099:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 5247              		.loc 1 2099 1 is_stmt 0 view .LVU1583
 5248 0022 F2E7     		b	.L396
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 176


 5249              		.cfi_endproc
 5250              	.LFE29:
 5252              		.section	.text.uxQueueGetQueueNumber,"ax",%progbits
 5253              		.align	1
 5254              		.global	uxQueueGetQueueNumber
 5255              		.syntax unified
 5256              		.thumb
 5257              		.thumb_func
 5258              		.fpu fpv4-sp-d16
 5260              	uxQueueGetQueueNumber:
 5261              	.LVL430:
 5262              	.LFB30:
2105:FreeRTOS/queue.c ****         return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 5263              		.loc 1 2105 5 is_stmt 1 view -0
 5264              		.cfi_startproc
 5265              		@ args = 0, pretend = 0, frame = 0
 5266              		@ frame_needed = 0, uses_anonymous_args = 0
 5267              		@ link register save eliminated.
2106:FreeRTOS/queue.c ****     }
 5268              		.loc 1 2106 9 view .LVU1585
2107:FreeRTOS/queue.c **** 
 5269              		.loc 1 2107 5 is_stmt 0 view .LVU1586
 5270 0000 C06C     		ldr	r0, [r0, #76]
 5271              	.LVL431:
2107:FreeRTOS/queue.c **** 
 5272              		.loc 1 2107 5 view .LVU1587
 5273 0002 7047     		bx	lr
 5274              		.cfi_endproc
 5275              	.LFE30:
 5277              		.section	.text.vQueueSetQueueNumber,"ax",%progbits
 5278              		.align	1
 5279              		.global	vQueueSetQueueNumber
 5280              		.syntax unified
 5281              		.thumb
 5282              		.thumb_func
 5283              		.fpu fpv4-sp-d16
 5285              	vQueueSetQueueNumber:
 5286              	.LVL432:
 5287              	.LFB31:
2116:FreeRTOS/queue.c ****         ( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 5288              		.loc 1 2116 5 is_stmt 1 view -0
 5289              		.cfi_startproc
 5290              		@ args = 0, pretend = 0, frame = 0
 5291              		@ frame_needed = 0, uses_anonymous_args = 0
 5292              		@ link register save eliminated.
2117:FreeRTOS/queue.c ****     }
 5293              		.loc 1 2117 9 view .LVU1589
2117:FreeRTOS/queue.c ****     }
 5294              		.loc 1 2117 49 is_stmt 0 view .LVU1590
 5295 0000 C164     		str	r1, [r0, #76]
2118:FreeRTOS/queue.c **** 
 5296              		.loc 1 2118 5 view .LVU1591
 5297 0002 7047     		bx	lr
 5298              		.cfi_endproc
 5299              	.LFE31:
 5301              		.section	.text.ucQueueGetQueueType,"ax",%progbits
 5302              		.align	1
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 177


 5303              		.global	ucQueueGetQueueType
 5304              		.syntax unified
 5305              		.thumb
 5306              		.thumb_func
 5307              		.fpu fpv4-sp-d16
 5309              	ucQueueGetQueueType:
 5310              	.LVL433:
 5311              	.LFB32:
2126:FreeRTOS/queue.c ****         return ( ( Queue_t * ) xQueue )->ucQueueType;
 5312              		.loc 1 2126 5 is_stmt 1 view -0
 5313              		.cfi_startproc
 5314              		@ args = 0, pretend = 0, frame = 0
 5315              		@ frame_needed = 0, uses_anonymous_args = 0
 5316              		@ link register save eliminated.
2127:FreeRTOS/queue.c ****     }
 5317              		.loc 1 2127 9 view .LVU1593
2128:FreeRTOS/queue.c **** 
 5318              		.loc 1 2128 5 is_stmt 0 view .LVU1594
 5319 0000 90F85000 		ldrb	r0, [r0, #80]	@ zero_extendqisi2
 5320              	.LVL434:
2128:FreeRTOS/queue.c **** 
 5321              		.loc 1 2128 5 view .LVU1595
 5322 0004 7047     		bx	lr
 5323              		.cfi_endproc
 5324              	.LFE32:
 5326              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 5327              		.align	1
 5328              		.global	xQueueIsQueueEmptyFromISR
 5329              		.syntax unified
 5330              		.thumb
 5331              		.thumb_func
 5332              		.fpu fpv4-sp-d16
 5334              	xQueueIsQueueEmptyFromISR:
 5335              	.LVL435:
 5336              	.LFB38:
2406:FreeRTOS/queue.c ****     BaseType_t xReturn;
 5337              		.loc 1 2406 1 is_stmt 1 view -0
 5338              		.cfi_startproc
 5339              		@ args = 0, pretend = 0, frame = 0
 5340              		@ frame_needed = 0, uses_anonymous_args = 0
 5341              		@ link register save eliminated.
2407:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 5342              		.loc 1 2407 5 view .LVU1597
2408:FreeRTOS/queue.c **** 
 5343              		.loc 1 2408 5 view .LVU1598
2410:FreeRTOS/queue.c **** 
 5344              		.loc 1 2410 5 view .LVU1599
 5345 0000 18B1     		cbz	r0, .L411
2410:FreeRTOS/queue.c **** 
 5346              		.loc 1 2410 28 discriminator 2 view .LVU1600
2412:FreeRTOS/queue.c ****     {
 5347              		.loc 1 2412 5 discriminator 2 view .LVU1601
2412:FreeRTOS/queue.c ****     {
 5348              		.loc 1 2412 16 is_stmt 0 discriminator 2 view .LVU1602
 5349 0002 836B     		ldr	r3, [r0, #56]
2412:FreeRTOS/queue.c ****     {
 5350              		.loc 1 2412 7 discriminator 2 view .LVU1603
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 178


 5351 0004 53B9     		cbnz	r3, .L410
2414:FreeRTOS/queue.c ****     }
 5352              		.loc 1 2414 17 view .LVU1604
 5353 0006 0120     		movs	r0, #1
 5354              	.LVL436:
2414:FreeRTOS/queue.c ****     }
 5355              		.loc 1 2414 17 view .LVU1605
 5356 0008 7047     		bx	lr
 5357              	.LVL437:
 5358              	.L411:
2410:FreeRTOS/queue.c **** 
 5359              		.loc 1 2410 5 is_stmt 1 view .LVU1606
 5360              	.LBB266:
 5361              	.LBI266:
 194:FreeRTOS/portable/portmacro.h ****     {
 5362              		.loc 2 194 34 view .LVU1607
 5363              	.LBB267:
 196:FreeRTOS/portable/portmacro.h **** 
 5364              		.loc 2 196 9 view .LVU1608
 198:FreeRTOS/portable/portmacro.h ****         (
 5365              		.loc 2 198 9 view .LVU1609
 5366              		.syntax unified
 5367              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 5368 000a 4FF05003 			mov r3, #80												
 5369 000e 83F31188 		msr basepri, r3											
 5370 0012 BFF36F8F 		isb														
 5371 0016 BFF34F8F 		dsb														
 5372              	
 5373              	@ 0 "" 2
 5374              	.LVL438:
 5375              		.thumb
 5376              		.syntax unified
 5377              	.L408:
 198:FreeRTOS/portable/portmacro.h ****         (
 5378              		.loc 2 198 9 is_stmt 0 view .LVU1610
 5379              	.LBE267:
 5380              	.LBE266:
2410:FreeRTOS/queue.c **** 
 5381              		.loc 1 2410 5 is_stmt 1 discriminator 1 view .LVU1611
2410:FreeRTOS/queue.c **** 
 5382              		.loc 1 2410 5 discriminator 1 view .LVU1612
2410:FreeRTOS/queue.c **** 
 5383              		.loc 1 2410 5 discriminator 1 view .LVU1613
 5384 001a FEE7     		b	.L408
 5385              	.L410:
2418:FreeRTOS/queue.c ****     }
 5386              		.loc 1 2418 17 is_stmt 0 view .LVU1614
 5387 001c 0020     		movs	r0, #0
 5388              	.LVL439:
2421:FreeRTOS/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 5389              		.loc 1 2421 5 is_stmt 1 view .LVU1615
2422:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 5390              		.loc 1 2422 1 is_stmt 0 view .LVU1616
 5391 001e 7047     		bx	lr
 5392              		.cfi_endproc
 5393              	.LFE38:
 5395              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 179


 5396              		.align	1
 5397              		.global	xQueueIsQueueFullFromISR
 5398              		.syntax unified
 5399              		.thumb
 5400              		.thumb_func
 5401              		.fpu fpv4-sp-d16
 5403              	xQueueIsQueueFullFromISR:
 5404              	.LVL440:
 5405              	.LFB40:
2447:FreeRTOS/queue.c ****     BaseType_t xReturn;
 5406              		.loc 1 2447 1 is_stmt 1 view -0
 5407              		.cfi_startproc
 5408              		@ args = 0, pretend = 0, frame = 0
 5409              		@ frame_needed = 0, uses_anonymous_args = 0
 5410              		@ link register save eliminated.
2448:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 5411              		.loc 1 2448 5 view .LVU1618
2449:FreeRTOS/queue.c **** 
 5412              		.loc 1 2449 5 view .LVU1619
2451:FreeRTOS/queue.c **** 
 5413              		.loc 1 2451 5 view .LVU1620
 5414 0000 28B1     		cbz	r0, .L417
2451:FreeRTOS/queue.c **** 
 5415              		.loc 1 2451 28 discriminator 2 view .LVU1621
2453:FreeRTOS/queue.c ****     {
 5416              		.loc 1 2453 5 discriminator 2 view .LVU1622
2453:FreeRTOS/queue.c ****     {
 5417              		.loc 1 2453 16 is_stmt 0 discriminator 2 view .LVU1623
 5418 0002 826B     		ldr	r2, [r0, #56]
2453:FreeRTOS/queue.c ****     {
 5419              		.loc 1 2453 46 discriminator 2 view .LVU1624
 5420 0004 C36B     		ldr	r3, [r0, #60]
2453:FreeRTOS/queue.c ****     {
 5421              		.loc 1 2453 7 discriminator 2 view .LVU1625
 5422 0006 9A42     		cmp	r2, r3
 5423 0008 0AD0     		beq	.L418
2459:FreeRTOS/queue.c ****     }
 5424              		.loc 1 2459 17 view .LVU1626
 5425 000a 0020     		movs	r0, #0
 5426              	.LVL441:
2462:FreeRTOS/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 5427              		.loc 1 2462 5 is_stmt 1 view .LVU1627
2463:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 5428              		.loc 1 2463 1 is_stmt 0 view .LVU1628
 5429 000c 7047     		bx	lr
 5430              	.LVL442:
 5431              	.L417:
2451:FreeRTOS/queue.c **** 
 5432              		.loc 1 2451 5 is_stmt 1 view .LVU1629
 5433              	.LBB268:
 5434              	.LBI268:
 194:FreeRTOS/portable/portmacro.h ****     {
 5435              		.loc 2 194 34 view .LVU1630
 5436              	.LBB269:
 196:FreeRTOS/portable/portmacro.h **** 
 5437              		.loc 2 196 9 view .LVU1631
 198:FreeRTOS/portable/portmacro.h ****         (
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 180


 5438              		.loc 2 198 9 view .LVU1632
 5439              		.syntax unified
 5440              	@ 198 "FreeRTOS/portable/portmacro.h" 1
 5441 000e 4FF05003 			mov r3, #80												
 5442 0012 83F31188 		msr basepri, r3											
 5443 0016 BFF36F8F 		isb														
 5444 001a BFF34F8F 		dsb														
 5445              	
 5446              	@ 0 "" 2
 5447              	.LVL443:
 5448              		.thumb
 5449              		.syntax unified
 5450              	.L414:
 198:FreeRTOS/portable/portmacro.h ****         (
 5451              		.loc 2 198 9 is_stmt 0 view .LVU1633
 5452              	.LBE269:
 5453              	.LBE268:
2451:FreeRTOS/queue.c **** 
 5454              		.loc 1 2451 5 is_stmt 1 discriminator 1 view .LVU1634
2451:FreeRTOS/queue.c **** 
 5455              		.loc 1 2451 5 discriminator 1 view .LVU1635
2451:FreeRTOS/queue.c **** 
 5456              		.loc 1 2451 5 discriminator 1 view .LVU1636
 5457 001e FEE7     		b	.L414
 5458              	.L418:
2455:FreeRTOS/queue.c ****     }
 5459              		.loc 1 2455 17 is_stmt 0 view .LVU1637
 5460 0020 0120     		movs	r0, #1
 5461              	.LVL444:
2455:FreeRTOS/queue.c ****     }
 5462              		.loc 1 2455 17 view .LVU1638
 5463 0022 7047     		bx	lr
 5464              		.cfi_endproc
 5465              	.LFE40:
 5467              		.section	.text.xQueueCreateSet,"ax",%progbits
 5468              		.align	1
 5469              		.global	xQueueCreateSet
 5470              		.syntax unified
 5471              		.thumb
 5472              		.thumb_func
 5473              		.fpu fpv4-sp-d16
 5475              	xQueueCreateSet:
 5476              	.LVL445:
 5477              	.LFB41:
2908:FreeRTOS/queue.c ****         QueueSetHandle_t pxQueue;
 5478              		.loc 1 2908 5 is_stmt 1 view -0
 5479              		.cfi_startproc
 5480              		@ args = 0, pretend = 0, frame = 0
 5481              		@ frame_needed = 0, uses_anonymous_args = 0
2908:FreeRTOS/queue.c ****         QueueSetHandle_t pxQueue;
 5482              		.loc 1 2908 5 is_stmt 0 view .LVU1640
 5483 0000 08B5     		push	{r3, lr}
 5484              	.LCFI65:
 5485              		.cfi_def_cfa_offset 8
 5486              		.cfi_offset 3, -8
 5487              		.cfi_offset 14, -4
2909:FreeRTOS/queue.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 181


 5488              		.loc 1 2909 9 is_stmt 1 view .LVU1641
2911:FreeRTOS/queue.c **** 
 5489              		.loc 1 2911 9 view .LVU1642
2911:FreeRTOS/queue.c **** 
 5490              		.loc 1 2911 19 is_stmt 0 view .LVU1643
 5491 0002 0022     		movs	r2, #0
 5492 0004 0421     		movs	r1, #4
 5493 0006 FFF7FEFF 		bl	xQueueGenericCreate
 5494              	.LVL446:
2913:FreeRTOS/queue.c ****     }
 5495              		.loc 1 2913 9 is_stmt 1 view .LVU1644
2914:FreeRTOS/queue.c **** 
 5496              		.loc 1 2914 5 is_stmt 0 view .LVU1645
 5497 000a 08BD     		pop	{r3, pc}
 5498              		.cfi_endproc
 5499              	.LFE41:
 5501              		.section	.text.xQueueAddToSet,"ax",%progbits
 5502              		.align	1
 5503              		.global	xQueueAddToSet
 5504              		.syntax unified
 5505              		.thumb
 5506              		.thumb_func
 5507              		.fpu fpv4-sp-d16
 5509              	xQueueAddToSet:
 5510              	.LVL447:
 5511              	.LFB42:
2923:FreeRTOS/queue.c ****         BaseType_t xReturn;
 5512              		.loc 1 2923 5 is_stmt 1 view -0
 5513              		.cfi_startproc
 5514              		@ args = 0, pretend = 0, frame = 0
 5515              		@ frame_needed = 0, uses_anonymous_args = 0
2923:FreeRTOS/queue.c ****         BaseType_t xReturn;
 5516              		.loc 1 2923 5 is_stmt 0 view .LVU1647
 5517 0000 38B5     		push	{r3, r4, r5, lr}
 5518              	.LCFI66:
 5519              		.cfi_def_cfa_offset 16
 5520              		.cfi_offset 3, -16
 5521              		.cfi_offset 4, -12
 5522              		.cfi_offset 5, -8
 5523              		.cfi_offset 14, -4
 5524 0002 0446     		mov	r4, r0
 5525 0004 0D46     		mov	r5, r1
2924:FreeRTOS/queue.c **** 
 5526              		.loc 1 2924 9 is_stmt 1 view .LVU1648
2926:FreeRTOS/queue.c ****         {
 5527              		.loc 1 2926 9 view .LVU1649
 5528 0006 FFF7FEFF 		bl	vPortEnterCritical
 5529              	.LVL448:
2928:FreeRTOS/queue.c ****             {
 5530              		.loc 1 2928 13 view .LVU1650
2928:FreeRTOS/queue.c ****             {
 5531              		.loc 1 2928 52 is_stmt 0 view .LVU1651
 5532 000a A36C     		ldr	r3, [r4, #72]
2928:FreeRTOS/queue.c ****             {
 5533              		.loc 1 2928 15 view .LVU1652
 5534 000c 23B1     		cbz	r3, .L426
2931:FreeRTOS/queue.c ****             }
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 182


 5535              		.loc 1 2931 25 view .LVU1653
 5536 000e 0024     		movs	r4, #0
 5537              	.LVL449:
 5538              	.L422:
2945:FreeRTOS/queue.c **** 
 5539              		.loc 1 2945 9 is_stmt 1 view .LVU1654
 5540 0010 FFF7FEFF 		bl	vPortExitCritical
 5541              	.LVL450:
2947:FreeRTOS/queue.c ****     }
 5542              		.loc 1 2947 9 view .LVU1655
2948:FreeRTOS/queue.c **** 
 5543              		.loc 1 2948 5 is_stmt 0 view .LVU1656
 5544 0014 2046     		mov	r0, r4
 5545 0016 38BD     		pop	{r3, r4, r5, pc}
 5546              	.LVL451:
 5547              	.L426:
2933:FreeRTOS/queue.c ****             {
 5548              		.loc 1 2933 18 is_stmt 1 view .LVU1657
2933:FreeRTOS/queue.c ****             {
 5549              		.loc 1 2933 57 is_stmt 0 view .LVU1658
 5550 0018 A36B     		ldr	r3, [r4, #56]
2933:FreeRTOS/queue.c ****             {
 5551              		.loc 1 2933 20 view .LVU1659
 5552 001a 13B9     		cbnz	r3, .L424
2941:FreeRTOS/queue.c ****                 xReturn = pdPASS;
 5553              		.loc 1 2941 17 is_stmt 1 view .LVU1660
2941:FreeRTOS/queue.c ****                 xReturn = pdPASS;
 5554              		.loc 1 2941 74 is_stmt 0 view .LVU1661
 5555 001c A564     		str	r5, [r4, #72]
2942:FreeRTOS/queue.c ****             }
 5556              		.loc 1 2942 17 is_stmt 1 view .LVU1662
 5557              	.LVL452:
2942:FreeRTOS/queue.c ****             }
 5558              		.loc 1 2942 25 is_stmt 0 view .LVU1663
 5559 001e 0124     		movs	r4, #1
 5560              	.LVL453:
2942:FreeRTOS/queue.c ****             }
 5561              		.loc 1 2942 25 view .LVU1664
 5562 0020 F6E7     		b	.L422
 5563              	.LVL454:
 5564              	.L424:
2937:FreeRTOS/queue.c ****             }
 5565              		.loc 1 2937 25 view .LVU1665
 5566 0022 0024     		movs	r4, #0
 5567              	.LVL455:
2937:FreeRTOS/queue.c ****             }
 5568              		.loc 1 2937 25 view .LVU1666
 5569 0024 F4E7     		b	.L422
 5570              		.cfi_endproc
 5571              	.LFE42:
 5573              		.section	.text.xQueueRemoveFromSet,"ax",%progbits
 5574              		.align	1
 5575              		.global	xQueueRemoveFromSet
 5576              		.syntax unified
 5577              		.thumb
 5578              		.thumb_func
 5579              		.fpu fpv4-sp-d16
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 183


 5581              	xQueueRemoveFromSet:
 5582              	.LVL456:
 5583              	.LFB43:
2957:FreeRTOS/queue.c ****         BaseType_t xReturn;
 5584              		.loc 1 2957 5 is_stmt 1 view -0
 5585              		.cfi_startproc
 5586              		@ args = 0, pretend = 0, frame = 0
 5587              		@ frame_needed = 0, uses_anonymous_args = 0
2958:FreeRTOS/queue.c ****         Queue_t * const pxQueueOrSemaphore = ( Queue_t * ) xQueueOrSemaphore;
 5588              		.loc 1 2958 9 view .LVU1668
2959:FreeRTOS/queue.c **** 
 5589              		.loc 1 2959 9 view .LVU1669
2961:FreeRTOS/queue.c ****         {
 5590              		.loc 1 2961 9 view .LVU1670
2961:FreeRTOS/queue.c ****         {
 5591              		.loc 1 2961 31 is_stmt 0 view .LVU1671
 5592 0000 836C     		ldr	r3, [r0, #72]
2961:FreeRTOS/queue.c ****         {
 5593              		.loc 1 2961 11 view .LVU1672
 5594 0002 8B42     		cmp	r3, r1
 5595 0004 01D0     		beq	.L435
2964:FreeRTOS/queue.c ****         }
 5596              		.loc 1 2964 21 view .LVU1673
 5597 0006 0020     		movs	r0, #0
 5598              	.LVL457:
2985:FreeRTOS/queue.c **** 
 5599              		.loc 1 2985 5 view .LVU1674
 5600 0008 7047     		bx	lr
 5601              	.LVL458:
 5602              	.L435:
2957:FreeRTOS/queue.c ****         BaseType_t xReturn;
 5603              		.loc 1 2957 5 view .LVU1675
 5604 000a 10B5     		push	{r4, lr}
 5605              	.LCFI67:
 5606              		.cfi_def_cfa_offset 8
 5607              		.cfi_offset 4, -8
 5608              		.cfi_offset 14, -4
 5609 000c 0446     		mov	r4, r0
2966:FreeRTOS/queue.c ****         {
 5610              		.loc 1 2966 14 is_stmt 1 view .LVU1676
2966:FreeRTOS/queue.c ****         {
 5611              		.loc 1 2966 36 is_stmt 0 view .LVU1677
 5612 000e 836B     		ldr	r3, [r0, #56]
2966:FreeRTOS/queue.c ****         {
 5613              		.loc 1 2966 16 view .LVU1678
 5614 0010 0BB1     		cbz	r3, .L436
2971:FreeRTOS/queue.c ****         }
 5615              		.loc 1 2971 21 view .LVU1679
 5616 0012 0020     		movs	r0, #0
 5617              	.LVL459:
2984:FreeRTOS/queue.c ****     } /*lint !e818 xQueueSet could not be declared as pointing to const as it is a typedef. */
 5618              		.loc 1 2984 9 is_stmt 1 view .LVU1680
 5619              	.L427:
2985:FreeRTOS/queue.c **** 
 5620              		.loc 1 2985 5 is_stmt 0 view .LVU1681
 5621 0014 10BD     		pop	{r4, pc}
 5622              	.LVL460:
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 184


 5623              	.L436:
2975:FreeRTOS/queue.c ****             {
 5624              		.loc 1 2975 13 is_stmt 1 view .LVU1682
 5625 0016 FFF7FEFF 		bl	vPortEnterCritical
 5626              	.LVL461:
2978:FreeRTOS/queue.c ****             }
 5627              		.loc 1 2978 17 view .LVU1683
2978:FreeRTOS/queue.c ****             }
 5628              		.loc 1 2978 57 is_stmt 0 view .LVU1684
 5629 001a 0023     		movs	r3, #0
 5630 001c A364     		str	r3, [r4, #72]
2980:FreeRTOS/queue.c ****             xReturn = pdPASS;
 5631              		.loc 1 2980 13 is_stmt 1 view .LVU1685
 5632 001e FFF7FEFF 		bl	vPortExitCritical
 5633              	.LVL462:
2981:FreeRTOS/queue.c ****         }
 5634              		.loc 1 2981 13 view .LVU1686
2981:FreeRTOS/queue.c ****         }
 5635              		.loc 1 2981 21 is_stmt 0 view .LVU1687
 5636 0022 0120     		movs	r0, #1
 5637 0024 F6E7     		b	.L427
 5638              		.cfi_endproc
 5639              	.LFE43:
 5641              		.section	.text.xQueueSelectFromSet,"ax",%progbits
 5642              		.align	1
 5643              		.global	xQueueSelectFromSet
 5644              		.syntax unified
 5645              		.thumb
 5646              		.thumb_func
 5647              		.fpu fpv4-sp-d16
 5649              	xQueueSelectFromSet:
 5650              	.LVL463:
 5651              	.LFB44:
2994:FreeRTOS/queue.c ****         QueueSetMemberHandle_t xReturn = NULL;
 5652              		.loc 1 2994 5 is_stmt 1 view -0
 5653              		.cfi_startproc
 5654              		@ args = 0, pretend = 0, frame = 8
 5655              		@ frame_needed = 0, uses_anonymous_args = 0
2994:FreeRTOS/queue.c ****         QueueSetMemberHandle_t xReturn = NULL;
 5656              		.loc 1 2994 5 is_stmt 0 view .LVU1689
 5657 0000 00B5     		push	{lr}
 5658              	.LCFI68:
 5659              		.cfi_def_cfa_offset 4
 5660              		.cfi_offset 14, -4
 5661 0002 83B0     		sub	sp, sp, #12
 5662              	.LCFI69:
 5663              		.cfi_def_cfa_offset 16
 5664 0004 0A46     		mov	r2, r1
2995:FreeRTOS/queue.c **** 
 5665              		.loc 1 2995 9 is_stmt 1 view .LVU1690
2995:FreeRTOS/queue.c **** 
 5666              		.loc 1 2995 32 is_stmt 0 view .LVU1691
 5667 0006 0023     		movs	r3, #0
 5668 0008 0193     		str	r3, [sp, #4]
2997:FreeRTOS/queue.c ****         return xReturn;
 5669              		.loc 1 2997 9 is_stmt 1 view .LVU1692
2997:FreeRTOS/queue.c ****         return xReturn;
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 185


 5670              		.loc 1 2997 18 is_stmt 0 view .LVU1693
 5671 000a 01A9     		add	r1, sp, #4
 5672              	.LVL464:
2997:FreeRTOS/queue.c ****         return xReturn;
 5673              		.loc 1 2997 18 view .LVU1694
 5674 000c FFF7FEFF 		bl	xQueueReceive
 5675              	.LVL465:
2998:FreeRTOS/queue.c ****     }
 5676              		.loc 1 2998 9 is_stmt 1 view .LVU1695
2999:FreeRTOS/queue.c **** 
 5677              		.loc 1 2999 5 is_stmt 0 view .LVU1696
 5678 0010 0198     		ldr	r0, [sp, #4]
 5679 0012 03B0     		add	sp, sp, #12
 5680              	.LCFI70:
 5681              		.cfi_def_cfa_offset 4
 5682              		@ sp needed
 5683 0014 5DF804FB 		ldr	pc, [sp], #4
 5684              		.cfi_endproc
 5685              	.LFE44:
 5687              		.section	.text.xQueueSelectFromSetFromISR,"ax",%progbits
 5688              		.align	1
 5689              		.global	xQueueSelectFromSetFromISR
 5690              		.syntax unified
 5691              		.thumb
 5692              		.thumb_func
 5693              		.fpu fpv4-sp-d16
 5695              	xQueueSelectFromSetFromISR:
 5696              	.LVL466:
 5697              	.LFB45:
3007:FreeRTOS/queue.c ****         QueueSetMemberHandle_t xReturn = NULL;
 5698              		.loc 1 3007 5 is_stmt 1 view -0
 5699              		.cfi_startproc
 5700              		@ args = 0, pretend = 0, frame = 8
 5701              		@ frame_needed = 0, uses_anonymous_args = 0
3007:FreeRTOS/queue.c ****         QueueSetMemberHandle_t xReturn = NULL;
 5702              		.loc 1 3007 5 is_stmt 0 view .LVU1698
 5703 0000 00B5     		push	{lr}
 5704              	.LCFI71:
 5705              		.cfi_def_cfa_offset 4
 5706              		.cfi_offset 14, -4
 5707 0002 83B0     		sub	sp, sp, #12
 5708              	.LCFI72:
 5709              		.cfi_def_cfa_offset 16
3008:FreeRTOS/queue.c **** 
 5710              		.loc 1 3008 9 is_stmt 1 view .LVU1699
3008:FreeRTOS/queue.c **** 
 5711              		.loc 1 3008 32 is_stmt 0 view .LVU1700
 5712 0004 0022     		movs	r2, #0
 5713 0006 0192     		str	r2, [sp, #4]
3010:FreeRTOS/queue.c ****         return xReturn;
 5714              		.loc 1 3010 9 is_stmt 1 view .LVU1701
3010:FreeRTOS/queue.c ****         return xReturn;
 5715              		.loc 1 3010 18 is_stmt 0 view .LVU1702
 5716 0008 01A9     		add	r1, sp, #4
 5717 000a FFF7FEFF 		bl	xQueueReceiveFromISR
 5718              	.LVL467:
3011:FreeRTOS/queue.c ****     }
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 186


 5719              		.loc 1 3011 9 is_stmt 1 view .LVU1703
3012:FreeRTOS/queue.c **** 
 5720              		.loc 1 3012 5 is_stmt 0 view .LVU1704
 5721 000e 0198     		ldr	r0, [sp, #4]
 5722 0010 03B0     		add	sp, sp, #12
 5723              	.LCFI73:
 5724              		.cfi_def_cfa_offset 4
 5725              		@ sp needed
 5726 0012 5DF804FB 		ldr	pc, [sp], #4
 5727              		.cfi_endproc
 5728              	.LFE45:
 5730              		.text
 5731              	.Letext0:
 5732              		.file 3 "c:\\work\\arm\\xpack-arm-none-eabi-gcc-9.2.1-1.1\\lib\\gcc\\arm-none-eabi\\9.2.1\\include
 5733              		.file 4 "c:\\work\\arm\\xpack-arm-none-eabi-gcc-9.2.1-1.1\\arm-none-eabi\\include\\machine\\_defau
 5734              		.file 5 "c:\\work\\arm\\xpack-arm-none-eabi-gcc-9.2.1-1.1\\arm-none-eabi\\include\\sys\\lock.h"
 5735              		.file 6 "c:\\work\\arm\\xpack-arm-none-eabi-gcc-9.2.1-1.1\\arm-none-eabi\\include\\sys\\_types.h"
 5736              		.file 7 "c:\\work\\arm\\xpack-arm-none-eabi-gcc-9.2.1-1.1\\arm-none-eabi\\include\\sys\\reent.h"
 5737              		.file 8 "c:\\work\\arm\\xpack-arm-none-eabi-gcc-9.2.1-1.1\\arm-none-eabi\\include\\stdlib.h"
 5738              		.file 9 "c:\\work\\arm\\xpack-arm-none-eabi-gcc-9.2.1-1.1\\arm-none-eabi\\include\\sys\\_stdint.h"
 5739              		.file 10 "Core/Inc/FreeRTOSConfig.h"
 5740              		.file 11 "FreeRTOS/include/FreeRTOS.h"
 5741              		.file 12 "FreeRTOS/include/list.h"
 5742              		.file 13 "FreeRTOS/include/task.h"
 5743              		.file 14 "FreeRTOS/include/queue.h"
 5744              		.file 15 "FreeRTOS/include/portable.h"
 5745              		.file 16 "<built-in>"
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 187


DEFINED SYMBOLS
                            *ABS*:0000000000000000 queue.c
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:18     .text.prvGetDisinheritPriorityAfterTimeout:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:25     .text.prvGetDisinheritPriorityAfterTimeout:0000000000000000 prvGetDisinheritPriorityAfterTimeout
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:60     .text.prvIsQueueFull:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:66     .text.prvIsQueueFull:0000000000000000 prvIsQueueFull
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:114    .text.prvIsQueueEmpty:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:120    .text.prvIsQueueEmpty:0000000000000000 prvIsQueueEmpty
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:165    .text.prvCopyDataToQueue:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:171    .text.prvCopyDataToQueue:0000000000000000 prvCopyDataToQueue
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:328    .text.prvNotifyQueueSetContainer:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:334    .text.prvNotifyQueueSetContainer:0000000000000000 prvNotifyQueueSetContainer
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:539    .text.prvCopyDataFromQueue:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:545    .text.prvCopyDataFromQueue:0000000000000000 prvCopyDataFromQueue
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:606    .text.prvUnlockQueue:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:612    .text.prvUnlockQueue:0000000000000000 prvUnlockQueue
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:757    .text.xQueueGenericReset:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:764    .text.xQueueGenericReset:0000000000000000 xQueueGenericReset
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:957    .text.xQueueGenericReset:00000000000000a8 $d
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:962    .text.prvInitialiseNewQueue:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:968    .text.prvInitialiseNewQueue:0000000000000000 prvInitialiseNewQueue
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:1032   .text.xQueueGenericCreateStatic:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:1039   .text.xQueueGenericCreateStatic:0000000000000000 xQueueGenericCreateStatic
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:1211   .text.xQueueGenericCreate:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:1218   .text.xQueueGenericCreate:0000000000000000 xQueueGenericCreate
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:1342   .text.xQueueGetMutexHolder:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:1349   .text.xQueueGetMutexHolder:0000000000000000 xQueueGetMutexHolder
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:1435   .text.xQueueGetMutexHolderFromISR:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:1442   .text.xQueueGetMutexHolderFromISR:0000000000000000 xQueueGetMutexHolderFromISR
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:1504   .text.xQueueCreateCountingSemaphoreStatic:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:1511   .text.xQueueCreateCountingSemaphoreStatic:0000000000000000 xQueueCreateCountingSemaphoreStatic
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:1602   .text.xQueueCreateCountingSemaphore:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:1609   .text.xQueueCreateCountingSemaphore:0000000000000000 xQueueCreateCountingSemaphore
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:1687   .text.xQueueGenericSend:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:1694   .text.xQueueGenericSend:0000000000000000 xQueueGenericSend
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:2155   .text.xQueueGenericSend:00000000000001a4 $d
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:2160   .text.prvInitialiseMutex:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:2166   .text.prvInitialiseMutex:0000000000000000 prvInitialiseMutex
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:2214   .text.xQueueCreateMutex:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:2221   .text.xQueueCreateMutex:0000000000000000 xQueueCreateMutex
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:2260   .text.xQueueCreateMutexStatic:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:2267   .text.xQueueCreateMutexStatic:0000000000000000 xQueueCreateMutexStatic
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:2319   .text.xQueueGiveMutexRecursive:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:2326   .text.xQueueGiveMutexRecursive:0000000000000000 xQueueGiveMutexRecursive
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:2425   .text.xQueueGenericSendFromISR:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:2432   .text.xQueueGenericSendFromISR:0000000000000000 xQueueGenericSendFromISR
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:2785   .text.xQueueGiveFromISR:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:2792   .text.xQueueGiveFromISR:0000000000000000 xQueueGiveFromISR
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:3126   .text.xQueueReceive:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:3133   .text.xQueueReceive:0000000000000000 xQueueReceive
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:3506   .text.xQueueReceive:0000000000000158 $d
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:3511   .text.xQueueSemaphoreTake:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:3518   .text.xQueueSemaphoreTake:0000000000000000 xQueueSemaphoreTake
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:3985   .text.xQueueSemaphoreTake:00000000000001a0 $d
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:3990   .text.xQueueTakeMutexRecursive:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:3997   .text.xQueueTakeMutexRecursive:0000000000000000 xQueueTakeMutexRecursive
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:4111   .text.xQueuePeek:0000000000000000 $t
ARM GAS  C:\Users\worker\AppData\Local\Temp\ccJSji15.s 			page 188


C:\Users\worker\AppData\Local\Temp\ccJSji15.s:4118   .text.xQueuePeek:0000000000000000 xQueuePeek
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:4493   .text.xQueuePeek:0000000000000158 $d
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:4498   .text.xQueueReceiveFromISR:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:4505   .text.xQueueReceiveFromISR:0000000000000000 xQueueReceiveFromISR
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:4760   .text.xQueuePeekFromISR:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:4767   .text.xQueuePeekFromISR:0000000000000000 xQueuePeekFromISR
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:4966   .text.uxQueueMessagesWaiting:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:4973   .text.uxQueueMessagesWaiting:0000000000000000 uxQueueMessagesWaiting
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:5041   .text.uxQueueSpacesAvailable:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:5048   .text.uxQueueSpacesAvailable:0000000000000000 uxQueueSpacesAvailable
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:5120   .text.uxQueueMessagesWaitingFromISR:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:5127   .text.uxQueueMessagesWaitingFromISR:0000000000000000 uxQueueMessagesWaitingFromISR
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:5179   .text.vQueueDelete:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:5186   .text.vQueueDelete:0000000000000000 vQueueDelete
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:5253   .text.uxQueueGetQueueNumber:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:5260   .text.uxQueueGetQueueNumber:0000000000000000 uxQueueGetQueueNumber
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:5278   .text.vQueueSetQueueNumber:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:5285   .text.vQueueSetQueueNumber:0000000000000000 vQueueSetQueueNumber
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:5302   .text.ucQueueGetQueueType:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:5309   .text.ucQueueGetQueueType:0000000000000000 ucQueueGetQueueType
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:5327   .text.xQueueIsQueueEmptyFromISR:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:5334   .text.xQueueIsQueueEmptyFromISR:0000000000000000 xQueueIsQueueEmptyFromISR
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:5396   .text.xQueueIsQueueFullFromISR:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:5403   .text.xQueueIsQueueFullFromISR:0000000000000000 xQueueIsQueueFullFromISR
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:5468   .text.xQueueCreateSet:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:5475   .text.xQueueCreateSet:0000000000000000 xQueueCreateSet
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:5502   .text.xQueueAddToSet:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:5509   .text.xQueueAddToSet:0000000000000000 xQueueAddToSet
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:5574   .text.xQueueRemoveFromSet:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:5581   .text.xQueueRemoveFromSet:0000000000000000 xQueueRemoveFromSet
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:5642   .text.xQueueSelectFromSet:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:5649   .text.xQueueSelectFromSet:0000000000000000 xQueueSelectFromSet
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:5688   .text.xQueueSelectFromSetFromISR:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\ccJSji15.s:5695   .text.xQueueSelectFromSetFromISR:0000000000000000 xQueueSelectFromSetFromISR

UNDEFINED SYMBOLS
vPortEnterCritical
vPortExitCritical
xTaskPriorityDisinherit
memcpy
xTaskRemoveFromEventList
vTaskMissedYield
vListInitialise
pvPortMalloc
xTaskGetSchedulerState
vTaskInternalSetTimeOutState
xTaskResumeAll
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskGetCurrentTaskHandle
vPortValidateInterruptPriority
pvTaskIncrementMutexHeldCount
xTaskPriorityInherit
vTaskPriorityDisinheritAfterTimeout
vPortFree
