ARM GAS  C:\Users\worker\AppData\Local\Temp\cc5PnHqT.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"list.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.vListInitialise,"ax",%progbits
  18              		.align	1
  19              		.global	vListInitialise
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	vListInitialise:
  27              	.LVL0:
  28              	.LFB5:
  29              		.file 1 "FreeRTOS/list.c"
   1:FreeRTOS/list.c **** /*
   2:FreeRTOS/list.c ****  * FreeRTOS Kernel V10.4.6
   3:FreeRTOS/list.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/list.c ****  *
   5:FreeRTOS/list.c ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS/list.c ****  *
   7:FreeRTOS/list.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS/list.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS/list.c ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS/list.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS/list.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS/list.c ****  * subject to the following conditions:
  13:FreeRTOS/list.c ****  *
  14:FreeRTOS/list.c ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS/list.c ****  * copies or substantial portions of the Software.
  16:FreeRTOS/list.c ****  *
  17:FreeRTOS/list.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS/list.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS/list.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS/list.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS/list.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS/list.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS/list.c ****  *
  24:FreeRTOS/list.c ****  * https://www.FreeRTOS.org
  25:FreeRTOS/list.c ****  * https://github.com/FreeRTOS
  26:FreeRTOS/list.c ****  *
  27:FreeRTOS/list.c ****  */
  28:FreeRTOS/list.c **** 
  29:FreeRTOS/list.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\cc5PnHqT.s 			page 2


  30:FreeRTOS/list.c **** #include <stdlib.h>
  31:FreeRTOS/list.c **** 
  32:FreeRTOS/list.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:FreeRTOS/list.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  34:FreeRTOS/list.c ****  * task.h is included from an application file. */
  35:FreeRTOS/list.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:FreeRTOS/list.c **** 
  37:FreeRTOS/list.c **** #include "FreeRTOS.h"
  38:FreeRTOS/list.c **** #include "list.h"
  39:FreeRTOS/list.c **** 
  40:FreeRTOS/list.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  41:FreeRTOS/list.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be
  42:FreeRTOS/list.c ****  * defined for the header files above, but not in this file, in order to
  43:FreeRTOS/list.c ****  * generate the correct privileged Vs unprivileged linkage and placement. */
  44:FreeRTOS/list.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  45:FreeRTOS/list.c **** 
  46:FreeRTOS/list.c **** /*-----------------------------------------------------------
  47:FreeRTOS/list.c **** * PUBLIC LIST API documented in list.h
  48:FreeRTOS/list.c **** *----------------------------------------------------------*/
  49:FreeRTOS/list.c **** 
  50:FreeRTOS/list.c **** void vListInitialise( List_t * const pxList )
  51:FreeRTOS/list.c **** {
  30              		.loc 1 51 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  52:FreeRTOS/list.c ****     /* The list structure contains a list item which is used to mark the
  53:FreeRTOS/list.c ****      * end of the list.  To initialise the list the list end is inserted
  54:FreeRTOS/list.c ****      * as the only list entry. */
  55:FreeRTOS/list.c ****     pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini li
  35              		.loc 1 55 5 view .LVU1
  36              		.loc 1 55 40 is_stmt 0 view .LVU2
  37 0000 00F10803 		add	r3, r0, #8
  38              		.loc 1 55 21 view .LVU3
  39 0004 4360     		str	r3, [r0, #4]
  56:FreeRTOS/list.c **** 
  57:FreeRTOS/list.c ****     /* The list end value is the highest possible value in the list to
  58:FreeRTOS/list.c ****      * ensure it remains at the end of the list. */
  59:FreeRTOS/list.c ****     pxList->xListEnd.xItemValue = portMAX_DELAY;
  40              		.loc 1 59 5 is_stmt 1 view .LVU4
  41              		.loc 1 59 33 is_stmt 0 view .LVU5
  42 0006 4FF0FF32 		mov	r2, #-1
  43 000a 8260     		str	r2, [r0, #8]
  60:FreeRTOS/list.c **** 
  61:FreeRTOS/list.c ****     /* The list end next and previous pointers point to itself so we know
  62:FreeRTOS/list.c ****      * when the list is empty. */
  63:FreeRTOS/list.c ****     pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087
  44              		.loc 1 63 5 is_stmt 1 view .LVU6
  45              		.loc 1 63 29 is_stmt 0 view .LVU7
  46 000c C360     		str	r3, [r0, #12]
  64:FreeRTOS/list.c ****     pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087
  47              		.loc 1 64 5 is_stmt 1 view .LVU8
  48              		.loc 1 64 33 is_stmt 0 view .LVU9
  49 000e 0361     		str	r3, [r0, #16]
  65:FreeRTOS/list.c **** 
  66:FreeRTOS/list.c ****     pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
ARM GAS  C:\Users\worker\AppData\Local\Temp\cc5PnHqT.s 			page 3


  50              		.loc 1 66 5 is_stmt 1 view .LVU10
  51              		.loc 1 66 29 is_stmt 0 view .LVU11
  52 0010 0023     		movs	r3, #0
  53 0012 0360     		str	r3, [r0]
  67:FreeRTOS/list.c **** 
  68:FreeRTOS/list.c ****     /* Write known values into the list if
  69:FreeRTOS/list.c ****      * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
  70:FreeRTOS/list.c ****     listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
  54              		.loc 1 70 51 is_stmt 1 view .LVU12
  71:FreeRTOS/list.c ****     listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
  55              		.loc 1 71 51 view .LVU13
  72:FreeRTOS/list.c **** }
  56              		.loc 1 72 1 is_stmt 0 view .LVU14
  57 0014 7047     		bx	lr
  58              		.cfi_endproc
  59              	.LFE5:
  61              		.section	.text.vListInitialiseItem,"ax",%progbits
  62              		.align	1
  63              		.global	vListInitialiseItem
  64              		.syntax unified
  65              		.thumb
  66              		.thumb_func
  67              		.fpu fpv4-sp-d16
  69              	vListInitialiseItem:
  70              	.LVL1:
  71              	.LFB6:
  73:FreeRTOS/list.c **** /*-----------------------------------------------------------*/
  74:FreeRTOS/list.c **** 
  75:FreeRTOS/list.c **** void vListInitialiseItem( ListItem_t * const pxItem )
  76:FreeRTOS/list.c **** {
  72              		.loc 1 76 1 is_stmt 1 view -0
  73              		.cfi_startproc
  74              		@ args = 0, pretend = 0, frame = 0
  75              		@ frame_needed = 0, uses_anonymous_args = 0
  76              		@ link register save eliminated.
  77:FreeRTOS/list.c ****     /* Make sure the list item is not recorded as being on a list. */
  78:FreeRTOS/list.c ****     pxItem->pxContainer = NULL;
  77              		.loc 1 78 5 view .LVU16
  78              		.loc 1 78 25 is_stmt 0 view .LVU17
  79 0000 0023     		movs	r3, #0
  80 0002 0361     		str	r3, [r0, #16]
  79:FreeRTOS/list.c **** 
  80:FreeRTOS/list.c ****     /* Write known values into the list item if
  81:FreeRTOS/list.c ****      * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
  82:FreeRTOS/list.c ****     listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
  81              		.loc 1 82 60 is_stmt 1 view .LVU18
  83:FreeRTOS/list.c ****     listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
  82              		.loc 1 83 61 view .LVU19
  84:FreeRTOS/list.c **** }
  83              		.loc 1 84 1 is_stmt 0 view .LVU20
  84 0004 7047     		bx	lr
  85              		.cfi_endproc
  86              	.LFE6:
  88              		.section	.text.vListInsertEnd,"ax",%progbits
  89              		.align	1
  90              		.global	vListInsertEnd
  91              		.syntax unified
ARM GAS  C:\Users\worker\AppData\Local\Temp\cc5PnHqT.s 			page 4


  92              		.thumb
  93              		.thumb_func
  94              		.fpu fpv4-sp-d16
  96              	vListInsertEnd:
  97              	.LVL2:
  98              	.LFB7:
  85:FreeRTOS/list.c **** /*-----------------------------------------------------------*/
  86:FreeRTOS/list.c **** 
  87:FreeRTOS/list.c **** void vListInsertEnd( List_t * const pxList,
  88:FreeRTOS/list.c ****                      ListItem_t * const pxNewListItem )
  89:FreeRTOS/list.c **** {
  99              		.loc 1 89 1 is_stmt 1 view -0
 100              		.cfi_startproc
 101              		@ args = 0, pretend = 0, frame = 0
 102              		@ frame_needed = 0, uses_anonymous_args = 0
 103              		@ link register save eliminated.
  90:FreeRTOS/list.c ****     ListItem_t * const pxIndex = pxList->pxIndex;
 104              		.loc 1 90 5 view .LVU22
 105              		.loc 1 90 24 is_stmt 0 view .LVU23
 106 0000 4368     		ldr	r3, [r0, #4]
 107              	.LVL3:
  91:FreeRTOS/list.c **** 
  92:FreeRTOS/list.c ****     /* Only effective when configASSERT() is also defined, these tests may catch
  93:FreeRTOS/list.c ****      * the list data structures being overwritten in memory.  They will not catch
  94:FreeRTOS/list.c ****      * data errors caused by incorrect configuration or use of FreeRTOS. */
  95:FreeRTOS/list.c ****     listTEST_LIST_INTEGRITY( pxList );
 108              		.loc 1 95 38 is_stmt 1 view .LVU24
  96:FreeRTOS/list.c ****     listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
 109              		.loc 1 96 50 view .LVU25
  97:FreeRTOS/list.c **** 
  98:FreeRTOS/list.c ****     /* Insert a new list item into pxList, but rather than sort the list,
  99:FreeRTOS/list.c ****      * makes the new list item the last item to be removed by a call to
 100:FreeRTOS/list.c ****      * listGET_OWNER_OF_NEXT_ENTRY(). */
 101:FreeRTOS/list.c ****     pxNewListItem->pxNext = pxIndex;
 110              		.loc 1 101 5 view .LVU26
 111              		.loc 1 101 27 is_stmt 0 view .LVU27
 112 0002 4B60     		str	r3, [r1, #4]
 102:FreeRTOS/list.c ****     pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 113              		.loc 1 102 5 is_stmt 1 view .LVU28
 114              		.loc 1 102 40 is_stmt 0 view .LVU29
 115 0004 9A68     		ldr	r2, [r3, #8]
 116              		.loc 1 102 31 view .LVU30
 117 0006 8A60     		str	r2, [r1, #8]
 103:FreeRTOS/list.c **** 
 104:FreeRTOS/list.c ****     /* Only used during decision coverage testing. */
 105:FreeRTOS/list.c ****     mtCOVERAGE_TEST_DELAY();
 118              		.loc 1 105 28 is_stmt 1 view .LVU31
 106:FreeRTOS/list.c **** 
 107:FreeRTOS/list.c ****     pxIndex->pxPrevious->pxNext = pxNewListItem;
 119              		.loc 1 107 5 view .LVU32
 120              		.loc 1 107 33 is_stmt 0 view .LVU33
 121 0008 5160     		str	r1, [r2, #4]
 108:FreeRTOS/list.c ****     pxIndex->pxPrevious = pxNewListItem;
 122              		.loc 1 108 5 is_stmt 1 view .LVU34
 123              		.loc 1 108 25 is_stmt 0 view .LVU35
 124 000a 9960     		str	r1, [r3, #8]
 109:FreeRTOS/list.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\cc5PnHqT.s 			page 5


 110:FreeRTOS/list.c ****     /* Remember which list the item is in. */
 111:FreeRTOS/list.c ****     pxNewListItem->pxContainer = pxList;
 125              		.loc 1 111 5 is_stmt 1 view .LVU36
 126              		.loc 1 111 32 is_stmt 0 view .LVU37
 127 000c 0861     		str	r0, [r1, #16]
 112:FreeRTOS/list.c **** 
 113:FreeRTOS/list.c ****     ( pxList->uxNumberOfItems )++;
 128              		.loc 1 113 5 is_stmt 1 view .LVU38
 129              		.loc 1 113 13 is_stmt 0 view .LVU39
 130 000e 0368     		ldr	r3, [r0]
 131              	.LVL4:
 132              		.loc 1 113 32 view .LVU40
 133 0010 0133     		adds	r3, r3, #1
 134 0012 0360     		str	r3, [r0]
 114:FreeRTOS/list.c **** }
 135              		.loc 1 114 1 view .LVU41
 136 0014 7047     		bx	lr
 137              		.cfi_endproc
 138              	.LFE7:
 140              		.section	.text.vListInsert,"ax",%progbits
 141              		.align	1
 142              		.global	vListInsert
 143              		.syntax unified
 144              		.thumb
 145              		.thumb_func
 146              		.fpu fpv4-sp-d16
 148              	vListInsert:
 149              	.LVL5:
 150              	.LFB8:
 115:FreeRTOS/list.c **** /*-----------------------------------------------------------*/
 116:FreeRTOS/list.c **** 
 117:FreeRTOS/list.c **** void vListInsert( List_t * const pxList,
 118:FreeRTOS/list.c ****                   ListItem_t * const pxNewListItem )
 119:FreeRTOS/list.c **** {
 151              		.loc 1 119 1 is_stmt 1 view -0
 152              		.cfi_startproc
 153              		@ args = 0, pretend = 0, frame = 0
 154              		@ frame_needed = 0, uses_anonymous_args = 0
 155              		@ link register save eliminated.
 156              		.loc 1 119 1 is_stmt 0 view .LVU43
 157 0000 30B4     		push	{r4, r5}
 158              	.LCFI0:
 159              		.cfi_def_cfa_offset 8
 160              		.cfi_offset 4, -8
 161              		.cfi_offset 5, -4
 120:FreeRTOS/list.c ****     ListItem_t * pxIterator;
 162              		.loc 1 120 5 is_stmt 1 view .LVU44
 121:FreeRTOS/list.c ****     const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 163              		.loc 1 121 5 view .LVU45
 164              		.loc 1 121 22 is_stmt 0 view .LVU46
 165 0002 0D68     		ldr	r5, [r1]
 166              	.LVL6:
 122:FreeRTOS/list.c **** 
 123:FreeRTOS/list.c ****     /* Only effective when configASSERT() is also defined, these tests may catch
 124:FreeRTOS/list.c ****      * the list data structures being overwritten in memory.  They will not catch
 125:FreeRTOS/list.c ****      * data errors caused by incorrect configuration or use of FreeRTOS. */
 126:FreeRTOS/list.c ****     listTEST_LIST_INTEGRITY( pxList );
ARM GAS  C:\Users\worker\AppData\Local\Temp\cc5PnHqT.s 			page 6


 167              		.loc 1 126 38 is_stmt 1 view .LVU47
 127:FreeRTOS/list.c ****     listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
 168              		.loc 1 127 50 view .LVU48
 128:FreeRTOS/list.c **** 
 129:FreeRTOS/list.c ****     /* Insert the new list item into the list, sorted in xItemValue order.
 130:FreeRTOS/list.c ****      *
 131:FreeRTOS/list.c ****      * If the list already contains a list item with the same item value then the
 132:FreeRTOS/list.c ****      * new list item should be placed after it.  This ensures that TCBs which are
 133:FreeRTOS/list.c ****      * stored in ready lists (all of which have the same xItemValue value) get a
 134:FreeRTOS/list.c ****      * share of the CPU.  However, if the xItemValue is the same as the back marker
 135:FreeRTOS/list.c ****      * the iteration loop below will not end.  Therefore the value is checked
 136:FreeRTOS/list.c ****      * first, and the algorithm slightly modified if necessary. */
 137:FreeRTOS/list.c ****     if( xValueOfInsertion == portMAX_DELAY )
 169              		.loc 1 137 5 view .LVU49
 170              		.loc 1 137 7 is_stmt 0 view .LVU50
 171 0004 B5F1FF3F 		cmp	r5, #-1
 172 0008 11D0     		beq	.L9
 138:FreeRTOS/list.c ****     {
 139:FreeRTOS/list.c ****         pxIterator = pxList->xListEnd.pxPrevious;
 140:FreeRTOS/list.c ****     }
 141:FreeRTOS/list.c ****     else
 142:FreeRTOS/list.c ****     {
 143:FreeRTOS/list.c ****         /* *** NOTE ***********************************************************
 144:FreeRTOS/list.c ****         *  If you find your application is crashing here then likely causes are
 145:FreeRTOS/list.c ****         *  listed below.  In addition see https://www.FreeRTOS.org/FAQHelp.html for
 146:FreeRTOS/list.c ****         *  more tips, and ensure configASSERT() is defined!
 147:FreeRTOS/list.c ****         *  https://www.FreeRTOS.org/a00110.html#configASSERT
 148:FreeRTOS/list.c ****         *
 149:FreeRTOS/list.c ****         *   1) Stack overflow -
 150:FreeRTOS/list.c ****         *      see https://www.FreeRTOS.org/Stacks-and-stack-overflow-checking.html
 151:FreeRTOS/list.c ****         *   2) Incorrect interrupt priority assignment, especially on Cortex-M
 152:FreeRTOS/list.c ****         *      parts where numerically high priority values denote low actual
 153:FreeRTOS/list.c ****         *      interrupt priorities, which can seem counter intuitive.  See
 154:FreeRTOS/list.c ****         *      https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html and the definition
 155:FreeRTOS/list.c ****         *      of configMAX_SYSCALL_INTERRUPT_PRIORITY on
 156:FreeRTOS/list.c ****         *      https://www.FreeRTOS.org/a00110.html
 157:FreeRTOS/list.c ****         *   3) Calling an API function from within a critical section or when
 158:FreeRTOS/list.c ****         *      the scheduler is suspended, or calling an API function that does
 159:FreeRTOS/list.c ****         *      not end in "FromISR" from an interrupt.
 160:FreeRTOS/list.c ****         *   4) Using a queue or semaphore before it has been initialised or
 161:FreeRTOS/list.c ****         *      before the scheduler has been started (are interrupts firing
 162:FreeRTOS/list.c ****         *      before vTaskStartScheduler() has been called?).
 163:FreeRTOS/list.c ****         *   5) If the FreeRTOS port supports interrupt nesting then ensure that
 164:FreeRTOS/list.c ****         *      the priority of the tick interrupt is at or below
 165:FreeRTOS/list.c ****         *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
 166:FreeRTOS/list.c ****         **********************************************************************/
 167:FreeRTOS/list.c **** 
 168:FreeRTOS/list.c ****         for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <=
 173              		.loc 1 168 9 is_stmt 1 view .LVU51
 174              		.loc 1 168 25 is_stmt 0 view .LVU52
 175 000a 00F10803 		add	r3, r0, #8
 176              	.LVL7:
 177              	.L7:
 178              		.loc 1 168 67 is_stmt 1 discriminator 1 view .LVU53
 179 000e 1C46     		mov	r4, r3
 180              		.loc 1 168 77 is_stmt 0 discriminator 1 view .LVU54
 181 0010 5B68     		ldr	r3, [r3, #4]
ARM GAS  C:\Users\worker\AppData\Local\Temp\cc5PnHqT.s 			page 7


 182              	.LVL8:
 183              		.loc 1 168 85 discriminator 1 view .LVU55
 184 0012 1A68     		ldr	r2, [r3]
 185              		.loc 1 168 9 discriminator 1 view .LVU56
 186 0014 AA42     		cmp	r2, r5
 187 0016 FAD9     		bls	.L7
 188              	.L6:
 169:FreeRTOS/list.c ****         {
 170:FreeRTOS/list.c ****             /* There is nothing to do here, just iterating to the wanted
 171:FreeRTOS/list.c ****              * insertion position. */
 172:FreeRTOS/list.c ****         }
 173:FreeRTOS/list.c ****     }
 174:FreeRTOS/list.c **** 
 175:FreeRTOS/list.c ****     pxNewListItem->pxNext = pxIterator->pxNext;
 189              		.loc 1 175 5 is_stmt 1 view .LVU57
 190              		.loc 1 175 39 is_stmt 0 view .LVU58
 191 0018 6368     		ldr	r3, [r4, #4]
 192              		.loc 1 175 27 view .LVU59
 193 001a 4B60     		str	r3, [r1, #4]
 176:FreeRTOS/list.c ****     pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 194              		.loc 1 176 5 is_stmt 1 view .LVU60
 195              		.loc 1 176 39 is_stmt 0 view .LVU61
 196 001c 9960     		str	r1, [r3, #8]
 177:FreeRTOS/list.c ****     pxNewListItem->pxPrevious = pxIterator;
 197              		.loc 1 177 5 is_stmt 1 view .LVU62
 198              		.loc 1 177 31 is_stmt 0 view .LVU63
 199 001e 8C60     		str	r4, [r1, #8]
 178:FreeRTOS/list.c ****     pxIterator->pxNext = pxNewListItem;
 200              		.loc 1 178 5 is_stmt 1 view .LVU64
 201              		.loc 1 178 24 is_stmt 0 view .LVU65
 202 0020 6160     		str	r1, [r4, #4]
 179:FreeRTOS/list.c **** 
 180:FreeRTOS/list.c ****     /* Remember which list the item is in.  This allows fast removal of the
 181:FreeRTOS/list.c ****      * item later. */
 182:FreeRTOS/list.c ****     pxNewListItem->pxContainer = pxList;
 203              		.loc 1 182 5 is_stmt 1 view .LVU66
 204              		.loc 1 182 32 is_stmt 0 view .LVU67
 205 0022 0861     		str	r0, [r1, #16]
 183:FreeRTOS/list.c **** 
 184:FreeRTOS/list.c ****     ( pxList->uxNumberOfItems )++;
 206              		.loc 1 184 5 is_stmt 1 view .LVU68
 207              		.loc 1 184 13 is_stmt 0 view .LVU69
 208 0024 0368     		ldr	r3, [r0]
 209              		.loc 1 184 32 view .LVU70
 210 0026 0133     		adds	r3, r3, #1
 211 0028 0360     		str	r3, [r0]
 185:FreeRTOS/list.c **** }
 212              		.loc 1 185 1 view .LVU71
 213 002a 30BC     		pop	{r4, r5}
 214              	.LCFI1:
 215              		.cfi_remember_state
 216              		.cfi_restore 5
 217              		.cfi_restore 4
 218              		.cfi_def_cfa_offset 0
 219              	.LVL9:
 220              		.loc 1 185 1 view .LVU72
 221 002c 7047     		bx	lr
ARM GAS  C:\Users\worker\AppData\Local\Temp\cc5PnHqT.s 			page 8


 222              	.LVL10:
 223              	.L9:
 224              	.LCFI2:
 225              		.cfi_restore_state
 139:FreeRTOS/list.c ****     }
 226              		.loc 1 139 9 is_stmt 1 view .LVU73
 139:FreeRTOS/list.c ****     }
 227              		.loc 1 139 20 is_stmt 0 view .LVU74
 228 002e 0469     		ldr	r4, [r0, #16]
 229              	.LVL11:
 139:FreeRTOS/list.c ****     }
 230              		.loc 1 139 20 view .LVU75
 231 0030 F2E7     		b	.L6
 232              		.cfi_endproc
 233              	.LFE8:
 235              		.section	.text.uxListRemove,"ax",%progbits
 236              		.align	1
 237              		.global	uxListRemove
 238              		.syntax unified
 239              		.thumb
 240              		.thumb_func
 241              		.fpu fpv4-sp-d16
 243              	uxListRemove:
 244              	.LVL12:
 245              	.LFB9:
 186:FreeRTOS/list.c **** /*-----------------------------------------------------------*/
 187:FreeRTOS/list.c **** 
 188:FreeRTOS/list.c **** UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
 189:FreeRTOS/list.c **** {
 246              		.loc 1 189 1 is_stmt 1 view -0
 247              		.cfi_startproc
 248              		@ args = 0, pretend = 0, frame = 0
 249              		@ frame_needed = 0, uses_anonymous_args = 0
 250              		@ link register save eliminated.
 190:FreeRTOS/list.c **** /* The list item knows which list it is in.  Obtain the list from the list
 191:FreeRTOS/list.c ****  * item. */
 192:FreeRTOS/list.c ****     List_t * const pxList = pxItemToRemove->pxContainer;
 251              		.loc 1 192 5 view .LVU77
 252              		.loc 1 192 20 is_stmt 0 view .LVU78
 253 0000 0369     		ldr	r3, [r0, #16]
 254              	.LVL13:
 193:FreeRTOS/list.c **** 
 194:FreeRTOS/list.c ****     pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 255              		.loc 1 194 5 is_stmt 1 view .LVU79
 256              		.loc 1 194 19 is_stmt 0 view .LVU80
 257 0002 4168     		ldr	r1, [r0, #4]
 258              		.loc 1 194 56 view .LVU81
 259 0004 8268     		ldr	r2, [r0, #8]
 260              		.loc 1 194 40 view .LVU82
 261 0006 8A60     		str	r2, [r1, #8]
 195:FreeRTOS/list.c ****     pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 262              		.loc 1 195 5 is_stmt 1 view .LVU83
 263              		.loc 1 195 56 is_stmt 0 view .LVU84
 264 0008 4168     		ldr	r1, [r0, #4]
 265              		.loc 1 195 40 view .LVU85
 266 000a 5160     		str	r1, [r2, #4]
 196:FreeRTOS/list.c **** 
ARM GAS  C:\Users\worker\AppData\Local\Temp\cc5PnHqT.s 			page 9


 197:FreeRTOS/list.c ****     /* Only used during decision coverage testing. */
 198:FreeRTOS/list.c ****     mtCOVERAGE_TEST_DELAY();
 267              		.loc 1 198 28 is_stmt 1 view .LVU86
 199:FreeRTOS/list.c **** 
 200:FreeRTOS/list.c ****     /* Make sure the index is left pointing to a valid item. */
 201:FreeRTOS/list.c ****     if( pxList->pxIndex == pxItemToRemove )
 268              		.loc 1 201 5 view .LVU87
 269              		.loc 1 201 15 is_stmt 0 view .LVU88
 270 000c 5A68     		ldr	r2, [r3, #4]
 271              		.loc 1 201 7 view .LVU89
 272 000e 8242     		cmp	r2, r0
 273 0010 06D0     		beq	.L12
 274              	.L11:
 202:FreeRTOS/list.c ****     {
 203:FreeRTOS/list.c ****         pxList->pxIndex = pxItemToRemove->pxPrevious;
 204:FreeRTOS/list.c ****     }
 205:FreeRTOS/list.c ****     else
 206:FreeRTOS/list.c ****     {
 207:FreeRTOS/list.c ****         mtCOVERAGE_TEST_MARKER();
 275              		.loc 1 207 33 is_stmt 1 view .LVU90
 208:FreeRTOS/list.c ****     }
 209:FreeRTOS/list.c **** 
 210:FreeRTOS/list.c ****     pxItemToRemove->pxContainer = NULL;
 276              		.loc 1 210 5 view .LVU91
 277              		.loc 1 210 33 is_stmt 0 view .LVU92
 278 0012 0022     		movs	r2, #0
 279 0014 0261     		str	r2, [r0, #16]
 211:FreeRTOS/list.c ****     ( pxList->uxNumberOfItems )--;
 280              		.loc 1 211 5 is_stmt 1 view .LVU93
 281              		.loc 1 211 13 is_stmt 0 view .LVU94
 282 0016 1A68     		ldr	r2, [r3]
 283              		.loc 1 211 32 view .LVU95
 284 0018 013A     		subs	r2, r2, #1
 285 001a 1A60     		str	r2, [r3]
 212:FreeRTOS/list.c **** 
 213:FreeRTOS/list.c ****     return pxList->uxNumberOfItems;
 286              		.loc 1 213 5 is_stmt 1 view .LVU96
 287              		.loc 1 213 18 is_stmt 0 view .LVU97
 288 001c 1868     		ldr	r0, [r3]
 289              	.LVL14:
 214:FreeRTOS/list.c **** }
 290              		.loc 1 214 1 view .LVU98
 291 001e 7047     		bx	lr
 292              	.LVL15:
 293              	.L12:
 203:FreeRTOS/list.c ****     }
 294              		.loc 1 203 9 is_stmt 1 view .LVU99
 203:FreeRTOS/list.c ****     }
 295              		.loc 1 203 41 is_stmt 0 view .LVU100
 296 0020 8268     		ldr	r2, [r0, #8]
 203:FreeRTOS/list.c ****     }
 297              		.loc 1 203 25 view .LVU101
 298 0022 5A60     		str	r2, [r3, #4]
 299 0024 F5E7     		b	.L11
 300              		.cfi_endproc
 301              	.LFE9:
 303              		.text
ARM GAS  C:\Users\worker\AppData\Local\Temp\cc5PnHqT.s 			page 10


 304              	.Letext0:
 305              		.file 2 "c:\\work\\arm\\xpack-arm-none-eabi-gcc-9.2.1-1.1\\arm-none-eabi\\include\\machine\\_defau
 306              		.file 3 "c:\\work\\arm\\xpack-arm-none-eabi-gcc-9.2.1-1.1\\arm-none-eabi\\include\\sys\\lock.h"
 307              		.file 4 "c:\\work\\arm\\xpack-arm-none-eabi-gcc-9.2.1-1.1\\arm-none-eabi\\include\\sys\\_types.h"
 308              		.file 5 "c:\\work\\arm\\xpack-arm-none-eabi-gcc-9.2.1-1.1\\lib\\gcc\\arm-none-eabi\\9.2.1\\include
 309              		.file 6 "c:\\work\\arm\\xpack-arm-none-eabi-gcc-9.2.1-1.1\\arm-none-eabi\\include\\sys\\reent.h"
 310              		.file 7 "c:\\work\\arm\\xpack-arm-none-eabi-gcc-9.2.1-1.1\\arm-none-eabi\\include\\stdlib.h"
 311              		.file 8 "c:\\work\\arm\\xpack-arm-none-eabi-gcc-9.2.1-1.1\\arm-none-eabi\\include\\sys\\_stdint.h"
 312              		.file 9 "Core/Inc/FreeRTOSConfig.h"
 313              		.file 10 "FreeRTOS/portable/portmacro.h"
 314              		.file 11 "FreeRTOS/include/list.h"
ARM GAS  C:\Users\worker\AppData\Local\Temp\cc5PnHqT.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 list.c
C:\Users\worker\AppData\Local\Temp\cc5PnHqT.s:18     .text.vListInitialise:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\cc5PnHqT.s:26     .text.vListInitialise:0000000000000000 vListInitialise
C:\Users\worker\AppData\Local\Temp\cc5PnHqT.s:62     .text.vListInitialiseItem:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\cc5PnHqT.s:69     .text.vListInitialiseItem:0000000000000000 vListInitialiseItem
C:\Users\worker\AppData\Local\Temp\cc5PnHqT.s:89     .text.vListInsertEnd:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\cc5PnHqT.s:96     .text.vListInsertEnd:0000000000000000 vListInsertEnd
C:\Users\worker\AppData\Local\Temp\cc5PnHqT.s:141    .text.vListInsert:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\cc5PnHqT.s:148    .text.vListInsert:0000000000000000 vListInsert
C:\Users\worker\AppData\Local\Temp\cc5PnHqT.s:236    .text.uxListRemove:0000000000000000 $t
C:\Users\worker\AppData\Local\Temp\cc5PnHqT.s:243    .text.uxListRemove:0000000000000000 uxListRemove

NO UNDEFINED SYMBOLS
